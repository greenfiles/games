
define('Fallback',['require','exports','module'],function (require, exports, module) 
{
    /*
        REMEMBER that this should not require anything that does not work in ie8

     */
    
    Fallback = function(element)
    {
        this.domElement = element || document.body;

        var config =
	    {
	        message    : '<p>Uh-oh! It looks like you need to update your browser before you\'ll be able to play this game</p><p>In the meantime, check out <a href="#brand_url">this</a> or <a href="#cbeebies_games_url">this</a>.',
	        brand_url  : 'http://www.someurl.tld/',
	        games_url  : 'http://www.someurl.tld/',
	        enabled    : true
	    }

	    var message = config.message;
	        message = message.replace("#brand_url", config.brand_url);
	        message = message.replace("#games_url", config.games_url);

	    // var link = document.createElement("link");
	    //     link.type = "text/css";
	    //     link.rel  = "stylesheet";
	    //     link.href = "assets/css/unsupported.css";

	    // document.getElementsByTagName("head")[0].appendChild(link);

	    // this.domElement.innerHTML = message;
	    // 
	    this.checkCanvas();
	    this.checkCookies();

    }

    Fallback.prototype = {


    	checkCanvas : function () {
            

            if(!this.hasCanvasSupport())
            {
                console.log('hi canvas');
                var src = ASSET_URL + "img/unsupported.jpg";

                this.createBigImage(src);

                return false;
            }

            return true;
            
        },

        hasCanvasSupport : function()
		{
		    var elem = document.createElement('canvas');
		    return !!(elem.getContext && elem.getContext('2d'));
		},

        checkCookies : function () {
            
            if(!this.cookiesEnabled())
            {
                var src = ASSET_URL + "img/cookies.jpg";

                this.createBigImage(src);
            }
        },

        cookiesEnabled : function (){

            var cookieEnabled = (navigator.cookieEnabled) ? true : false;

            if (typeof navigator.cookieEnabled == "undefined" && !cookieEnabled)
            { 
                document.cookie="testcookie";
                cookieEnabled = (document.cookie.indexOf("testcookie") != -1) ? true : false;
            }

            return cookieEnabled;
        },

        createBigImage : function (src) {

            var oldBrowserImage = document.createElement('div');

            oldBrowserImage.style.backgroundPosition = "50% 50%";
            oldBrowserImage.style.backgroundColor = "#3b3b3b";
            oldBrowserImage.style.backgroundRepeat = "no-repeat";
            oldBrowserImage.style.position = "absolute";
            oldBrowserImage.style.top = "0";
            oldBrowserImage.style.left = "0";
            oldBrowserImage.style.bottom = "0";
            oldBrowserImage.style.right = "0";
            oldBrowserImage.style.zIndex = 100000;
            oldBrowserImage.height = "100%"; 
            oldBrowserImage.width = "100%";

            oldBrowserImage.style.backgroundImage = 'url(' + src + ')';

            this.domElement.appendChild(oldBrowserImage);
        }

    }

    Fallback.prototype.constructor = Fallback;

    module.exports = Fallback;

});
/*!
 * VERSION: beta 1.10.2
 * DATE: 2013-08-05
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2013, GreenSock. All rights reserved.
 * This work is subject to the terms at http://www.greensock.com/terms_of_use.html or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
(function(t){var e,i,s,n,r,a=t.GreenSockGlobals||t,o=function(t){var e,i=t.split("."),s=a;for(e=0;i.length>e;e++)s[i[e]]=s=s[i[e]]||{};return s},l=o("com.greensock"),h=[].slice,_=function(){},u={},m=function(e,i,s,n){this.sc=u[e]?u[e].sc:[],u[e]=this,this.gsClass=null,this.func=s;var r=[];this.check=function(l){for(var h,_,f,p,c=i.length,d=c;--c>-1;)(h=u[i[c]]||new m(i[c],[])).gsClass?(r[c]=h.gsClass,d--):l&&h.sc.push(this);if(0===d&&s)for(_=("com.greensock."+e).split("."),f=_.pop(),p=o(_.join("."))[f]=this.gsClass=s.apply(s,r),n&&(a[f]=p,"function"==typeof define&&define.amd?define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+e.split(".").join("/"),[],function(){return p}):"undefined"!=typeof module&&module.exports&&(module.exports=p)),c=0;this.sc.length>c;c++)this.sc[c].check()},this.check(!0)},f=t._gsDefine=function(t,e,i,s){return new m(t,e,i,s)},p=l._class=function(t,e,i){return e=e||function(){},f(t,[],function(){return e},i),e};f.globals=a;var c=[0,0,1,1],d=[],v=p("easing.Ease",function(t,e,i,s){this._func=t,this._type=i||0,this._power=s||0,this._params=e?c.concat(e):c},!0),g=v.map={},T=v.register=function(t,e,i,s){for(var n,r,a,o,h=e.split(","),_=h.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--_>-1;)for(r=h[_],n=s?p("easing."+r,null,!0):l.easing[r]||{},a=u.length;--a>-1;)o=u[a],g[r+"."+o]=g[o+r]=n[o]=t.getRatio?t:t[o]||new t};for(s=v.prototype,s._calcEnd=!1,s.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,s=1===e?1-t:2===e?t:.5>t?2*t:2*(1-t);return 1===i?s*=s:2===i?s*=s*s:3===i?s*=s*s*s:4===i&&(s*=s*s*s*s),1===e?1-s:2===e?s:.5>t?s/2:1-s/2},e=["Linear","Quad","Cubic","Quart","Quint,Strong"],i=e.length;--i>-1;)s=e[i]+",Power"+i,T(new v(null,null,1,i),s,"easeOut",!0),T(new v(null,null,2,i),s,"easeIn"+(0===i?",easeNone":"")),T(new v(null,null,3,i),s,"easeInOut");g.linear=l.easing.Linear.easeIn,g.swing=l.easing.Quad.easeInOut;var w=p("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});s=w.prototype,s.addEventListener=function(t,e,i,s,a){a=a||0;var o,l,h=this._listeners[t],_=0;for(null==h&&(this._listeners[t]=h=[]),l=h.length;--l>-1;)o=h[l],o.c===e&&o.s===i?h.splice(l,1):0===_&&a>o.pr&&(_=l+1);h.splice(_,0,{c:e,s:i,up:s,pr:a}),this!==n||r||n.wake()},s.removeEventListener=function(t,e){var i,s=this._listeners[t];if(s)for(i=s.length;--i>-1;)if(s[i].c===e)return s.splice(i,1),void 0},s.dispatchEvent=function(t){var e,i,s,n=this._listeners[t];if(n)for(e=n.length,i=this._eventTarget;--e>-1;)s=n[e],s.up?s.c.call(s.s||i,{type:t,target:i}):s.c.call(s.s||i)};var P=t.requestAnimationFrame,y=t.cancelAnimationFrame,k=Date.now||function(){return(new Date).getTime()},b=k();for(e=["ms","moz","webkit","o"],i=e.length;--i>-1&&!P;)P=t[e[i]+"RequestAnimationFrame"],y=t[e[i]+"CancelAnimationFrame"]||t[e[i]+"CancelRequestAnimationFrame"];p("Ticker",function(t,e){var i,s,a,o,l,h=this,u=k(),m=e!==!1&&P,f=function(t){b=k(),h.time=(b-u)/1e3;var e,n=h.time-l;(!i||n>0||t===!0)&&(h.frame++,l+=n+(n>=o?.004:o-n),e=!0),t!==!0&&(a=s(f)),e&&h.dispatchEvent("tick")};w.call(h),this.time=this.frame=0,this.tick=function(){f(!0)},this.sleep=function(){null!=a&&(m&&y?y(a):clearTimeout(a),s=_,a=null,h===n&&(r=!1))},this.wake=function(){null!==a&&h.sleep(),s=0===i?_:m&&P?P:function(t){return setTimeout(t,0|1e3*(l-h.time)+1)},h===n&&(r=!0),f(2)},this.fps=function(t){return arguments.length?(i=t,o=1/(i||60),l=this.time+o,h.wake(),void 0):i},this.useRAF=function(t){return arguments.length?(h.sleep(),m=t,h.fps(i),void 0):m},h.fps(t),setTimeout(function(){m&&(!a||5>h.frame)&&h.useRAF(!1)},1500)}),s=l.Ticker.prototype=new l.events.EventDispatcher,s.constructor=l.Ticker;var A=p("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,j){r||n.wake();var i=this.vars.useFrames?F:j;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});n=A.ticker=new l.Ticker,s=A.prototype,s._dirty=s._gc=s._initted=s._paused=!1,s._totalTime=s._time=0,s._rawPrevTime=-1,s._next=s._last=s._onUpdate=s._timeline=s.timeline=null,s._paused=!1;var S=function(){k()-b>2e3&&n.wake(),setTimeout(S,2e3)};S(),s.play=function(t,e){return arguments.length&&this.seek(t,e),this.reversed(!1).paused(!1)},s.pause=function(t,e){return arguments.length&&this.seek(t,e),this.paused(!0)},s.resume=function(t,e){return arguments.length&&this.seek(t,e),this.paused(!1)},s.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},s.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},s.reverse=function(t,e){return arguments.length&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},s.render=function(){},s.invalidate=function(){return this},s._enabled=function(t,e){return r||n.wake(),this._gc=!t,this._active=t&&!this._paused&&this._totalTime>0&&this._totalTime<this._totalDuration,e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},s._kill=function(){return this._enabled(!1,!1)},s.kill=function(t,e){return this._kill(t,e),this},s._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},s._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},s.eventCallback=function(t,e,i,s){if("on"===(t||"").substr(0,2)){var n=this.vars;if(1===arguments.length)return n[t];null==e?delete n[t]:(n[t]=e,n[t+"Params"]=i instanceof Array&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,n[t+"Scope"]=s),"onUpdate"===t&&(this._onUpdate=e)}return this},s.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},s.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},s.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},s.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},s.totalTime=function(t,e,i){if(r||n.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(0>t&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var s=this._totalDuration,a=this._timeline;if(t>s&&!i&&(t=s),this._startTime=(this._paused?this._pauseTime:a._time)-(this._reversed?s-t:t)/this._timeScale,a._dirty||this._uncache(!1),a._timeline)for(;a._timeline;)a._timeline._time!==(a._startTime+a._totalTime)/a._timeScale&&a.totalTime(a._totalTime,!0),a=a._timeline}this._gc&&this._enabled(!0,!1),this._totalTime!==t&&this.render(t,e,!1)}return this},s.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},s.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||1e-6,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},s.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._totalTime,!0)),this):this._reversed},s.paused=function(t){if(!arguments.length)return this._paused;if(t!=this._paused&&this._timeline){r||t||n.wake();var e=this._timeline,i=e.rawTime(),s=i-this._pauseTime;!t&&e.smoothChildTiming&&(this._startTime+=s,this._uncache(!1)),this._pauseTime=t?i:null,this._paused=t,this._active=!t&&this._totalTime>0&&this._totalTime<this._totalDuration,t||0===s||0===this._duration||this.render(e.smoothChildTiming?this._totalTime:(i-this._startTime)/this._timeScale,!0,!0)}return this._gc&&!t&&this._enabled(!0,!1),this};var x=p("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});s=x.prototype=new A,s.constructor=x,s.kill()._gc=!1,s._first=s._last=null,s._sortChildren=!1,s.add=s.insert=function(t,e){var i,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),i=this._last,this._sortChildren)for(s=t._startTime;i&&i._startTime>s;)i=i._prev;return i?(t._next=i._next,i._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=i,this._timeline&&this._uncache(!0),this},s._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t.timeline=null,t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),this._timeline&&this._uncache(!0)),this},s.render=function(t,e,i){var s,n=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;n;)s=n._next,(n._active||t>=n._startTime&&!n._paused)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=s},s.rawTime=function(){return r||n.wake(),this._totalTime};var C=p("TweenLite",function(e,i,s){if(A.call(this,i,s),this.render=C.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:C.selector(e)||e;var n,r,a,o=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?L[C.defaultOverwrite]:"number"==typeof l?l>>0:L[l],(o||e instanceof Array)&&"number"!=typeof e[0])for(this._targets=a=h.call(e,0),this._propLookup=[],this._siblings=[],n=0;a.length>n;n++)r=a[n],r?"string"!=typeof r?r.length&&r!==t&&r[0]&&(r[0]===t||r[0].nodeType&&r[0].style&&!r.nodeType)?(a.splice(n--,1),this._targets=a=a.concat(h.call(r,0))):(this._siblings[n]=G(r,this,!1),1===l&&this._siblings[n].length>1&&Q(r,this,null,1,this._siblings[n])):(r=a[n--]=C.selector(r),"string"==typeof r&&a.splice(n+1,1)):a.splice(n--,1);else this._propLookup={},this._siblings=G(e,this,!1),1===l&&this._siblings.length>1&&Q(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&this.render(-this._delay,!1,!0)},!0),R=function(e){return e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},D=function(t,e){var i,s={};for(i in t)U[i]||i in e&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!I[i]||I[i]&&I[i]._autoCSS)||(s[i]=t[i],delete t[i]);t.css=s};s=C.prototype=new A,s.constructor=C,s.kill()._gc=!1,s.ratio=0,s._firstPT=s._targets=s._overwrittenProps=s._startAt=null,s._notifyPluginsOfEnabled=!1,C.version="1.10.2",C.defaultEase=s._ease=new v(null,null,1,1),C.defaultOverwrite="auto",C.ticker=n,C.autoSleep=!0,C.selector=t.$||t.jQuery||function(e){return t.$?(C.selector=t.$,t.$(e)):t.document?t.document.getElementById("#"===e.charAt(0)?e.substr(1):e):e};var E=C._internals={},I=C._plugins={},O=C._tweenLookup={},N=0,U=E.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1},L={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,"true":1,"false":0},F=A._rootFramesTimeline=new x,j=A._rootTimeline=new x;j._startTime=n.time,F._startTime=n.frame,j._active=F._active=!0,A._updateRoot=function(){if(j.render((n.time-j._startTime)*j._timeScale,!1,!1),F.render((n.frame-F._startTime)*F._timeScale,!1,!1),!(n.frame%120)){var t,e,i;for(i in O){for(e=O[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete O[i]}if(i=j._first,(!i||i._paused)&&C.autoSleep&&!F._first&&1===n._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||n.sleep()}}},n.addEventListener("tick",A._updateRoot);var G=function(t,e,i){var s,n,r=t._gsTweenID;if(O[r||(t._gsTweenID=r="t"+N++)]||(O[r]={target:t,tweens:[]}),e&&(s=O[r].tweens,s[n=s.length]=e,i))for(;--n>-1;)s[n]===e&&s.splice(n,1);return O[r].tweens},Q=function(t,e,i,s,n){var r,a,o,l;if(1===s||s>=4){for(l=n.length,r=0;l>r;r++)if((o=n[r])!==e)o._gc||o._enabled(!1,!1)&&(a=!0);else if(5===s)break;return a}var h,_=e._startTime+1e-10,u=[],m=0,f=0===e._duration;for(r=n.length;--r>-1;)(o=n[r])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||B(e,0,f),0===B(o,h,f)&&(u[m++]=o)):_>=o._startTime&&o._startTime+o.totalDuration()/o._timeScale+1e-10>_&&((f||!o._initted)&&2e-10>=_-o._startTime||(u[m++]=o)));for(r=m;--r>-1;)o=u[r],2===s&&o._kill(i,t)&&(a=!0),(2!==s||!o._firstPT&&o._initted)&&o._enabled(!1,!1)&&(a=!0);return a},B=function(t,e,i){for(var s=t._timeline,n=s._timeScale,r=t._startTime,a=1e-10;s._timeline;){if(r+=s._startTime,n*=s._timeScale,s._paused)return-100;s=s._timeline}return r/=n,r>e?r-e:i&&r===e||!t._initted&&2*a>r-e?a:(r+=t.totalDuration()/t._timeScale/n)>e+a?0:r-e-a};s._init=function(){var t,e,i,s,n=this.vars,r=this._overwrittenProps,a=this._duration,o=n.immediateRender,l=n.ease;if(n.startAt){if(this._startAt&&this._startAt.render(-1,!0),n.startAt.overwrite=0,n.startAt.immediateRender=!0,this._startAt=C.to(this.target,0,n.startAt),o)if(this._time>0)this._startAt=null;else if(0!==a)return}else if(n.runBackwards&&n.immediateRender&&0!==a)if(this._startAt)this._startAt.render(-1,!0),this._startAt=null;else if(0===this._time){i={};for(s in n)U[s]&&"autoCSS"!==s||(i[s]=n[s]);return i.overwrite=0,this._startAt=C.to(this.target,0,i),void 0}if(this._ease=l?l instanceof v?n.easeParams instanceof Array?l.config.apply(l,n.easeParams):l:"function"==typeof l?new v(l,n.easeParams):g[l]||C.defaultEase:C.defaultEase,this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(t=this._targets.length;--t>-1;)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],r?r[t]:null)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,r);if(e&&C._onPluginEvent("_onInitAllProps",this),r&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),n.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=n.onUpdate,this._initted=!0},s._initProps=function(e,i,s,n){var r,a,o,l,h,_;if(null==e)return!1;this.vars.css||e.style&&e!==t&&e.nodeType&&I.css&&this.vars.autoCSS!==!1&&D(this.vars,e);for(r in this.vars){if(_=this.vars[r],U[r])_ instanceof Array&&-1!==_.join("").indexOf("{self}")&&(this.vars[r]=_=this._swapSelfInParams(_,this));else if(I[r]&&(l=new I[r])._onInitTween(e,this.vars[r],this)){for(this._firstPT=h={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:!0,n:r,pg:!0,pr:l._priority},a=l._overwriteProps.length;--a>-1;)i[l._overwriteProps[a]]=this._firstPT;(l._priority||l._onInitAllProps)&&(o=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0)}else this._firstPT=i[r]=h={_next:this._firstPT,t:e,p:r,f:"function"==typeof e[r],n:r,pg:!1,pr:0},h.s=h.f?e[r.indexOf("set")||"function"!=typeof e["get"+r.substr(3)]?r:"get"+r.substr(3)]():parseFloat(e[r]),h.c="string"==typeof _&&"="===_.charAt(1)?parseInt(_.charAt(0)+"1",10)*Number(_.substr(2)):Number(_)-h.s||0;h&&h._next&&(h._next._prev=h)}return n&&this._kill(n,e)?this._initProps(e,i,s,n):this._overwrite>1&&this._firstPT&&s.length>1&&Q(e,this,i,this._overwrite,s)?(this._kill(i,e),this._initProps(e,i,s,n)):o},s.render=function(t,e,i){var s,n,r,a=this._time;if(t>=this._duration)this._totalTime=this._time=this._duration,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(s=!0,n="onComplete"),0===this._duration&&((0===t||0>this._rawPrevTime)&&this._rawPrevTime!==t&&(i=!0,this._rawPrevTime>0&&(n="onReverseComplete",e&&(t=-1))),this._rawPrevTime=t);else if(1e-7>t)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===this._duration&&this._rawPrevTime>0)&&(n="onReverseComplete",s=this._reversed),0>t?(this._active=!1,0===this._duration&&(this._rawPrevTime>=0&&(i=!0),this._rawPrevTime=t)):this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var o=t/this._duration,l=this._easeType,h=this._easePower;(1===l||3===l&&o>=.5)&&(o=1-o),3===l&&(o*=2),1===h?o*=o:2===h?o*=o*o:3===h?o*=o*o*o:4===h&&(o*=o*o*o*o),this.ratio=1===l?1-o:2===l?o:.5>t/this._duration?o/2:1-o/2}else this.ratio=this._ease.getRatio(t/this._duration);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted)return;this._time&&!s?this.ratio=this._ease.getRatio(this._time/this._duration):s&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):n||(n="_dummyGS")),this.vars.onStart&&(0!==this._time||0===this._duration)&&(e||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||d))),r=this._firstPT;r;)r.f?r.t[r.p](r.c*this.ratio+r.s):r.t[r.p]=r.c*this.ratio+r.s,r=r._next;this._onUpdate&&(0>t&&this._startAt&&this._startAt.render(t,e,i),e||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||d)),n&&(this._gc||(0>t&&this._startAt&&!this._onUpdate&&this._startAt.render(t,e,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[n]&&this.vars[n].apply(this.vars[n+"Scope"]||this,this.vars[n+"Params"]||d)))}},s._kill=function(t,e){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:C.selector(e)||e;var i,s,n,r,a,o,l,h;if((e instanceof Array||R(e))&&"number"!=typeof e[0])for(i=e.length;--i>-1;)this._kill(t,e[i])&&(o=!0);else{if(this._targets){for(i=this._targets.length;--i>-1;)if(e===this._targets[i]){a=this._propLookup[i]||{},this._overwrittenProps=this._overwrittenProps||[],s=this._overwrittenProps[i]=t?this._overwrittenProps[i]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,s=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){l=t||a,h=t!==s&&"all"!==s&&t!==a&&(null==t||t._tempKill!==!0);for(n in l)(r=a[n])&&(r.pg&&r.t._kill(l)&&(o=!0),r.pg&&0!==r.t._overwriteProps.length||(r._prev?r._prev._next=r._next:r===this._firstPT&&(this._firstPT=r._next),r._next&&(r._next._prev=r._prev),r._next=r._prev=null),delete a[n]),h&&(s[n]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return o},s.invalidate=function(){return this._notifyPluginsOfEnabled&&C._onPluginEvent("_onDisable",this),this._firstPT=null,this._overwrittenProps=null,this._onUpdate=null,this._startAt=null,this._initted=this._active=this._notifyPluginsOfEnabled=!1,this._propLookup=this._targets?{}:[],this},s._enabled=function(t,e){if(r||n.wake(),t&&this._gc){var i,s=this._targets;if(s)for(i=s.length;--i>-1;)this._siblings[i]=G(s[i],this,!0);else this._siblings=G(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),this._notifyPluginsOfEnabled&&this._firstPT?C._onPluginEvent(t?"_onEnable":"_onDisable",this):!1},C.to=function(t,e,i){return new C(t,e,i)},C.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new C(t,e,i)},C.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new C(t,e,s)},C.delayedCall=function(t,e,i,s,n){return new C(e,0,{delay:t,onComplete:e,onCompleteParams:i,onCompleteScope:s,onReverseComplete:e,onReverseCompleteParams:i,onReverseCompleteScope:s,immediateRender:!1,useFrames:n,overwrite:0})},C.set=function(t,e){return new C(t,0,e)},C.killTweensOf=C.killDelayedCallsTo=function(t,e){for(var i=C.getTweensOf(t),s=i.length;--s>-1;)i[s]._kill(e,t)},C.getTweensOf=function(t){if(null==t)return[];t="string"!=typeof t?t:C.selector(t)||t;var e,i,s,n;if((t instanceof Array||R(t))&&"number"!=typeof t[0]){for(e=t.length,i=[];--e>-1;)i=i.concat(C.getTweensOf(t[e]));for(e=i.length;--e>-1;)for(n=i[e],s=e;--s>-1;)n===i[s]&&i.splice(e,1)}else for(i=G(t).concat(),e=i.length;--e>-1;)i[e]._gc&&i.splice(e,1);return i};var q=p("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=q.prototype},!0);if(s=q.prototype,q.version="1.10.1",q.API=2,s._firstPT=null,s._addTween=function(t,e,i,s,n,r){var a,o;return null!=s&&(a="number"==typeof s||"="!==s.charAt(1)?Number(s)-i:parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)))?(this._firstPT=o={_next:this._firstPT,t:t,p:e,s:i,c:a,f:"function"==typeof t[e],n:n||e,r:r},o._next&&(o._next._prev=o),o):void 0},s.setRatio=function(t){for(var e,i=this._firstPT,s=1e-6;i;)e=i.c*t+i.s,i.r?e=0|e+(e>0?.5:-.5):s>e&&e>-s&&(e=0),i.f?i.t[i.p](e):i.t[i.p]=e,i=i._next},s._kill=function(t){var e,i=this._overwriteProps,s=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;s;)null!=t[s.n]&&(s._next&&(s._next._prev=s._prev),s._prev?(s._prev._next=s._next,s._prev=null):this._firstPT===s&&(this._firstPT=s._next)),s=s._next;return!1},s._roundProps=function(t,e){for(var i=this._firstPT;i;)(t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&(i.r=e),i=i._next},C._onPluginEvent=function(t,e){var i,s,n,r,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,s=n;s&&s.pr>o.pr;)s=s._next;(o._prev=s?s._prev:r)?o._prev._next=o:n=o,(o._next=s)?s._prev=o:r=o,o=a}o=e._firstPT=n}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},q.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===q.API&&(I[(new t[e])._propName]=t[e]);return!0},f.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,s=t.priority||0,n=t.overwriteProps,r={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_roundProps",initAll:"_onInitAllProps"},a=p("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){q.call(this,i,s),this._overwriteProps=n||[]},t.global===!0),o=a.prototype=new q(i);o.constructor=a,a.API=t.API;for(e in r)"function"==typeof t[e]&&(o[r[e]]=t[e]);return a.version=t.version,q.activate([a]),a},e=t._gsQueue){for(i=0;e.length>i;i++)e[i]();for(s in u)u[s].func||t.console.log("GSAP encountered missing dependency: com.greensock."+s)}r=!1})(window);
define("TWEEN", function(){});

/*!
 * VERSION: beta 1.9.3
 * DATE: 2013-04-02
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2013, GreenSock. All rights reserved.
 * This work is subject to the terms at http://www.greensock.com/terms_of_use.html or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
(window._gsQueue||(window._gsQueue=[])).push(function(){window._gsDefine("easing.Back",["easing.Ease"],function(t){var e,i,s,r=window.GreenSockGlobals||window,n=r.com.greensock,a=2*Math.PI,o=Math.PI/2,h=n._class,l=function(e,i){var s=h("easing."+e,function(){},!0),r=s.prototype=new t;return r.constructor=s,r.getRatio=i,s},_=t.register||function(){},u=function(t,e,i,s){var r=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new s},!0);return _(r,t),r},c=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},f=function(e,i){var s=h("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=s.prototype=new t;return r.constructor=s,r.getRatio=i,r.config=function(t){return new s(t)},s},p=u("Back",f("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),f("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),f("BackInOut",function(t){return 1>(t*=2)?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),d=m.prototype=new t;return d.constructor=m,d.getRatio=function(t){var e=t+(.5-t)*this._p;return this._p1>t?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),d.config=m.config=function(t,e,i){return new m(t,e,i)},e=h("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),d=e.prototype=new t,d.constructor=e,d.getRatio=function(t){return 0>t?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},d.config=e.config=function(t){return new e(t)},i=h("easing.RoughEase",function(e){e=e||{};for(var i,s,r,n,a,o,h=e.taper||"none",l=[],_=0,u=0|(e.points||20),f=u,p=e.randomize!==!1,m=e.clamp===!0,d=e.template instanceof t?e.template:null,g="number"==typeof e.strength?.4*e.strength:.4;--f>-1;)i=p?Math.random():1/u*f,s=d?d.getRatio(i):i,"none"===h?r=g:"out"===h?(n=1-i,r=n*n*g):"in"===h?r=i*i*g:.5>i?(n=2*i,r=.5*n*n*g):(n=2*(1-i),r=.5*n*n*g),p?s+=Math.random()*r-.5*r:f%2?s+=.5*r:s-=.5*r,m&&(s>1?s=1:0>s&&(s=0)),l[_++]={x:i,y:s};for(l.sort(function(t,e){return t.x-e.x}),o=new c(1,1,null),f=u;--f>-1;)a=l[f],o=new c(a.x,a.y,o);this._prev=new c(0,0,0!==o.t?o:o.next)},!0),d=i.prototype=new t,d.constructor=i,d.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&e.t>=t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},d.config=function(t){return new i(t)},i.ease=new i,u("Bounce",l("BounceOut",function(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),l("BounceIn",function(t){return 1/2.75>(t=1-t)?1-7.5625*t*t:2/2.75>t?1-(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),l("BounceInOut",function(t){var e=.5>t;return t=e?1-2*t:2*t-1,t=1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),u("Circ",l("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),l("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),l("CircInOut",function(t){return 1>(t*=2)?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),s=function(e,i,s){var r=h("easing."+e,function(t,e){this._p1=t||1,this._p2=e||s,this._p3=this._p2/a*(Math.asin(1/this._p1)||0)},!0),n=r.prototype=new t;return n.constructor=r,n.getRatio=i,n.config=function(t,e){return new r(t,e)},r},u("Elastic",s("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*a/this._p2)+1},.3),s("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*a/this._p2))},.3),s("ElasticInOut",function(t){return 1>(t*=2)?-.5*this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*a/this._p2):.5*this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*a/this._p2)+1},.45)),u("Expo",l("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),l("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),l("ExpoInOut",function(t){return 1>(t*=2)?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),u("Sine",l("SineOut",function(t){return Math.sin(t*o)}),l("SineIn",function(t){return-Math.cos(t*o)+1}),l("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),_(r.SlowMo,"SlowMo","ease,"),_(i,"RoughEase","ease,"),_(e,"SteppedEase","ease,"),p},!0)}),window._gsDefine&&window._gsQueue.pop()();
define("EASEPACK", function(){});

/*!
 * VERSION: beta 1.9.6
 * DATE: 2013-05-07
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2013, GreenSock. All rights reserved.
 * This work is subject to the terms at http://www.greensock.com/terms_of_use.html or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
(window._gsQueue||(window._gsQueue=[])).push(function(){window._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,s,r,n,a=function(){t.call(this,"css"),this._overwriteProps.length=0},o={},h=a.prototype=new t("css");h.constructor=a,a.version="1.9.6",a.API=2,a.defaultTransformPerspective=0,h="px",a.suffixMap={top:h,right:h,bottom:h,left:h,width:h,height:h,fontSize:h,padding:h,margin:h,perspective:h};var l,u,_,p,f,c,m=/(?:\d|\-\d|\.\d|\-\.\d)+/g,d=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,g=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,v=/[^\d\-\.]/g,y=/(?:\d|\-|\+|=|#|\.)*/g,T=/opacity *= *([^)]*)/,w=/opacity:([^;]*)/,x=/alpha\(opacity *=.+?\)/i,b=/^(rgb|hsl)/,P=/([A-Z])/g,S=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,k=function(t,e){return e.toUpperCase()},C=/(?:Left|Right|Width)/i,A=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,O=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,M=/,(?=[^\)]*(?:\(|$))/gi,D=Math.PI/180,I=180/Math.PI,N={},F=document,X=F.createElement("div"),L=F.createElement("img"),E=a._internals={_specialProps:o},z=navigator.userAgent,Y=function(){var t,e=z.indexOf("Android"),i=F.createElement("div");return _=-1!==z.indexOf("Safari")&&-1===z.indexOf("Chrome")&&(-1===e||Number(z.substr(e+8,1))>3),f=_&&6>Number(z.substr(z.indexOf("Version/")+8,1)),p=-1!==z.indexOf("Firefox"),/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(z),c=parseFloat(RegExp.$1),i.innerHTML="<a style='top:1px;opacity:.55;'>a</a>",t=i.getElementsByTagName("a")[0],t?/^0.55/.test(t.style.opacity):!1}(),U=function(t){return T.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},B=function(t){window.console&&console.log(t)},j="",V="",q=function(t,e){e=e||X;var i,s,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],s=5;--s>-1&&void 0===r[i[s]+t];);return s>=0?(V=3===s?"ms":i[s],j="-"+V.toLowerCase()+"-",V+t):null},Q=F.defaultView?F.defaultView.getComputedStyle:function(){},Z=a.getStyle=function(t,e,i,s,r){var n;return Y||"opacity"!==e?(!s&&t.style[e]?n=t.style[e]:(i=i||Q(t,null))?(t=i.getPropertyValue(e.replace(P,"-$1").toLowerCase()),n=t||i.length?t:i[e]):t.currentStyle&&(i=t.currentStyle,n=i[e]),null==r||n&&"none"!==n&&"auto"!==n&&"auto auto"!==n?n:r):U(t)},W=function(t,e,i,s,r){if("px"===s||!s)return i;if("auto"===s||!i)return 0;var n,a=C.test(e),o=t,h=X.style,l=0>i;return l&&(i=-i),"%"===s&&-1!==e.indexOf("border")?n=i/100*(a?t.clientWidth:t.clientHeight):(h.cssText="border-style:solid; border-width:0; position:absolute; line-height:0;","%"!==s&&o.appendChild?h[a?"borderLeftWidth":"borderTopWidth"]=i+s:(o=t.parentNode||F.body,h[a?"width":"height"]=i+s),o.appendChild(X),n=parseFloat(X[a?"offsetWidth":"offsetHeight"]),o.removeChild(X),0!==n||r||(n=W(t,e,i,s,!0))),l?-n:n},$=function(t,e,i){if("absolute"!==Z(t,"position",i))return 0;var s="left"===e?"Left":"Top",r=Z(t,"margin"+s,i);return t["offset"+s]-(W(t,e,parseFloat(r),r.replace(y,""))||0)},G=function(t,e){var i,s,r={};if(e=e||Q(t,null))if(i=e.length)for(;--i>-1;)r[e[i].replace(S,k)]=e.getPropertyValue(e[i]);else for(i in e)r[i]=e[i];else if(e=t.currentStyle||t.style)for(i in e)r[i.replace(S,k)]=e[i];return Y||(r.opacity=U(t)),s=be(t,e,!1),r.rotation=s.rotation*I,r.skewX=s.skewX*I,r.scaleX=s.scaleX,r.scaleY=s.scaleY,r.x=s.x,r.y=s.y,xe&&(r.z=s.z,r.rotationX=s.rotationX*I,r.rotationY=s.rotationY*I,r.scaleZ=s.scaleZ),r.filters&&delete r.filters,r},H=function(t,e,i,s,r){var n,a,o,h={},l=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(n=i[a])||r&&r[a])&&-1===a.indexOf("Origin")&&("number"==typeof n||"string"==typeof n)&&(h[a]="auto"!==n||"left"!==a&&"top"!==a?""!==n&&"auto"!==n&&"none"!==n||"string"!=typeof e[a]||""===e[a].replace(v,"")?n:0:$(t,a),void 0!==l[a]&&(o=new _e(l,a,l[a],o)));if(s)for(a in s)"className"!==a&&(h[a]=s[a]);return{difs:h,firstMPT:o}},K={width:["Left","Right"],height:["Top","Bottom"]},J=["marginLeft","marginRight","marginTop","marginBottom"],te=function(t,e,i){var s=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=K[e],n=r.length;for(i=i||Q(t,null);--n>-1;)s-=parseFloat(Z(t,"padding"+r[n],i,!0))||0,s-=parseFloat(Z(t,"border"+r[n]+"Width",i,!0))||0;return s},ee=function(t,e){(null==t||""===t||"auto"===t||"auto auto"===t)&&(t="0 0");var i=t.split(" "),s=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":i[0],r=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":i[1];return null==r?r="0":"center"===r&&(r="50%"),("center"===s||isNaN(parseFloat(s)))&&(s="50%"),e&&(e.oxp=-1!==s.indexOf("%"),e.oyp=-1!==r.indexOf("%"),e.oxr="="===s.charAt(1),e.oyr="="===r.charAt(1),e.ox=parseFloat(s.replace(v,"")),e.oy=parseFloat(r.replace(v,""))),s+" "+r+(i.length>2?" "+i[2]:"")},ie=function(t,e){return"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)},se=function(t,e){return null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*Number(t.substr(2))+e:parseFloat(t)},re=function(t,e,i,s){var r,n,a,o,h=1e-6;return null==t?o=e:"number"==typeof t?o=t*D:(r=2*Math.PI,n=t.split("_"),a=Number(n[0].replace(v,""))*(-1===t.indexOf("rad")?D:1)-("="===t.charAt(1)?0:e),n.length&&(s&&(s[i]=e+a),-1!==t.indexOf("short")&&(a%=r,a!==a%(r/2)&&(a=0>a?a+r:a-r)),-1!==t.indexOf("_cw")&&0>a?a=(a+9999999999*r)%r-(0|a/r)*r:-1!==t.indexOf("ccw")&&a>0&&(a=(a-9999999999*r)%r-(0|a/r)*r)),o=e+a),h>o&&o>-h&&(o=0),o},ne={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ae=function(t,e,i){return t=0>t?t+1:t>1?t-1:t,0|255*(1>6*t?e+6*(i-e)*t:.5>t?i:2>3*t?e+6*(i-e)*(2/3-t):e)+.5},oe=function(t){var e,i,s,r,n,a;return t&&""!==t?"number"==typeof t?[t>>16,255&t>>8,255&t]:(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ne[t]?ne[t]:"#"===t.charAt(0)?(4===t.length&&(e=t.charAt(1),i=t.charAt(2),s=t.charAt(3),t="#"+e+e+i+i+s+s),t=parseInt(t.substr(1),16),[t>>16,255&t>>8,255&t]):"hsl"===t.substr(0,3)?(t=t.match(m),r=Number(t[0])%360/360,n=Number(t[1])/100,a=Number(t[2])/100,i=.5>=a?a*(n+1):a+n-a*n,e=2*a-i,t.length>3&&(t[3]=Number(t[3])),t[0]=ae(r+1/3,e,i),t[1]=ae(r,e,i),t[2]=ae(r-1/3,e,i),t):(t=t.match(m)||ne.transparent,t[0]=Number(t[0]),t[1]=Number(t[1]),t[2]=Number(t[2]),t.length>3&&(t[3]=Number(t[3])),t)):ne.black},he="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#.+?\\b";for(h in ne)he+="|"+h+"\\b";he=RegExp(he+")","gi");var le=function(t,e,i,s){if(null==t)return function(t){return t};var r,n=e?(t.match(he)||[""])[0]:"",a=t.split(n).join("").match(g)||[],o=t.substr(0,t.indexOf(a[0])),h=")"===t.charAt(t.length-1)?")":"",l=-1!==t.indexOf(" ")?" ":",",u=a.length,_=u>0?a[0].replace(m,""):"";return u?r=e?function(t){var e,p,f,c;if("number"==typeof t)t+=_;else if(s&&M.test(t)){for(c=t.replace(M,"|").split("|"),f=0;c.length>f;f++)c[f]=r(c[f]);return c.join(",")}if(e=(t.match(he)||[n])[0],p=t.split(e).join("").match(g)||[],f=p.length,u>f--)for(;u>++f;)p[f]=i?p[0|(f-1)/2]:a[f];return o+p.join(l)+l+e+h+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,n,p;if("number"==typeof t)t+=_;else if(s&&M.test(t)){for(n=t.replace(M,"|").split("|"),p=0;n.length>p;p++)n[p]=r(n[p]);return n.join(",")}if(e=t.match(g)||[],p=e.length,u>p--)for(;u>++p;)e[p]=i?e[0|(p-1)/2]:a[p];return o+e.join(l)+h}:function(t){return t}},ue=function(t){return t=t.split(","),function(e,i,s,r,n,a,o){var h,l=(i+"").split(" ");for(o={},h=0;4>h;h++)o[t[h]]=l[h]=l[h]||l[(h-1)/2>>0];return r.parse(e,o,n,a)}},_e=(E._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,s,r,n=this.data,a=n.proxy,o=n.firstMPT,h=1e-6;o;)e=a[o.v],o.r?e=e>0?0|e+.5:0|e-.5:h>e&&e>-h&&(e=0),o.t[o.p]=e,o=o._next;if(n.autoRotate&&(n.autoRotate.rotation=a.rotation),1===t)for(o=n.firstMPT;o;){if(i=o.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,s=1;i.l>s;s++)r+=i["xn"+s]+i["xs"+(s+1)];i.e=r}}else i.e=i.s+i.xs0;o=o._next}},function(t,e,i,s,r){this.t=t,this.p=e,this.v=i,this.r=r,s&&(s._prev=this,this._next=s)}),pe=(E._parseToProxy=function(t,e,i,s,r,n){var a,o,h,l,u,_=s,p={},f={},c=i._transform,m=N;for(i._transform=null,N=e,s=u=i.parse(t,e,s,r),N=m,n&&(i._transform=c,_&&(_._prev=null,_._prev&&(_._prev._next=null)));s&&s!==_;){if(1>=s.type&&(o=s.p,f[o]=s.s+s.c,p[o]=s.s,n||(l=new _e(s,"s",o,l,s.r),s.c=0),1===s.type))for(a=s.l;--a>0;)h="xn"+a,o=s.p+"_"+h,f[o]=s.data[h],p[o]=s[h],n||(l=new _e(s,h,o,l,s.rxp[h]));s=s._next}return{proxy:p,end:f,firstMPT:l,pt:u}},E.CSSPropTween=function(t,e,s,r,a,o,h,l,u,_,p){this.t=t,this.p=e,this.s=s,this.c=r,this.n=h||"css_"+e,t instanceof pe||n.push(this.n),this.r=l,this.type=o||0,u&&(this.pr=u,i=!0),this.b=void 0===_?s:_,this.e=void 0===p?s+r:p,a&&(this._next=a,a._prev=this)}),fe=a.parseComplex=function(t,e,i,s,r,n,a,o,h,u){a=new pe(t,e,0,0,a,u?2:1,null,!1,o,i,s),s+="";var _,p,f,c,g,v,y,T,w,x,P,S,R=i.split(", ").join(",").split(" "),k=s.split(", ").join(",").split(" "),C=R.length,A=l!==!1;for((-1!==s.indexOf(",")||-1!==i.indexOf(","))&&(R=R.join(" ").replace(M,", ").split(" "),k=k.join(" ").replace(M,", ").split(" "),C=R.length),C!==k.length&&(R=(n||"").split(" "),C=R.length),a.plugin=h,a.setRatio=u,_=0;C>_;_++)if(c=R[_],g=k[_],T=parseFloat(c),T||0===T)a.appendXtra("",T,ie(g,T),g.replace(d,""),A&&-1!==g.indexOf("px"),!0);else if(r&&("#"===c.charAt(0)||ne[c]||b.test(c)))S=","===g.charAt(g.length-1)?"),":")",c=oe(c),g=oe(g),w=c.length+g.length>6,w&&!Y&&0===g[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(k[_]).join("transparent")):(Y||(w=!1),a.appendXtra(w?"rgba(":"rgb(",c[0],g[0]-c[0],",",!0,!0).appendXtra("",c[1],g[1]-c[1],",",!0).appendXtra("",c[2],g[2]-c[2],w?",":S,!0),w&&(c=4>c.length?1:c[3],a.appendXtra("",c,(4>g.length?1:g[3])-c,S,!1)));else if(v=c.match(m)){if(y=g.match(d),!y||y.length!==v.length)return a;for(f=0,p=0;v.length>p;p++)P=v[p],x=c.indexOf(P,f),a.appendXtra(c.substr(f,x-f),Number(P),ie(y[p],P),"",A&&"px"===c.substr(x+P.length,2),0===p),f=x+P.length;a["xs"+a.l]+=c.substr(f)}else a["xs"+a.l]+=a.l?" "+c:c;if(-1!==s.indexOf("=")&&a.data){for(S=a.xs0+a.data.s,_=1;a.l>_;_++)S+=a["xs"+_]+a.data["xn"+_];a.e=S+a["xs"+_]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},ce=9;for(h=pe.prototype,h.l=h.pr=0;--ce>0;)h["xn"+ce]=0,h["xs"+ce]="";h.xs0="",h._next=h._prev=h.xfirst=h.data=h.plugin=h.setRatio=h.rxp=null,h.appendXtra=function(t,e,i,s,r,n){var a=this,o=a.l;return a["xs"+o]+=n&&o?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=s||"",o>0?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=r,a["xn"+o]=e,a.plugin||(a.xfirst=new pe(a,"xn"+o,e,i,a.xfirst||a,0,a.n,r,a.pr),a.xfirst.xs0=0),a):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=r,a)):(a["xs"+o]+=e+(s||""),a)};var me=function(t,e){e=e||{},this.p=e.prefix?q(t)||t:t,o[t]=o[this.p]=this,this.format=e.formatter||le(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},de=E._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var s,r,n=t.split(","),a=e.defaultValue;for(i=i||[a],s=0;n.length>s;s++)e.prefix=0===s&&e.prefix,e.defaultValue=i[s]||a,r=new me(n[s],e)},ge=function(t){if(!o[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";de(t,{parser:function(t,i,s,r,n,a,h){var l=(window.GreenSockGlobals||window).com.greensock.plugins[e];return l?(l._cssRegister(),o[s].parse(t,i,s,r,n,a,h)):(B("Error: "+e+" js file not loaded."),n)}})}};h=me.prototype,h.parseComplex=function(t,e,i,s,r,n){var a,o,h,l,u,_,p=this.keyword;if(this.multi&&(M.test(i)||M.test(e)?(o=e.replace(M,"|").split("|"),h=i.replace(M,"|").split("|")):p&&(o=[e],h=[i])),h){for(l=h.length>o.length?h.length:o.length,a=0;l>a;a++)e=o[a]=o[a]||this.dflt,i=h[a]=h[a]||this.dflt,p&&(u=e.indexOf(p),_=i.indexOf(p),u!==_&&(i=-1===_?h:o,i[a]+=" "+p));e=o.join(", "),i=h.join(", ")}return fe(t,this.p,e,i,this.clrs,this.dflt,s,this.pr,r,n)},h.parse=function(t,e,i,s,n,a){return this.parseComplex(t.style,this.format(Z(t,this.p,r,!1,this.dflt)),this.format(e),n,a)},a.registerSpecialProp=function(t,e,i){de(t,{parser:function(t,s,r,n,a,o){var h=new pe(t,r,0,0,a,2,r,!1,i);return h.plugin=o,h.setRatio=e(t,s,n._tween,r),h},priority:i})};var ve="scaleX,scaleY,scaleZ,x,y,z,skewX,rotation,rotationX,rotationY,perspective".split(","),ye=q("transform"),Te=j+"transform",we=q("transformOrigin"),xe=null!==q("perspective"),be=function(t,e,i){var s,r,n,o,h,l,u,_,p,f,c,m,d,g=i?t._gsTransform||{skewY:0}:{skewY:0},v=0>g.scaleX,y=2e-5,T=1e5,w=-Math.PI+1e-4,x=Math.PI-1e-4,b=xe?parseFloat(Z(t,we,e,!1,"0 0 0").split(" ")[2])||g.zOrigin||0:0;if(ye)s=Z(t,Te,e,!0);else if(t.currentStyle)if(s=t.currentStyle.filter.match(A),s&&4===s.length)s=[s[0].substr(4),Number(s[2].substr(4)),Number(s[1].substr(4)),s[3].substr(4),g.x||0,g.y||0].join(",");else{if(null!=g.x)return g;s=""}for(r=(s||"").match(/(?:\-|\b)[\d\-\.e]+\b/gi)||[],n=r.length;--n>-1;)o=Number(r[n]),r[n]=(h=o-(o|=0))?(0|h*T+(0>h?-.5:.5))/T+o:o;if(16===r.length){var P=r[8],S=r[9],R=r[10],k=r[12],C=r[13],O=r[14];if(g.zOrigin&&(O=-g.zOrigin,k=P*O-r[12],C=S*O-r[13],O=R*O+g.zOrigin-r[14]),!i||null==g.rotationX){var M,D,I,N,F,X,L,E=r[0],z=r[1],Y=r[2],U=r[3],B=r[4],j=r[5],V=r[6],q=r[7],Q=r[11],W=g.rotationX=Math.atan2(V,R),$=w>W||W>x;W&&(N=Math.cos(-W),F=Math.sin(-W),M=B*N+P*F,D=j*N+S*F,I=V*N+R*F,P=B*-F+P*N,S=j*-F+S*N,R=V*-F+R*N,Q=q*-F+Q*N,B=M,j=D,V=I),W=g.rotationY=Math.atan2(P,E),W&&(X=w>W||W>x,N=Math.cos(-W),F=Math.sin(-W),M=E*N-P*F,D=z*N-S*F,I=Y*N-R*F,S=z*F+S*N,R=Y*F+R*N,Q=U*F+Q*N,E=M,z=D,Y=I),W=g.rotation=Math.atan2(z,j),W&&(L=w>W||W>x,N=Math.cos(-W),F=Math.sin(-W),E=E*N+B*F,D=z*N+j*F,j=z*-F+j*N,V=Y*-F+V*N,z=D),L&&$?g.rotation=g.rotationX=0:L&&X?g.rotation=g.rotationY=0:X&&$&&(g.rotationY=g.rotationX=0),g.scaleX=(0|Math.sqrt(E*E+z*z)*T+.5)/T,g.scaleY=(0|Math.sqrt(j*j+S*S)*T+.5)/T,g.scaleZ=(0|Math.sqrt(V*V+R*R)*T+.5)/T,g.skewX=0,g.perspective=Q?1/(0>Q?-Q:Q):0,g.x=k,g.y=C,g.z=O}}else if(!(xe&&0!==r.length&&g.x===r[4]&&g.y===r[5]&&(g.rotationX||g.rotationY)||void 0!==g.x&&"none"===Z(t,"display",e))){var G=r.length>=6,H=G?r[0]:1,K=r[1]||0,J=r[2]||0,te=G?r[3]:1;g.x=r[4]||0,g.y=r[5]||0,l=Math.sqrt(H*H+K*K),u=Math.sqrt(te*te+J*J),_=H||K?Math.atan2(K,H):g.rotation||0,p=J||te?Math.atan2(J,te)+_:g.skewX||0,f=l-Math.abs(g.scaleX||0),c=u-Math.abs(g.scaleY||0),Math.abs(p)>Math.PI/2&&Math.abs(p)<1.5*Math.PI&&(v?(l*=-1,p+=0>=_?Math.PI:-Math.PI,_+=0>=_?Math.PI:-Math.PI):(u*=-1,p+=0>=p?Math.PI:-Math.PI)),m=(_-g.rotation)%Math.PI,d=(p-g.skewX)%Math.PI,(void 0===g.skewX||f>y||-y>f||c>y||-y>c||m>w&&x>m&&false|m*T||d>w&&x>d&&false|d*T)&&(g.scaleX=l,g.scaleY=u,g.rotation=_,g.skewX=p),xe&&(g.rotationX=g.rotationY=g.z=0,g.perspective=parseFloat(a.defaultTransformPerspective)||0,g.scaleZ=1)}g.zOrigin=b;for(n in g)y>g[n]&&g[n]>-y&&(g[n]=0);return i&&(t._gsTransform=g),g},Pe=function(t){var e,i,s=this.data,r=-s.rotation,n=r+s.skewX,a=1e5,o=(0|Math.cos(r)*s.scaleX*a)/a,h=(0|Math.sin(r)*s.scaleX*a)/a,l=(0|Math.sin(n)*-s.scaleY*a)/a,u=(0|Math.cos(n)*s.scaleY*a)/a,_=this.t.style,p=this.t.currentStyle;if(p){i=h,h=-l,l=-i,e=p.filter,_.filter="";var f,m,d=this.t.offsetWidth,g=this.t.offsetHeight,v="absolute"!==p.position,w="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+h+", M21="+l+", M22="+u,x=s.x,b=s.y;if(null!=s.ox&&(f=(s.oxp?.01*d*s.ox:s.ox)-d/2,m=(s.oyp?.01*g*s.oy:s.oy)-g/2,x+=f-(f*o+m*h),b+=m-(f*l+m*u)),v)f=d/2,m=g/2,w+=", Dx="+(f-(f*o+m*h)+x)+", Dy="+(m-(f*l+m*u)+b)+")";else{var P,S,R,k=8>c?1:-1;for(f=s.ieOffsetX||0,m=s.ieOffsetY||0,s.ieOffsetX=Math.round((d-((0>o?-o:o)*d+(0>h?-h:h)*g))/2+x),s.ieOffsetY=Math.round((g-((0>u?-u:u)*g+(0>l?-l:l)*d))/2+b),ce=0;4>ce;ce++)S=J[ce],P=p[S],i=-1!==P.indexOf("px")?parseFloat(P):W(this.t,S,parseFloat(P),P.replace(y,""))||0,R=i!==s[S]?2>ce?-s.ieOffsetX:-s.ieOffsetY:2>ce?f-s.ieOffsetX:m-s.ieOffsetY,_[S]=(s[S]=Math.round(i-R*(0===ce||2===ce?1:k)))+"px";w+=", sizingMethod='auto expand')"}_.filter=-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?e.replace(O,w):w+" "+e,(0===t||1===t)&&1===o&&0===h&&0===l&&1===u&&(v&&-1===w.indexOf("Dx=0, Dy=0")||T.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf("gradient(")&&_.removeAttribute("filter"))}},Se=function(){var t,e,i,s,r,n,a,o,h,l=this.data,u=this.t.style,_=l.perspective,f=l.scaleX,c=0,m=0,d=0,g=0,v=l.scaleY,y=0,T=0,w=0,x=0,b=l.scaleZ,P=0,S=0,R=0,k=_?-1/_:0,C=l.rotation,A=l.zOrigin,O=1e5;p&&(a=u.top?"top":u.bottom?"bottom":parseFloat(Z(this.t,"top",null,!1))?"bottom":"top",i=Z(this.t,a,null,!1),o=parseFloat(i)||0,h=i.substr((o+"").length)||"px",l._ffFix=!l._ffFix,u[a]=(l._ffFix?o+.05:o-.05)+h),(C||l.skewX)&&(i=f*Math.cos(C),s=v*Math.sin(C),C-=l.skewX,c=f*-Math.sin(C),v*=Math.cos(C),f=i,g=s),C=l.rotationY,C&&(t=Math.cos(C),e=Math.sin(C),i=f*t,s=g*t,r=b*-e,n=k*-e,m=f*e,y=g*e,b*=t,k*=t,f=i,g=s,w=r,S=n),C=l.rotationX,C&&(t=Math.cos(C),e=Math.sin(C),i=c*t+m*e,s=v*t+y*e,r=x*t+b*e,n=R*t+k*e,m=c*-e+m*t,y=v*-e+y*t,b=x*-e+b*t,k=R*-e+k*t,c=i,v=s,x=r,R=n),A&&(P-=A,d=m*P,T=y*P,P=b*P+A),d=(i=(d+=l.x)-(d|=0))?(0|i*O+(0>i?-.5:.5))/O+d:d,T=(i=(T+=l.y)-(T|=0))?(0|i*O+(0>i?-.5:.5))/O+T:T,P=(i=(P+=l.z)-(P|=0))?(0|i*O+(0>i?-.5:.5))/O+P:P,u[ye]="matrix3d("+[(0|f*O)/O,(0|g*O)/O,(0|w*O)/O,(0|S*O)/O,(0|c*O)/O,(0|v*O)/O,(0|x*O)/O,(0|R*O)/O,(0|m*O)/O,(0|y*O)/O,(0|b*O)/O,(0|k*O)/O,d,T,P,_?1+-P/_:1].join(",")+")"},Re=function(){var t,e,i,s,r,n,a,o,h,l=this.data,u=this.t,_=u.style;p&&(t=_.top?"top":_.bottom?"bottom":parseFloat(Z(u,"top",null,!1))?"bottom":"top",e=Z(u,t,null,!1),i=parseFloat(e)||0,s=e.substr((i+"").length)||"px",l._ffFix=!l._ffFix,_[t]=(l._ffFix?i+.05:i-.05)+s),l.rotation||l.skewX?(r=l.rotation,n=r-l.skewX,a=1e5,o=l.scaleX*a,h=l.scaleY*a,_[ye]="matrix("+(0|Math.cos(r)*o)/a+","+(0|Math.sin(r)*o)/a+","+(0|Math.sin(n)*-h)/a+","+(0|Math.cos(n)*h)/a+","+l.x+","+l.y+")"):_[ye]="matrix("+l.scaleX+",0,0,"+l.scaleY+","+l.x+","+l.y+")"};de("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,transformPerspective,directionalRotation",{parser:function(t,e,i,s,n,a,o){if(s._transform)return n;var h,l,u,_,p,f,c,m=s._transform=be(t,r,!0),d=t.style,g=1e-6,v=ve.length,y=o,T={};if("string"==typeof y.transform&&ye)u=d.cssText,d[ye]=y.transform,d.display="block",h=be(t,null,!1),d.cssText=u;else if("object"==typeof y){if(h={scaleX:se(null!=y.scaleX?y.scaleX:y.scale,m.scaleX),scaleY:se(null!=y.scaleY?y.scaleY:y.scale,m.scaleY),scaleZ:se(null!=y.scaleZ?y.scaleZ:y.scale,m.scaleZ),x:se(y.x,m.x),y:se(y.y,m.y),z:se(y.z,m.z),perspective:se(y.transformPerspective,m.perspective)},c=y.directionalRotation,null!=c)if("object"==typeof c)for(u in c)y[u]=c[u];else y.rotation=c;h.rotation=re("rotation"in y?y.rotation:"shortRotation"in y?y.shortRotation+"_short":"rotationZ"in y?y.rotationZ:m.rotation*I,m.rotation,"rotation",T),xe&&(h.rotationX=re("rotationX"in y?y.rotationX:"shortRotationX"in y?y.shortRotationX+"_short":m.rotationX*I||0,m.rotationX,"rotationX",T),h.rotationY=re("rotationY"in y?y.rotationY:"shortRotationY"in y?y.shortRotationY+"_short":m.rotationY*I||0,m.rotationY,"rotationY",T)),h.skewX=null==y.skewX?m.skewX:re(y.skewX,m.skewX),h.skewY=null==y.skewY?m.skewY:re(y.skewY,m.skewY),(l=h.skewY-m.skewY)&&(h.skewX+=l,h.rotation+=l)}for(p=m.z||m.rotationX||m.rotationY||h.z||h.rotationX||h.rotationY||h.perspective,p||null==y.scale||(h.scaleZ=1);--v>-1;)i=ve[v],_=h[i]-m[i],(_>g||-g>_||null!=N[i])&&(f=!0,n=new pe(m,i,m[i],_,n),i in T&&(n.e=T[i]),n.xs0=0,n.plugin=a,s._overwriteProps.push(n.n));return _=y.transformOrigin,(_||xe&&p&&m.zOrigin)&&(ye?(f=!0,_=(_||Z(t,i,r,!1,"50% 50%"))+"",i=we,n=new pe(d,i,0,0,n,-1,"css_transformOrigin"),n.b=d[i],n.plugin=a,xe?(u=m.zOrigin,_=_.split(" "),m.zOrigin=(_.length>2?parseFloat(_[2]):u)||0,n.xs0=n.e=d[i]=_[0]+" "+(_[1]||"50%")+" 0px",n=new pe(m,"zOrigin",0,0,n,-1,n.n),n.b=u,n.xs0=n.e=m.zOrigin):n.xs0=n.e=d[i]=_):ee(_+"",m)),f&&(s._transformType=p||3===this._transformType?3:2),n},prefix:!0}),de("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),de("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,a){e=this.format(e);var o,h,l,u,_,p,f,c,m,d,g,v,y,T,w,x,b=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],P=t.style;for(m=parseFloat(t.offsetWidth),d=parseFloat(t.offsetHeight),o=e.split(" "),h=0;b.length>h;h++)this.p.indexOf("border")&&(b[h]=q(b[h])),_=u=Z(t,b[h],r,!1,"0px"),-1!==_.indexOf(" ")&&(u=_.split(" "),_=u[0],u=u[1]),p=l=o[h],f=parseFloat(_),v=_.substr((f+"").length),y="="===p.charAt(1),y?(c=parseInt(p.charAt(0)+"1",10),p=p.substr(2),c*=parseFloat(p),g=p.substr((c+"").length-(0>c?1:0))||""):(c=parseFloat(p),g=p.substr((c+"").length)),""===g&&(g=s[i]||v),g!==v&&(T=W(t,"borderLeft",f,v),w=W(t,"borderTop",f,v),"%"===g?(_=100*(T/m)+"%",u=100*(w/d)+"%"):"em"===g?(x=W(t,"borderLeft",1,"em"),_=T/x+"em",u=w/x+"em"):(_=T+"px",u=w+"px"),y&&(p=parseFloat(_)+c+g,l=parseFloat(u)+c+g)),a=fe(P,b[h],_+" "+u,p+" "+l,!1,"0px",a);return a},prefix:!0,formatter:le("0px 0px 0px 0px",!1,!0)}),de("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,s,n,a){var o,h,l,u,_,p,f="background-position",m=r||Q(t,null),d=this.format((m?c?m.getPropertyValue(f+"-x")+" "+m.getPropertyValue(f+"-y"):m.getPropertyValue(f):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(-1!==d.indexOf("%")!=(-1!==g.indexOf("%"))&&(p=Z(t,"backgroundImage").replace(R,""),p&&"none"!==p)){for(o=d.split(" "),h=g.split(" "),L.setAttribute("src",p),l=2;--l>-1;)d=o[l],u=-1!==d.indexOf("%"),u!==(-1!==h[l].indexOf("%"))&&(_=0===l?t.offsetWidth-L.width:t.offsetHeight-L.height,o[l]=u?parseFloat(d)/100*_+"px":100*(parseFloat(d)/_)+"%");d=o.join(" ")}return this.parseComplex(t.style,d,g,n,a)},formatter:ee}),de("backgroundSize",{defaultValue:"0 0",formatter:ee}),de("perspective",{defaultValue:"0px",prefix:!0}),de("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),de("transformStyle",{prefix:!0}),de("backfaceVisibility",{prefix:!0}),de("margin",{parser:ue("marginTop,marginRight,marginBottom,marginLeft")}),de("padding",{parser:ue("paddingTop,paddingRight,paddingBottom,paddingLeft")}),de("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,s,n,a){var o,h,l;return 9>c?(h=t.currentStyle,l=8>c?" ":",",o="rect("+h.clipTop+l+h.clipRight+l+h.clipBottom+l+h.clipLeft+")",e=this.format(e).split(",").join(l)):(o=this.format(Z(t,this.p,r,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,o,e,n,a)}}),de("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),de("autoRound,strictUnits",{parser:function(t,e,i,s,r){return r}}),de("border",{defaultValue:"0px solid #000",parser:function(t,e,i,s,n,a){return this.parseComplex(t.style,this.format(Z(t,"borderTopWidth",r,!1,"0px")+" "+Z(t,"borderTopStyle",r,!1,"solid")+" "+Z(t,"borderTopColor",r,!1,"#000")),this.format(e),n,a)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(he)||["#000"])[0]}}),de("float,cssFloat,styleFloat",{parser:function(t,e,i,s,r){var n=t.style,a="cssFloat"in n?"cssFloat":"styleFloat";return new pe(n,a,0,0,r,-1,i,!1,0,n[a],e)}});var ke=function(t){var e,i=this.t,s=i.filter,r=0|this.s+this.c*t;100===r&&(-1===s.indexOf("atrix(")&&-1===s.indexOf("radient(")?(i.removeAttribute("filter"),e=!Z(this.data,"filter")):(i.filter=s.replace(x,""),e=!0)),e||(this.xn1&&(i.filter=s=s||"alpha(opacity=100)"),-1===s.indexOf("opacity")?i.filter+=" alpha(opacity="+r+")":i.filter=s.replace(T,"opacity="+r))};de("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,s,n,a){var o,h=parseFloat(Z(t,"opacity",r,!1,"1")),l=t.style;return e=parseFloat(e),"autoAlpha"===i&&(o=Z(t,"visibility",r),1===h&&"hidden"===o&&0!==e&&(h=0),n=new pe(l,"visibility",0,0,n,-1,null,!1,0,0!==h?"visible":"hidden",0===e?"hidden":"visible"),n.xs0="visible",s._overwriteProps.push(n.n)),Y?n=new pe(l,"opacity",h,e-h,n):(n=new pe(l,"opacity",100*h,100*(e-h),n),n.xn1="autoAlpha"===i?1:0,l.zoom=1,n.type=2,n.b="alpha(opacity="+n.s+")",n.e="alpha(opacity="+(n.s+n.c)+")",n.data=t,n.plugin=a,n.setRatio=ke),n}});var Ce=function(t,e){e&&(t.removeProperty?t.removeProperty(e.replace(P,"-$1").toLowerCase()):t.removeAttribute(e))},Ae=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.className=0===t?this.b:this.e;for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ce(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.className!==this.e&&(this.t.className=this.e)};de("className",{parser:function(t,e,s,n,a,o,h){var l,u,_,p,f,c=t.className,m=t.style.cssText;if(a=n._classNamePT=new pe(t,s,0,0,a,2),a.setRatio=Ae,a.pr=-11,i=!0,a.b=c,u=G(t,r),_=t._gsClassPT){for(p={},f=_.data;f;)p[f.p]=1,f=f._next;_.setRatio(1)}return t._gsClassPT=a,a.e="="!==e.charAt(1)?e:c.replace(RegExp("\\s*\\b"+e.substr(2)+"\\b"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),n._tween._duration&&(t.className=a.e,l=H(t,u,G(t),h,p),t.className=c,a.data=l.firstMPT,t.style.cssText=m,a=a.xfirst=n.parse(t,l.difs,a,o)),a}});var Oe=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration)for(var e,i="all"===this.e,s=this.t.style,r=i?s.cssText.split(";"):this.e.split(","),n=r.length,a=o.transform.parse;--n>-1;)e=r[n],i&&(e=e.substr(0,e.indexOf(":")).split(" ").join("")),o[e]&&(e=o[e].parse===a?ye:o[e].p),Ce(s,e)};for(de("clearProps",{parser:function(t,e,s,r,n){return n=new pe(t,s,0,0,n,2),n.setRatio=Oe,n.e=e,n.pr=-10,n.data=r._tween,i=!0,n}}),h="bezier,throwProps,physicsProps,physics2D".split(","),ce=h.length;ce--;)ge(h[ce]);h=a.prototype,h._firstPT=null,h._onInitTween=function(t,e,o){if(!t.nodeType)return!1;this._target=t,this._tween=o,this._vars=e,l=e.autoRound,i=!1,s=e.suffixMap||a.suffixMap,r=Q(t,""),n=this._overwriteProps;var h,p,c,m,d,g,v,y,T,x=t.style;if(u&&""===x.zIndex&&(h=Z(t,"zIndex",r),("auto"===h||""===h)&&(x.zIndex=0)),"string"==typeof e&&(m=x.cssText,h=G(t,r),x.cssText=m+";"+e,h=H(t,h,G(t)).difs,!Y&&w.test(e)&&(h.opacity=parseFloat(RegExp.$1)),e=h,x.cssText=m),this._firstPT=p=this.parse(t,e,null),this._transformType){for(T=3===this._transformType,ye?_&&(u=!0,""===x.zIndex&&(v=Z(t,"zIndex",r),("auto"===v||""===v)&&(x.zIndex=0)),f&&(x.WebkitBackfaceVisibility=this._vars.WebkitBackfaceVisibility||(T?"visible":"hidden"))):x.zoom=1,c=p;c&&c._next;)c=c._next;y=new pe(t,"transform",0,0,null,2),this._linkCSSP(y,null,c),y.setRatio=T&&xe?Se:ye?Re:Pe,y.data=this._transform||be(t,r,!0),n.pop()}if(i){for(;p;){for(g=p._next,c=m;c&&c.pr>p.pr;)c=c._next;(p._prev=c?c._prev:d)?p._prev._next=p:m=p,(p._next=c)?c._prev=p:d=p,p=g}this._firstPT=m}return!0},h.parse=function(t,e,i,n){var a,h,u,_,p,f,c,m,d,g,v=t.style;for(a in e)f=e[a],h=o[a],h?i=h.parse(t,f,a,this,i,n,e):(p=Z(t,a,r)+"",d="string"==typeof f,"color"===a||"fill"===a||"stroke"===a||-1!==a.indexOf("Color")||d&&b.test(f)?(d||(f=oe(f),f=(f.length>3?"rgba(":"rgb(")+f.join(",")+")"),i=fe(v,a,p,f,!0,"transparent",i,0,n)):!d||-1===f.indexOf(" ")&&-1===f.indexOf(",")?(u=parseFloat(p),c=u||0===u?p.substr((u+"").length):"",(""===p||"auto"===p)&&("width"===a||"height"===a?(u=te(t,a,r),c="px"):"left"===a||"top"===a?(u=$(t,a,r),c="px"):(u="opacity"!==a?0:1,c="")),g=d&&"="===f.charAt(1),g?(_=parseInt(f.charAt(0)+"1",10),f=f.substr(2),_*=parseFloat(f),m=f.replace(y,"")):(_=parseFloat(f),m=d?f.substr((_+"").length)||"":""),""===m&&(m=s[a]||c),f=_||0===_?(g?_+u:_)+m:e[a],c!==m&&""!==m&&(_||0===_)&&(u||0===u)&&(u=W(t,a,u,c),"%"===m?(u/=W(t,a,100,"%")/100,u>100&&(u=100),e.strictUnits!==!0&&(p=u+"%")):"em"===m?u/=W(t,a,1,"em"):(_=W(t,a,_,m),m="px"),g&&(_||0===_)&&(f=_+u+m)),g&&(_+=u),!u&&0!==u||!_&&0!==_?f||"NaN"!=f+""&&null!=f?(i=new pe(v,a,_||u||0,0,i,-1,"css_"+a,!1,0,p,f),i.xs0="none"!==f||"display"!==a&&-1===a.indexOf("Style")?f:p):B("invalid "+a+" tween value: "+e[a]):(i=new pe(v,a,u,_-u,i,0,"css_"+a,l!==!1&&("px"===m||"zIndex"===a),0,p,f),i.xs0=m)):i=fe(v,a,p,f,!0,null,i,0,n)),n&&i&&!i.plugin&&(i.plugin=n);return i},h.setRatio=function(t){var e,i,s,r=this._firstPT,n=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=e>0?0|e+.5:0|e-.5:n>e&&e>-n&&(e=0),r.type)if(1===r.type)if(s=r.l,2===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,s=1;r.l>s;s++)i+=r["xn"+s]+r["xs"+(s+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;)2!==r.type?r.t[r.p]=r.e:r.setRatio(t),r=r._next},h._enableTransforms=function(t){this._transformType=t||3===this._transformType?3:2},h._linkCSSP=function(t,e,i,s){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),i?i._next=t:s||null!==this._firstPT||(this._firstPT=t),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next),t._next=e,t._prev=i),t},h._kill=function(e){var i,s,r,n=e;if(e.css_autoAlpha||e.css_alpha){n={};for(s in e)n[s]=e[s];n.css_opacity=1,n.css_autoAlpha&&(n.css_visibility=1)}return e.css_className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),t.prototype._kill.call(this,n)};var Me=function(t,e,i){var s,r,n,a;if(t.slice)for(r=t.length;--r>-1;)Me(t[r],e,i);else for(s=t.childNodes,r=s.length;--r>-1;)n=s[r],a=n.type,n.style&&(e.push(G(n)),i&&i.push(n)),1!==a&&9!==a&&11!==a||!n.childNodes.length||Me(n,e,i)};return a.cascadeTo=function(t,i,s){var r,n,a,o=e.to(t,i,s),h=[o],l=[],u=[],_=[],p=e._internals.reservedProps;for(t=o._targets||o.target,Me(t,l,_),o.render(i,!0),Me(t,u),o.render(0,!0),o._enabled(!0),r=_.length;--r>-1;)if(n=H(_[r],l[r],u[r]),n.firstMPT){n=n.difs;for(a in s)p[a]&&(n[a]=s[a]);h.push(e.to(_[r],i,n))}return h},t.activate([a]),a},!0)}),window._gsDefine&&window._gsQueue.pop()();
define("CSSPACK", function(){});

/*!
 *  howler.js v1.1.26
 *  howlerjs.com
 *
 *  (c) 2013-2015, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
!function(){var e={},o=null,n=!0,t=!1;try{"undefined"!=typeof AudioContext?o=new AudioContext:"undefined"!=typeof webkitAudioContext?o=new webkitAudioContext:n=!1}catch(r){n=!1}if(!n)if("undefined"!=typeof Audio)try{new Audio}catch(r){t=!0}else t=!0;if(n){var a="undefined"==typeof o.createGain?o.createGainNode():o.createGain();a.gain.value=1,a.connect(o.destination)}var i=function(e){this._volume=1,this._muted=!1,this.usingWebAudio=n,this.ctx=o,this.noAudio=t,this._howls=[],this._codecs=e,this.iOSAutoEnable=!0};i.prototype={volume:function(e){var o=this;if(e=parseFloat(e),e>=0&&1>=e){o._volume=e,n&&(a.gain.value=e);for(var t in o._howls)if(o._howls.hasOwnProperty(t)&&o._howls[t]._webAudio===!1)for(var r=0;r<o._howls[t]._audioNode.length;r++)o._howls[t]._audioNode[r].volume=o._howls[t]._volume*o._volume;return o}return n?a.gain.value:o._volume},mute:function(){return this._setMuted(!0),this},unmute:function(){return this._setMuted(!1),this},_setMuted:function(e){var o=this;o._muted=e,n&&(a.gain.value=e?0:o._volume);for(var t in o._howls)if(o._howls.hasOwnProperty(t)&&o._howls[t]._webAudio===!1)for(var r=0;r<o._howls[t]._audioNode.length;r++)o._howls[t]._audioNode[r].muted=e},codecs:function(e){return this._codecs[e]},_enableiOSAudio:function(){var e=this;if(!o||!e._iOSEnabled&&/iPhone|iPad|iPod/i.test(navigator.userAgent)){e._iOSEnabled=!1;var n=function(){var t=o.createBuffer(1,1,22050),r=o.createBufferSource();r.buffer=t,r.connect(o.destination),"undefined"==typeof r.start?r.noteOn(0):r.start(0),setTimeout(function(){(r.playbackState===r.PLAYING_STATE||r.playbackState===r.FINISHED_STATE)&&(e._iOSEnabled=!0,e.iOSAutoEnable=!1,window.removeEventListener("touchstart",n,!1))},0)};return window.addEventListener("touchstart",n,!1),e}}};var u=null,d={};t||(u=new Audio,d={mp3:!!u.canPlayType("audio/mpeg;").replace(/^no$/,""),opus:!!u.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!u.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!u.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!u.canPlayType("audio/aac;").replace(/^no$/,""),m4a:!!(u.canPlayType("audio/x-m4a;")||u.canPlayType("audio/m4a;")||u.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(u.canPlayType("audio/x-mp4;")||u.canPlayType("audio/mp4;")||u.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!u.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,"")});var l=new i(d),f=function(e){var t=this;t._autoplay=e.autoplay||!1,t._buffer=e.buffer||!1,t._duration=e.duration||0,t._format=e.format||null,t._loop=e.loop||!1,t._loaded=!1,t._sprite=e.sprite||{},t._src=e.src||"",t._pos3d=e.pos3d||[0,0,-.5],t._volume=void 0!==e.volume?e.volume:1,t._urls=e.urls||[],t._rate=e.rate||1,t._model=e.model||null,t._onload=[e.onload||function(){}],t._onloaderror=[e.onloaderror||function(){}],t._onend=[e.onend||function(){}],t._onpause=[e.onpause||function(){}],t._onplay=[e.onplay||function(){}],t._onendTimer=[],t._webAudio=n&&!t._buffer,t._audioNode=[],t._webAudio&&t._setupAudioNode(),"undefined"!=typeof o&&o&&l.iOSAutoEnable&&l._enableiOSAudio(),l._howls.push(t),t.load()};if(f.prototype={load:function(){var e=this,o=null;if(t)return void e.on("loaderror");for(var n=0;n<e._urls.length;n++){var r,a;if(e._format)r=e._format;else{if(a=e._urls[n],r=/^data:audio\/([^;,]+);/i.exec(a),r||(r=/\.([^.]+)$/.exec(a.split("?",1)[0])),!r)return void e.on("loaderror");r=r[1].toLowerCase()}if(d[r]){o=e._urls[n];break}}if(!o)return void e.on("loaderror");if(e._src=o,e._webAudio)_(e,o);else{var u=new Audio;u.addEventListener("error",function(){u.error&&4===u.error.code&&(i.noAudio=!0),e.on("loaderror",{type:u.error?u.error.code:0})},!1),e._audioNode.push(u),u.src=o,u._pos=0,u.preload="auto",u.volume=l._muted?0:e._volume*l.volume();var f=function(){e._duration=Math.ceil(10*u.duration)/10,0===Object.getOwnPropertyNames(e._sprite).length&&(e._sprite={_default:[0,1e3*e._duration]}),e._loaded||(e._loaded=!0,e.on("load")),e._autoplay&&e.play(),u.removeEventListener("canplaythrough",f,!1)};u.addEventListener("canplaythrough",f,!1),u.load()}return e},urls:function(e){var o=this;return e?(o.stop(),o._urls="string"==typeof e?[e]:e,o._loaded=!1,o.load(),o):o._urls},play:function(e,n){var t=this;return"function"==typeof e&&(n=e),e&&"function"!=typeof e||(e="_default"),t._loaded?t._sprite[e]?(t._inactiveNode(function(r){r._sprite=e;var a=r._pos>0?r._pos:t._sprite[e][0]/1e3,i=0;t._webAudio?(i=t._sprite[e][1]/1e3-r._pos,r._pos>0&&(a=t._sprite[e][0]/1e3+a)):i=t._sprite[e][1]/1e3-(a-t._sprite[e][0]/1e3);var u,d=!(!t._loop&&!t._sprite[e][2]),f="string"==typeof n?n:Math.round(Date.now()*Math.random())+"";if(function(){var o={id:f,sprite:e,loop:d};u=setTimeout(function(){!t._webAudio&&d&&t.stop(o.id).play(e,o.id),t._webAudio&&!d&&(t._nodeById(o.id).paused=!0,t._nodeById(o.id)._pos=0,t._clearEndTimer(o.id)),t._webAudio||d||t.stop(o.id),t.on("end",f)},1e3*i),t._onendTimer.push({timer:u,id:o.id})}(),t._webAudio){var _=t._sprite[e][0]/1e3,s=t._sprite[e][1]/1e3;r.id=f,r.paused=!1,p(t,[d,_,s],f),t._playStart=o.currentTime,r.gain.value=t._volume,"undefined"==typeof r.bufferSource.start?d?r.bufferSource.noteGrainOn(0,a,86400):r.bufferSource.noteGrainOn(0,a,i):d?r.bufferSource.start(0,a,86400):r.bufferSource.start(0,a,i)}else{if(4!==r.readyState&&(r.readyState||!navigator.isCocoonJS))return t._clearEndTimer(f),function(){var o=t,a=e,i=n,u=r,d=function(){o.play(a,i),u.removeEventListener("canplaythrough",d,!1)};u.addEventListener("canplaythrough",d,!1)}(),t;r.readyState=4,r.id=f,r.currentTime=a,r.muted=l._muted||r.muted,r.volume=t._volume*l.volume(),setTimeout(function(){r.play()},0)}return t.on("play"),"function"==typeof n&&n(f),t}),t):("function"==typeof n&&n(),t):(t.on("load",function(){t.play(e,n)}),t)},pause:function(e){var o=this;if(!o._loaded)return o.on("play",function(){o.pause(e)}),o;o._clearEndTimer(e);var n=e?o._nodeById(e):o._activeNode();if(n)if(n._pos=o.pos(null,e),o._webAudio){if(!n.bufferSource||n.paused)return o;n.paused=!0,"undefined"==typeof n.bufferSource.stop?n.bufferSource.noteOff(0):n.bufferSource.stop(0)}else n.pause();return o.on("pause"),o},stop:function(e){var o=this;if(!o._loaded)return o.on("play",function(){o.stop(e)}),o;o._clearEndTimer(e);var n=e?o._nodeById(e):o._activeNode();if(n)if(n._pos=0,o._webAudio){if(!n.bufferSource||n.paused)return o;n.paused=!0,"undefined"==typeof n.bufferSource.stop?n.bufferSource.noteOff(0):n.bufferSource.stop(0)}else isNaN(n.duration)||(n.pause(),n.currentTime=0);return o},mute:function(e){var o=this;if(!o._loaded)return o.on("play",function(){o.mute(e)}),o;var n=e?o._nodeById(e):o._activeNode();return n&&(o._webAudio?n.gain.value=0:n.muted=!0),o},unmute:function(e){var o=this;if(!o._loaded)return o.on("play",function(){o.unmute(e)}),o;var n=e?o._nodeById(e):o._activeNode();return n&&(o._webAudio?n.gain.value=o._volume:n.muted=!1),o},volume:function(e,o){var n=this;if(e=parseFloat(e),e>=0&&1>=e){if(n._volume=e,!n._loaded)return n.on("play",function(){n.volume(e,o)}),n;var t=o?n._nodeById(o):n._activeNode();return t&&(n._webAudio?t.gain.value=e:t.volume=e*l.volume()),n}return n._volume},loop:function(e){var o=this;return"boolean"==typeof e?(o._loop=e,o):o._loop},sprite:function(e){var o=this;return"object"==typeof e?(o._sprite=e,o):o._sprite},pos:function(e,n){var t=this;if(!t._loaded)return t.on("load",function(){t.pos(e)}),"number"==typeof e?t:t._pos||0;e=parseFloat(e);var r=n?t._nodeById(n):t._activeNode();if(r)return e>=0?(t.pause(n),r._pos=e,t.play(r._sprite,n),t):t._webAudio?r._pos+(o.currentTime-t._playStart):r.currentTime;if(e>=0)return t;for(var a=0;a<t._audioNode.length;a++)if(t._audioNode[a].paused&&4===t._audioNode[a].readyState)return t._webAudio?t._audioNode[a]._pos:t._audioNode[a].currentTime},pos3d:function(e,o,n,t){var r=this;if(o="undefined"!=typeof o&&o?o:0,n="undefined"!=typeof n&&n?n:-.5,!r._loaded)return r.on("play",function(){r.pos3d(e,o,n,t)}),r;if(!(e>=0||0>e))return r._pos3d;if(r._webAudio){var a=t?r._nodeById(t):r._activeNode();a&&(r._pos3d=[e,o,n],a.panner.setPosition(e,o,n),a.panner.panningModel=r._model||"HRTF")}return r},fade:function(e,o,n,t,r){var a=this,i=Math.abs(e-o),u=e>o?"down":"up",d=i/.01,l=n/d;if(!a._loaded)return a.on("load",function(){a.fade(e,o,n,t,r)}),a;a.volume(e,r);for(var f=1;d>=f;f++)!function(){var e=a._volume+("up"===u?.01:-.01)*f,n=Math.round(1e3*e)/1e3,i=o;setTimeout(function(){a.volume(n,r),n===i&&t&&t()},l*f)}()},fadeIn:function(e,o,n){return this.volume(0).play().fade(0,e,o,n)},fadeOut:function(e,o,n,t){var r=this;return r.fade(r._volume,e,o,function(){n&&n(),r.pause(t),r.on("end")},t)},_nodeById:function(e){for(var o=this,n=o._audioNode[0],t=0;t<o._audioNode.length;t++)if(o._audioNode[t].id===e){n=o._audioNode[t];break}return n},_activeNode:function(){for(var e=this,o=null,n=0;n<e._audioNode.length;n++)if(!e._audioNode[n].paused){o=e._audioNode[n];break}return e._drainPool(),o},_inactiveNode:function(e){for(var o=this,n=null,t=0;t<o._audioNode.length;t++)if(o._audioNode[t].paused&&4===o._audioNode[t].readyState){e(o._audioNode[t]),n=!0;break}if(o._drainPool(),!n){var r;if(o._webAudio)r=o._setupAudioNode(),e(r);else{o.load(),r=o._audioNode[o._audioNode.length-1];var a=navigator.isCocoonJS?"canplaythrough":"loadedmetadata",i=function(){r.removeEventListener(a,i,!1),e(r)};r.addEventListener(a,i,!1)}}},_drainPool:function(){var e,o=this,n=0;for(e=0;e<o._audioNode.length;e++)o._audioNode[e].paused&&n++;for(e=o._audioNode.length-1;e>=0&&!(5>=n);e--)o._audioNode[e].paused&&(o._webAudio&&o._audioNode[e].disconnect(0),n--,o._audioNode.splice(e,1))},_clearEndTimer:function(e){for(var o=this,n=0,t=0;t<o._onendTimer.length;t++)if(o._onendTimer[t].id===e){n=t;break}var r=o._onendTimer[n];r&&(clearTimeout(r.timer),o._onendTimer.splice(n,1))},_setupAudioNode:function(){var e=this,n=e._audioNode,t=e._audioNode.length;return n[t]="undefined"==typeof o.createGain?o.createGainNode():o.createGain(),n[t].gain.value=e._volume,n[t].paused=!0,n[t]._pos=0,n[t].readyState=4,n[t].connect(a),n[t].panner=o.createPanner(),n[t].panner.panningModel=e._model||"equalpower",n[t].panner.setPosition(e._pos3d[0],e._pos3d[1],e._pos3d[2]),n[t].panner.connect(n[t]),n[t]},on:function(e,o){var n=this,t=n["_on"+e];if("function"==typeof o)t.push(o);else for(var r=0;r<t.length;r++)o?t[r].call(n,o):t[r].call(n);return n},off:function(e,o){var n=this,t=n["_on"+e],r=o?o.toString():null;if(r){for(var a=0;a<t.length;a++)if(r===t[a].toString()){t.splice(a,1);break}}else n["_on"+e]=[];return n},unload:function(){for(var o=this,n=o._audioNode,t=0;t<o._audioNode.length;t++)n[t].paused||(o.stop(n[t].id),o.on("end",n[t].id)),o._webAudio?n[t].disconnect(0):n[t].src="";for(t=0;t<o._onendTimer.length;t++)clearTimeout(o._onendTimer[t].timer);var r=l._howls.indexOf(o);null!==r&&r>=0&&l._howls.splice(r,1),delete e[o._src],o=null}},n)var _=function(o,n){if(n in e)return o._duration=e[n].duration,void c(o);if(/^data:[^;]+;base64,/.test(n)){for(var t=atob(n.split(",")[1]),r=new Uint8Array(t.length),a=0;a<t.length;++a)r[a]=t.charCodeAt(a);s(r.buffer,o,n)}else{var i=new XMLHttpRequest;i.open("GET",n,!0),i.responseType="arraybuffer",i.onload=function(){s(i.response,o,n)},i.onerror=function(){o._webAudio&&(o._buffer=!0,o._webAudio=!1,o._audioNode=[],delete o._gainNode,delete e[n],o.load())};try{i.send()}catch(u){i.onerror()}}},s=function(n,t,r){o.decodeAudioData(n,function(o){o&&(e[r]=o,c(t,o))},function(e){t.on("loaderror")})},c=function(e,o){e._duration=o?o.duration:e._duration,0===Object.getOwnPropertyNames(e._sprite).length&&(e._sprite={_default:[0,1e3*e._duration]}),e._loaded||(e._loaded=!0,e.on("load")),e._autoplay&&e.play()},p=function(n,t,r){var a=n._nodeById(r);a.bufferSource=o.createBufferSource(),a.bufferSource.buffer=e[n._src],a.bufferSource.connect(a.panner),a.bufferSource.loop=t[0],t[0]&&(a.bufferSource.loopStart=t[1],a.bufferSource.loopEnd=t[1]+t[2]),a.bufferSource.playbackRate.value=n._rate};"function"==typeof define&&define.amd&&define('HOWLER',[],function(){return{Howler:l,Howl:f}}),"undefined"!=typeof exports&&(exports.Howler=l,exports.Howl=f),"undefined"!=typeof window&&(window.Howler=l,window.Howl=f)}();
/**
 * @license
 * pixi.js - v2.2.3
 * Copyright (c) 2012-2014, Mat Groves
 * http://goodboydigital.com/
 *
 * Compiled: 2015-01-06
 *
 * pixi.js is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license.php
 */
/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

(function(){

    var root = this;

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The [pixi.js](http://www.pixijs.com/) module/namespace.
 *
 * @module PIXI
 */

/**
 * Namespace-class for [pixi.js](http://www.pixijs.com/).
 *
 * Contains assorted static properties and enumerations.
 *
 * @class PIXI
 * @static
 */
var PIXI = PIXI || {};

/**
 * @property {Number} WEBGL_RENDERER
 * @protected
 * @static
 */
PIXI.WEBGL_RENDERER = 0;
/**
 * @property {Number} CANVAS_RENDERER
 * @protected
 * @static
 */
PIXI.CANVAS_RENDERER = 1;

/**
 * Version of pixi that is loaded.
 * @property {String} VERSION
 * @static
 */
PIXI.VERSION = "v2.2.3";

/**
 * Various blend modes supported by pixi. IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
 * @property {Object} blendModes
 * @property {Number} blendModes.NORMAL
 * @property {Number} blendModes.ADD
 * @property {Number} blendModes.MULTIPLY
 * @property {Number} blendModes.SCREEN
 * @property {Number} blendModes.OVERLAY
 * @property {Number} blendModes.DARKEN
 * @property {Number} blendModes.LIGHTEN
 * @property {Number} blendModes.COLOR_DODGE
 * @property {Number} blendModes.COLOR_BURN
 * @property {Number} blendModes.HARD_LIGHT
 * @property {Number} blendModes.SOFT_LIGHT
 * @property {Number} blendModes.DIFFERENCE
 * @property {Number} blendModes.EXCLUSION
 * @property {Number} blendModes.HUE
 * @property {Number} blendModes.SATURATION
 * @property {Number} blendModes.COLOR
 * @property {Number} blendModes.LUMINOSITY
 * @static
 */
PIXI.blendModes = {
    NORMAL:0,
    ADD:1,
    MULTIPLY:2,
    SCREEN:3,
    OVERLAY:4,
    DARKEN:5,
    LIGHTEN:6,
    COLOR_DODGE:7,
    COLOR_BURN:8,
    HARD_LIGHT:9,
    SOFT_LIGHT:10,
    DIFFERENCE:11,
    EXCLUSION:12,
    HUE:13,
    SATURATION:14,
    COLOR:15,
    LUMINOSITY:16
};

/**
 * The scale modes that are supported by pixi.
 *
 * The DEFAULT scale mode affects the default scaling mode of future operations.
 * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
 *
 * @property {Object} scaleModes
 * @property {Number} scaleModes.DEFAULT=LINEAR
 * @property {Number} scaleModes.LINEAR Smooth scaling
 * @property {Number} scaleModes.NEAREST Pixelating scaling
 * @static
 */
PIXI.scaleModes = {
    DEFAULT:0,
    LINEAR:0,
    NEAREST:1
};

// used to create uids for various pixi objects..
PIXI._UID = 0;

if(typeof(Float32Array) != 'undefined')
{
    PIXI.Float32Array = Float32Array;
    PIXI.Uint16Array = Uint16Array;

    // Uint32Array and ArrayBuffer only used by WebGL renderer
    // We can suppose that if WebGL is supported then typed arrays are supported too
    // as they predate WebGL support for all browsers:
    // see typed arrays support: http://caniuse.com/#search=TypedArrays
    // see WebGL support: http://caniuse.com/#search=WebGL
    PIXI.Uint32Array = Uint32Array;
    PIXI.ArrayBuffer = ArrayBuffer;
}
else
{
    PIXI.Float32Array = Array;
    PIXI.Uint16Array = Array;
}

// interaction frequency
PIXI.INTERACTION_FREQUENCY = 30;
PIXI.AUTO_PREVENT_DEFAULT = true;

/**
 * @property {Number} PI_2
 * @static
 */
PIXI.PI_2 = Math.PI * 2;

/**
 * @property {Number} RAD_TO_DEG
 * @static
 */
PIXI.RAD_TO_DEG = 180 / Math.PI;

/**
 * @property {Number} DEG_TO_RAD
 * @static
 */
PIXI.DEG_TO_RAD = Math.PI / 180;

/**
 * @property {String} RETINA_PREFIX
 * @protected
 * @static
 */
PIXI.RETINA_PREFIX = "@2x";
//PIXI.SCALE_PREFIX "@x%%";

/**
 * If true the default pixi startup (console) banner message will be suppressed.
 *
 * @property {Boolean} dontSayHello
 * @default false
 * @static
 */
PIXI.dontSayHello = false;

/**
 * The default render options if none are supplied to
 * {{#crossLink "WebGLRenderer"}}{{/crossLink}} or {{#crossLink "CanvasRenderer"}}{{/crossLink}}.
 *
 * @property {Object} defaultRenderOptions
 * @property {Object} defaultRenderOptions.view=null
 * @property {Boolean} defaultRenderOptions.transparent=false
 * @property {Boolean} defaultRenderOptions.antialias=false
 * @property {Boolean} defaultRenderOptions.preserveDrawingBuffer=false
 * @property {Number} defaultRenderOptions.resolution=1
 * @property {Boolean} defaultRenderOptions.clearBeforeRender=true
 * @property {Boolean} defaultRenderOptions.autoResize=false
 * @static
 */
PIXI.defaultRenderOptions = {
    view:null,
    transparent:false,
    antialias:false,
    preserveDrawingBuffer:false,
    resolution:1,
    clearBeforeRender:true,
    autoResize:false
}

PIXI.sayHello = function (type)
{
    if(PIXI.dontSayHello)return;

    if ( navigator.userAgent.toLowerCase().indexOf('chrome') > -1 )
    {
        var args = [
            '%c %c %c Pixi.js ' + PIXI.VERSION + ' - ' + type + '  %c ' + ' %c ' + ' http://www.pixijs.com/  %c %c ♥%c♥%c♥ ',
            'background: #ff66a5',
            'background: #ff66a5',
            'color: #ff66a5; background: #030307;',
            'background: #ff66a5',
            'background: #ffc3dc',
            'background: #ff66a5',
            'color: #ff2424; background: #fff',
            'color: #ff2424; background: #fff',
            'color: #ff2424; background: #fff'
        ];

        console.log.apply(console, args);
    }
    else if (window['console'])
    {
        console.log('Pixi.js ' + PIXI.VERSION + ' - http://www.pixijs.com/');
    }

    PIXI.dontSayHello = true;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.
 *
 * @class Point
 * @constructor
 * @param x {Number} position of the point on the x axis
 * @param y {Number} position of the point on the y axis
 */
PIXI.Point = function(x, y)
{
    /**
     * @property x
     * @type Number
     * @default 0
     */
    this.x = x || 0;

    /**
     * @property y
     * @type Number
     * @default 0
     */
    this.y = y || 0;
};

/**
 * Creates a clone of this point
 *
 * @method clone
 * @return {Point} a copy of the point
 */
PIXI.Point.prototype.clone = function()
{
    return new PIXI.Point(this.x, this.y);
};

/**
 * Sets the point to a new x and y position.
 * If y is omitted, both x and y will be set to x.
 * 
 * @method set
 * @param [x=0] {Number} position of the point on the x axis
 * @param [y=0] {Number} position of the point on the y axis
 */
PIXI.Point.prototype.set = function(x, y)
{
    this.x = x || 0;
    this.y = y || ( (y !== 0) ? this.x : 0 ) ;
};

// constructor
PIXI.Point.prototype.constructor = PIXI.Point;
/**
 * @author Mat Groves http://matgroves.com/
 */

/**
 * the Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.
 *
 * @class Rectangle
 * @constructor
 * @param x {Number} The X coordinate of the upper-left corner of the rectangle
 * @param y {Number} The Y coordinate of the upper-left corner of the rectangle
 * @param width {Number} The overall width of this rectangle
 * @param height {Number} The overall height of this rectangle
 */
PIXI.Rectangle = function(x, y, width, height)
{
    /**
     * @property x
     * @type Number
     * @default 0
     */
    this.x = x || 0;

    /**
     * @property y
     * @type Number
     * @default 0
     */
    this.y = y || 0;

    /**
     * @property width
     * @type Number
     * @default 0
     */
    this.width = width || 0;

    /**
     * @property height
     * @type Number
     * @default 0
     */
    this.height = height || 0;
};

/**
 * Creates a clone of this Rectangle
 *
 * @method clone
 * @return {Rectangle} a copy of the rectangle
 */
PIXI.Rectangle.prototype.clone = function()
{
    return new PIXI.Rectangle(this.x, this.y, this.width, this.height);
};

/**
 * Checks whether the x and y coordinates given are contained within this Rectangle
 *
 * @method contains
 * @param x {Number} The X coordinate of the point to test
 * @param y {Number} The Y coordinate of the point to test
 * @return {Boolean} Whether the x/y coordinates are within this Rectangle
 */
PIXI.Rectangle.prototype.contains = function(x, y)
{
    if(this.width <= 0 || this.height <= 0)
        return false;

    var x1 = this.x;
    if(x >= x1 && x <= x1 + this.width)
    {
        var y1 = this.y;

        if(y >= y1 && y <= y1 + this.height)
        {
            return true;
        }
    }

    return false;
};

// constructor
PIXI.Rectangle.prototype.constructor = PIXI.Rectangle;

PIXI.EmptyRectangle = new PIXI.Rectangle(0,0,0,0);
/**
 * @author Adrien Brault <adrien.brault@gmail.com>
 */

/**
 * @class Polygon
 * @constructor
 * @param points* {Array(Point)|Array(Number)|Point...|Number...} This can be an array of Points that form the polygon,
 *      a flat array of numbers that will be interpreted as [x,y, x,y, ...], or the arguments passed can be
 *      all the points of the polygon e.g. `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the
 *      arguments passed can be flat x,y values e.g. `new PIXI.Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are
 *      Numbers.
 */
PIXI.Polygon = function(points)
{
    //if points isn't an array, use arguments as the array
    if(!(points instanceof Array))points = Array.prototype.slice.call(arguments);

    //if this is a flat array of numbers, convert it to points
    if(points[0] instanceof PIXI.Point)
    {
        var p = [];
        for(var i = 0, il = points.length; i < il; i++)
        {
            p.push(points[i].x, points[i].y);
        }

        points = p;
    }

    this.closed = true;
    this.points = points;
};

/**
 * Creates a clone of this polygon
 *
 * @method clone
 * @return {Polygon} a copy of the polygon
 */
PIXI.Polygon.prototype.clone = function()
{
    var points = this.points.slice();
    return new PIXI.Polygon(points);
};

/**
 * Checks whether the x and y coordinates passed to this function are contained within this polygon
 *
 * @method contains
 * @param x {Number} The X coordinate of the point to test
 * @param y {Number} The Y coordinate of the point to test
 * @return {Boolean} Whether the x/y coordinates are within this polygon
 */
PIXI.Polygon.prototype.contains = function(x, y)
{
    var inside = false;

    // use some raycasting to test hits
    // https://github.com/substack/point-in-polygon/blob/master/index.js
    var length = this.points.length / 2;

    for(var i = 0, j = length - 1; i < length; j = i++)
    {
        var xi = this.points[i * 2], yi = this.points[i * 2 + 1],
            xj = this.points[j * 2], yj = this.points[j * 2 + 1],
            intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);

        if(intersect) inside = !inside;
    }

    return inside;
};

// constructor
PIXI.Polygon.prototype.constructor = PIXI.Polygon;

/**
 * @author Chad Engler <chad@pantherdev.com>
 */

/**
 * The Circle object can be used to specify a hit area for displayObjects
 *
 * @class Circle
 * @constructor
 * @param x {Number} The X coordinate of the center of this circle
 * @param y {Number} The Y coordinate of the center of this circle
 * @param radius {Number} The radius of the circle
 */
PIXI.Circle = function(x, y, radius)
{
    /**
     * @property x
     * @type Number
     * @default 0
     */
    this.x = x || 0;

    /**
     * @property y
     * @type Number
     * @default 0
     */
    this.y = y || 0;

    /**
     * @property radius
     * @type Number
     * @default 0
     */
    this.radius = radius || 0;
};

/**
 * Creates a clone of this Circle instance
 *
 * @method clone
 * @return {Circle} a copy of the Circle
 */
PIXI.Circle.prototype.clone = function()
{
    return new PIXI.Circle(this.x, this.y, this.radius);
};

/**
 * Checks whether the x and y coordinates given are contained within this circle
 *
 * @method contains
 * @param x {Number} The X coordinate of the point to test
 * @param y {Number} The Y coordinate of the point to test
 * @return {Boolean} Whether the x/y coordinates are within this Circle
 */
PIXI.Circle.prototype.contains = function(x, y)
{
    if(this.radius <= 0)
        return false;

    var dx = (this.x - x),
        dy = (this.y - y),
        r2 = this.radius * this.radius;

    dx *= dx;
    dy *= dy;

    return (dx + dy <= r2);
};

/**
* Returns the framing rectangle of the circle as a PIXI.Rectangle object
*
* @method getBounds
* @return {Rectangle} the framing rectangle
*/
PIXI.Circle.prototype.getBounds = function()
{
    return new PIXI.Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
};

// constructor
PIXI.Circle.prototype.constructor = PIXI.Circle;

/**
 * @author Chad Engler <chad@pantherdev.com>
 */

/**
 * The Ellipse object can be used to specify a hit area for displayObjects
 *
 * @class Ellipse
 * @constructor
 * @param x {Number} The X coordinate of the center of the ellipse
 * @param y {Number} The Y coordinate of the center of the ellipse
 * @param width {Number} The half width of this ellipse
 * @param height {Number} The half height of this ellipse
 */
PIXI.Ellipse = function(x, y, width, height)
{
    /**
     * @property x
     * @type Number
     * @default 0
     */
    this.x = x || 0;

    /**
     * @property y
     * @type Number
     * @default 0
     */
    this.y = y || 0;

    /**
     * @property width
     * @type Number
     * @default 0
     */
    this.width = width || 0;

    /**
     * @property height
     * @type Number
     * @default 0
     */
    this.height = height || 0;
};

/**
 * Creates a clone of this Ellipse instance
 *
 * @method clone
 * @return {Ellipse} a copy of the ellipse
 */
PIXI.Ellipse.prototype.clone = function()
{
    return new PIXI.Ellipse(this.x, this.y, this.width, this.height);
};

/**
 * Checks whether the x and y coordinates given are contained within this ellipse
 *
 * @method contains
 * @param x {Number} The X coordinate of the point to test
 * @param y {Number} The Y coordinate of the point to test
 * @return {Boolean} Whether the x/y coords are within this ellipse
 */
PIXI.Ellipse.prototype.contains = function(x, y)
{
    if(this.width <= 0 || this.height <= 0)
        return false;

    //normalize the coords to an ellipse with center 0,0
    var normx = ((x - this.x) / this.width),
        normy = ((y - this.y) / this.height);

    normx *= normx;
    normy *= normy;

    return (normx + normy <= 1);
};

/**
* Returns the framing rectangle of the ellipse as a PIXI.Rectangle object
*
* @method getBounds
* @return {Rectangle} the framing rectangle
*/
PIXI.Ellipse.prototype.getBounds = function()
{
    return new PIXI.Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);
};

// constructor
PIXI.Ellipse.prototype.constructor = PIXI.Ellipse;

/**
 * @author Mat Groves http://matgroves.com/
 */

/**
 * The Rounded Rectangle object is an area defined by its position and has nice rounded corners, as indicated by its top-left corner point (x, y) and by its width and its height.
 *
 * @class RoundedRectangle
 * @constructor
 * @param x {Number} The X coordinate of the upper-left corner of the rounded rectangle
 * @param y {Number} The Y coordinate of the upper-left corner of the rounded rectangle
 * @param width {Number} The overall width of this rounded rectangle
 * @param height {Number} The overall height of this rounded rectangle
 * @param radius {Number} The overall radius of this corners of this rounded rectangle
 */
PIXI.RoundedRectangle = function(x, y, width, height, radius)
{
    /**
     * @property x
     * @type Number
     * @default 0
     */
    this.x = x || 0;

    /**
     * @property y
     * @type Number
     * @default 0
     */
    this.y = y || 0;

    /**
     * @property width
     * @type Number
     * @default 0
     */
    this.width = width || 0;

    /**
     * @property height
     * @type Number
     * @default 0
     */
    this.height = height || 0;

    /**
     * @property radius
     * @type Number
     * @default 20
     */
    this.radius = radius || 20;
};

/**
 * Creates a clone of this Rounded Rectangle
 *
 * @method clone
 * @return {RoundedRectangle} a copy of the rounded rectangle
 */
PIXI.RoundedRectangle.prototype.clone = function()
{
    return new PIXI.RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);
};

/**
 * Checks whether the x and y coordinates given are contained within this Rounded Rectangle
 *
 * @method contains
 * @param x {Number} The X coordinate of the point to test
 * @param y {Number} The Y coordinate of the point to test
 * @return {Boolean} Whether the x/y coordinates are within this Rounded Rectangle
 */
PIXI.RoundedRectangle.prototype.contains = function(x, y)
{
    if(this.width <= 0 || this.height <= 0)
        return false;

    var x1 = this.x;
    if(x >= x1 && x <= x1 + this.width)
    {
        var y1 = this.y;

        if(y >= y1 && y <= y1 + this.height)
        {
            return true;
        }
    }

    return false;
};

// constructor
PIXI.RoundedRectangle.prototype.constructor = PIXI.RoundedRectangle;


/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The Matrix class is now an object, which makes it a lot faster, 
 * here is a representation of it : 
 * | a | b | tx|
 * | c | d | ty|
 * | 0 | 0 | 1 |
 *
 * @class Matrix
 * @constructor
 */
PIXI.Matrix = function()
{
    /**
     * @property a
     * @type Number
     * @default 1
     */
    this.a = 1;

    /**
     * @property b
     * @type Number
     * @default 0
     */
    this.b = 0;

    /**
     * @property c
     * @type Number
     * @default 0
     */
    this.c = 0;

    /**
     * @property d
     * @type Number
     * @default 1
     */
    this.d = 1;

    /**
     * @property tx
     * @type Number
     * @default 0
     */
    this.tx = 0;

    /**
     * @property ty
     * @type Number
     * @default 0
     */
    this.ty = 0;
};

/**
 * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
 *
 * a = array[0]
 * b = array[1]
 * c = array[3]
 * d = array[4]
 * tx = array[2]
 * ty = array[5]
 *
 * @method fromArray
 * @param array {Array} The array that the matrix will be populated from.
 */
PIXI.Matrix.prototype.fromArray = function(array)
{
    this.a = array[0];
    this.b = array[1];
    this.c = array[3];
    this.d = array[4];
    this.tx = array[2];
    this.ty = array[5];
};

/**
 * Creates an array from the current Matrix object.
 *
 * @method toArray
 * @param transpose {Boolean} Whether we need to transpose the matrix or not
 * @return {Array} the newly created array which contains the matrix
 */
PIXI.Matrix.prototype.toArray = function(transpose)
{
    if(!this.array) this.array = new PIXI.Float32Array(9);
    var array = this.array;

    if(transpose)
    {
        array[0] = this.a;
        array[1] = this.b;
        array[2] = 0;
        array[3] = this.c;
        array[4] = this.d;
        array[5] = 0;
        array[6] = this.tx;
        array[7] = this.ty;
        array[8] = 1;
    }
    else
    {
        array[0] = this.a;
        array[1] = this.c;
        array[2] = this.tx;
        array[3] = this.b;
        array[4] = this.d;
        array[5] = this.ty;
        array[6] = 0;
        array[7] = 0;
        array[8] = 1;
    }

    return array;
};

/**
 * Get a new position with the current transformation applied.
 * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
 *
 * @method apply
 * @param pos {Point} The origin
 * @param [newPos] {Point} The point that the new position is assigned to (allowed to be same as input)
 * @return {Point} The new point, transformed through this matrix
 */
PIXI.Matrix.prototype.apply = function(pos, newPos)
{
    newPos = newPos || new PIXI.Point();

    newPos.x = this.a * pos.x + this.c * pos.y + this.tx;
    newPos.y = this.b * pos.x + this.d * pos.y + this.ty;

    return newPos;
};

/**
 * Get a new position with the inverse of the current transformation applied.
 * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
 *
 * @method applyInverse
 * @param pos {Point} The origin
 * @param [newPos] {Point} The point that the new position is assigned to (allowed to be same as input)
 * @return {Point} The new point, inverse-transformed through this matrix
 */
PIXI.Matrix.prototype.applyInverse = function(pos, newPos)
{
    newPos = newPos || new PIXI.Point();

    var id = 1 / (this.a * this.d + this.c * -this.b);
     
    newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;
    newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;

    return newPos;
};

/**
 * Translates the matrix on the x and y.
 * 
 * @method translate
 * @param {Number} x
 * @param {Number} y
 * @return {Matrix} This matrix. Good for chaining method calls.
 **/
PIXI.Matrix.prototype.translate = function(x, y)
{
    this.tx += x;
    this.ty += y;
    
    return this;
};

/**
 * Applies a scale transformation to the matrix.
 * 
 * @method scale
 * @param {Number} x The amount to scale horizontally
 * @param {Number} y The amount to scale vertically
 * @return {Matrix} This matrix. Good for chaining method calls.
 **/
PIXI.Matrix.prototype.scale = function(x, y)
{
    this.a *= x;
    this.d *= y;
    this.c *= x;
    this.b *= y;
    this.tx *= x;
    this.ty *= y;

    return this;
};


/**
 * Applies a rotation transformation to the matrix.
 * @method rotate
 * @param {Number} angle The angle in radians.
 * @return {Matrix} This matrix. Good for chaining method calls.
 **/
PIXI.Matrix.prototype.rotate = function(angle)
{
    var cos = Math.cos( angle );
    var sin = Math.sin( angle );

    var a1 = this.a;
    var c1 = this.c;
    var tx1 = this.tx;

    this.a = a1 * cos-this.b * sin;
    this.b = a1 * sin+this.b * cos;
    this.c = c1 * cos-this.d * sin;
    this.d = c1 * sin+this.d * cos;
    this.tx = tx1 * cos - this.ty * sin;
    this.ty = tx1 * sin + this.ty * cos;
 
    return this;
};

/**
 * Appends the given Matrix to this Matrix.
 * 
 * @method append
 * @param {Matrix} matrix
 * @return {Matrix} This matrix. Good for chaining method calls.
 */
PIXI.Matrix.prototype.append = function(matrix)
{
    var a1 = this.a;
    var b1 = this.b;
    var c1 = this.c;
    var d1 = this.d;

    this.a  = matrix.a * a1 + matrix.b * c1;
    this.b  = matrix.a * b1 + matrix.b * d1;
    this.c  = matrix.c * a1 + matrix.d * c1;
    this.d  = matrix.c * b1 + matrix.d * d1;

    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;
    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;
    
    return this;
};

/**
 * Resets this Matix to an identity (default) matrix.
 * 
 * @method identity
 * @return {Matrix} This matrix. Good for chaining method calls.
 */
PIXI.Matrix.prototype.identity = function()
{
    this.a = 1;
    this.b = 0;
    this.c = 0;
    this.d = 1;
    this.tx = 0;
    this.ty = 0;

    return this;
};

PIXI.identityMatrix = new PIXI.Matrix();

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The base class for all objects that are rendered on the screen.
 * This is an abstract class and should not be used on its own rather it should be extended.
 *
 * @class DisplayObject
 * @constructor
 */
PIXI.DisplayObject = function()
{
    /**
     * The coordinate of the object relative to the local coordinates of the parent.
     *
     * @property position
     * @type Point
     */
    this.position = new PIXI.Point();

    /**
     * The scale factor of the object.
     *
     * @property scale
     * @type Point
     */
    this.scale = new PIXI.Point(1,1);//{x:1, y:1};

    /**
     * The pivot point of the displayObject that it rotates around
     *
     * @property pivot
     * @type Point
     */
    this.pivot = new PIXI.Point(0,0);

    /**
     * The rotation of the object in radians.
     *
     * @property rotation
     * @type Number
     */
    this.rotation = 0;

    /**
     * The opacity of the object.
     *
     * @property alpha
     * @type Number
     */
    this.alpha = 1;

    /**
     * The visibility of the object.
     *
     * @property visible
     * @type Boolean
     */
    this.visible = true;

    /**
     * This is the defined area that will pick up mouse / touch events. It is null by default.
     * Setting it is a neat way of optimising the hitTest function that the interactionManager will use (as it will not need to hit test all the children)
     *
     * @property hitArea
     * @type Rectangle|Circle|Ellipse|Polygon
     */
    this.hitArea = null;

    /**
     * This is used to indicate if the displayObject should display a mouse hand cursor on rollover
     *
     * @property buttonMode
     * @type Boolean
     */
    this.buttonMode = false;

    /**
     * Can this object be rendered
     *
     * @property renderable
     * @type Boolean
     */
    this.renderable = false;

    /**
     * [read-only] The display object container that contains this display object.
     *
     * @property parent
     * @type DisplayObjectContainer
     * @readOnly
     */
    this.parent = null;

    /**
     * [read-only] The stage the display object is connected to, or undefined if it is not connected to the stage.
     *
     * @property stage
     * @type Stage
     * @readOnly
     */
    this.stage = null;

    /**
     * [read-only] The multiplied alpha of the displayObject
     *
     * @property worldAlpha
     * @type Number
     * @readOnly
     */
    this.worldAlpha = 1;

    /**
     * [read-only] Whether or not the object is interactive, do not toggle directly! use the `interactive` property
     *
     * @property _interactive
     * @type Boolean
     * @readOnly
     * @private
     */
    this._interactive = false;

    /**
     * This is the cursor that will be used when the mouse is over this object. To enable this the element must have interaction = true and buttonMode = true
     *
     * @property defaultCursor
     * @type String
     *
    */
    this.defaultCursor = 'pointer';

    /**
     * [read-only] Current transform of the object based on world (parent) factors
     *
     * @property worldTransform
     * @type Matrix
     * @readOnly
     * @private
     */
    this.worldTransform = new PIXI.Matrix();

    /**
     * cached sin rotation and cos rotation
     *
     * @property _sr
     * @type Number
     * @private
     */
    this._sr = 0;

    /**
     * cached sin rotation and cos rotation
     *
     * @property _cr
     * @type Number
     * @private
     */
    this._cr = 1;

    /**
     * The area the filter is applied to like the hitArea this is used as more of an optimisation
     * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle
     *
     * @property filterArea
     * @type Rectangle
     */
    this.filterArea = null;//new PIXI.Rectangle(0,0,1,1);

    /**
     * The original, cached bounds of the object
     *
     * @property _bounds
     * @type Rectangle
     * @private
     */
    this._bounds = new PIXI.Rectangle(0, 0, 1, 1);

    /**
     * The most up-to-date bounds of the object
     *
     * @property _currentBounds
     * @type Rectangle
     * @private
     */
    this._currentBounds = null;

    /**
     * The original, cached mask of the object
     *
     * @property _currentBounds
     * @type Rectangle
     * @private
     */
    this._mask = null;

    /**
     * Cached internal flag.
     *
     * @property _cacheAsBitmap
     * @type Boolean
     * @private
     */
    this._cacheAsBitmap = false;

    /**
     * Cached internal flag.
     *
     * @property _cacheIsDirty
     * @type Boolean
     * @private
     */
    this._cacheIsDirty = false;


    /*
     * MOUSE Callbacks
     */
    
    /**
     * A callback that is used when the users mouse rolls over the displayObject
     * @method mouseover
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the users mouse leaves the displayObject
     * @method mouseout
     * @param interactionData {InteractionData}
     */

    //Left button
    /**
     * A callback that is used when the users clicks on the displayObject with their mouse's left button
     * @method click
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user clicks the mouse's left button down over the sprite
     * @method mousedown
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user releases the mouse's left button that was over the displayObject
     * for this callback to be fired, the mouse's left button must have been pressed down over the displayObject
     * @method mouseup
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user releases the mouse's left button that was over the displayObject but is no longer over the displayObject
     * for this callback to be fired, the mouse's left button must have been pressed down over the displayObject
     * @method mouseupoutside
     * @param interactionData {InteractionData}
     */

    //Right button
    /**
     * A callback that is used when the users clicks on the displayObject with their mouse's right button
     * @method rightclick
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user clicks the mouse's right button down over the sprite
     * @method rightdown
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user releases the mouse's right button that was over the displayObject
     * for this callback to be fired the mouse's right button must have been pressed down over the displayObject
     * @method rightup
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user releases the mouse's right button that was over the displayObject but is no longer over the displayObject
     * for this callback to be fired, the mouse's right button must have been pressed down over the displayObject
     * @method rightupoutside
     * @param interactionData {InteractionData}
     */

    /*
     * TOUCH Callbacks
     */

    /**
     * A callback that is used when the users taps on the sprite with their finger
     * basically a touch version of click
     * @method tap
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user touches over the displayObject
     * @method touchstart
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user releases a touch over the displayObject
     * @method touchend
     * @param interactionData {InteractionData}
     */

    /**
     * A callback that is used when the user releases the touch that was over the displayObject
     * for this callback to be fired, The touch must have started over the sprite
     * @method touchendoutside
     * @param interactionData {InteractionData}
     */
};

// constructor
PIXI.DisplayObject.prototype.constructor = PIXI.DisplayObject;

/**
 * Indicates if the sprite will have touch and mouse interactivity. It is false by default
 *
 * @property interactive
 * @type Boolean
 * @default false
 */
Object.defineProperty(PIXI.DisplayObject.prototype, 'interactive', {
    get: function() {
        return this._interactive;
    },
    set: function(value) {
        this._interactive = value;

        // TODO more to be done here..
        // need to sort out a re-crawl!
        if(this.stage)this.stage.dirty = true;
    }
});

/**
 * [read-only] Indicates if the sprite is globally visible.
 *
 * @property worldVisible
 * @type Boolean
 */
Object.defineProperty(PIXI.DisplayObject.prototype, 'worldVisible', {
    get: function() {
        var item = this;

        do
        {
            if(!item.visible)return false;
            item = item.parent;
        }
        while(item);

        return true;
    }
});

/**
 * Sets a mask for the displayObject. A mask is an object that limits the visibility of an object to the shape of the mask applied to it.
 * In PIXI a regular mask must be a PIXI.Graphics object. This allows for much faster masking in canvas as it utilises shape clipping.
 * To remove a mask, set this property to null.
 *
 * @property mask
 * @type Graphics
 */
Object.defineProperty(PIXI.DisplayObject.prototype, 'mask', {
    get: function() {
        return this._mask;
    },
    set: function(value) {

        if(this._mask)this._mask.isMask = false;
        this._mask = value;
        if(this._mask)this._mask.isMask = true;
    }
});

/**
 * Sets the filters for the displayObject.
 * * IMPORTANT: This is a webGL only feature and will be ignored by the canvas renderer.
 * To remove filters simply set this property to 'null'
 * @property filters
 * @type Array(Filter)
 */
Object.defineProperty(PIXI.DisplayObject.prototype, 'filters', {

    get: function() {
        return this._filters;
    },

    set: function(value) {

        if(value)
        {
            // now put all the passes in one place..
            var passes = [];
            for (var i = 0; i < value.length; i++)
            {
                var filterPasses = value[i].passes;
                for (var j = 0; j < filterPasses.length; j++)
                {
                    passes.push(filterPasses[j]);
                }
            }

            // TODO change this as it is legacy
            this._filterBlock = {target:this, filterPasses:passes};
        }

        this._filters = value;
    }
});

/**
 * Set if this display object is cached as a bitmap.
 * This basically takes a snap shot of the display object as it is at that moment. It can provide a performance benefit for complex static displayObjects.
 * To remove simply set this property to 'null'
 * @property cacheAsBitmap
 * @type Boolean
 */
Object.defineProperty(PIXI.DisplayObject.prototype, 'cacheAsBitmap', {

    get: function() {
        return  this._cacheAsBitmap;
    },

    set: function(value) {

        if(this._cacheAsBitmap === value)return;

        if(value)
        {
            this._generateCachedSprite();
        }
        else
        {
            this._destroyCachedSprite();
        }

        this._cacheAsBitmap = value;
    }
});

/*
 * Updates the object transform for rendering
 *
 * @method updateTransform
 * @private
 */
PIXI.DisplayObject.prototype.updateTransform = function()
{
    // create some matrix refs for easy access
    var pt = this.parent.worldTransform;
    var wt = this.worldTransform;

    // temporary matrix variables
    var a, b, c, d, tx, ty;

    // so if rotation is between 0 then we can simplify the multiplication process..
    if(this.rotation % PIXI.PI_2)
    {
        // check to see if the rotation is the same as the previous render. This means we only need to use sin and cos when rotation actually changes
        if(this.rotation !== this.rotationCache)
        {
            this.rotationCache = this.rotation;
            this._sr = Math.sin(this.rotation);
            this._cr = Math.cos(this.rotation);
        }

        // get the matrix values of the displayobject based on its transform properties..
        a  =  this._cr * this.scale.x;
        b  =  this._sr * this.scale.x;
        c  = -this._sr * this.scale.y;
        d  =  this._cr * this.scale.y;
        tx =  this.position.x;
        ty =  this.position.y;
        
        // check for pivot.. not often used so geared towards that fact!
        if(this.pivot.x || this.pivot.y)
        {
            tx -= this.pivot.x * a + this.pivot.y * c;
            ty -= this.pivot.x * b + this.pivot.y * d;
        }

        // concat the parent matrix with the objects transform.
        wt.a  = a  * pt.a + b  * pt.c;
        wt.b  = a  * pt.b + b  * pt.d;
        wt.c  = c  * pt.a + d  * pt.c;
        wt.d  = c  * pt.b + d  * pt.d;
        wt.tx = tx * pt.a + ty * pt.c + pt.tx;
        wt.ty = tx * pt.b + ty * pt.d + pt.ty;

        
    }
    else
    {
        // lets do the fast version as we know there is no rotation..
        a  = this.scale.x;
        d  = this.scale.y;

        tx = this.position.x - this.pivot.x * a;
        ty = this.position.y - this.pivot.y * d;

        wt.a  = a  * pt.a;
        wt.b  = a  * pt.b;
        wt.c  = d  * pt.c;
        wt.d  = d  * pt.d;
        wt.tx = tx * pt.a + ty * pt.c + pt.tx;
        wt.ty = tx * pt.b + ty * pt.d + pt.ty;
    }

    // multiply the alphas..
    this.worldAlpha = this.alpha * this.parent.worldAlpha;
};

// performance increase to avoid using call.. (10x faster)
PIXI.DisplayObject.prototype.displayObjectUpdateTransform = PIXI.DisplayObject.prototype.updateTransform;

/**
 * Retrieves the bounds of the displayObject as a rectangle object
 *
 * @method getBounds
 * @param matrix {Matrix}
 * @return {Rectangle} the rectangular bounding area
 */
PIXI.DisplayObject.prototype.getBounds = function(matrix)
{
    matrix = matrix;//just to get passed js hinting (and preserve inheritance)
    return PIXI.EmptyRectangle;
};

/**
 * Retrieves the local bounds of the displayObject as a rectangle object
 *
 * @method getLocalBounds
 * @return {Rectangle} the rectangular bounding area
 */
PIXI.DisplayObject.prototype.getLocalBounds = function()
{
    return this.getBounds(PIXI.identityMatrix);///PIXI.EmptyRectangle();
};

/**
 * Sets the object's stage reference, the stage this object is connected to
 *
 * @method setStageReference
 * @param stage {Stage} the stage that the object will have as its current stage reference
 */
PIXI.DisplayObject.prototype.setStageReference = function(stage)
{
    this.stage = stage;
    if(this._interactive)this.stage.dirty = true;
};

/**
 * Useful function that returns a texture of the displayObject object that can then be used to create sprites
 * This can be quite useful if your displayObject is static / complicated and needs to be reused multiple times.
 *
 * @method generateTexture
 * @param resolution {Number} The resolution of the texture being generated
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @param renderer {CanvasRenderer|WebGLRenderer} The renderer used to generate the texture.
 * @return {Texture} a texture of the graphics object
 */
PIXI.DisplayObject.prototype.generateTexture = function(resolution, scaleMode, renderer)
{
    var bounds = this.getLocalBounds();

    var renderTexture = new PIXI.RenderTexture(bounds.width | 0, bounds.height | 0, renderer, scaleMode, resolution);
    
    PIXI.DisplayObject._tempMatrix.tx = -bounds.x;
    PIXI.DisplayObject._tempMatrix.ty = -bounds.y;
    
    renderTexture.render(this, PIXI.DisplayObject._tempMatrix);

    return renderTexture;
};

/**
 * Generates and updates the cached sprite for this object.
 *
 * @method updateCache
 */
PIXI.DisplayObject.prototype.updateCache = function()
{
    this._generateCachedSprite();
};

/**
 * Calculates the global position of the display object
 *
 * @method toGlobal
 * @param position {Point} The world origin to calculate from
 * @return {Point} A point object representing the position of this object
 */
PIXI.DisplayObject.prototype.toGlobal = function(position)
{
    // don't need to u[date the lot
    this.displayObjectUpdateTransform();
    return this.worldTransform.apply(position);
};

/**
 * Calculates the local position of the display object relative to another point
 *
 * @method toLocal
 * @param position {Point} The world origin to calculate from
 * @param [from] {DisplayObject} The DisplayObject to calculate the global position from
 * @return {Point} A point object representing the position of this object
 */
PIXI.DisplayObject.prototype.toLocal = function(position, from)
{
     // 
    if (from)
    {
        position = from.toGlobal(position);
    }

    // don't need to u[date the lot
    this.displayObjectUpdateTransform();
    return this.worldTransform.applyInverse(position);
};

/**
 * Internal method.
 *
 * @method _renderCachedSprite
 * @param renderSession {Object} The render session
 * @private
 */
PIXI.DisplayObject.prototype._renderCachedSprite = function(renderSession)
{
    this._cachedSprite.worldAlpha = this.worldAlpha;

    if(renderSession.gl)
    {
        PIXI.Sprite.prototype._renderWebGL.call(this._cachedSprite, renderSession);
    }
    else
    {
        PIXI.Sprite.prototype._renderCanvas.call(this._cachedSprite, renderSession);
    }
};

/**
 * Internal method.
 *
 * @method _generateCachedSprite
 * @private
 */
PIXI.DisplayObject.prototype._generateCachedSprite = function()
{
    this._cacheAsBitmap = false;
    var bounds = this.getLocalBounds();

    if(!this._cachedSprite)
    {
        var renderTexture = new PIXI.RenderTexture(bounds.width | 0, bounds.height | 0);//, renderSession.renderer);

        this._cachedSprite = new PIXI.Sprite(renderTexture);
        this._cachedSprite.worldTransform = this.worldTransform;
    }
    else
    {
        this._cachedSprite.texture.resize(bounds.width | 0, bounds.height | 0);
    }

    //REMOVE filter!
    var tempFilters = this._filters;
    this._filters = null;

    this._cachedSprite.filters = tempFilters;

    PIXI.DisplayObject._tempMatrix.tx = -bounds.x;
    PIXI.DisplayObject._tempMatrix.ty = -bounds.y;
    
    this._cachedSprite.texture.render(this, PIXI.DisplayObject._tempMatrix, true);

    this._cachedSprite.anchor.x = -( bounds.x / bounds.width );
    this._cachedSprite.anchor.y = -( bounds.y / bounds.height );

    this._filters = tempFilters;

    this._cacheAsBitmap = true;
};

/**
* Destroys the cached sprite.
*
* @method _destroyCachedSprite
* @private
*/
PIXI.DisplayObject.prototype._destroyCachedSprite = function()
{
    if(!this._cachedSprite)return;

    this._cachedSprite.texture.destroy(true);

    // TODO could be object pooled!
    this._cachedSprite = null;
};

/**
* Renders the object using the WebGL renderer
*
* @method _renderWebGL
* @param renderSession {RenderSession}
* @private
*/
PIXI.DisplayObject.prototype._renderWebGL = function(renderSession)
{
    // OVERWRITE;
    // this line is just here to pass jshinting :)
    renderSession = renderSession;
};

/**
* Renders the object using the Canvas renderer
*
* @method _renderCanvas
* @param renderSession {RenderSession}
* @private
*/
PIXI.DisplayObject.prototype._renderCanvas = function(renderSession)
{
    // OVERWRITE;
    // this line is just here to pass jshinting :)
    renderSession = renderSession;
};


PIXI.DisplayObject._tempMatrix = new PIXI.Matrix();

/**
 * The position of the displayObject on the x axis relative to the local coordinates of the parent.
 *
 * @property x
 * @type Number
 */
Object.defineProperty(PIXI.DisplayObject.prototype, 'x', {
    get: function() {
        return  this.position.x;
    },
    set: function(value) {
        this.position.x = value;
    }
});

/**
 * The position of the displayObject on the y axis relative to the local coordinates of the parent.
 *
 * @property y
 * @type Number
 */
Object.defineProperty(PIXI.DisplayObject.prototype, 'y', {
    get: function() {
        return  this.position.y;
    },
    set: function(value) {
        this.position.y = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A DisplayObjectContainer represents a collection of display objects.
 * It is the base class of all display objects that act as a container for other objects.
 *
 * @class DisplayObjectContainer
 * @extends DisplayObject
 * @constructor
 */
PIXI.DisplayObjectContainer = function()
{
    PIXI.DisplayObject.call( this );

    /**
     * [read-only] The array of children of this container.
     *
     * @property children
     * @type Array(DisplayObject)
     * @readOnly
     */
    this.children = [];

    // fast access to update transform..
    
};

// constructor
PIXI.DisplayObjectContainer.prototype = Object.create( PIXI.DisplayObject.prototype );
PIXI.DisplayObjectContainer.prototype.constructor = PIXI.DisplayObjectContainer;


/**
 * The width of the displayObjectContainer, setting this will actually modify the scale to achieve the value set
 *
 * @property width
 * @type Number
 */
Object.defineProperty(PIXI.DisplayObjectContainer.prototype, 'width', {
    get: function() {
        return this.scale.x * this.getLocalBounds().width;
    },
    set: function(value) {
        
        var width = this.getLocalBounds().width;

        if(width !== 0)
        {
            this.scale.x = value / width;
        }
        else
        {
            this.scale.x = 1;
        }

        
        this._width = value;
    }
});

/**
 * The height of the displayObjectContainer, setting this will actually modify the scale to achieve the value set
 *
 * @property height
 * @type Number
 */
Object.defineProperty(PIXI.DisplayObjectContainer.prototype, 'height', {
    get: function() {
        return  this.scale.y * this.getLocalBounds().height;
    },
    set: function(value) {

        var height = this.getLocalBounds().height;

        if(height !== 0)
        {
            this.scale.y = value / height ;
        }
        else
        {
            this.scale.y = 1;
        }

        this._height = value;
    }
});

/**
 * Adds a child to the container.
 *
 * @method addChild
 * @param child {DisplayObject} The DisplayObject to add to the container
 * @return {DisplayObject} The child that was added.
 */
PIXI.DisplayObjectContainer.prototype.addChild = function(child)
{
    return this.addChildAt(child, this.children.length);
};

/**
 * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
 *
 * @method addChildAt
 * @param child {DisplayObject} The child to add
 * @param index {Number} The index to place the child in
 * @return {DisplayObject} The child that was added.
 */
PIXI.DisplayObjectContainer.prototype.addChildAt = function(child, index)
{
    if(index >= 0 && index <= this.children.length)
    {
        if(child.parent)
        {
            child.parent.removeChild(child);
        }

        child.parent = this;

        this.children.splice(index, 0, child);

        if(this.stage)child.setStageReference(this.stage);

        return child;
    }
    else
    {
        throw new Error(child + 'addChildAt: The index '+ index +' supplied is out of bounds ' + this.children.length);
    }
};

/**
 * Swaps the position of 2 Display Objects within this container.
 *
 * @method swapChildren
 * @param child {DisplayObject}
 * @param child2 {DisplayObject}
 */
PIXI.DisplayObjectContainer.prototype.swapChildren = function(child, child2)
{
    if(child === child2) {
        return;
    }

    var index1 = this.getChildIndex(child);
    var index2 = this.getChildIndex(child2);

    if(index1 < 0 || index2 < 0) {
        throw new Error('swapChildren: Both the supplied DisplayObjects must be a child of the caller.');
    }

    this.children[index1] = child2;
    this.children[index2] = child;

};

/**
 * Returns the index position of a child DisplayObject instance
 *
 * @method getChildIndex
 * @param child {DisplayObject} The DisplayObject instance to identify
 * @return {Number} The index position of the child display object to identify
 */
PIXI.DisplayObjectContainer.prototype.getChildIndex = function(child)
{
    var index = this.children.indexOf(child);
    if (index === -1)
    {
        throw new Error('The supplied DisplayObject must be a child of the caller');
    }
    return index;
};

/**
 * Changes the position of an existing child in the display object container
 *
 * @method setChildIndex
 * @param child {DisplayObject} The child DisplayObject instance for which you want to change the index number
 * @param index {Number} The resulting index number for the child display object
 */
PIXI.DisplayObjectContainer.prototype.setChildIndex = function(child, index)
{
    if (index < 0 || index >= this.children.length)
    {
        throw new Error('The supplied index is out of bounds');
    }
    var currentIndex = this.getChildIndex(child);
    this.children.splice(currentIndex, 1); //remove from old position
    this.children.splice(index, 0, child); //add at new position
};

/**
 * Returns the child at the specified index
 *
 * @method getChildAt
 * @param index {Number} The index to get the child from
 * @return {DisplayObject} The child at the given index, if any.
 */
PIXI.DisplayObjectContainer.prototype.getChildAt = function(index)
{
    if (index < 0 || index >= this.children.length)
    {
        throw new Error('getChildAt: Supplied index '+ index +' does not exist in the child list, or the supplied DisplayObject must be a child of the caller');
    }
    return this.children[index];
    
};

/**
 * Removes a child from the container.
 *
 * @method removeChild
 * @param child {DisplayObject} The DisplayObject to remove
 * @return {DisplayObject} The child that was removed.
 */
PIXI.DisplayObjectContainer.prototype.removeChild = function(child)
{
    var index = this.children.indexOf( child );
    if(index === -1)return;
    
    return this.removeChildAt( index );
};

/**
 * Removes a child from the specified index position.
 *
 * @method removeChildAt
 * @param index {Number} The index to get the child from
 * @return {DisplayObject} The child that was removed.
 */
PIXI.DisplayObjectContainer.prototype.removeChildAt = function(index)
{
    var child = this.getChildAt( index );
    if(this.stage)
        child.removeStageReference();

    child.parent = undefined;
    this.children.splice( index, 1 );
    return child;
};

/**
* Removes all children from this container that are within the begin and end indexes.
*
* @method removeChildren
* @param beginIndex {Number} The beginning position. Default value is 0.
* @param endIndex {Number} The ending position. Default value is size of the container.
*/
PIXI.DisplayObjectContainer.prototype.removeChildren = function(beginIndex, endIndex)
{
    var begin = beginIndex || 0;
    var end = typeof endIndex === 'number' ? endIndex : this.children.length;
    var range = end - begin;

    if (range > 0 && range <= end)
    {
        var removed = this.children.splice(begin, range);
        for (var i = 0; i < removed.length; i++) {
            var child = removed[i];
            if(this.stage)
                child.removeStageReference();
            child.parent = undefined;
        }
        return removed;
    }
    else if (range === 0 && this.children.length === 0)
    {
        return [];
    }
    else
    {
        throw new Error( 'removeChildren: Range Error, numeric values are outside the acceptable range' );
    }
};

/*
 * Updates the transform on all children of this container for rendering
 *
 * @method updateTransform
 * @private
 */
PIXI.DisplayObjectContainer.prototype.updateTransform = function()
{
    if(!this.visible)return;

    this.displayObjectUpdateTransform();

    //PIXI.DisplayObject.prototype.updateTransform.call( this );

    if(this._cacheAsBitmap)return;

    for(var i=0,j=this.children.length; i<j; i++)
    {
        this.children[i].updateTransform();
    }
};

// performance increase to avoid using call.. (10x faster)
PIXI.DisplayObjectContainer.prototype.displayObjectContainerUpdateTransform = PIXI.DisplayObjectContainer.prototype.updateTransform;

/**
 * Retrieves the bounds of the displayObjectContainer as a rectangle. The bounds calculation takes all visible children into consideration.
 *
 * @method getBounds
 * @return {Rectangle} The rectangular bounding area
 */
PIXI.DisplayObjectContainer.prototype.getBounds = function()
{
    if(this.children.length === 0)return PIXI.EmptyRectangle;

    // TODO the bounds have already been calculated this render session so return what we have

    var minX = Infinity;
    var minY = Infinity;

    var maxX = -Infinity;
    var maxY = -Infinity;

    var childBounds;
    var childMaxX;
    var childMaxY;

    var childVisible = false;

    for(var i=0,j=this.children.length; i<j; i++)
    {
        var child = this.children[i];
        
        if(!child.visible)continue;

        childVisible = true;

        childBounds = this.children[i].getBounds();
     
        minX = minX < childBounds.x ? minX : childBounds.x;
        minY = minY < childBounds.y ? minY : childBounds.y;

        childMaxX = childBounds.width + childBounds.x;
        childMaxY = childBounds.height + childBounds.y;

        maxX = maxX > childMaxX ? maxX : childMaxX;
        maxY = maxY > childMaxY ? maxY : childMaxY;
    }

    if(!childVisible)
        return PIXI.EmptyRectangle;

    var bounds = this._bounds;

    bounds.x = minX;
    bounds.y = minY;
    bounds.width = maxX - minX;
    bounds.height = maxY - minY;

    // TODO: store a reference so that if this function gets called again in the render cycle we do not have to recalculate
    //this._currentBounds = bounds;
   
    return bounds;
};

/**
 * Retrieves the non-global local bounds of the displayObjectContainer as a rectangle. The calculation takes all visible children into consideration.
 *
 * @method getLocalBounds
 * @return {Rectangle} The rectangular bounding area
 */
PIXI.DisplayObjectContainer.prototype.getLocalBounds = function()
{
    var matrixCache = this.worldTransform;

    this.worldTransform = PIXI.identityMatrix;

    for(var i=0,j=this.children.length; i<j; i++)
    {
        this.children[i].updateTransform();
    }

    var bounds = this.getBounds();

    this.worldTransform = matrixCache;

    return bounds;
};

/**
 * Sets the containers Stage reference. This is the Stage that this object, and all of its children, is connected to.
 *
 * @method setStageReference
 * @param stage {Stage} the stage that the container will have as its current stage reference
 */
PIXI.DisplayObjectContainer.prototype.setStageReference = function(stage)
{
    this.stage = stage;
    if(this._interactive)this.stage.dirty = true;

    for(var i=0,j=this.children.length; i<j; i++)
    {
        var child = this.children[i];
        child.setStageReference(stage);
    }
};

/**
 * Removes the current stage reference from the container and all of its children.
 *
 * @method removeStageReference
 */
PIXI.DisplayObjectContainer.prototype.removeStageReference = function()
{

    for(var i=0,j=this.children.length; i<j; i++)
    {
        var child = this.children[i];
        child.removeStageReference();
    }

    if(this._interactive)this.stage.dirty = true;
    
    this.stage = null;
};

/**
* Renders the object using the WebGL renderer
*
* @method _renderWebGL
* @param renderSession {RenderSession} 
* @private
*/
PIXI.DisplayObjectContainer.prototype._renderWebGL = function(renderSession)
{
    if(!this.visible || this.alpha <= 0)return;
    
    if(this._cacheAsBitmap)
    {
        this._renderCachedSprite(renderSession);
        return;
    }
    
    var i,j;

    if(this._mask || this._filters)
    {
        
        // push filter first as we need to ensure the stencil buffer is correct for any masking
        if(this._filters)
        {
            renderSession.spriteBatch.flush();
            renderSession.filterManager.pushFilter(this._filterBlock);
        }

        if(this._mask)
        {
            renderSession.spriteBatch.stop();
            renderSession.maskManager.pushMask(this.mask, renderSession);
            renderSession.spriteBatch.start();
        }

        // simple render children!
        for(i=0,j=this.children.length; i<j; i++)
        {
            this.children[i]._renderWebGL(renderSession);
        }

        renderSession.spriteBatch.stop();

        if(this._mask)renderSession.maskManager.popMask(this._mask, renderSession);
        if(this._filters)renderSession.filterManager.popFilter();
        
        renderSession.spriteBatch.start();
    }
    else
    {
        // simple render children!
        for(i=0,j=this.children.length; i<j; i++)
        {
            this.children[i]._renderWebGL(renderSession);
        }
    }
};

/**
* Renders the object using the Canvas renderer
*
* @method _renderCanvas
* @param renderSession {RenderSession} 
* @private
*/
PIXI.DisplayObjectContainer.prototype._renderCanvas = function(renderSession)
{
    if(this.visible === false || this.alpha === 0)return;

    if(this._cacheAsBitmap)
    {

        this._renderCachedSprite(renderSession);
        return;
    }

    if(this._mask)
    {
        renderSession.maskManager.pushMask(this._mask, renderSession);
    }

    for(var i=0,j=this.children.length; i<j; i++)
    {
        var child = this.children[i];
        child._renderCanvas(renderSession);
    }

    if(this._mask)
    {
        renderSession.maskManager.popMask(renderSession);
    }
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The Sprite object is the base for all textured objects that are rendered to the screen
 *
 * @class Sprite
 * @extends DisplayObjectContainer
 * @constructor
 * @param texture {Texture} The texture for this sprite
 *
 * A sprite can be created directly from an image like this :
 * var sprite = new PIXI.Sprite.fromImage('assets/image.png');
 * yourStage.addChild(sprite);
 * then obviously don't forget to add it to the stage you have already created
 */
PIXI.Sprite = function(texture)
{
    PIXI.DisplayObjectContainer.call( this );

    /**
     * The anchor sets the origin point of the texture.
     * The default is 0,0 this means the texture's origin is the top left
     * Setting than anchor to 0.5,0.5 means the textures origin is centered
     * Setting the anchor to 1,1 would mean the textures origin points will be the bottom right corner
     *
     * @property anchor
     * @type Point
     */
    this.anchor = new PIXI.Point();

    /**
     * The texture that the sprite is using
     *
     * @property texture
     * @type Texture
     */
    this.texture = texture || PIXI.Texture.emptyTexture;
    
    /**
     * The width of the sprite (this is initially set by the texture)
     *
     * @property _width
     * @type Number
     * @private
     */
    this._width = 0;

    /**
     * The height of the sprite (this is initially set by the texture)
     *
     * @property _height
     * @type Number
     * @private
     */
    this._height = 0;

    /**
     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.
     *
     * @property tint
     * @type Number
     * @default 0xFFFFFF
     */
    this.tint = 0xFFFFFF;

    /**
     * The blend mode to be applied to the sprite. Set to PIXI.blendModes.NORMAL to remove any blend mode.
     *
     * @property blendMode
     * @type Number
     * @default PIXI.blendModes.NORMAL;
     */
    this.blendMode = PIXI.blendModes.NORMAL;

    /**
     * The shader that will be used to render the texture to the stage. Set to null to remove a current shader.
     *
     * @property shader
     * @type AbstractFilter
     * @default null
     */
    this.shader = null;

    if(this.texture.baseTexture.hasLoaded)
    {
        this.onTextureUpdate();
    }
    else
    {
        this.texture.on( 'update', this.onTextureUpdate.bind(this) );
    }

    this.renderable = true;

};

// constructor
PIXI.Sprite.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );
PIXI.Sprite.prototype.constructor = PIXI.Sprite;

/**
 * The width of the sprite, setting this will actually modify the scale to achieve the value set
 *
 * @property width
 * @type Number
 */
Object.defineProperty(PIXI.Sprite.prototype, 'width', {
    get: function() {
        return this.scale.x * this.texture.frame.width;
    },
    set: function(value) {
        this.scale.x = value / this.texture.frame.width;
        this._width = value;
    }
});

/**
 * The height of the sprite, setting this will actually modify the scale to achieve the value set
 *
 * @property height
 * @type Number
 */
Object.defineProperty(PIXI.Sprite.prototype, 'height', {
    get: function() {
        return  this.scale.y * this.texture.frame.height;
    },
    set: function(value) {
        this.scale.y = value / this.texture.frame.height;
        this._height = value;
    }
});

/**
 * Sets the texture of the sprite
 *
 * @method setTexture
 * @param texture {Texture} The PIXI texture that is displayed by the sprite
 */
PIXI.Sprite.prototype.setTexture = function(texture)
{
    this.texture = texture;
    this.cachedTint = 0xFFFFFF;
};

/**
 * When the texture is updated, this event will fire to update the scale and frame
 *
 * @method onTextureUpdate
 * @param event
 * @private
 */
PIXI.Sprite.prototype.onTextureUpdate = function()
{
    // so if _width is 0 then width was not set..
    if(this._width)this.scale.x = this._width / this.texture.frame.width;
    if(this._height)this.scale.y = this._height / this.texture.frame.height;

    //this.updateFrame = true;
};

/**
* Returns the bounds of the Sprite as a rectangle. The bounds calculation takes the worldTransform into account.
*
* @method getBounds
* @param matrix {Matrix} the transformation matrix of the sprite
* @return {Rectangle} the framing rectangle
*/
PIXI.Sprite.prototype.getBounds = function(matrix)
{
    var width = this.texture.frame.width;
    var height = this.texture.frame.height;

    var w0 = width * (1-this.anchor.x);
    var w1 = width * -this.anchor.x;

    var h0 = height * (1-this.anchor.y);
    var h1 = height * -this.anchor.y;

    var worldTransform = matrix || this.worldTransform ;

    var a = worldTransform.a;
    var b = worldTransform.b;
    var c = worldTransform.c;
    var d = worldTransform.d;
    var tx = worldTransform.tx;
    var ty = worldTransform.ty;

    var maxX = -Infinity;
    var maxY = -Infinity;

    var minX = Infinity;
    var minY = Infinity;

    if(b === 0 && c === 0)
    {
        // scale may be negative!
        if(a < 0)a *= -1;
        if(d < 0)d *= -1;

        // this means there is no rotation going on right? RIGHT?
        // if thats the case then we can avoid checking the bound values! yay         
        minX = a * w1 + tx;
        maxX = a * w0 + tx;
        minY = d * h1 + ty;
        maxY = d * h0 + ty;
    }
    else
    {
        var x1 = a * w1 + c * h1 + tx;
        var y1 = d * h1 + b * w1 + ty;

        var x2 = a * w0 + c * h1 + tx;
        var y2 = d * h1 + b * w0 + ty;

        var x3 = a * w0 + c * h0 + tx;
        var y3 = d * h0 + b * w0 + ty;

        var x4 =  a * w1 + c * h0 + tx;
        var y4 =  d * h0 + b * w1 + ty;

        minX = x1 < minX ? x1 : minX;
        minX = x2 < minX ? x2 : minX;
        minX = x3 < minX ? x3 : minX;
        minX = x4 < minX ? x4 : minX;

        minY = y1 < minY ? y1 : minY;
        minY = y2 < minY ? y2 : minY;
        minY = y3 < minY ? y3 : minY;
        minY = y4 < minY ? y4 : minY;

        maxX = x1 > maxX ? x1 : maxX;
        maxX = x2 > maxX ? x2 : maxX;
        maxX = x3 > maxX ? x3 : maxX;
        maxX = x4 > maxX ? x4 : maxX;

        maxY = y1 > maxY ? y1 : maxY;
        maxY = y2 > maxY ? y2 : maxY;
        maxY = y3 > maxY ? y3 : maxY;
        maxY = y4 > maxY ? y4 : maxY;
    }

    var bounds = this._bounds;

    bounds.x = minX;
    bounds.width = maxX - minX;

    bounds.y = minY;
    bounds.height = maxY - minY;

    // store a reference so that if this function gets called again in the render cycle we do not have to recalculate
    this._currentBounds = bounds;

    return bounds;
};

/**
* Renders the object using the WebGL renderer
*
* @method _renderWebGL
* @param renderSession {RenderSession}
* @private
*/
PIXI.Sprite.prototype._renderWebGL = function(renderSession)
{
    // if the sprite is not visible or the alpha is 0 then no need to render this element
    if(!this.visible || this.alpha <= 0)return;

    var i,j;

    // do a quick check to see if this element has a mask or a filter.
    if(this._mask || this._filters)
    {
        var spriteBatch =  renderSession.spriteBatch;

        // push filter first as we need to ensure the stencil buffer is correct for any masking
        if(this._filters)
        {
            spriteBatch.flush();
            renderSession.filterManager.pushFilter(this._filterBlock);
        }

        if(this._mask)
        {
            spriteBatch.stop();
            renderSession.maskManager.pushMask(this.mask, renderSession);
            spriteBatch.start();
        }

        // add this sprite to the batch
        spriteBatch.render(this);

        // now loop through the children and make sure they get rendered
        for(i=0,j=this.children.length; i<j; i++)
        {
            this.children[i]._renderWebGL(renderSession);
        }

        // time to stop the sprite batch as either a mask element or a filter draw will happen next
        spriteBatch.stop();

        if(this._mask)renderSession.maskManager.popMask(this._mask, renderSession);
        if(this._filters)renderSession.filterManager.popFilter();

        spriteBatch.start();
    }
    else
    {
        renderSession.spriteBatch.render(this);

        // simple render children!
        for(i=0,j=this.children.length; i<j; i++)
        {
            this.children[i]._renderWebGL(renderSession);
        }

    }
};

/**
* Renders the object using the Canvas renderer
*
* @method _renderCanvas
* @param renderSession {RenderSession}
* @private
*/
PIXI.Sprite.prototype._renderCanvas = function(renderSession)
{
    // If the sprite is not visible or the alpha is 0 then no need to render this element
    if (this.visible === false || this.alpha === 0 || this.texture.crop.width <= 0 || this.texture.crop.height <= 0) return;

    if (this.blendMode !== renderSession.currentBlendMode)
    {
        renderSession.currentBlendMode = this.blendMode;
        renderSession.context.globalCompositeOperation = PIXI.blendModesCanvas[renderSession.currentBlendMode];
    }

    if (this._mask)
    {
        renderSession.maskManager.pushMask(this._mask, renderSession);
    }

    //  Ignore null sources
    if (this.texture.valid)
    {
        var resolution = this.texture.baseTexture.resolution / renderSession.resolution;

        renderSession.context.globalAlpha = this.worldAlpha;

         //  If smoothingEnabled is supported and we need to change the smoothing property for this texture
        if (renderSession.smoothProperty && renderSession.scaleMode !== this.texture.baseTexture.scaleMode)
        {
            renderSession.scaleMode = this.texture.baseTexture.scaleMode;
            renderSession.context[renderSession.smoothProperty] = (renderSession.scaleMode === PIXI.scaleModes.LINEAR);
        }

        //  If the texture is trimmed we offset by the trim x/y, otherwise we use the frame dimensions
        var dx = (this.texture.trim) ? this.texture.trim.x - this.anchor.x * this.texture.trim.width : this.anchor.x * -this.texture.frame.width;
        var dy = (this.texture.trim) ? this.texture.trim.y - this.anchor.y * this.texture.trim.height : this.anchor.y * -this.texture.frame.height;

        //  Allow for pixel rounding
        if (renderSession.roundPixels)
        {
            renderSession.context.setTransform(
                this.worldTransform.a,
                this.worldTransform.b,
                this.worldTransform.c,
                this.worldTransform.d,
                (this.worldTransform.tx * renderSession.resolution) | 0,
                (this.worldTransform.ty * renderSession.resolution) | 0);

            dx = dx | 0;
            dy = dy | 0;
        }
        else
        {
            renderSession.context.setTransform(
                this.worldTransform.a,
                this.worldTransform.b,
                this.worldTransform.c,
                this.worldTransform.d,
                this.worldTransform.tx * renderSession.resolution,
                this.worldTransform.ty * renderSession.resolution);
        }

       

     
        if (this.tint !== 0xFFFFFF)
        {
            if (this.cachedTint !== this.tint)
            {
                this.cachedTint = this.tint;

                //  TODO clean up caching - how to clean up the caches?
                this.tintedTexture = PIXI.CanvasTinter.getTintedTexture(this, this.tint);
            }

            renderSession.context.drawImage(
                                this.tintedTexture,
                                0,
                                0,
                                this.texture.crop.width,
                                this.texture.crop.height,
                                dx / resolution,
                                dy / resolution,
                                this.texture.crop.width / resolution,
                                this.texture.crop.height / resolution);
        }
        else
        {
            renderSession.context.drawImage(
                                this.texture.baseTexture.source,
                                this.texture.crop.x,
                                this.texture.crop.y,
                                this.texture.crop.width,
                                this.texture.crop.height,
                                dx / resolution,
                                dy / resolution,
                                this.texture.crop.width / resolution,
                                this.texture.crop.height / resolution);
        }
    }

    // OVERWRITE
    for (var i = 0, j = this.children.length; i < j; i++)
    {
        this.children[i]._renderCanvas(renderSession);
    }

    if (this._mask)
    {
        renderSession.maskManager.popMask(renderSession);
    }
};

// some helper functions..

/**
 *
 * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId
 * The frame ids are created when a Texture packer file has been loaded
 *
 * @method fromFrame
 * @static
 * @param frameId {String} The frame Id of the texture in the cache
 * @return {Sprite} A new Sprite using a texture from the texture cache matching the frameId
 */
PIXI.Sprite.fromFrame = function(frameId)
{
    var texture = PIXI.TextureCache[frameId];
    if(!texture) throw new Error('The frameId "' + frameId + '" does not exist in the texture cache' + this);
    return new PIXI.Sprite(texture);
};

/**
 *
 * Helper function that creates a sprite that will contain a texture based on an image url
 * If the image is not in the texture cache it will be loaded
 *
 * @method fromImage
 * @static
 * @param imageId {String} The image url of the texture
 * @return {Sprite} A new Sprite using a texture from the texture cache matching the image id
 */
PIXI.Sprite.fromImage = function(imageId, crossorigin, scaleMode)
{
    var texture = PIXI.Texture.fromImage(imageId, crossorigin, scaleMode);
    return new PIXI.Sprite(texture);
};

/**
 * @author Mat Groves http://matgroves.com/
 */

/**
 * The SpriteBatch class is a really fast version of the DisplayObjectContainer 
 * built solely for speed, so use when you need a lot of sprites or particles.
 * And it's extremely easy to use : 

    var container = new PIXI.SpriteBatch();
 
    stage.addChild(container);
 
    for(var i  = 0; i < 100; i++)
    {
        var sprite = new PIXI.Sprite.fromImage("myImage.png");
        container.addChild(sprite);
    }
 * And here you have a hundred sprites that will be renderer at the speed of light
 *
 * @class SpriteBatch
 * @constructor
 * @param texture {Texture}
 */

//TODO RENAME to PARTICLE CONTAINER?
PIXI.SpriteBatch = function(texture)
{
    PIXI.DisplayObjectContainer.call( this);

    this.textureThing = texture;

    this.ready = false;
};

PIXI.SpriteBatch.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);
PIXI.SpriteBatch.prototype.constructor = PIXI.SpriteBatch;

/*
 * Initialises the spriteBatch
 *
 * @method initWebGL
 * @param gl {WebGLContext} the current WebGL drawing context
 */
PIXI.SpriteBatch.prototype.initWebGL = function(gl)
{
    // TODO only one needed for the whole engine really?
    this.fastSpriteBatch = new PIXI.WebGLFastSpriteBatch(gl);

    this.ready = true;
};

/*
 * Updates the object transform for rendering
 *
 * @method updateTransform
 * @private
 */
PIXI.SpriteBatch.prototype.updateTransform = function()
{
    // TODO don't need to!
    this.displayObjectUpdateTransform();
    //  PIXI.DisplayObjectContainer.prototype.updateTransform.call( this );
};

/**
* Renders the object using the WebGL renderer
*
* @method _renderWebGL
* @param renderSession {RenderSession} 
* @private
*/
PIXI.SpriteBatch.prototype._renderWebGL = function(renderSession)
{
    if(!this.visible || this.alpha <= 0 || !this.children.length)return;

    if(!this.ready)this.initWebGL( renderSession.gl );
    
    renderSession.spriteBatch.stop();
    
    renderSession.shaderManager.setShader(renderSession.shaderManager.fastShader);
    
    this.fastSpriteBatch.begin(this, renderSession);
    this.fastSpriteBatch.render(this);

    renderSession.spriteBatch.start();
 
};

/**
* Renders the object using the Canvas renderer
*
* @method _renderCanvas
* @param renderSession {RenderSession} 
* @private
*/
PIXI.SpriteBatch.prototype._renderCanvas = function(renderSession)
{
    if(!this.visible || this.alpha <= 0 || !this.children.length)return;
    
    var context = renderSession.context;
    context.globalAlpha = this.worldAlpha;

    this.displayObjectUpdateTransform();

    var transform = this.worldTransform;
    // alow for trimming
       
    var isRotated = true;

    for (var i = 0; i < this.children.length; i++) {
       
        var child = this.children[i];

        if(!child.visible)continue;

        var texture = child.texture;
        var frame = texture.frame;

        context.globalAlpha = this.worldAlpha * child.alpha;

        if(child.rotation % (Math.PI * 2) === 0)
        {
            if(isRotated)
            {
                context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
                isRotated = false;
            }

            // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call
            context.drawImage(texture.baseTexture.source,
                                 frame.x,
                                 frame.y,
                                 frame.width,
                                 frame.height,
                                 ((child.anchor.x) * (-frame.width * child.scale.x) + child.position.x  + 0.5) | 0,
                                 ((child.anchor.y) * (-frame.height * child.scale.y) + child.position.y  + 0.5) | 0,
                                 frame.width * child.scale.x,
                                 frame.height * child.scale.y);
        }
        else
        {
            if(!isRotated)isRotated = true;
    
            child.displayObjectUpdateTransform();
           
            var childTransform = child.worldTransform;

            // allow for trimming
           
            if (renderSession.roundPixels)
            {
                context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx | 0, childTransform.ty | 0);
            }
            else
            {
                context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx, childTransform.ty);
            }

            context.drawImage(texture.baseTexture.source,
                                 frame.x,
                                 frame.y,
                                 frame.width,
                                 frame.height,
                                 ((child.anchor.x) * (-frame.width) + 0.5) | 0,
                                 ((child.anchor.y) * (-frame.height) + 0.5) | 0,
                                 frame.width,
                                 frame.height);
           

        }

       // context.restore();
    }

//    context.restore();
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A MovieClip is a simple way to display an animation depicted by a list of textures.
 *
 * @class MovieClip
 * @extends Sprite
 * @constructor
 * @param textures {Array(Texture)} an array of {Texture} objects that make up the animation
 */
PIXI.MovieClip = function(textures)
{
    PIXI.Sprite.call(this, textures[0]);

    /**
     * The array of textures that make up the animation
     *
     * @property textures
     * @type Array(Texture)
     */
    this.textures = textures;

    /**
     * The speed that the MovieClip will play at. Higher is faster, lower is slower
     *
     * @property animationSpeed
     * @type Number
     * @default 1
     */
    this.animationSpeed = 1;

    /**
     * Whether or not the movie clip repeats after playing.
     *
     * @property loop
     * @type Boolean
     * @default true
     */
    this.loop = true;

    /**
     * Function to call when a MovieClip finishes playing
     *
     * @property onComplete
     * @type Function
     */
    this.onComplete = null;

    /**
     * [read-only] The MovieClips current frame index (this may not have to be a whole number)
     *
     * @property currentFrame
     * @type Number
     * @default 0
     * @readOnly
     */
    this.currentFrame = 0;

    /**
     * [read-only] Indicates if the MovieClip is currently playing
     *
     * @property playing
     * @type Boolean
     * @readOnly
     */
    this.playing = false;
};

// constructor
PIXI.MovieClip.prototype = Object.create( PIXI.Sprite.prototype );
PIXI.MovieClip.prototype.constructor = PIXI.MovieClip;

/**
* [read-only] totalFrames is the total number of frames in the MovieClip. This is the same as number of textures
* assigned to the MovieClip.
*
* @property totalFrames
* @type Number
* @default 0
* @readOnly
*/
Object.defineProperty( PIXI.MovieClip.prototype, 'totalFrames', {
    get: function() {

        return this.textures.length;
    }
});

/**
 * Stops the MovieClip
 *
 * @method stop
 */
PIXI.MovieClip.prototype.stop = function()
{
    this.playing = false;
};

/**
 * Plays the MovieClip
 *
 * @method play
 */
PIXI.MovieClip.prototype.play = function()
{
    this.playing = true;
};

/**
 * Stops the MovieClip and goes to a specific frame
 *
 * @method gotoAndStop
 * @param frameNumber {Number} frame index to stop at
 */
PIXI.MovieClip.prototype.gotoAndStop = function(frameNumber)
{
    this.playing = false;
    this.currentFrame = frameNumber;
    var round = (this.currentFrame + 0.5) | 0;
    this.setTexture(this.textures[round % this.textures.length]);
};

/**
 * Goes to a specific frame and begins playing the MovieClip
 *
 * @method gotoAndPlay
 * @param frameNumber {Number} frame index to start at
 */
PIXI.MovieClip.prototype.gotoAndPlay = function(frameNumber)
{
    this.currentFrame = frameNumber;
    this.playing = true;
};

/*
 * Updates the object transform for rendering
 *
 * @method updateTransform
 * @private
 */
PIXI.MovieClip.prototype.updateTransform = function()
{
    this.displayObjectContainerUpdateTransform();

    if(!this.playing)return;

    this.currentFrame += this.animationSpeed;

    var round = (this.currentFrame + 0.5) | 0;

    this.currentFrame = this.currentFrame % this.textures.length;

    if(this.loop || round < this.textures.length)
    {
        this.setTexture(this.textures[round % this.textures.length]);
    }
    else if(round >= this.textures.length)
    {
        this.gotoAndStop(this.textures.length - 1);
        if(this.onComplete)
        {
            this.onComplete();
        }
    }
};

/**
 * A short hand way of creating a movieclip from an array of frame ids
 *
 * @static
 * @method fromFrames
 * @param frames {Array} the array of frames ids the movieclip will use as its texture frames
 */
PIXI.MovieClip.fromFrames = function(frames)
{
    var textures = [];

    for (var i = 0; i < frames.length; i++)
    {
        textures.push(new PIXI.Texture.fromFrame(frames[i]));
    }

    return new PIXI.MovieClip(textures);
};

/**
 * A short hand way of creating a movieclip from an array of image ids
 *
 * @static
 * @method fromImages
 * @param frames {Array} the array of image ids the movieclip will use as its texture frames
 */
PIXI.MovieClip.fromImages = function(images)
{
    var textures = [];

    for (var i = 0; i < images.length; i++)
    {
        textures.push(new PIXI.Texture.fromImage(images[i]));
    }

    return new PIXI.MovieClip(textures);
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A target and pass info object for filters.
 * 
 * @class FilterBlock
 * @constructor
 */
PIXI.FilterBlock = function()
{
    /**
     * The visible state of this FilterBlock.
     *
     * @property visible
     * @type Boolean
     */
    this.visible = true;

    /**
     * The renderable state of this FilterBlock.
     *
     * @property renderable
     * @type Boolean
     */
    this.renderable = true;
};

PIXI.FilterBlock.prototype.constructor = PIXI.FilterBlock;

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 * Modified by Tom Slezakowski http://www.tomslezakowski.com @TomSlezakowski (24/03/2014) - Added dropShadowColor.
 */

/**
 * A Text Object will create a line or multiple lines of text. To split a line you can use '\n' in your text string,
 * or add a wordWrap property set to true and and wordWrapWidth property with a value in the style object.
 *
 * @class Text
 * @extends Sprite
 * @constructor
 * @param text {String} The copy that you would like the text to display
 * @param [style] {Object} The style parameters
 * @param [style.font] {String} default 'bold 20px Arial' The style and size of the font
 * @param [style.fill='black'] {String|Number} A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'
 * @param [style.align='left'] {String} Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text
 * @param [style.stroke] {String|Number} A canvas fillstyle that will be used on the text stroke e.g 'blue', '#FCFF00'
 * @param [style.strokeThickness=0] {Number} A number that represents the thickness of the stroke. Default is 0 (no stroke)
 * @param [style.wordWrap=false] {Boolean} Indicates if word wrap should be used
 * @param [style.wordWrapWidth=100] {Number} The width at which text will wrap, it needs wordWrap to be set to true
 * @param [style.dropShadow=false] {Boolean} Set a drop shadow for the text
 * @param [style.dropShadowColor='#000000'] {String} A fill style to be used on the dropshadow e.g 'red', '#00FF00'
 * @param [style.dropShadowAngle=Math.PI/4] {Number} Set a angle of the drop shadow
 * @param [style.dropShadowDistance=5] {Number} Set a distance of the drop shadow
 */
PIXI.Text = function(text, style)
{
    /**
     * The canvas element that everything is drawn to
     *
     * @property canvas
     * @type HTMLCanvasElement
     */
    this.canvas = document.createElement('canvas');

    /**
     * The canvas 2d context that everything is drawn with
     * @property context
     * @type HTMLCanvasElement
     */
    this.context = this.canvas.getContext('2d');

    /**
     * The resolution of the canvas.
     * @property resolution
     * @type Number
     */
    this.resolution = 1;

    PIXI.Sprite.call(this, PIXI.Texture.fromCanvas(this.canvas));

    this.setText(text);
    this.setStyle(style);

};

// constructor
PIXI.Text.prototype = Object.create(PIXI.Sprite.prototype);
PIXI.Text.prototype.constructor = PIXI.Text;

/**
 * The width of the Text, setting this will actually modify the scale to achieve the value set
 *
 * @property width
 * @type Number
 */
Object.defineProperty(PIXI.Text.prototype, 'width', {
    get: function() {

        if(this.dirty)
        {
            this.updateText();
            this.dirty = false;
        }


        return this.scale.x * this.texture.frame.width;
    },
    set: function(value) {
        this.scale.x = value / this.texture.frame.width;
        this._width = value;
    }
});

/**
 * The height of the Text, setting this will actually modify the scale to achieve the value set
 *
 * @property height
 * @type Number
 */
Object.defineProperty(PIXI.Text.prototype, 'height', {
    get: function() {

        if(this.dirty)
        {
            this.updateText();
            this.dirty = false;
        }


        return  this.scale.y * this.texture.frame.height;
    },
    set: function(value) {
        this.scale.y = value / this.texture.frame.height;
        this._height = value;
    }
});

/**
 * Set the style of the text
 *
 * @method setStyle
 * @param [style] {Object} The style parameters
 * @param [style.font='bold 20pt Arial'] {String} The style and size of the font
 * @param [style.fill='black'] {Object} A canvas fillstyle that will be used on the text eg 'red', '#00FF00'
 * @param [style.align='left'] {String} Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text
 * @param [style.stroke='black'] {String} A canvas fillstyle that will be used on the text stroke eg 'blue', '#FCFF00'
 * @param [style.strokeThickness=0] {Number} A number that represents the thickness of the stroke. Default is 0 (no stroke)
 * @param [style.wordWrap=false] {Boolean} Indicates if word wrap should be used
 * @param [style.wordWrapWidth=100] {Number} The width at which text will wrap
 * @param [style.dropShadow=false] {Boolean} Set a drop shadow for the text
 * @param [style.dropShadowColor='#000000'] {String} A fill style to be used on the dropshadow e.g 'red', '#00FF00'
 * @param [style.dropShadowAngle=Math.PI/4] {Number} Set a angle of the drop shadow
 * @param [style.dropShadowDistance=5] {Number} Set a distance of the drop shadow
 */
PIXI.Text.prototype.setStyle = function(style)
{
    style = style || {};
    style.font = style.font || 'bold 20pt Arial';
    style.fill = style.fill || 'black';
    style.align = style.align || 'left';
    style.stroke = style.stroke || 'black'; //provide a default, see: https://github.com/GoodBoyDigital/pixi.js/issues/136
    style.strokeThickness = style.strokeThickness || 0;
    style.wordWrap = style.wordWrap || false;
    style.wordWrapWidth = style.wordWrapWidth || 100;
    
    style.dropShadow = style.dropShadow || false;
    style.dropShadowAngle = style.dropShadowAngle || Math.PI / 6;
    style.dropShadowDistance = style.dropShadowDistance || 4;
    style.dropShadowColor = style.dropShadowColor || 'black';

    this.style = style;
    this.dirty = true;
};

/**
 * Set the copy for the text object. To split a line you can use '\n'.
 *
 * @method setText
 * @param text {String} The copy that you would like the text to display
 */
PIXI.Text.prototype.setText = function(text)
{
    this.text = text.toString() || ' ';
    this.dirty = true;
};

/**
 * Renders text and updates it when needed
 *
 * @method updateText
 * @private
 */
PIXI.Text.prototype.updateText = function()
{
    this.texture.baseTexture.resolution = this.resolution;

    this.context.font = this.style.font;

    var outputText = this.text;

    // word wrap
    // preserve original text
    if(this.style.wordWrap)outputText = this.wordWrap(this.text);

    //split text into lines
    var lines = outputText.split(/(?:\r\n|\r|\n)/);

    //calculate text width
    var lineWidths = [];
    var maxLineWidth = 0;
    var fontProperties = this.determineFontProperties(this.style.font);
    for (var i = 0; i < lines.length; i++)
    {
        var lineWidth = this.context.measureText(lines[i]).width;
        lineWidths[i] = lineWidth;
        maxLineWidth = Math.max(maxLineWidth, lineWidth);
    }

    var width = maxLineWidth + this.style.strokeThickness;
    if(this.style.dropShadow)width += this.style.dropShadowDistance;

    this.canvas.width = ( width + this.context.lineWidth ) * this.resolution;
    
    //calculate text height
    var lineHeight = fontProperties.fontSize + this.style.strokeThickness;
 
    var height = lineHeight * lines.length;
    if(this.style.dropShadow)height += this.style.dropShadowDistance;

    this.canvas.height = height * this.resolution;

    this.context.scale( this.resolution, this.resolution);

    if(navigator.isCocoonJS) this.context.clearRect(0,0,this.canvas.width,this.canvas.height);
    
    // used for debugging..
    //this.context.fillStyle ="#FF0000"
    //this.context.fillRect(0, 0, this.canvas.width,this.canvas.height);

    this.context.font = this.style.font;
    this.context.strokeStyle = this.style.stroke;
    this.context.lineWidth = this.style.strokeThickness;
    this.context.textBaseline = 'alphabetic';
    //this.context.lineJoin = 'round';

    var linePositionX;
    var linePositionY;

    if(this.style.dropShadow)
    {
        this.context.fillStyle = this.style.dropShadowColor;

        var xShadowOffset = Math.sin(this.style.dropShadowAngle) * this.style.dropShadowDistance;
        var yShadowOffset = Math.cos(this.style.dropShadowAngle) * this.style.dropShadowDistance;

        for (i = 0; i < lines.length; i++)
        {
            linePositionX = this.style.strokeThickness / 2;
            linePositionY = (this.style.strokeThickness / 2 + i * lineHeight) + fontProperties.ascent;

            if(this.style.align === 'right')
            {
                linePositionX += maxLineWidth - lineWidths[i];
            }
            else if(this.style.align === 'center')
            {
                linePositionX += (maxLineWidth - lineWidths[i]) / 2;
            }

            if(this.style.fill)
            {
                this.context.fillText(lines[i], linePositionX + xShadowOffset, linePositionY + yShadowOffset);
            }

          //  if(dropShadow)
        }
    }

    //set canvas text styles
    this.context.fillStyle = this.style.fill;
    
    //draw lines line by line
    for (i = 0; i < lines.length; i++)
    {
        linePositionX = this.style.strokeThickness / 2;
        linePositionY = (this.style.strokeThickness / 2 + i * lineHeight) + fontProperties.ascent;

        if(this.style.align === 'right')
        {
            linePositionX += maxLineWidth - lineWidths[i];
        }
        else if(this.style.align === 'center')
        {
            linePositionX += (maxLineWidth - lineWidths[i]) / 2;
        }

        if(this.style.stroke && this.style.strokeThickness)
        {
            this.context.strokeText(lines[i], linePositionX, linePositionY);
        }

        if(this.style.fill)
        {
            this.context.fillText(lines[i], linePositionX, linePositionY);
        }

      //  if(dropShadow)
    }

    this.updateTexture();
};

/**
 * Updates texture size based on canvas size
 *
 * @method updateTexture
 * @private
 */
PIXI.Text.prototype.updateTexture = function()
{
    this.texture.baseTexture.width = this.canvas.width;
    this.texture.baseTexture.height = this.canvas.height;
    this.texture.crop.width = this.texture.frame.width = this.canvas.width;
    this.texture.crop.height = this.texture.frame.height = this.canvas.height;

    this._width = this.canvas.width;
    this._height = this.canvas.height;

    // update the dirty base textures
    this.texture.baseTexture.dirty();
};

/**
* Renders the object using the WebGL renderer
*
* @method _renderWebGL
* @param renderSession {RenderSession} 
* @private
*/
PIXI.Text.prototype._renderWebGL = function(renderSession)
{
    if(this.dirty)
    {
        this.resolution = renderSession.resolution;

        this.updateText();
        this.dirty = false;
    }

    PIXI.Sprite.prototype._renderWebGL.call(this, renderSession);
};

/**
* Renders the object using the Canvas renderer
*
* @method _renderCanvas
* @param renderSession {RenderSession} 
* @private
*/
PIXI.Text.prototype._renderCanvas = function(renderSession)
{
    if(this.dirty)
    {
        this.resolution = renderSession.resolution;

        this.updateText();
        this.dirty = false;
    }
     
    PIXI.Sprite.prototype._renderCanvas.call(this, renderSession);
};

/**
* Calculates the ascent, descent and fontSize of a given fontStyle
*
* @method determineFontProperties
* @param fontStyle {Object}
* @private
*/
PIXI.Text.prototype.determineFontProperties = function(fontStyle)
{
    var properties = PIXI.Text.fontPropertiesCache[fontStyle];

    if(!properties)
    {
        properties = {};
        
        var canvas = PIXI.Text.fontPropertiesCanvas;
        var context = PIXI.Text.fontPropertiesContext;

        context.font = fontStyle;

        var width = Math.ceil(context.measureText('|Mq').width);
        var baseline = Math.ceil(context.measureText('M').width);
        var height = 2 * baseline;

        baseline = baseline * 1.4 | 0;

        canvas.width = width;
        canvas.height = height;

        context.fillStyle = '#f00';
        context.fillRect(0, 0, width, height);

        context.font = fontStyle;

        context.textBaseline = 'alphabetic';
        context.fillStyle = '#000';
        context.fillText('|MÉq', 0, baseline);

        var imagedata = context.getImageData(0, 0, width, height).data;
        var pixels = imagedata.length;
        var line = width * 4;

        var i, j;

        var idx = 0;
        var stop = false;

        // ascent. scan from top to bottom until we find a non red pixel
        for(i = 0; i < baseline; i++)
        {
            for(j = 0; j < line; j += 4)
            {
                if(imagedata[idx + j] !== 255)
                {
                    stop = true;
                    break;
                }
            }
            if(!stop)
            {
                idx += line;
            }
            else
            {
                break;
            }
        }

        properties.ascent = baseline - i;

        idx = pixels - line;
        stop = false;

        // descent. scan from bottom to top until we find a non red pixel
        for(i = height; i > baseline; i--)
        {
            for(j = 0; j < line; j += 4)
            {
                if(imagedata[idx + j] !== 255)
                {
                    stop = true;
                    break;
                }
            }
            if(!stop)
            {
                idx -= line;
            }
            else
            {
                break;
            }
        }

        properties.descent = i - baseline;
        //TODO might need a tweak. kind of a temp fix!
        properties.descent += 6;
        properties.fontSize = properties.ascent + properties.descent;

        PIXI.Text.fontPropertiesCache[fontStyle] = properties;
    }

    return properties;
};

/**
 * Applies newlines to a string to have it optimally fit into the horizontal
 * bounds set by the Text object's wordWrapWidth property.
 *
 * @method wordWrap
 * @param text {String}
 * @private
 */
PIXI.Text.prototype.wordWrap = function(text)
{
    // Greedy wrapping algorithm that will wrap words as the line grows longer
    // than its horizontal bounds.
    var result = '';
    var lines = text.split('\n');
    for (var i = 0; i < lines.length; i++)
    {
        var spaceLeft = this.style.wordWrapWidth;
        var words = lines[i].split(' ');
        for (var j = 0; j < words.length; j++)
        {
            var wordWidth = this.context.measureText(words[j]).width;
            var wordWidthWithSpace = wordWidth + this.context.measureText(' ').width;
            if(j === 0 || wordWidthWithSpace > spaceLeft)
            {
                // Skip printing the newline if it's the first word of the line that is
                // greater than the word wrap width.
                if(j > 0)
                {
                    result += '\n';
                }
                result += words[j];
                spaceLeft = this.style.wordWrapWidth - wordWidth;
            }
            else
            {
                spaceLeft -= wordWidthWithSpace;
                result += ' ' + words[j];
            }
        }

        if (i < lines.length-1)
        {
            result += '\n';
        }
    }
    return result;
};

/**
* Returns the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.
*
* @method getBounds
* @param matrix {Matrix} the transformation matrix of the Text
* @return {Rectangle} the framing rectangle
*/
PIXI.Text.prototype.getBounds = function(matrix)
{
    if(this.dirty)
    {
        this.updateText();
        this.dirty = false;
    }

    return PIXI.Sprite.prototype.getBounds.call(this, matrix);
};

/**
 * Destroys this text object.
 *
 * @method destroy
 * @param destroyBaseTexture {Boolean} whether to destroy the base texture as well
 */
PIXI.Text.prototype.destroy = function(destroyBaseTexture)
{
    // make sure to reset the the context and canvas.. dont want this hanging around in memory!
    this.context = null;
    this.canvas = null;

    this.texture.destroy(destroyBaseTexture === undefined ? true : destroyBaseTexture);
};

PIXI.Text.fontPropertiesCache = {};
PIXI.Text.fontPropertiesCanvas = document.createElement('canvas');
PIXI.Text.fontPropertiesContext = PIXI.Text.fontPropertiesCanvas.getContext('2d');

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A BitmapText object will create a line or multiple lines of text using bitmap font. To split a line you can use '\n', '\r' or '\r\n' in your string.
 * You can generate the fnt files using
 * http://www.angelcode.com/products/bmfont/ for windows or
 * http://www.bmglyph.com/ for mac.
 *
 * @class BitmapText
 * @extends DisplayObjectContainer
 * @constructor
 * @param text {String} The copy that you would like the text to display
 * @param style {Object} The style parameters
 * @param style.font {String} The size (optional) and bitmap font id (required) eq 'Arial' or '20px Arial' (must have loaded previously)
 * @param [style.align='left'] {String} Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text
 */
PIXI.BitmapText = function(text, style)
{
    PIXI.DisplayObjectContainer.call(this);

    /**
     * [read-only] The width of the overall text, different from fontSize,
     * which is defined in the style object
     *
     * @property textWidth
     * @type Number
     * @readOnly
     */
    this.textWidth = 0;

    /**
     * [read-only] The height of the overall text, different from fontSize,
     * which is defined in the style object
     *
     * @property textHeight
     * @type Number
     * @readOnly
     */
    this.textHeight = 0;

    /**
     * @property _pool
     * @type Array
     * @private
     */
    this._pool = [];

    this.setText(text);
    this.setStyle(style);
    this.updateText();

    /**
     * The dirty state of this object.
     * @property dirty
     * @type Boolean
     */
    this.dirty = false;
};

// constructor
PIXI.BitmapText.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);
PIXI.BitmapText.prototype.constructor = PIXI.BitmapText;

/**
 * Set the text string to be rendered.
 *
 * @method setText
 * @param text {String} The text that you would like displayed
 */
PIXI.BitmapText.prototype.setText = function(text)
{
    this.text = text || ' ';
    this.dirty = true;
};

/**
 * Set the style of the text
 * style.font {String} The size (optional) and bitmap font id (required) eq 'Arial' or '20px Arial' (must have loaded previously)
 * [style.align='left'] {String} Alignment for multiline text ('left', 'center' or 'right'), does not affect single lines of text
 *
 * @method setStyle
 * @param style {Object} The style parameters, contained as properties of an object
 */
PIXI.BitmapText.prototype.setStyle = function(style)
{
    style = style || {};
    style.align = style.align || 'left';
    this.style = style;

    var font = style.font.split(' ');
    this.fontName = font[font.length - 1];
    this.fontSize = font.length >= 2 ? parseInt(font[font.length - 2], 10) : PIXI.BitmapText.fonts[this.fontName].size;

    this.dirty = true;
    this.tint = style.tint;
};

/**
 * Renders text and updates it when needed
 *
 * @method updateText
 * @private
 */
PIXI.BitmapText.prototype.updateText = function()
{
    var data = PIXI.BitmapText.fonts[this.fontName];
    var pos = new PIXI.Point();
    var prevCharCode = null;
    var chars = [];
    var maxLineWidth = 0;
    var lineWidths = [];
    var line = 0;
    var scale = this.fontSize / data.size;

    for(var i = 0; i < this.text.length; i++)
    {
        var charCode = this.text.charCodeAt(i);

        if(/(?:\r\n|\r|\n)/.test(this.text.charAt(i)))
        {
            lineWidths.push(pos.x);
            maxLineWidth = Math.max(maxLineWidth, pos.x);
            line++;

            pos.x = 0;
            pos.y += data.lineHeight;
            prevCharCode = null;
            continue;
        }

        var charData = data.chars[charCode];

        if(!charData) continue;

        if(prevCharCode && charData.kerning[prevCharCode])
        {
            pos.x += charData.kerning[prevCharCode];
        }

        chars.push({texture:charData.texture, line: line, charCode: charCode, position: new PIXI.Point(pos.x + charData.xOffset, pos.y + charData.yOffset)});
        pos.x += charData.xAdvance;

        prevCharCode = charCode;
    }

    lineWidths.push(pos.x);
    maxLineWidth = Math.max(maxLineWidth, pos.x);

    var lineAlignOffsets = [];

    for(i = 0; i <= line; i++)
    {
        var alignOffset = 0;
        if(this.style.align === 'right')
        {
            alignOffset = maxLineWidth - lineWidths[i];
        }
        else if(this.style.align === 'center')
        {
            alignOffset = (maxLineWidth - lineWidths[i]) / 2;
        }
        lineAlignOffsets.push(alignOffset);
    }

    var lenChildren = this.children.length;
    var lenChars = chars.length;
    var tint = this.tint || 0xFFFFFF;

    for(i = 0; i < lenChars; i++)
    {
        var c = i < lenChildren ? this.children[i] : this._pool.pop(); // get old child if have. if not - take from pool.

        if (c) c.setTexture(chars[i].texture); // check if got one before.
        else c = new PIXI.Sprite(chars[i].texture); // if no create new one.

        c.position.x = (chars[i].position.x + lineAlignOffsets[chars[i].line]) * scale;
        c.position.y = chars[i].position.y * scale;
        c.scale.x = c.scale.y = scale;
        c.tint = tint;
        if (!c.parent) this.addChild(c);
    }

    // remove unnecessary children.
    // and put their into the pool.
    while(this.children.length > lenChars)
    {
        var child = this.getChildAt(this.children.length - 1);
        this._pool.push(child);
        this.removeChild(child);
    }

    this.textWidth = maxLineWidth * scale;
    this.textHeight = (pos.y + data.lineHeight) * scale;
};

/**
 * Updates the transform of this object
 *
 * @method updateTransform
 * @private
 */
PIXI.BitmapText.prototype.updateTransform = function()
{
    if(this.dirty)
    {
        this.updateText();
        this.dirty = false;
    }

    PIXI.DisplayObjectContainer.prototype.updateTransform.call(this);
};

PIXI.BitmapText.fonts = {};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * Holds all information related to an Interaction event
 *
 * @class InteractionData
 * @constructor
 */
PIXI.InteractionData = function()
{
    /**
     * This point stores the global coords of where the touch/mouse event happened
     *
     * @property global
     * @type Point
     */
    this.global = new PIXI.Point();

    /**
     * The target Sprite that was interacted with
     *
     * @property target
     * @type Sprite
     */
    this.target = null;

    /**
     * When passed to an event handler, this will be the original DOM Event that was captured
     *
     * @property originalEvent
     * @type Event
     */
    this.originalEvent = null;
};

/**
 * This will return the local coordinates of the specified displayObject for this InteractionData
 *
 * @method getLocalPosition
 * @param displayObject {DisplayObject} The DisplayObject that you would like the local coords off
 * @param [point] {Point} A Point object in which to store the value, optional (otherwise will create a new point)
 * @return {Point} A point containing the coordinates of the InteractionData position relative to the DisplayObject
 */
PIXI.InteractionData.prototype.getLocalPosition = function(displayObject, point)
{
    var worldTransform = displayObject.worldTransform;
    var global = this.global;

    // do a cheeky transform to get the mouse coords;
    var a00 = worldTransform.a, a01 = worldTransform.c, a02 = worldTransform.tx,
        a10 = worldTransform.b, a11 = worldTransform.d, a12 = worldTransform.ty,
        id = 1 / (a00 * a11 + a01 * -a10);

    point = point || new PIXI.Point();

    point.x = a11 * id * global.x + -a01 * id * global.y + (a12 * a01 - a02 * a11) * id;
    point.y = a00 * id * global.y + -a10 * id * global.x + (-a12 * a00 + a02 * a10) * id;

    // set the mouse coords...
    return point;
};

// constructor
PIXI.InteractionData.prototype.constructor = PIXI.InteractionData;

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

 /**
 * The interaction manager deals with mouse and touch events. Any DisplayObject can be interactive
 * if its interactive parameter is set to true
 * This manager also supports multitouch.
 *
 * @class InteractionManager
 * @constructor
 * @param stage {Stage} The stage to handle interactions
 */
PIXI.InteractionManager = function(stage)
{
    /**
     * A reference to the stage
     *
     * @property stage
     * @type Stage
     */
    this.stage = stage;

    /**
     * The mouse data
     *
     * @property mouse
     * @type InteractionData
     */
    this.mouse = new PIXI.InteractionData();

    /**
     * An object that stores current touches (InteractionData) by id reference
     *
     * @property touches
     * @type Object
     */
    this.touches = {};

    /**
     * @property tempPoint
     * @type Point
     * @private
     */
    this.tempPoint = new PIXI.Point();

    /**
     * @property mouseoverEnabled
     * @type Boolean
     * @default
     */
    this.mouseoverEnabled = true;

    /**
     * Tiny little interactiveData pool !
     *
     * @property pool
     * @type Array
     */
    this.pool = [];

    /**
     * An array containing all the iterative items from the our interactive tree
     * @property interactiveItems
     * @type Array
     * @private
     */
    this.interactiveItems = [];

    /**
     * Our canvas
     * @property interactionDOMElement
     * @type HTMLCanvasElement
     * @private
     */
    this.interactionDOMElement = null;

    //this will make it so that you don't have to call bind all the time

    /**
     * @property onMouseMove
     * @type Function
     */
    this.onMouseMove = this.onMouseMove.bind( this );

    /**
     * @property onMouseDown
     * @type Function
     */
    this.onMouseDown = this.onMouseDown.bind(this);

    /**
     * @property onMouseOut
     * @type Function
     */
    this.onMouseOut = this.onMouseOut.bind(this);

    /**
     * @property onMouseUp
     * @type Function
     */
    this.onMouseUp = this.onMouseUp.bind(this);

    /**
     * @property onTouchStart
     * @type Function
     */
    this.onTouchStart = this.onTouchStart.bind(this);

    /**
     * @property onTouchEnd
     * @type Function
     */
    this.onTouchEnd = this.onTouchEnd.bind(this);

    /**
     * @property onTouchMove
     * @type Function
     */
    this.onTouchMove = this.onTouchMove.bind(this);

    /**
     * @property last
     * @type Number
     */
    this.last = 0;

    /**
     * The css style of the cursor that is being used
     * @property currentCursorStyle
     * @type String
     */
    this.currentCursorStyle = 'inherit';

    /**
     * Is set to true when the mouse is moved out of the canvas
     * @property mouseOut
     * @type Boolean
     */
    this.mouseOut = false;

    /**
     * @property resolution
     * @type Number
     */
    this.resolution = 1;

    // used for hit testing
    this._tempPoint = new PIXI.Point();
};

// constructor
PIXI.InteractionManager.prototype.constructor = PIXI.InteractionManager;

/**
 * Collects an interactive sprite recursively to have their interactions managed
 *
 * @method collectInteractiveSprite
 * @param displayObject {DisplayObject} the displayObject to collect
 * @param iParent {DisplayObject} the display object's parent
 * @private
 */
PIXI.InteractionManager.prototype.collectInteractiveSprite = function(displayObject, iParent)
{
    var children = displayObject.children;
    var length = children.length;

    // make an interaction tree... {item.__interactiveParent}
    for (var i = length - 1; i >= 0; i--)
    {
        var child = children[i];

        // push all interactive bits
        if (child._interactive)
        {
            iParent.interactiveChildren = true;
            //child.__iParent = iParent;
            this.interactiveItems.push(child);

            if (child.children.length > 0) {
                this.collectInteractiveSprite(child, child);
            }
        }
        else
        {
            child.__iParent = null;
            if (child.children.length > 0)
            {
                this.collectInteractiveSprite(child, iParent);
            }
        }

    }
};

/**
 * Sets the target for event delegation
 *
 * @method setTarget
 * @param target {WebGLRenderer|CanvasRenderer} the renderer to bind events to
 * @private
 */
PIXI.InteractionManager.prototype.setTarget = function(target)
{
    this.target = target;
    this.resolution = target.resolution;

    // Check if the dom element has been set. If it has don't do anything.
    if (this.interactionDOMElement !== null) return;

    this.setTargetDomElement (target.view);
};

/**
 * Sets the DOM element which will receive mouse/touch events. This is useful for when you have other DOM
 * elements on top of the renderers Canvas element. With this you'll be able to delegate another DOM element
 * to receive those events
 *
 * @method setTargetDomElement
 * @param domElement {DOMElement} the DOM element which will receive mouse and touch events
 * @private
 */
PIXI.InteractionManager.prototype.setTargetDomElement = function(domElement)
{
    this.removeEvents();

    if (window.navigator.msPointerEnabled)
    {
        // time to remove some of that zoom in ja..
        domElement.style['-ms-content-zooming'] = 'none';
        domElement.style['-ms-touch-action'] = 'none';
    }

    this.interactionDOMElement = domElement;

    domElement.addEventListener('mousemove',  this.onMouseMove, true);
    domElement.addEventListener('mousedown',  this.onMouseDown, true);
    domElement.addEventListener('mouseout',   this.onMouseOut, true);

    // aint no multi touch just yet!
    domElement.addEventListener('touchstart', this.onTouchStart, true);
    domElement.addEventListener('touchend', this.onTouchEnd, true);
    domElement.addEventListener('touchmove', this.onTouchMove, true);

    window.addEventListener('mouseup',  this.onMouseUp, true);
};

/**
 * @method removeEvents
 * @private
 */
PIXI.InteractionManager.prototype.removeEvents = function()
{
    if (!this.interactionDOMElement) return;

    this.interactionDOMElement.style['-ms-content-zooming'] = '';
    this.interactionDOMElement.style['-ms-touch-action'] = '';

    this.interactionDOMElement.removeEventListener('mousemove',  this.onMouseMove, true);
    this.interactionDOMElement.removeEventListener('mousedown',  this.onMouseDown, true);
    this.interactionDOMElement.removeEventListener('mouseout',   this.onMouseOut, true);

    // aint no multi touch just yet!
    this.interactionDOMElement.removeEventListener('touchstart', this.onTouchStart, true);
    this.interactionDOMElement.removeEventListener('touchend', this.onTouchEnd, true);
    this.interactionDOMElement.removeEventListener('touchmove', this.onTouchMove, true);

    this.interactionDOMElement = null;

    window.removeEventListener('mouseup',  this.onMouseUp, true);
};

/**
 * updates the state of interactive objects
 *
 * @method update
 * @private
 */
PIXI.InteractionManager.prototype.update = function()
{
    if (!this.target) return;

    // frequency of 30fps??
    var now = Date.now();
    var diff = now - this.last;
    diff = (diff * PIXI.INTERACTION_FREQUENCY ) / 1000;
    if (diff < 1) return;
    this.last = now;

    var i = 0;

    // ok.. so mouse events??
    // yes for now :)
    // OPTIMISE - how often to check??
    if (this.dirty)
    {
        this.rebuildInteractiveGraph();
    }

    // loop through interactive objects!
    var length = this.interactiveItems.length;
    var cursor = 'inherit';
    var over = false;

    for (i = 0; i < length; i++)
    {
        var item = this.interactiveItems[i];

        // OPTIMISATION - only calculate every time if the mousemove function exists..
        // OK so.. does the object have any other interactive functions?
        // hit-test the clip!
       // if (item.mouseover || item.mouseout || item.buttonMode)
       // {
        // ok so there are some functions so lets hit test it..
        item.__hit = this.hitTest(item, this.mouse);
        this.mouse.target = item;
        // ok so deal with interactions..
        // looks like there was a hit!
        if (item.__hit && !over)
        {
            if (item.buttonMode) cursor = item.defaultCursor;

            if (!item.interactiveChildren)
            {
                over = true;
            }

            if (!item.__isOver)
            {
                if (item.mouseover)
                {
                    item.mouseover (this.mouse);
                }
                item.__isOver = true;
            }
        }
        else
        {
            if (item.__isOver)
            {
                // roll out!
                if (item.mouseout)
                {
                    item.mouseout (this.mouse);
                }
                item.__isOver = false;
            }
        }
    }

    if (this.currentCursorStyle !== cursor)
    {
        this.currentCursorStyle = cursor;
        this.interactionDOMElement.style.cursor = cursor;
    }
};

/**
 * @method rebuildInteractiveGraph
 * @private
 */
PIXI.InteractionManager.prototype.rebuildInteractiveGraph = function()
{
    this.dirty = false;

    var len = this.interactiveItems.length;

    for (var i = 0; i < len; i++) {
        this.interactiveItems[i].interactiveChildren = false;
    }

    this.interactiveItems = [];

    if (this.stage.interactive)
    {
        this.interactiveItems.push(this.stage);
    }

    // Go through and collect all the objects that are interactive..
    this.collectInteractiveSprite(this.stage, this.stage);
};

/**
 * Is called when the mouse moves across the renderer element
 *
 * @method onMouseMove
 * @param event {Event} The DOM event of the mouse moving
 * @private
 */
PIXI.InteractionManager.prototype.onMouseMove = function(event)
{
    if (this.dirty)
    {
        this.rebuildInteractiveGraph();
    }

    this.mouse.originalEvent = event;

    // TODO optimize by not check EVERY TIME! maybe half as often? //
    var rect = this.interactionDOMElement.getBoundingClientRect();

    this.mouse.global.x = (event.clientX - rect.left) * (this.target.width / rect.width) / this.resolution;
    this.mouse.global.y = (event.clientY - rect.top) * ( this.target.height / rect.height) / this.resolution;

    var length = this.interactiveItems.length;

    for (var i = 0; i < length; i++)
    {
        var item = this.interactiveItems[i];

        // Call the function!
        if (item.mousemove)
        {
            item.mousemove(this.mouse);
        }
    }
};

/**
 * Is called when the mouse button is pressed down on the renderer element
 *
 * @method onMouseDown
 * @param event {Event} The DOM event of a mouse button being pressed down
 * @private
 */
PIXI.InteractionManager.prototype.onMouseDown = function(event)
{
    if (this.dirty)
    {
        this.rebuildInteractiveGraph();
    }

    this.mouse.originalEvent = event;

    if (PIXI.AUTO_PREVENT_DEFAULT)
    {
        this.mouse.originalEvent.preventDefault();
    }

    // loop through interaction tree...
    // hit test each item! ->
    // get interactive items under point??
    //stage.__i
    var length = this.interactiveItems.length;

    var e = this.mouse.originalEvent;
    var isRightButton = e.button === 2 || e.which === 3;
    var downFunction = isRightButton ? 'rightdown' : 'mousedown';
    var clickFunction = isRightButton ? 'rightclick' : 'click';
    var buttonIsDown = isRightButton ? '__rightIsDown' : '__mouseIsDown';
    var isDown = isRightButton ? '__isRightDown' : '__isDown';

    // while
    // hit test
    for (var i = 0; i < length; i++)
    {
        var item = this.interactiveItems[i];

        if (item[downFunction] || item[clickFunction])
        {
            item[buttonIsDown] = true;
            item.__hit = this.hitTest(item, this.mouse);

            if (item.__hit)
            {
                //call the function!
                if (item[downFunction])
                {
                    item[downFunction](this.mouse);
                }
                item[isDown] = true;

                // just the one!
                if (!item.interactiveChildren) break;
            }
        }
    }
};

/**
 * Is called when the mouse is moved out of the renderer element
 *
 * @method onMouseOut
 * @param event {Event} The DOM event of a mouse being moved out
 * @private
 */
PIXI.InteractionManager.prototype.onMouseOut = function(event)
{
    if (this.dirty)
    {
        this.rebuildInteractiveGraph();
    }

    this.mouse.originalEvent = event;

    var length = this.interactiveItems.length;

    this.interactionDOMElement.style.cursor = 'inherit';

    for (var i = 0; i < length; i++)
    {
        var item = this.interactiveItems[i];
        if (item.__isOver)
        {
            this.mouse.target = item;
            if (item.mouseout)
            {
                item.mouseout(this.mouse);
            }
            item.__isOver = false;
        }
    }

    this.mouseOut = true;

    // move the mouse to an impossible position
    this.mouse.global.x = -10000;
    this.mouse.global.y = -10000;
};

/**
 * Is called when the mouse button is released on the renderer element
 *
 * @method onMouseUp
 * @param event {Event} The DOM event of a mouse button being released
 * @private
 */
PIXI.InteractionManager.prototype.onMouseUp = function(event)
{
    if (this.dirty)
    {
        this.rebuildInteractiveGraph();
    }

    this.mouse.originalEvent = event;

    var length = this.interactiveItems.length;
    var up = false;

    var e = this.mouse.originalEvent;
    var isRightButton = e.button === 2 || e.which === 3;

    var upFunction = isRightButton ? 'rightup' : 'mouseup';
    var clickFunction = isRightButton ? 'rightclick' : 'click';
    var upOutsideFunction = isRightButton ? 'rightupoutside' : 'mouseupoutside';
    var isDown = isRightButton ? '__isRightDown' : '__isDown';

    for (var i = 0; i < length; i++)
    {
        var item = this.interactiveItems[i];

        if (item[clickFunction] || item[upFunction] || item[upOutsideFunction])
        {
            item.__hit = this.hitTest(item, this.mouse);

            if (item.__hit && !up)
            {
                //call the function!
                if (item[upFunction])
                {
                    item[upFunction](this.mouse);
                }
                if (item[isDown])
                {
                    if (item[clickFunction])
                    {
                        item[clickFunction](this.mouse);
                    }
                }

                if (!item.interactiveChildren)
                {
                    up = true;
                }
            }
            else
            {
                if (item[isDown])
                {
                    if (item[upOutsideFunction]) item[upOutsideFunction](this.mouse);
                }
            }

            item[isDown] = false;
        }
    }
};

/**
 * Tests if the current mouse coordinates hit a sprite
 *
 * @method hitTest
 * @param item {DisplayObject} The displayObject to test for a hit
 * @param interactionData {InteractionData} The interactionData object to update in the case there is a hit
 * @private
 */
PIXI.InteractionManager.prototype.hitTest = function(item, interactionData)
{
    var global = interactionData.global;

    if (!item.worldVisible)
    {
        return false;
    }

    // map the global point to local space.
    item.worldTransform.applyInverse(global,  this._tempPoint);

    var x = this._tempPoint.x,
        y = this._tempPoint.y,
        i;

    interactionData.target = item;

    //a sprite or display object with a hit area defined
    if (item.hitArea && item.hitArea.contains)
    {
        return item.hitArea.contains(x, y);
    }
    // a sprite with no hitarea defined
    else if(item instanceof PIXI.Sprite)
    {
        var width = item.texture.frame.width;
        var height = item.texture.frame.height;
        var x1 = -width * item.anchor.x;
        var y1;

        if (x > x1 && x < x1 + width)
        {
            y1 = -height * item.anchor.y;

            if (y > y1 && y < y1 + height)
            {
                // set the target property if a hit is true!
                return true;
            }
        }
    }
    else if(item instanceof PIXI.Graphics)
    {
        var graphicsData = item.graphicsData;
        for (i = 0; i < graphicsData.length; i++)
        {
            var data = graphicsData[i];
            if(!data.fill)continue;

            // only deal with fills..
            if(data.shape)
            {
                if(data.shape.contains(x, y))
                {
                    //interactionData.target = item;
                    return true;
                }
            }
        }
    }

    var length = item.children.length;

    for (i = 0; i < length; i++)
    {
        var tempItem = item.children[i];
        var hit = this.hitTest(tempItem, interactionData);
        if (hit)
        {
            // hmm.. TODO SET CORRECT TARGET?
            interactionData.target = item;
            return true;
        }
    }
    return false;
};

/**
 * Is called when a touch is moved across the renderer element
 *
 * @method onTouchMove
 * @param event {Event} The DOM event of a touch moving across the renderer view
 * @private
 */
PIXI.InteractionManager.prototype.onTouchMove = function(event)
{
    if (this.dirty)
    {
        this.rebuildInteractiveGraph();
    }

    var rect = this.interactionDOMElement.getBoundingClientRect();
    var changedTouches = event.changedTouches;
    var touchData;
    var i = 0;

    for (i = 0; i < changedTouches.length; i++)
    {
        var touchEvent = changedTouches[i];
        touchData = this.touches[touchEvent.identifier];
        touchData.originalEvent = event;

        // update the touch position
        touchData.global.x = ( (touchEvent.clientX - rect.left) * (this.target.width / rect.width) ) / this.resolution;
        touchData.global.y = ( (touchEvent.clientY - rect.top)  * (this.target.height / rect.height) )  / this.resolution;
        if (navigator.isCocoonJS && !rect.left && !rect.top && !event.target.style.width && !event.target.style.height)
        {
            //Support for CocoonJS fullscreen scale modes
            touchData.global.x = touchEvent.clientX;
            touchData.global.y = touchEvent.clientY;
        }

        for (var j = 0; j < this.interactiveItems.length; j++)
        {
            var item = this.interactiveItems[j];
            if (item.touchmove && item.__touchData && item.__touchData[touchEvent.identifier])
            {
                item.touchmove(touchData);
            }
        }
    }
};

/**
 * Is called when a touch is started on the renderer element
 *
 * @method onTouchStart
 * @param event {Event} The DOM event of a touch starting on the renderer view
 * @private
 */
PIXI.InteractionManager.prototype.onTouchStart = function(event)
{
    if (this.dirty)
    {
        this.rebuildInteractiveGraph();
    }

    var rect = this.interactionDOMElement.getBoundingClientRect();

    if (PIXI.AUTO_PREVENT_DEFAULT)
    {
        event.preventDefault();
    }

    var changedTouches = event.changedTouches;
    for (var i=0; i < changedTouches.length; i++)
    {
        var touchEvent = changedTouches[i];

        var touchData = this.pool.pop();
        if (!touchData)
        {
            touchData = new PIXI.InteractionData();
        }

        touchData.originalEvent = event;

        this.touches[touchEvent.identifier] = touchData;
        touchData.global.x = ( (touchEvent.clientX - rect.left) * (this.target.width / rect.width) ) / this.resolution;
        touchData.global.y = ( (touchEvent.clientY - rect.top)  * (this.target.height / rect.height) ) / this.resolution;
        if (navigator.isCocoonJS && !rect.left && !rect.top && !event.target.style.width && !event.target.style.height)
        {
            //Support for CocoonJS fullscreen scale modes
            touchData.global.x = touchEvent.clientX;
            touchData.global.y = touchEvent.clientY;
        }

        var length = this.interactiveItems.length;

        for (var j = 0; j < length; j++)
        {
            var item = this.interactiveItems[j];

            if (item.touchstart || item.tap)
            {
                item.__hit = this.hitTest(item, touchData);

                if (item.__hit)
                {
                    //call the function!
                    if (item.touchstart)item.touchstart(touchData);
                    item.__isDown = true;
                    item.__touchData = item.__touchData || {};
                    item.__touchData[touchEvent.identifier] = touchData;

                    if (!item.interactiveChildren) break;
                }
            }
        }
    }
};

/**
 * Is called when a touch is ended on the renderer element
 *
 * @method onTouchEnd
 * @param event {Event} The DOM event of a touch ending on the renderer view
 * @private
 */
PIXI.InteractionManager.prototype.onTouchEnd = function(event)
{
    if (this.dirty)
    {
        this.rebuildInteractiveGraph();
    }

    var rect = this.interactionDOMElement.getBoundingClientRect();
    var changedTouches = event.changedTouches;

    for (var i=0; i < changedTouches.length; i++)
    {
        var touchEvent = changedTouches[i];
        var touchData = this.touches[touchEvent.identifier];
        var up = false;
        touchData.global.x = ( (touchEvent.clientX - rect.left) * (this.target.width / rect.width) ) / this.resolution;
        touchData.global.y = ( (touchEvent.clientY - rect.top)  * (this.target.height / rect.height) ) / this.resolution;
        if (navigator.isCocoonJS && !rect.left && !rect.top && !event.target.style.width && !event.target.style.height)
        {
            //Support for CocoonJS fullscreen scale modes
            touchData.global.x = touchEvent.clientX;
            touchData.global.y = touchEvent.clientY;
        }

        var length = this.interactiveItems.length;
        for (var j = 0; j < length; j++)
        {
            var item = this.interactiveItems[j];

            if (item.__touchData && item.__touchData[touchEvent.identifier])
            {

                item.__hit = this.hitTest(item, item.__touchData[touchEvent.identifier]);

                // so this one WAS down...
                touchData.originalEvent = event;
                // hitTest??

                if (item.touchend || item.tap)
                {
                    if (item.__hit && !up)
                    {
                        if (item.touchend)
                        {
                            item.touchend(touchData);
                        }
                        if (item.__isDown && item.tap)
                        {
                            item.tap(touchData);
                        }
                        if (!item.interactiveChildren)
                        {
                            up = true;
                        }
                    }
                    else
                    {
                        if (item.__isDown && item.touchendoutside)
                        {
                            item.touchendoutside(touchData);
                        }
                    }

                    item.__isDown = false;
                }

                item.__touchData[touchEvent.identifier] = null;
            }
        }
        // remove the touch..
        this.pool.push(touchData);
        this.touches[touchEvent.identifier] = null;
    }
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A Stage represents the root of the display tree. Everything connected to the stage is rendered
 *
 * @class Stage
 * @extends DisplayObjectContainer
 * @constructor
 * @param backgroundColor {Number} the background color of the stage, you have to pass this in is in hex format
 *      like: 0xFFFFFF for white
 * 
 * Creating a stage is a mandatory process when you use Pixi, which is as simple as this : 
 * var stage = new PIXI.Stage(0xFFFFFF);
 * where the parameter given is the background colour of the stage, in hex
 * you will use this stage instance to add your sprites to it and therefore to the renderer
 * Here is how to add a sprite to the stage : 
 * stage.addChild(sprite);
 */
PIXI.Stage = function(backgroundColor)
{
    PIXI.DisplayObjectContainer.call( this );

    /**
     * [read-only] Current transform of the object based on world (parent) factors
     *
     * @property worldTransform
     * @type Matrix
     * @readOnly
     * @private
     */
    this.worldTransform = new PIXI.Matrix();

    /**
     * Whether or not the stage is interactive
     *
     * @property interactive
     * @type Boolean
     */
    this.interactive = true;

    /**
     * The interaction manage for this stage, manages all interactive activity on the stage
     *
     * @property interactionManager
     * @type InteractionManager
     */
    this.interactionManager = new PIXI.InteractionManager(this);

    /**
     * Whether the stage is dirty and needs to have interactions updated
     *
     * @property dirty
     * @type Boolean
     * @private
     */
    this.dirty = true;

    //the stage is its own stage
    this.stage = this;

    //optimize hit detection a bit
    this.stage.hitArea = new PIXI.Rectangle(0, 0, 100000, 100000);

    this.setBackgroundColor(backgroundColor);
};

// constructor
PIXI.Stage.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );
PIXI.Stage.prototype.constructor = PIXI.Stage;

/**
 * Sets another DOM element which can receive mouse/touch interactions instead of the default Canvas element.
 * This is useful for when you have other DOM elements on top of the Canvas element.
 *
 * @method setInteractionDelegate
 * @param domElement {DOMElement} This new domElement which will receive mouse/touch events
 */
PIXI.Stage.prototype.setInteractionDelegate = function(domElement)
{
    this.interactionManager.setTargetDomElement( domElement );
};

/*
 * Updates the object transform for rendering
 *
 * @method updateTransform
 * @private
 */
PIXI.Stage.prototype.updateTransform = function()
{
    this.worldAlpha = 1;

    for(var i=0,j=this.children.length; i<j; i++)
    {
        this.children[i].updateTransform();
    }

    if(this.dirty)
    {
        this.dirty = false;
        // update interactive!
        this.interactionManager.dirty = true;
    }

    if(this.interactive)this.interactionManager.update();
};

/**
 * Sets the background color for the stage
 *
 * @method setBackgroundColor
 * @param backgroundColor {Number} the color of the background, easiest way to pass this in is in hex format
 *      like: 0xFFFFFF for white
 */
PIXI.Stage.prototype.setBackgroundColor = function(backgroundColor)
{
    this.backgroundColor = backgroundColor || 0x000000;
    this.backgroundColorSplit = PIXI.hex2rgb(this.backgroundColor);
    var hex = this.backgroundColor.toString(16);
    hex = '000000'.substr(0, 6 - hex.length) + hex;
    this.backgroundColorString = '#' + hex;
};

/**
 * This will return the point containing global coordinates of the mouse.
 *
 * @method getMousePosition
 * @return {Point} A point containing the coordinates of the global InteractionData position.
 */
PIXI.Stage.prototype.getMousePosition = function()
{
    return this.interactionManager.mouse.global;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */
 
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel

// MIT license

/**
 * A polyfill for requestAnimationFrame
 * You can actually use both requestAnimationFrame and requestAnimFrame, 
 * you will still benefit from the polyfill
 *
 * @method requestAnimationFrame
 */

/**
 * A polyfill for cancelAnimationFrame
 *
 * @method cancelAnimationFrame
 */
(function(window) {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||
            window[vendors[x] + 'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = function(callback) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() { callback(currTime + timeToCall); },
              timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
    }

    if (!window.cancelAnimationFrame) {
        window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
    }

    window.requestAnimFrame = window.requestAnimationFrame;
})(this);

/**
 * Converts a hex color number to an [R, G, B] array
 *
 * @method hex2rgb
 * @param hex {Number}
 */
PIXI.hex2rgb = function(hex) {
    return [(hex >> 16 & 0xFF) / 255, ( hex >> 8 & 0xFF) / 255, (hex & 0xFF)/ 255];
};

/**
 * Converts a color as an [R, G, B] array to a hex number
 *
 * @method rgb2hex
 * @param rgb {Array}
 */
PIXI.rgb2hex = function(rgb) {
    return ((rgb[0]*255 << 16) + (rgb[1]*255 << 8) + rgb[2]*255);
};

/**
 * A polyfill for Function.prototype.bind
 *
 * @method bind
 */
if (typeof Function.prototype.bind !== 'function') {
    Function.prototype.bind = (function () {
        return function (thisArg) {
            var target = this, i = arguments.length - 1, boundArgs = [];
            if (i > 0)
            {
                boundArgs.length = i;
                while (i--) boundArgs[i] = arguments[i + 1];
            }

            if (typeof target !== 'function') throw new TypeError();

            function bound() {
                var i = arguments.length, args = new Array(i);
                while (i--) args[i] = arguments[i];
                args = boundArgs.concat(args);
                return target.apply(this instanceof bound ? this : thisArg, args);
            }

            bound.prototype = (function F(proto) {
                if (proto) F.prototype = proto;
                if (!(this instanceof F)) return new F();
            })(target.prototype);

            return bound;
        };
    })();
}

/**
 * A wrapper for ajax requests to be handled cross browser
 *
 * @class AjaxRequest
 * @constructor
 */
PIXI.AjaxRequest = function()
{
    var activexmodes = ['Msxml2.XMLHTTP.6.0', 'Msxml2.XMLHTTP.3.0', 'Microsoft.XMLHTTP']; //activeX versions to check for in IE

    if (window.ActiveXObject)
    { //Test for support for ActiveXObject in IE first (as XMLHttpRequest in IE7 is broken)
        for (var i=0; i<activexmodes.length; i++)
        {
            try{
                return new window.ActiveXObject(activexmodes[i]);
            }
            catch(e) {
                //suppress error
            }
        }
    }
    else if (window.XMLHttpRequest) // if Mozilla, Safari etc
    {
        return new window.XMLHttpRequest();
    }
    else
    {
        return false;
    }
};
/*
PIXI.packColorRGBA = function(r, g, b, a)//r, g, b, a)
{
  //  console.log(r, b, c, d)
  return (Math.floor((r)*63) << 18) | (Math.floor((g)*63) << 12) | (Math.floor((b)*63) << 6);// | (Math.floor((a)*63))
  //  i = i | (Math.floor((a)*63));
   // return i;
   // var r = (i / 262144.0 ) / 64;
   // var g = (i / 4096.0)%64 / 64;
  //  var b = (i / 64.0)%64 / 64;
  //  var a = (i)%64 / 64;
     
  //  console.log(r, g, b, a);
  //  return i;

};
*/
/*
PIXI.packColorRGB = function(r, g, b)//r, g, b, a)
{
    return (Math.floor((r)*255) << 16) | (Math.floor((g)*255) << 8) | (Math.floor((b)*255));
};

PIXI.unpackColorRGB = function(r, g, b)//r, g, b, a)
{
    return (Math.floor((r)*255) << 16) | (Math.floor((g)*255) << 8) | (Math.floor((b)*255));
};
*/

/**
 * Checks whether the Canvas BlendModes are supported by the current browser
 *
 * @method canUseNewCanvasBlendModes
 * @return {Boolean} whether they are supported
 */
PIXI.canUseNewCanvasBlendModes = function()
{
    if (typeof document === 'undefined') return false;
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = 1;
    var context = canvas.getContext('2d');
    context.fillStyle = '#000';
    context.fillRect(0,0,1,1);
    context.globalCompositeOperation = 'multiply';
    context.fillStyle = '#fff';
    context.fillRect(0,0,1,1);
    return context.getImageData(0,0,1,1).data[0] === 0;
};

/**
 * Given a number, this function returns the closest number that is a power of two
 * this function is taken from Starling Framework as its pretty neat ;)
 *
 * @method getNextPowerOfTwo
 * @param number {Number}
 * @return {Number} the closest number that is a power of two
 */
PIXI.getNextPowerOfTwo = function(number)
{
    if (number > 0 && (number & (number - 1)) === 0) // see: http://goo.gl/D9kPj
        return number;
    else
    {
        var result = 1;
        while (result < number) result <<= 1;
        return result;
    }
};

PIXI.isPowerOfTwo = function(width, height)
{
    return (width > 0 && (width & (width - 1)) === 0 && height > 0 && (height & (height - 1)) === 0);

};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 * @author Chad Engler https://github.com/englercj @Rolnaaba
 */

/**
 * Originally based on https://github.com/mrdoob/eventtarget.js/ from mr Doob.
 * Currently takes inspiration from the nodejs EventEmitter, EventEmitter3, and smokesignals
 */

/**
 * Mixins event emitter functionality to a class
 *
 * @class EventTarget
 * @example
 *      function MyEmitter() {}
 *
 *      PIXI.EventTarget.mixin(MyEmitter.prototype);
 *
 *      var em = new MyEmitter();
 *      em.emit('eventName', 'some data', 'some more data', {}, null, ...);
 */
PIXI.EventTarget = {
    /**
     * Backward compat from when this used to be a function
     */
    call: function callCompat(obj) {
        if(obj) {
            obj = obj.prototype || obj;
            PIXI.EventTarget.mixin(obj);
        }
    },

    /**
     * Mixes in the properties of the EventTarget prototype onto another object
     *
     * @method mixin
     * @param object {Object} The obj to mix into
     */
    mixin: function mixin(obj) {
        /**
         * Return a list of assigned event listeners.
         *
         * @method listeners
         * @param eventName {String} The events that should be listed.
         * @return {Array} An array of listener functions
         */
        obj.listeners = function listeners(eventName) {
            this._listeners = this._listeners || {};

            return this._listeners[eventName] ? this._listeners[eventName].slice() : [];
        };

        /**
         * Emit an event to all registered event listeners.
         *
         * @method emit
         * @alias dispatchEvent
         * @param eventName {String} The name of the event.
         * @return {Boolean} Indication if we've emitted an event.
         */
        obj.emit = obj.dispatchEvent = function emit(eventName, data) {
            this._listeners = this._listeners || {};

            //backwards compat with old method ".emit({ type: 'something' })"
            if(typeof eventName === 'object') {
                data = eventName;
                eventName = eventName.type;
            }

            //ensure we are using a real pixi event
            if(!data || data.__isEventObject !== true) {
                data = new PIXI.Event(this, eventName, data);
            }

            //iterate the listeners
            if(this._listeners && this._listeners[eventName]) {
                var listeners = this._listeners[eventName].slice(0),
                    length = listeners.length,
                    fn = listeners[0],
                    i;

                for(i = 0; i < length; fn = listeners[++i]) {
                    //call the event listener
                    fn.call(this, data);

                    //if "stopImmediatePropagation" is called, stop calling sibling events
                    if(data.stoppedImmediate) {
                        return this;
                    }
                }

                //if "stopPropagation" is called then don't bubble the event
                if(data.stopped) {
                    return this;
                }
            }

            //bubble this event up the scene graph
            if(this.parent && this.parent.emit) {
                this.parent.emit.call(this.parent, eventName, data);
            }

            return this;
        };

        /**
         * Register a new EventListener for the given event.
         *
         * @method on
         * @alias addEventListener
         * @param eventName {String} Name of the event.
         * @param callback {Functon} fn Callback function.
         */
        obj.on = obj.addEventListener = function on(eventName, fn) {
            this._listeners = this._listeners || {};

            (this._listeners[eventName] = this._listeners[eventName] || [])
                .push(fn);

            return this;
        };

        /**
         * Add an EventListener that's only called once.
         *
         * @method once
         * @param eventName {String} Name of the event.
         * @param callback {Function} Callback function.
         */
        obj.once = function once(eventName, fn) {
            this._listeners = this._listeners || {};

            var self = this;
            function onceHandlerWrapper() {
                fn.apply(self.off(eventName, onceHandlerWrapper), arguments);
            }
            onceHandlerWrapper._originalHandler = fn;

            return this.on(eventName, onceHandlerWrapper);
        };

        /**
         * Remove event listeners.
         *
         * @method off
         * @alias removeEventListener
         * @param eventName {String} The event we want to remove.
         * @param callback {Function} The listener that we need to find.
         */
        obj.off = obj.removeEventListener = function off(eventName, fn) {
            this._listeners = this._listeners || {};

            if(!this._listeners[eventName])
                return this;

            var list = this._listeners[eventName],
                i = fn ? list.length : 0;

            while(i-- > 0) {
                if(list[i] === fn || list[i]._originalHandler === fn) {
                    list.splice(i, 1);
                }
            }

            if(list.length === 0) {
                delete this._listeners[eventName];
            }

            return this;
        };

        /**
         * Remove all listeners or only the listeners for the specified event.
         *
         * @method removeAllListeners
         * @param eventName {String} The event you want to remove all listeners for.
         */
        obj.removeAllListeners = function removeAllListeners(eventName) {
            this._listeners = this._listeners || {};

            if(!this._listeners[eventName])
                return this;

            delete this._listeners[eventName];

            return this;
        };
    }
};

/**
 * Creates an homogenous object for tracking events so users can know what to expect.
 *
 * @class Event
 * @extends Object
 * @constructor
 * @param target {Object} The target object that the event is called on
 * @param name {String} The string name of the event that was triggered
 * @param data {Object} Arbitrary event data to pass along
 */
PIXI.Event = function(target, name, data) {
    //for duck typing in the ".on()" function
    this.__isEventObject = true;

    /**
     * Tracks the state of bubbling propagation. Do not
     * set this directly, instead use `event.stopPropagation()`
     *
     * @property stopped
     * @type Boolean
     * @private
     * @readOnly
     */
    this.stopped = false;

    /**
     * Tracks the state of sibling listener propagation. Do not
     * set this directly, instead use `event.stopImmediatePropagation()`
     *
     * @property stoppedImmediate
     * @type Boolean
     * @private
     * @readOnly
     */
    this.stoppedImmediate = false;

    /**
     * The original target the event triggered on.
     *
     * @property target
     * @type Object
     * @readOnly
     */
    this.target = target;

    /**
     * The string name of the event that this represents.
     *
     * @property type
     * @type String
     * @readOnly
     */
    this.type = name;

    /**
     * The data that was passed in with this event.
     *
     * @property data
     * @type Object
     * @readOnly
     */
    this.data = data;

    //backwards compat with older version of events
    this.content = data;

    /**
     * The timestamp when the event occurred.
     *
     * @property timeStamp
     * @type Number
     * @readOnly
     */
    this.timeStamp = Date.now();
};

/**
 * Stops the propagation of events up the scene graph (prevents bubbling).
 *
 * @method stopPropagation
 */
PIXI.Event.prototype.stopPropagation = function stopPropagation() {
    this.stopped = true;
};

/**
 * Stops the propagation of events to sibling listeners (no longer calls any listeners).
 *
 * @method stopImmediatePropagation
 */
PIXI.Event.prototype.stopImmediatePropagation = function stopImmediatePropagation() {
    this.stoppedImmediate = true;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * This helper function will automatically detect which renderer you should be using.
 * WebGL is the preferred renderer as it is a lot faster. If webGL is not supported by
 * the browser then this function will return a canvas renderer
 *
 * @method autoDetectRenderer
 * @for PIXI
 * @static
 * @param width=800 {Number} the width of the renderers view
 * @param height=600 {Number} the height of the renderers view
 * 
 * @param [options] {Object} The optional renderer parameters
 * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional
 * @param [options.transparent=false] {Boolean} If the render view is transparent, default false
 * @param [options.antialias=false] {Boolean} sets antialias (only applicable in chrome at the moment)
 * @param [options.preserveDrawingBuffer=false] {Boolean} enables drawing buffer preservation, enable this if you need to call toDataUrl on the webgl context
 * @param [options.resolution=1] {Number} the resolution of the renderer retina would be 2
 * 
 */
PIXI.autoDetectRenderer = function(width, height, options)
{
    if(!width)width = 800;
    if(!height)height = 600;

    // BORROWED from Mr Doob (mrdoob.com)
    var webgl = ( function () { try {
                                    var canvas = document.createElement( 'canvas' );
                                    return !! window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) );
                                } catch( e ) {
                                    return false;
                                }
                            } )();

    if( webgl && Uint32Array)
    {
        return new PIXI.WebGLRenderer(width, height, options);
    }

    return  new PIXI.CanvasRenderer(width, height, options);
};

/**
 * This helper function will automatically detect which renderer you should be using.
 * This function is very similar to the autoDetectRenderer function except that is will return a canvas renderer for android.
 * Even thought both android chrome supports webGL the canvas implementation perform better at the time of writing. 
 * This function will likely change and update as webGL performance improves on these devices.
 * 
 * @method autoDetectRecommendedRenderer
 * @for PIXI
 * @static
 * @param width=800 {Number} the width of the renderers view
 * @param height=600 {Number} the height of the renderers view
 * 
 * @param [options] {Object} The optional renderer parameters
 * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional
 * @param [options.transparent=false] {Boolean} If the render view is transparent, default false
 * @param [options.antialias=false] {Boolean} sets antialias (only applicable in chrome at the moment)
 * @param [options.preserveDrawingBuffer=false] {Boolean} enables drawing buffer preservation, enable this if you need to call toDataUrl on the webgl context
 * @param [options.resolution=1] {Number} the resolution of the renderer retina would be 2
 * 
 */
PIXI.autoDetectRecommendedRenderer = function(width, height, options)
{
    if(!width)width = 800;
    if(!height)height = 600;

    // BORROWED from Mr Doob (mrdoob.com)
    var webgl = ( function () { try {
                                    var canvas = document.createElement( 'canvas' );
                                    return !! window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) );
                                } catch( e ) {
                                    return false;
                                }
                            } )();

    var isAndroid = /Android/i.test(navigator.userAgent);

    if( webgl && !isAndroid)
    {
        return new PIXI.WebGLRenderer(width, height, options);
    }

    return  new PIXI.CanvasRenderer(width, height, options);
};

/*
    PolyK library
    url: http://polyk.ivank.net
    Released under MIT licence.

    Copyright (c) 2012 Ivan Kuckir

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

    This is an amazing lib!

    Slightly modified by Mat Groves (matgroves.com);
*/

/**
 * Based on the Polyk library http://polyk.ivank.net released under MIT licence.
 * This is an amazing lib!
 * Slightly modified by Mat Groves (matgroves.com);
 * @class PolyK
 */
PIXI.PolyK = {};

/**
 * Triangulates shapes for webGL graphic fills.
 *
 * @method Triangulate
 */
PIXI.PolyK.Triangulate = function(p)
{
    var sign = true;

    var n = p.length >> 1;
    if(n < 3) return [];

    var tgs = [];
    var avl = [];
    for(var i = 0; i < n; i++) avl.push(i);

    i = 0;
    var al = n;
    while(al > 3)
    {
        var i0 = avl[(i+0)%al];
        var i1 = avl[(i+1)%al];
        var i2 = avl[(i+2)%al];

        var ax = p[2*i0],  ay = p[2*i0+1];
        var bx = p[2*i1],  by = p[2*i1+1];
        var cx = p[2*i2],  cy = p[2*i2+1];

        var earFound = false;
        if(PIXI.PolyK._convex(ax, ay, bx, by, cx, cy, sign))
        {
            earFound = true;
            for(var j = 0; j < al; j++)
            {
                var vi = avl[j];
                if(vi === i0 || vi === i1 || vi === i2) continue;

                if(PIXI.PolyK._PointInTriangle(p[2*vi], p[2*vi+1], ax, ay, bx, by, cx, cy)) {
                    earFound = false;
                    break;
                }
            }
        }

        if(earFound)
        {
            tgs.push(i0, i1, i2);
            avl.splice((i+1)%al, 1);
            al--;
            i = 0;
        }
        else if(i++ > 3*al)
        {
            // need to flip flip reverse it!
            // reset!
            if(sign)
            {
                tgs = [];
                avl = [];
                for(i = 0; i < n; i++) avl.push(i);

                i = 0;
                al = n;

                sign = false;
            }
            else
            {
             //   window.console.log("PIXI Warning: shape too complex to fill");
                return null;
            }
        }
    }

    tgs.push(avl[0], avl[1], avl[2]);
    return tgs;
};

/**
 * Checks whether a point is within a triangle
 *
 * @method _PointInTriangle
 * @param px {Number} x coordinate of the point to test
 * @param py {Number} y coordinate of the point to test
 * @param ax {Number} x coordinate of the a point of the triangle
 * @param ay {Number} y coordinate of the a point of the triangle
 * @param bx {Number} x coordinate of the b point of the triangle
 * @param by {Number} y coordinate of the b point of the triangle
 * @param cx {Number} x coordinate of the c point of the triangle
 * @param cy {Number} y coordinate of the c point of the triangle
 * @private
 * @return {Boolean}
 */
PIXI.PolyK._PointInTriangle = function(px, py, ax, ay, bx, by, cx, cy)
{
    var v0x = cx-ax;
    var v0y = cy-ay;
    var v1x = bx-ax;
    var v1y = by-ay;
    var v2x = px-ax;
    var v2y = py-ay;

    var dot00 = v0x*v0x+v0y*v0y;
    var dot01 = v0x*v1x+v0y*v1y;
    var dot02 = v0x*v2x+v0y*v2y;
    var dot11 = v1x*v1x+v1y*v1y;
    var dot12 = v1x*v2x+v1y*v2y;

    var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    var v = (dot00 * dot12 - dot01 * dot02) * invDenom;

    // Check if point is in triangle
    return (u >= 0) && (v >= 0) && (u + v < 1);
};

/**
 * Checks whether a shape is convex
 *
 * @method _convex
 * @private
 * @return {Boolean}
 */
PIXI.PolyK._convex = function(ax, ay, bx, by, cx, cy, sign)
{
    return ((ay-by)*(cx-bx) + (bx-ax)*(cy-by) >= 0) === sign;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @method initDefaultShaders
* @static
* @private
*/
PIXI.initDefaultShaders = function()
{
};

/**
* @method CompileVertexShader
* @static
* @param gl {WebGLContext} the current WebGL drawing context
* @param shaderSrc {Array}
* @return {Any}
*/
PIXI.CompileVertexShader = function(gl, shaderSrc)
{
    return PIXI._CompileShader(gl, shaderSrc, gl.VERTEX_SHADER);
};

/**
* @method CompileFragmentShader
* @static
* @param gl {WebGLContext} the current WebGL drawing context
* @param shaderSrc {Array}
* @return {Any}
*/
PIXI.CompileFragmentShader = function(gl, shaderSrc)
{
    return PIXI._CompileShader(gl, shaderSrc, gl.FRAGMENT_SHADER);
};

/**
* @method _CompileShader
* @static
* @private
* @param gl {WebGLContext} the current WebGL drawing context
* @param shaderSrc {Array}
* @param shaderType {Number}
* @return {Any}
*/
PIXI._CompileShader = function(gl, shaderSrc, shaderType)
{
    var src = shaderSrc.join("\n");
    var shader = gl.createShader(shaderType);
    gl.shaderSource(shader, src);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
    {
        window.console.log(gl.getShaderInfoLog(shader));
        return null;
    }

    return shader;
};

/**
* @method compileProgram
* @static
* @param gl {WebGLContext} the current WebGL drawing context
* @param vertexSrc {Array}
* @param fragmentSrc {Array}
* @return {Any}
*/
PIXI.compileProgram = function(gl, vertexSrc, fragmentSrc)
{
    var fragmentShader = PIXI.CompileFragmentShader(gl, fragmentSrc);
    var vertexShader = PIXI.CompileVertexShader(gl, vertexSrc);

    var shaderProgram = gl.createProgram();

    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
    {
        window.console.log("Could not initialise shaders");
    }

    return shaderProgram;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 * @author Richard Davey http://www.photonstorm.com @photonstorm
 */

/**
* @class PixiShader
* @constructor
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.PixiShader = function(gl)
{
    /**
     * @property _UID
     * @type Number
     * @private
     */
    this._UID = PIXI._UID++;

    /**
     * @property gl
     * @type WebGLContext
     */
    this.gl = gl;

    /**
     * The WebGL program.
     * @property program
     * @type Any
     */
    this.program = null;

    /**
     * The fragment shader.
     * @property fragmentSrc
     * @type Array
     */
    this.fragmentSrc = [
        'precision lowp float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform sampler2D uSampler;',
        'void main(void) {',
        '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;',
        '}'
    ];

    /**
     * A local texture counter for multi-texture shaders.
     * @property textureCount
     * @type Number
     */
    this.textureCount = 0;

    /**
     * A local flag
     * @property firstRun
     * @type Boolean
     * @private
     */
    this.firstRun = true;

    /**
     * A dirty flag
     * @property dirty
     * @type Boolean
     */
    this.dirty = true;

    /**
     * Uniform attributes cache.
     * @property attributes
     * @type Array
     * @private
     */
    this.attributes = [];

    this.init();
};

PIXI.PixiShader.prototype.constructor = PIXI.PixiShader;

/**
* Initialises the shader.
*
* @method init
*/
PIXI.PixiShader.prototype.init = function()
{
    var gl = this.gl;

    var program = PIXI.compileProgram(gl, this.vertexSrc || PIXI.PixiShader.defaultVertexSrc, this.fragmentSrc);

    gl.useProgram(program);

    // get and store the uniforms for the shader
    this.uSampler = gl.getUniformLocation(program, 'uSampler');
    this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
    this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
    this.dimensions = gl.getUniformLocation(program, 'dimensions');

    // get and store the attributes
    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');
    this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');
    this.colorAttribute = gl.getAttribLocation(program, 'aColor');

    // Begin worst hack eva //

    // WHY??? ONLY on my chrome pixel the line above returns -1 when using filters?
    // maybe its something to do with the current state of the gl context.
    // I'm convinced this is a bug in the chrome browser as there is NO reason why this should be returning -1 especially as it only manifests on my chrome pixel
    // If theres any webGL people that know why could happen please help :)
    if(this.colorAttribute === -1)
    {
        this.colorAttribute = 2;
    }

    this.attributes = [this.aVertexPosition, this.aTextureCoord, this.colorAttribute];

    // End worst hack eva //

    // add those custom shaders!
    for (var key in this.uniforms)
    {
        // get the uniform locations..
        this.uniforms[key].uniformLocation = gl.getUniformLocation(program, key);
    }

    this.initUniforms();

    this.program = program;
};

/**
* Initialises the shader uniform values.
*
* Uniforms are specified in the GLSL_ES Specification: http://www.khronos.org/registry/webgl/specs/latest/1.0/
* http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf
*
* @method initUniforms
*/
PIXI.PixiShader.prototype.initUniforms = function()
{
    this.textureCount = 1;
    var gl = this.gl;
    var uniform;

    for (var key in this.uniforms)
    {
        uniform = this.uniforms[key];

        var type = uniform.type;

        if (type === 'sampler2D')
        {
            uniform._init = false;

            if (uniform.value !== null)
            {
                this.initSampler2D(uniform);
            }
        }
        else if (type === 'mat2' || type === 'mat3' || type === 'mat4')
        {
            //  These require special handling
            uniform.glMatrix = true;
            uniform.glValueLength = 1;

            if (type === 'mat2')
            {
                uniform.glFunc = gl.uniformMatrix2fv;
            }
            else if (type === 'mat3')
            {
                uniform.glFunc = gl.uniformMatrix3fv;
            }
            else if (type === 'mat4')
            {
                uniform.glFunc = gl.uniformMatrix4fv;
            }
        }
        else
        {
            //  GL function reference
            uniform.glFunc = gl['uniform' + type];

            if (type === '2f' || type === '2i')
            {
                uniform.glValueLength = 2;
            }
            else if (type === '3f' || type === '3i')
            {
                uniform.glValueLength = 3;
            }
            else if (type === '4f' || type === '4i')
            {
                uniform.glValueLength = 4;
            }
            else
            {
                uniform.glValueLength = 1;
            }
        }
    }

};

/**
* Initialises a Sampler2D uniform (which may only be available later on after initUniforms once the texture has loaded)
*
* @method initSampler2D
*/
PIXI.PixiShader.prototype.initSampler2D = function(uniform)
{
    if (!uniform.value || !uniform.value.baseTexture || !uniform.value.baseTexture.hasLoaded)
    {
        return;
    }

    var gl = this.gl;

    gl.activeTexture(gl['TEXTURE' + this.textureCount]);
    gl.bindTexture(gl.TEXTURE_2D, uniform.value.baseTexture._glTextures[gl.id]);

    //  Extended texture data
    if (uniform.textureData)
    {
        var data = uniform.textureData;

        // GLTexture = mag linear, min linear_mipmap_linear, wrap repeat + gl.generateMipmap(gl.TEXTURE_2D);
        // GLTextureLinear = mag/min linear, wrap clamp
        // GLTextureNearestRepeat = mag/min NEAREST, wrap repeat
        // GLTextureNearest = mag/min nearest, wrap clamp
        // AudioTexture = whatever + luminance + width 512, height 2, border 0
        // KeyTexture = whatever + luminance + width 256, height 2, border 0

        //  magFilter can be: gl.LINEAR, gl.LINEAR_MIPMAP_LINEAR or gl.NEAREST
        //  wrapS/T can be: gl.CLAMP_TO_EDGE or gl.REPEAT

        var magFilter = (data.magFilter) ? data.magFilter : gl.LINEAR;
        var minFilter = (data.minFilter) ? data.minFilter : gl.LINEAR;
        var wrapS = (data.wrapS) ? data.wrapS : gl.CLAMP_TO_EDGE;
        var wrapT = (data.wrapT) ? data.wrapT : gl.CLAMP_TO_EDGE;
        var format = (data.luminance) ? gl.LUMINANCE : gl.RGBA;

        if (data.repeat)
        {
            wrapS = gl.REPEAT;
            wrapT = gl.REPEAT;
        }

        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, !!data.flipY);

        if (data.width)
        {
            var width = (data.width) ? data.width : 512;
            var height = (data.height) ? data.height : 2;
            var border = (data.border) ? data.border : 0;

            // void texImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView? pixels);
            gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, border, format, gl.UNSIGNED_BYTE, null);
        }
        else
        {
            //  void texImage2D(GLenum target, GLint level, GLenum internalformat, GLenum format, GLenum type, ImageData? pixels);
            gl.texImage2D(gl.TEXTURE_2D, 0, format, gl.RGBA, gl.UNSIGNED_BYTE, uniform.value.baseTexture.source);
        }

        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);
    }

    gl.uniform1i(uniform.uniformLocation, this.textureCount);

    uniform._init = true;

    this.textureCount++;

};

/**
* Updates the shader uniform values.
*
* @method syncUniforms
*/
PIXI.PixiShader.prototype.syncUniforms = function()
{
    this.textureCount = 1;
    var uniform;
    var gl = this.gl;

    //  This would probably be faster in an array and it would guarantee key order
    for (var key in this.uniforms)
    {
        uniform = this.uniforms[key];

        if (uniform.glValueLength === 1)
        {
            if (uniform.glMatrix === true)
            {
                uniform.glFunc.call(gl, uniform.uniformLocation, uniform.transpose, uniform.value);
            }
            else
            {
                uniform.glFunc.call(gl, uniform.uniformLocation, uniform.value);
            }
        }
        else if (uniform.glValueLength === 2)
        {
            uniform.glFunc.call(gl, uniform.uniformLocation, uniform.value.x, uniform.value.y);
        }
        else if (uniform.glValueLength === 3)
        {
            uniform.glFunc.call(gl, uniform.uniformLocation, uniform.value.x, uniform.value.y, uniform.value.z);
        }
        else if (uniform.glValueLength === 4)
        {
            uniform.glFunc.call(gl, uniform.uniformLocation, uniform.value.x, uniform.value.y, uniform.value.z, uniform.value.w);
        }
        else if (uniform.type === 'sampler2D')
        {
            if (uniform._init)
            {
                gl.activeTexture(gl['TEXTURE' + this.textureCount]);

                if(uniform.value.baseTexture._dirty[gl.id])
                {
                    PIXI.instances[gl.id].updateTexture(uniform.value.baseTexture);
                }
                else
                {
                    // bind the current texture
                    gl.bindTexture(gl.TEXTURE_2D, uniform.value.baseTexture._glTextures[gl.id]);
                }

             //   gl.bindTexture(gl.TEXTURE_2D, uniform.value.baseTexture._glTextures[gl.id] || PIXI.createWebGLTexture( uniform.value.baseTexture, gl));
                gl.uniform1i(uniform.uniformLocation, this.textureCount);
                this.textureCount++;
            }
            else
            {
                this.initSampler2D(uniform);
            }
        }
    }

};

/**
* Destroys the shader.
*
* @method destroy
*/
PIXI.PixiShader.prototype.destroy = function()
{
    this.gl.deleteProgram( this.program );
    this.uniforms = null;
    this.gl = null;

    this.attributes = null;
};

/**
* The Default Vertex shader source.
*
* @property defaultVertexSrc
* @type String
*/
PIXI.PixiShader.defaultVertexSrc = [
    'attribute vec2 aVertexPosition;',
    'attribute vec2 aTextureCoord;',
    'attribute vec4 aColor;',

    'uniform vec2 projectionVector;',
    'uniform vec2 offsetVector;',

    'varying vec2 vTextureCoord;',
    'varying vec4 vColor;',

    'const vec2 center = vec2(-1.0, 1.0);',

    'void main(void) {',
    '   gl_Position = vec4( ((aVertexPosition + offsetVector) / projectionVector) + center , 0.0, 1.0);',
    '   vTextureCoord = aTextureCoord;',
    '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',
    '}'
];
/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class PixiFastShader
* @constructor
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.PixiFastShader = function(gl)
{
    /**
     * @property _UID
     * @type Number
     * @private
     */
    this._UID = PIXI._UID++;
    
    /**
     * @property gl
     * @type WebGLContext
     */
    this.gl = gl;

    /**
     * The WebGL program.
     * @property program
     * @type Any
     */
    this.program = null;

    /**
     * The fragment shader.
     * @property fragmentSrc
     * @type Array
     */
    this.fragmentSrc = [
        'precision lowp float;',
        'varying vec2 vTextureCoord;',
        'varying float vColor;',
        'uniform sampler2D uSampler;',
        'void main(void) {',
        '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;',
        '}'
    ];

    /**
     * The vertex shader.
     * @property vertexSrc
     * @type Array
     */
    this.vertexSrc = [
        'attribute vec2 aVertexPosition;',
        'attribute vec2 aPositionCoord;',
        'attribute vec2 aScale;',
        'attribute float aRotation;',
        'attribute vec2 aTextureCoord;',
        'attribute float aColor;',

        'uniform vec2 projectionVector;',
        'uniform vec2 offsetVector;',
        'uniform mat3 uMatrix;',

        'varying vec2 vTextureCoord;',
        'varying float vColor;',

        'const vec2 center = vec2(-1.0, 1.0);',

        'void main(void) {',
        '   vec2 v;',
        '   vec2 sv = aVertexPosition * aScale;',
        '   v.x = (sv.x) * cos(aRotation) - (sv.y) * sin(aRotation);',
        '   v.y = (sv.x) * sin(aRotation) + (sv.y) * cos(aRotation);',
        '   v = ( uMatrix * vec3(v + aPositionCoord , 1.0) ).xy ;',
        '   gl_Position = vec4( ( v / projectionVector) + center , 0.0, 1.0);',
        '   vTextureCoord = aTextureCoord;',
      //  '   vec3 color = mod(vec3(aColor.y/65536.0, aColor.y/256.0, aColor.y), 256.0) / 256.0;',
        '   vColor = aColor;',
        '}'
    ];

    /**
     * A local texture counter for multi-texture shaders.
     * @property textureCount
     * @type Number
     */
    this.textureCount = 0;
    
    this.init();
};

PIXI.PixiFastShader.prototype.constructor = PIXI.PixiFastShader;

/**
* Initialises the shader.
* 
* @method init
*/
PIXI.PixiFastShader.prototype.init = function()
{
    var gl = this.gl;

    var program = PIXI.compileProgram(gl, this.vertexSrc, this.fragmentSrc);
    
    gl.useProgram(program);

    // get and store the uniforms for the shader
    this.uSampler = gl.getUniformLocation(program, 'uSampler');

    this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
    this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
    this.dimensions = gl.getUniformLocation(program, 'dimensions');
    this.uMatrix = gl.getUniformLocation(program, 'uMatrix');

    // get and store the attributes
    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');
    this.aPositionCoord = gl.getAttribLocation(program, 'aPositionCoord');

    this.aScale = gl.getAttribLocation(program, 'aScale');
    this.aRotation = gl.getAttribLocation(program, 'aRotation');

    this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');
    this.colorAttribute = gl.getAttribLocation(program, 'aColor');
   
    // Begin worst hack eva //

    // WHY??? ONLY on my chrome pixel the line above returns -1 when using filters?
    // maybe its somthing to do with the current state of the gl context.
    // Im convinced this is a bug in the chrome browser as there is NO reason why this should be returning -1 especially as it only manifests on my chrome pixel
    // If theres any webGL people that know why could happen please help :)
    if(this.colorAttribute === -1)
    {
        this.colorAttribute = 2;
    }

    this.attributes = [this.aVertexPosition, this.aPositionCoord,  this.aScale, this.aRotation, this.aTextureCoord, this.colorAttribute];
    
    // End worst hack eva //

    this.program = program;
};

/**
* Destroys the shader.
* 
* @method destroy
*/
PIXI.PixiFastShader.prototype.destroy = function()
{
    this.gl.deleteProgram( this.program );
    this.uniforms = null;
    this.gl = null;

    this.attributes = null;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class StripShader
* @constructor
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.StripShader = function(gl)
{
    /**
     * @property _UID
     * @type Number
     * @private
     */
    this._UID = PIXI._UID++;
    
    /**
     * @property gl
     * @type WebGLContext
     */
    this.gl = gl;

    /**
     * The WebGL program.
     * @property program
     * @type Any
     */
    this.program = null;

    /**
     * The fragment shader.
     * @property fragmentSrc
     * @type Array
     */
    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
     //   'varying float vColor;',
        'uniform float alpha;',
        'uniform sampler2D uSampler;',

        'void main(void) {',
        '   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * alpha;',
      //  '   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);',//gl_FragColor * alpha;',
        '}'
    ];

    /**
     * The vertex shader.
     * @property vertexSrc
     * @type Array
     */
    this.vertexSrc  = [
        'attribute vec2 aVertexPosition;',
        'attribute vec2 aTextureCoord;',
        'uniform mat3 translationMatrix;',
        'uniform vec2 projectionVector;',
        'uniform vec2 offsetVector;',
      //  'uniform float alpha;',
       // 'uniform vec3 tint;',
        'varying vec2 vTextureCoord;',
      //  'varying vec4 vColor;',

        'void main(void) {',
        '   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);',
        '   v -= offsetVector.xyx;',
        '   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);',
        '   vTextureCoord = aTextureCoord;',
       // '   vColor = aColor * vec4(tint * alpha, alpha);',
        '}'
    ];

    this.init();
};

PIXI.StripShader.prototype.constructor = PIXI.StripShader;

/**
* Initialises the shader.
* 
* @method init
*/
PIXI.StripShader.prototype.init = function()
{
    var gl = this.gl;

    var program = PIXI.compileProgram(gl, this.vertexSrc, this.fragmentSrc);
    gl.useProgram(program);

    // get and store the uniforms for the shader
    this.uSampler = gl.getUniformLocation(program, 'uSampler');
    this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
    this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
    this.colorAttribute = gl.getAttribLocation(program, 'aColor');
    //this.dimensions = gl.getUniformLocation(this.program, 'dimensions');

    // get and store the attributes
    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');
    this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');

    this.attributes = [this.aVertexPosition, this.aTextureCoord];

    this.translationMatrix = gl.getUniformLocation(program, 'translationMatrix');
    this.alpha = gl.getUniformLocation(program, 'alpha');

    this.program = program;
};

/**
* Destroys the shader.
* 
* @method destroy
*/
PIXI.StripShader.prototype.destroy = function()
{
    this.gl.deleteProgram( this.program );
    this.uniforms = null;
    this.gl = null;

    this.attribute = null;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class PrimitiveShader
* @constructor
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.PrimitiveShader = function(gl)
{
    /**
     * @property _UID
     * @type Number
     * @private
     */
    this._UID = PIXI._UID++;
 
    /**
     * @property gl
     * @type WebGLContext
     */
    this.gl = gl;

    /**
     * The WebGL program.
     * @property program
     * @type Any
     */
    this.program = null;

    /**
     * The fragment shader.
     * @property fragmentSrc
     * @type Array
     */
    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec4 vColor;',

        'void main(void) {',
        '   gl_FragColor = vColor;',
        '}'
    ];

    /**
     * The vertex shader.
     * @property vertexSrc
     * @type Array
     */
    this.vertexSrc  = [
        'attribute vec2 aVertexPosition;',
        'attribute vec4 aColor;',
        'uniform mat3 translationMatrix;',
        'uniform vec2 projectionVector;',
        'uniform vec2 offsetVector;',
        'uniform float alpha;',
        'uniform float flipY;',
        'uniform vec3 tint;',
        'varying vec4 vColor;',

        'void main(void) {',
        '   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);',
        '   v -= offsetVector.xyx;',
        '   gl_Position = vec4( v.x / projectionVector.x -1.0, (v.y / projectionVector.y * -flipY) + flipY , 0.0, 1.0);',
        '   vColor = aColor * vec4(tint * alpha, alpha);',
        '}'
    ];

    this.init();
};

PIXI.PrimitiveShader.prototype.constructor = PIXI.PrimitiveShader;

/**
* Initialises the shader.
* 
* @method init
*/
PIXI.PrimitiveShader.prototype.init = function()
{
    var gl = this.gl;

    var program = PIXI.compileProgram(gl, this.vertexSrc, this.fragmentSrc);
    gl.useProgram(program);

    // get and store the uniforms for the shader
    this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
    this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
    this.tintColor = gl.getUniformLocation(program, 'tint');
    this.flipY = gl.getUniformLocation(program, 'flipY');

    // get and store the attributes
    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');
    this.colorAttribute = gl.getAttribLocation(program, 'aColor');

    this.attributes = [this.aVertexPosition, this.colorAttribute];

    this.translationMatrix = gl.getUniformLocation(program, 'translationMatrix');
    this.alpha = gl.getUniformLocation(program, 'alpha');

    this.program = program;
};

/**
* Destroys the shader.
* 
* @method destroy
*/
PIXI.PrimitiveShader.prototype.destroy = function()
{
    this.gl.deleteProgram( this.program );
    this.uniforms = null;
    this.gl = null;

    this.attributes = null;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class ComplexPrimitiveShader
* @constructor
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.ComplexPrimitiveShader = function(gl)
{
    /**
     * @property _UID
     * @type Number
     * @private
     */
    this._UID = PIXI._UID++;

    /**
     * @property gl
     * @type WebGLContext
     */
    this.gl = gl;

    /**
     * The WebGL program.
     * @property program
     * @type Any
     */
    this.program = null;

    /**
     * The fragment shader.
     * @property fragmentSrc
     * @type Array
     */
    this.fragmentSrc = [

        'precision mediump float;',

        'varying vec4 vColor;',

        'void main(void) {',
        '   gl_FragColor = vColor;',
        '}'
    ];

    /**
     * The vertex shader.
     * @property vertexSrc
     * @type Array
     */
    this.vertexSrc  = [
        'attribute vec2 aVertexPosition;',
        //'attribute vec4 aColor;',
        'uniform mat3 translationMatrix;',
        'uniform vec2 projectionVector;',
        'uniform vec2 offsetVector;',
        
        'uniform vec3 tint;',
        'uniform float alpha;',
        'uniform vec3 color;',
        'uniform float flipY;',
        'varying vec4 vColor;',

        'void main(void) {',
        '   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);',
        '   v -= offsetVector.xyx;',
        '   gl_Position = vec4( v.x / projectionVector.x -1.0, (v.y / projectionVector.y * -flipY) + flipY , 0.0, 1.0);',
        '   vColor = vec4(color * alpha * tint, alpha);',//" * vec4(tint * alpha, alpha);',
        '}'
    ];

    this.init();
};

PIXI.ComplexPrimitiveShader.prototype.constructor = PIXI.ComplexPrimitiveShader;

/**
* Initialises the shader.
* 
* @method init
*/
PIXI.ComplexPrimitiveShader.prototype.init = function()
{
    var gl = this.gl;

    var program = PIXI.compileProgram(gl, this.vertexSrc, this.fragmentSrc);
    gl.useProgram(program);

    // get and store the uniforms for the shader
    this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
    this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
    this.tintColor = gl.getUniformLocation(program, 'tint');
    this.color = gl.getUniformLocation(program, 'color');
    this.flipY = gl.getUniformLocation(program, 'flipY');

    // get and store the attributes
    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');
   // this.colorAttribute = gl.getAttribLocation(program, 'aColor');

    this.attributes = [this.aVertexPosition, this.colorAttribute];

    this.translationMatrix = gl.getUniformLocation(program, 'translationMatrix');
    this.alpha = gl.getUniformLocation(program, 'alpha');

    this.program = program;
};

/**
* Destroys the shader.
* 
* @method destroy
*/
PIXI.ComplexPrimitiveShader.prototype.destroy = function()
{
    this.gl.deleteProgram( this.program );
    this.uniforms = null;
    this.gl = null;

    this.attribute = null;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A set of functions used by the webGL renderer to draw the primitive graphics data
 *
 * @class WebGLGraphics
 * @private
 * @static
 */
PIXI.WebGLGraphics = function()
{
};

/**
 * Renders the graphics object
 *
 * @static
 * @private
 * @method renderGraphics
 * @param graphics {Graphics}
 * @param renderSession {Object}
 */
PIXI.WebGLGraphics.renderGraphics = function(graphics, renderSession)//projection, offset)
{
    var gl = renderSession.gl;
    var projection = renderSession.projection,
        offset = renderSession.offset,
        shader = renderSession.shaderManager.primitiveShader,
        webGLData;

    if(graphics.dirty)
    {
        PIXI.WebGLGraphics.updateGraphics(graphics, gl);
    }

    var webGL = graphics._webGL[gl.id];

    // This  could be speeded up for sure!

    for (var i = 0; i < webGL.data.length; i++)
    {
        if(webGL.data[i].mode === 1)
        {
            webGLData = webGL.data[i];

            renderSession.stencilManager.pushStencil(graphics, webGLData, renderSession);

            // render quad..
            gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_SHORT, ( webGLData.indices.length - 4 ) * 2 );
            
            renderSession.stencilManager.popStencil(graphics, webGLData, renderSession);
        }
        else
        {
            webGLData = webGL.data[i];
           

            renderSession.shaderManager.setShader( shader );//activatePrimitiveShader();
            shader = renderSession.shaderManager.primitiveShader;
            gl.uniformMatrix3fv(shader.translationMatrix, false, graphics.worldTransform.toArray(true));
            
            gl.uniform1f(shader.flipY, 1);
            
            gl.uniform2f(shader.projectionVector, projection.x, -projection.y);
            gl.uniform2f(shader.offsetVector, -offset.x, -offset.y);

            gl.uniform3fv(shader.tintColor, PIXI.hex2rgb(graphics.tint));

            gl.uniform1f(shader.alpha, graphics.worldAlpha);
            

            gl.bindBuffer(gl.ARRAY_BUFFER, webGLData.buffer);

            gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 4 * 6, 0);
            gl.vertexAttribPointer(shader.colorAttribute, 4, gl.FLOAT, false,4 * 6, 2 * 4);

            // set the index buffer!
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLData.indexBuffer);
            gl.drawElements(gl.TRIANGLE_STRIP,  webGLData.indices.length, gl.UNSIGNED_SHORT, 0 );
        }
    }
};

/**
 * Updates the graphics object
 *
 * @static
 * @private
 * @method updateGraphics
 * @param graphicsData {Graphics} The graphics object to update
 * @param gl {WebGLContext} the current WebGL drawing context
 */
PIXI.WebGLGraphics.updateGraphics = function(graphics, gl)
{
    // get the contexts graphics object
    var webGL = graphics._webGL[gl.id];
    // if the graphics object does not exist in the webGL context time to create it!
    if(!webGL)webGL = graphics._webGL[gl.id] = {lastIndex:0, data:[], gl:gl};

    // flag the graphics as not dirty as we are about to update it...
    graphics.dirty = false;

    var i;

    // if the user cleared the graphics object we will need to clear every object
    if(graphics.clearDirty)
    {
        graphics.clearDirty = false;

        // lop through and return all the webGLDatas to the object pool so than can be reused later on
        for (i = 0; i < webGL.data.length; i++)
        {
            var graphicsData = webGL.data[i];
            graphicsData.reset();
            PIXI.WebGLGraphics.graphicsDataPool.push( graphicsData );
        }

        // clear the array and reset the index.. 
        webGL.data = [];
        webGL.lastIndex = 0;
    }
    
    var webGLData;
    
    // loop through the graphics datas and construct each one..
    // if the object is a complex fill then the new stencil buffer technique will be used
    // other wise graphics objects will be pushed into a batch..
    for (i = webGL.lastIndex; i < graphics.graphicsData.length; i++)
    {
        var data = graphics.graphicsData[i];

        if(data.type === PIXI.Graphics.POLY)
        {
            // need to add the points the the graphics object..
            data.points = data.shape.points.slice();
            if(data.shape.closed)
            {
                // close the poly if the value is true!
                if(data.points[0] !== data.points[data.points.length-2] || data.points[1] !== data.points[data.points.length-1])
                {
                    data.points.push(data.points[0], data.points[1]);
                }
            }

            // MAKE SURE WE HAVE THE CORRECT TYPE..
            if(data.fill)
            {
                if(data.points.length >= 6)
                {
                    if(data.points.length < 6 * 2)
                    {
                        webGLData = PIXI.WebGLGraphics.switchMode(webGL, 0);
                        
                        var canDrawUsingSimple = PIXI.WebGLGraphics.buildPoly(data, webGLData);
                   //     console.log(canDrawUsingSimple);

                        if(!canDrawUsingSimple)
                        {
                        //    console.log("<>>>")
                            webGLData = PIXI.WebGLGraphics.switchMode(webGL, 1);
                            PIXI.WebGLGraphics.buildComplexPoly(data, webGLData);
                        }
                        
                    }
                    else
                    {
                        webGLData = PIXI.WebGLGraphics.switchMode(webGL, 1);
                        PIXI.WebGLGraphics.buildComplexPoly(data, webGLData);
                    }
                }
            }

            if(data.lineWidth > 0)
            {
                webGLData = PIXI.WebGLGraphics.switchMode(webGL, 0);
                PIXI.WebGLGraphics.buildLine(data, webGLData);

            }
        }
        else
        {
            webGLData = PIXI.WebGLGraphics.switchMode(webGL, 0);
            
            if(data.type === PIXI.Graphics.RECT)
            {
                PIXI.WebGLGraphics.buildRectangle(data, webGLData);
            }
            else if(data.type === PIXI.Graphics.CIRC || data.type === PIXI.Graphics.ELIP)
            {
                PIXI.WebGLGraphics.buildCircle(data, webGLData);
            }
            else if(data.type === PIXI.Graphics.RREC)
            {
                PIXI.WebGLGraphics.buildRoundedRectangle(data, webGLData);
            }
        }

        webGL.lastIndex++;
    }

    // upload all the dirty data...
    for (i = 0; i < webGL.data.length; i++)
    {
        webGLData = webGL.data[i];
        if(webGLData.dirty)webGLData.upload();
    }
};

/**
 * @static
 * @private
 * @method switchMode
 * @param webGL {WebGLContext}
 * @param type {Number}
 */
PIXI.WebGLGraphics.switchMode = function(webGL, type)
{
    var webGLData;

    if(!webGL.data.length)
    {
        webGLData = PIXI.WebGLGraphics.graphicsDataPool.pop() || new PIXI.WebGLGraphicsData(webGL.gl);
        webGLData.mode = type;
        webGL.data.push(webGLData);
    }
    else
    {
        webGLData = webGL.data[webGL.data.length-1];

        if(webGLData.mode !== type || type === 1)
        {
            webGLData = PIXI.WebGLGraphics.graphicsDataPool.pop() || new PIXI.WebGLGraphicsData(webGL.gl);
            webGLData.mode = type;
            webGL.data.push(webGLData);
        }
    }

    webGLData.dirty = true;

    return webGLData;
};

/**
 * Builds a rectangle to draw
 *
 * @static
 * @private
 * @method buildRectangle
 * @param graphicsData {Graphics} The graphics object containing all the necessary properties
 * @param webGLData {Object}
 */
PIXI.WebGLGraphics.buildRectangle = function(graphicsData, webGLData)
{
    // --- //
    // need to convert points to a nice regular data
    //
    var rectData = graphicsData.shape;
    var x = rectData.x;
    var y = rectData.y;
    var width = rectData.width;
    var height = rectData.height;

    if(graphicsData.fill)
    {
        var color = PIXI.hex2rgb(graphicsData.fillColor);
        var alpha = graphicsData.fillAlpha;

        var r = color[0] * alpha;
        var g = color[1] * alpha;
        var b = color[2] * alpha;

        var verts = webGLData.points;
        var indices = webGLData.indices;

        var vertPos = verts.length/6;

        // start
        verts.push(x, y);
        verts.push(r, g, b, alpha);

        verts.push(x + width, y);
        verts.push(r, g, b, alpha);

        verts.push(x , y + height);
        verts.push(r, g, b, alpha);

        verts.push(x + width, y + height);
        verts.push(r, g, b, alpha);

        // insert 2 dead triangles..
        indices.push(vertPos, vertPos, vertPos+1, vertPos+2, vertPos+3, vertPos+3);
    }

    if(graphicsData.lineWidth)
    {
        var tempPoints = graphicsData.points;

        graphicsData.points = [x, y,
                  x + width, y,
                  x + width, y + height,
                  x, y + height,
                  x, y];


        PIXI.WebGLGraphics.buildLine(graphicsData, webGLData);

        graphicsData.points = tempPoints;
    }
};

/**
 * Builds a rounded rectangle to draw
 *
 * @static
 * @private
 * @method buildRoundedRectangle
 * @param graphicsData {Graphics} The graphics object containing all the necessary properties
 * @param webGLData {Object}
 */
PIXI.WebGLGraphics.buildRoundedRectangle = function(graphicsData, webGLData)
{
    var rrectData = graphicsData.shape;
    var x = rrectData.x;
    var y = rrectData.y;
    var width = rrectData.width;
    var height = rrectData.height;

    var radius = rrectData.radius;

    var recPoints = [];
    recPoints.push(x, y + radius);
    recPoints = recPoints.concat(PIXI.WebGLGraphics.quadraticBezierCurve(x, y + height - radius, x, y + height, x + radius, y + height));
    recPoints = recPoints.concat(PIXI.WebGLGraphics.quadraticBezierCurve(x + width - radius, y + height, x + width, y + height, x + width, y + height - radius));
    recPoints = recPoints.concat(PIXI.WebGLGraphics.quadraticBezierCurve(x + width, y + radius, x + width, y, x + width - radius, y));
    recPoints = recPoints.concat(PIXI.WebGLGraphics.quadraticBezierCurve(x + radius, y, x, y, x, y + radius));

    if (graphicsData.fill) {
        var color = PIXI.hex2rgb(graphicsData.fillColor);
        var alpha = graphicsData.fillAlpha;

        var r = color[0] * alpha;
        var g = color[1] * alpha;
        var b = color[2] * alpha;

        var verts = webGLData.points;
        var indices = webGLData.indices;

        var vecPos = verts.length/6;

        var triangles = PIXI.PolyK.Triangulate(recPoints);

        // 
        
        var i = 0;
        for (i = 0; i < triangles.length; i+=3)
        {
            indices.push(triangles[i] + vecPos);
            indices.push(triangles[i] + vecPos);
            indices.push(triangles[i+1] + vecPos);
            indices.push(triangles[i+2] + vecPos);
            indices.push(triangles[i+2] + vecPos);
        }


        for (i = 0; i < recPoints.length; i++)
        {
            verts.push(recPoints[i], recPoints[++i], r, g, b, alpha);
        }
    }

    if (graphicsData.lineWidth) {
        var tempPoints = graphicsData.points;

        graphicsData.points = recPoints;

        PIXI.WebGLGraphics.buildLine(graphicsData, webGLData);

        graphicsData.points = tempPoints;
    }
};

/**
 * Calculate the points for a quadratic bezier curve. (helper function..)
 * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
 *
 * @static
 * @private
 * @method quadraticBezierCurve
 * @param fromX {Number} Origin point x
 * @param fromY {Number} Origin point x
 * @param cpX {Number} Control point x
 * @param cpY {Number} Control point y
 * @param toX {Number} Destination point x
 * @param toY {Number} Destination point y
 * @return {Array(Number)}
 */
PIXI.WebGLGraphics.quadraticBezierCurve = function(fromX, fromY, cpX, cpY, toX, toY) {

    var xa,
        ya,
        xb,
        yb,
        x,
        y,
        n = 20,
        points = [];

    function getPt(n1 , n2, perc) {
        var diff = n2 - n1;

        return n1 + ( diff * perc );
    }

    var j = 0;
    for (var i = 0; i <= n; i++ )
    {
        j = i / n;

        // The Green Line
        xa = getPt( fromX , cpX , j );
        ya = getPt( fromY , cpY , j );
        xb = getPt( cpX , toX , j );
        yb = getPt( cpY , toY , j );

        // The Black Dot
        x = getPt( xa , xb , j );
        y = getPt( ya , yb , j );

        points.push(x, y);
    }
    return points;
};

/**
 * Builds a circle to draw
 *
 * @static
 * @private
 * @method buildCircle
 * @param graphicsData {Graphics} The graphics object to draw
 * @param webGLData {Object}
 */
PIXI.WebGLGraphics.buildCircle = function(graphicsData, webGLData)
{
    // need to convert points to a nice regular data
    var circleData = graphicsData.shape;
    var x = circleData.x;
    var y = circleData.y;
    var width;
    var height;
    
    // TODO - bit hacky??
    if(graphicsData.type === PIXI.Graphics.CIRC)
    {
        width = circleData.radius;
        height = circleData.radius;
    }
    else
    {
        width = circleData.width;
        height = circleData.height;
    }

    var totalSegs = 40;
    var seg = (Math.PI * 2) / totalSegs ;

    var i = 0;

    if(graphicsData.fill)
    {
        var color = PIXI.hex2rgb(graphicsData.fillColor);
        var alpha = graphicsData.fillAlpha;

        var r = color[0] * alpha;
        var g = color[1] * alpha;
        var b = color[2] * alpha;

        var verts = webGLData.points;
        var indices = webGLData.indices;

        var vecPos = verts.length/6;

        indices.push(vecPos);

        for (i = 0; i < totalSegs + 1 ; i++)
        {
            verts.push(x,y, r, g, b, alpha);

            verts.push(x + Math.sin(seg * i) * width,
                       y + Math.cos(seg * i) * height,
                       r, g, b, alpha);

            indices.push(vecPos++, vecPos++);
        }

        indices.push(vecPos-1);
    }

    if(graphicsData.lineWidth)
    {
        var tempPoints = graphicsData.points;

        graphicsData.points = [];

        for (i = 0; i < totalSegs + 1; i++)
        {
            graphicsData.points.push(x + Math.sin(seg * i) * width,
                                     y + Math.cos(seg * i) * height);
        }

        PIXI.WebGLGraphics.buildLine(graphicsData, webGLData);

        graphicsData.points = tempPoints;
    }
};

/**
 * Builds a line to draw
 *
 * @static
 * @private
 * @method buildLine
 * @param graphicsData {Graphics} The graphics object containing all the necessary properties
 * @param webGLData {Object}
 */
PIXI.WebGLGraphics.buildLine = function(graphicsData, webGLData)
{
    // TODO OPTIMISE!
    var i = 0;
    var points = graphicsData.points;
    if(points.length === 0)return;

    // if the line width is an odd number add 0.5 to align to a whole pixel
    if(graphicsData.lineWidth%2)
    {
        for (i = 0; i < points.length; i++) {
            points[i] += 0.5;
        }
    }

    // get first and last point.. figure out the middle!
    var firstPoint = new PIXI.Point( points[0], points[1] );
    var lastPoint = new PIXI.Point( points[points.length - 2], points[points.length - 1] );

    // if the first point is the last point - gonna have issues :)
    if(firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y)
    {
        // need to clone as we are going to slightly modify the shape..
        points = points.slice();

        points.pop();
        points.pop();

        lastPoint = new PIXI.Point( points[points.length - 2], points[points.length - 1] );

        var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) *0.5;
        var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) *0.5;

        points.unshift(midPointX, midPointY);
        points.push(midPointX, midPointY);
    }

    var verts = webGLData.points;
    var indices = webGLData.indices;
    var length = points.length / 2;
    var indexCount = points.length;
    var indexStart = verts.length/6;

    // DRAW the Line
    var width = graphicsData.lineWidth / 2;

    // sort color
    var color = PIXI.hex2rgb(graphicsData.lineColor);
    var alpha = graphicsData.lineAlpha;
    var r = color[0] * alpha;
    var g = color[1] * alpha;
    var b = color[2] * alpha;

    var px, py, p1x, p1y, p2x, p2y, p3x, p3y;
    var perpx, perpy, perp2x, perp2y, perp3x, perp3y;
    var a1, b1, c1, a2, b2, c2;
    var denom, pdist, dist;

    p1x = points[0];
    p1y = points[1];

    p2x = points[2];
    p2y = points[3];

    perpx = -(p1y - p2y);
    perpy =  p1x - p2x;

    dist = Math.sqrt(perpx*perpx + perpy*perpy);

    perpx /= dist;
    perpy /= dist;
    perpx *= width;
    perpy *= width;

    // start
    verts.push(p1x - perpx , p1y - perpy,
                r, g, b, alpha);

    verts.push(p1x + perpx , p1y + perpy,
                r, g, b, alpha);

    for (i = 1; i < length-1; i++)
    {
        p1x = points[(i-1)*2];
        p1y = points[(i-1)*2 + 1];

        p2x = points[(i)*2];
        p2y = points[(i)*2 + 1];

        p3x = points[(i+1)*2];
        p3y = points[(i+1)*2 + 1];

        perpx = -(p1y - p2y);
        perpy = p1x - p2x;

        dist = Math.sqrt(perpx*perpx + perpy*perpy);
        perpx /= dist;
        perpy /= dist;
        perpx *= width;
        perpy *= width;

        perp2x = -(p2y - p3y);
        perp2y = p2x - p3x;

        dist = Math.sqrt(perp2x*perp2x + perp2y*perp2y);
        perp2x /= dist;
        perp2y /= dist;
        perp2x *= width;
        perp2y *= width;

        a1 = (-perpy + p1y) - (-perpy + p2y);
        b1 = (-perpx + p2x) - (-perpx + p1x);
        c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
        a2 = (-perp2y + p3y) - (-perp2y + p2y);
        b2 = (-perp2x + p2x) - (-perp2x + p3x);
        c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);

        denom = a1*b2 - a2*b1;

        if(Math.abs(denom) < 0.1 )
        {

            denom+=10.1;
            verts.push(p2x - perpx , p2y - perpy,
                r, g, b, alpha);

            verts.push(p2x + perpx , p2y + perpy,
                r, g, b, alpha);

            continue;
        }

        px = (b1*c2 - b2*c1)/denom;
        py = (a2*c1 - a1*c2)/denom;


        pdist = (px -p2x) * (px -p2x) + (py -p2y) + (py -p2y);


        if(pdist > 140 * 140)
        {
            perp3x = perpx - perp2x;
            perp3y = perpy - perp2y;

            dist = Math.sqrt(perp3x*perp3x + perp3y*perp3y);
            perp3x /= dist;
            perp3y /= dist;
            perp3x *= width;
            perp3y *= width;

            verts.push(p2x - perp3x, p2y -perp3y);
            verts.push(r, g, b, alpha);

            verts.push(p2x + perp3x, p2y +perp3y);
            verts.push(r, g, b, alpha);

            verts.push(p2x - perp3x, p2y -perp3y);
            verts.push(r, g, b, alpha);

            indexCount++;
        }
        else
        {

            verts.push(px , py);
            verts.push(r, g, b, alpha);

            verts.push(p2x - (px-p2x), p2y - (py - p2y));
            verts.push(r, g, b, alpha);
        }
    }

    p1x = points[(length-2)*2];
    p1y = points[(length-2)*2 + 1];

    p2x = points[(length-1)*2];
    p2y = points[(length-1)*2 + 1];

    perpx = -(p1y - p2y);
    perpy = p1x - p2x;

    dist = Math.sqrt(perpx*perpx + perpy*perpy);
    perpx /= dist;
    perpy /= dist;
    perpx *= width;
    perpy *= width;

    verts.push(p2x - perpx , p2y - perpy);
    verts.push(r, g, b, alpha);

    verts.push(p2x + perpx , p2y + perpy);
    verts.push(r, g, b, alpha);

    indices.push(indexStart);

    for (i = 0; i < indexCount; i++)
    {
        indices.push(indexStart++);
    }

    indices.push(indexStart-1);
};

/**
 * Builds a complex polygon to draw
 *
 * @static
 * @private
 * @method buildComplexPoly
 * @param graphicsData {Graphics} The graphics object containing all the necessary properties
 * @param webGLData {Object}
 */
PIXI.WebGLGraphics.buildComplexPoly = function(graphicsData, webGLData)
{
    //TODO - no need to copy this as it gets turned into a FLoat32Array anyways..
    var points = graphicsData.points.slice();
    if(points.length < 6)return;

    // get first and last point.. figure out the middle!
    var indices = webGLData.indices;
    webGLData.points = points;
    webGLData.alpha = graphicsData.fillAlpha;
    webGLData.color = PIXI.hex2rgb(graphicsData.fillColor);

    /*
        calclate the bounds..
    */
    var minX = Infinity;
    var maxX = -Infinity;

    var minY = Infinity;
    var maxY = -Infinity;

    var x,y;

    // get size..
    for (var i = 0; i < points.length; i+=2)
    {
        x = points[i];
        y = points[i+1];

        minX = x < minX ? x : minX;
        maxX = x > maxX ? x : maxX;

        minY = y < minY ? y : minY;
        maxY = y > maxY ? y : maxY;
    }

    // add a quad to the end cos there is no point making another buffer!
    points.push(minX, minY,
                maxX, minY,
                maxX, maxY,
                minX, maxY);

    // push a quad onto the end.. 
    
    //TODO - this aint needed!
    var length = points.length / 2;
    for (i = 0; i < length; i++)
    {
        indices.push( i );
    }

};

/**
 * Builds a polygon to draw
 *
 * @static
 * @private
 * @method buildPoly
 * @param graphicsData {Graphics} The graphics object containing all the necessary properties
 * @param webGLData {Object}
 */
PIXI.WebGLGraphics.buildPoly = function(graphicsData, webGLData)
{
    var points = graphicsData.points;

    if(points.length < 6)return;
    // get first and last point.. figure out the middle!
    var verts = webGLData.points;
    var indices = webGLData.indices;

    var length = points.length / 2;

    // sort color
    var color = PIXI.hex2rgb(graphicsData.fillColor);
    var alpha = graphicsData.fillAlpha;
    var r = color[0] * alpha;
    var g = color[1] * alpha;
    var b = color[2] * alpha;

    var triangles = PIXI.PolyK.Triangulate(points);

    if(!triangles)return false;

    var vertPos = verts.length / 6;

    var i = 0;

    for (i = 0; i < triangles.length; i+=3)
    {
        indices.push(triangles[i] + vertPos);
        indices.push(triangles[i] + vertPos);
        indices.push(triangles[i+1] + vertPos);
        indices.push(triangles[i+2] +vertPos);
        indices.push(triangles[i+2] + vertPos);
    }

    for (i = 0; i < length; i++)
    {
        verts.push(points[i * 2], points[i * 2 + 1],
                   r, g, b, alpha);
    }

    return true;
};

PIXI.WebGLGraphics.graphicsDataPool = [];

/**
 * @class WebGLGraphicsData
 * @private
 * @static
 */
PIXI.WebGLGraphicsData = function(gl)
{
    this.gl = gl;

    //TODO does this need to be split before uploding??
    this.color = [0,0,0]; // color split!
    this.points = [];
    this.indices = [];
    this.buffer = gl.createBuffer();
    this.indexBuffer = gl.createBuffer();
    this.mode = 1;
    this.alpha = 1;
    this.dirty = true;
};

/**
 * @method reset
 */
PIXI.WebGLGraphicsData.prototype.reset = function()
{
    this.points = [];
    this.indices = [];
};

/**
 * @method upload
 */
PIXI.WebGLGraphicsData.prototype.upload = function()
{
    var gl = this.gl;

//    this.lastIndex = graphics.graphicsData.length;
    this.glPoints = new PIXI.Float32Array(this.points);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.glPoints, gl.STATIC_DRAW);

    this.glIndicies = new PIXI.Uint16Array(this.indices);

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.glIndicies, gl.STATIC_DRAW);

    this.dirty = false;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

PIXI.glContexts = []; // this is where we store the webGL contexts for easy access.
PIXI.instances = [];

/**
 * The WebGLRenderer draws the stage and all its content onto a webGL enabled canvas. This renderer
 * should be used for browsers that support webGL. This Render works by automatically managing webGLBatchs.
 * So no need for Sprite Batches or Sprite Clouds.
 * Don't forget to add the view to your DOM or you will not see anything :)
 *
 * @class WebGLRenderer
 * @constructor
 * @param [width=0] {Number} the width of the canvas view
 * @param [height=0] {Number} the height of the canvas view
 * @param [options] {Object} The optional renderer parameters
 * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional
 * @param [options.transparent=false] {Boolean} If the render view is transparent, default false
 * @param [options.autoResize=false] {Boolean} If the render view is automatically resized, default false
 * @param [options.antialias=false] {Boolean} sets antialias (only applicable in chrome at the moment)
 * @param [options.preserveDrawingBuffer=false] {Boolean} enables drawing buffer preservation, enable this if you need to call toDataUrl on the webgl context
 * @param [options.resolution=1] {Number} the resolution of the renderer retina would be 2
 */
PIXI.WebGLRenderer = function(width, height, options)
{
    if(options)
    {
        for (var i in PIXI.defaultRenderOptions)
        {
            if (typeof options[i] === 'undefined') options[i] = PIXI.defaultRenderOptions[i];
        }
    }
    else
    {
        options = PIXI.defaultRenderOptions;
    }

    if(!PIXI.defaultRenderer)
    {
        PIXI.sayHello('webGL');
        PIXI.defaultRenderer = this;
    }

    /**
     * @property type
     * @type Number
     */
    this.type = PIXI.WEBGL_RENDERER;

    /**
     * The resolution of the renderer
     *
     * @property resolution
     * @type Number
     * @default 1
     */
    this.resolution = options.resolution;

    // do a catch.. only 1 webGL renderer..

    /**
     * Whether the render view is transparent
     *
     * @property transparent
     * @type Boolean
     */
    this.transparent = options.transparent;

    /**
     * Whether the render view should be resized automatically
     *
     * @property autoResize
     * @type Boolean
     */
    this.autoResize = options.autoResize || false;

    /**
     * The value of the preserveDrawingBuffer flag affects whether or not the contents of the stencil buffer is retained after rendering.
     *
     * @property preserveDrawingBuffer
     * @type Boolean
     */
    this.preserveDrawingBuffer = options.preserveDrawingBuffer;

    /**
     * This sets if the WebGLRenderer will clear the context texture or not before the new render pass. If true:
     * If the Stage is NOT transparent, Pixi will clear to alpha (0, 0, 0, 0).
     * If the Stage is transparent, Pixi will clear to the target Stage's background color.
     * Disable this by setting this to false. For example: if your game has a canvas filling background image, you often don't need this set.
     *
     * @property clearBeforeRender
     * @type Boolean
     * @default
     */
    this.clearBeforeRender = options.clearBeforeRender;

    /**
     * The width of the canvas view
     *
     * @property width
     * @type Number
     * @default 800
     */
    this.width = width || 800;

    /**
     * The height of the canvas view
     *
     * @property height
     * @type Number
     * @default 600
     */
    this.height = height || 600;

    /**
     * The canvas element that everything is drawn to
     *
     * @property view
     * @type HTMLCanvasElement
     */
    this.view = options.view || document.createElement( 'canvas' );

    // deal with losing context..

    /**
     * @property contextLostBound
     * @type Function
     */
    this.contextLostBound = this.handleContextLost.bind(this);

    /**
     * @property contextRestoredBound
     * @type Function
     */
    this.contextRestoredBound = this.handleContextRestored.bind(this);

    this.view.addEventListener('webglcontextlost', this.contextLostBound, false);
    this.view.addEventListener('webglcontextrestored', this.contextRestoredBound, false);

    /**
     * @property _contextOptions
     * @type Object
     * @private
     */
    this._contextOptions = {
        alpha: this.transparent,
        antialias: options.antialias, // SPEED UP??
        premultipliedAlpha:this.transparent && this.transparent !== 'notMultiplied',
        stencil:true,
        preserveDrawingBuffer: options.preserveDrawingBuffer
    };

    /**
     * @property projection
     * @type Point
     */
    this.projection = new PIXI.Point();

    /**
     * @property offset
     * @type Point
     */
    this.offset = new PIXI.Point(0, 0);

    // time to create the render managers! each one focuses on managing a state in webGL

    /**
     * Deals with managing the shader programs and their attribs
     * @property shaderManager
     * @type WebGLShaderManager
     */
    this.shaderManager = new PIXI.WebGLShaderManager();

    /**
     * Manages the rendering of sprites
     * @property spriteBatch
     * @type WebGLSpriteBatch
     */
    this.spriteBatch = new PIXI.WebGLSpriteBatch();

    /**
     * Manages the masks using the stencil buffer
     * @property maskManager
     * @type WebGLMaskManager
     */
    this.maskManager = new PIXI.WebGLMaskManager();

    /**
     * Manages the filters
     * @property filterManager
     * @type WebGLFilterManager
     */
    this.filterManager = new PIXI.WebGLFilterManager();

    /**
     * Manages the stencil buffer
     * @property stencilManager
     * @type WebGLStencilManager
     */
    this.stencilManager = new PIXI.WebGLStencilManager();

    /**
     * Manages the blendModes
     * @property blendModeManager
     * @type WebGLBlendModeManager
     */
    this.blendModeManager = new PIXI.WebGLBlendModeManager();

    /**
     * TODO remove
     * @property renderSession
     * @type Object
     */
    this.renderSession = {};
    this.renderSession.gl = this.gl;
    this.renderSession.drawCount = 0;
    this.renderSession.shaderManager = this.shaderManager;
    this.renderSession.maskManager = this.maskManager;
    this.renderSession.filterManager = this.filterManager;
    this.renderSession.blendModeManager = this.blendModeManager;
    this.renderSession.spriteBatch = this.spriteBatch;
    this.renderSession.stencilManager = this.stencilManager;
    this.renderSession.renderer = this;
    this.renderSession.resolution = this.resolution;

    // time init the context..
    this.initContext();

    // map some webGL blend modes..
    this.mapBlendModes();
};

// constructor
PIXI.WebGLRenderer.prototype.constructor = PIXI.WebGLRenderer;

/**
* @method initContext
*/
PIXI.WebGLRenderer.prototype.initContext = function()
{
    var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);
    this.gl = gl;

    if (!gl) {
        // fail, not able to get a context
        throw new Error('This browser does not support webGL. Try using the canvas renderer');
    }

    this.glContextId = gl.id = PIXI.WebGLRenderer.glContextId ++;

    PIXI.glContexts[this.glContextId] = gl;

    PIXI.instances[this.glContextId] = this;

    // set up the default pixi settings..
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.CULL_FACE);
    gl.enable(gl.BLEND);

    // need to set the context for all the managers...
    this.shaderManager.setContext(gl);
    this.spriteBatch.setContext(gl);
    this.maskManager.setContext(gl);
    this.filterManager.setContext(gl);
    this.blendModeManager.setContext(gl);
    this.stencilManager.setContext(gl);

    this.renderSession.gl = this.gl;

    // now resize and we are good to go!
    this.resize(this.width, this.height);
};

/**
 * Renders the stage to its webGL view
 *
 * @method render
 * @param stage {Stage} the Stage element to be rendered
 */
PIXI.WebGLRenderer.prototype.render = function(stage)
{
    // no point rendering if our context has been blown up!
    if(this.contextLost)return;

    // if rendering a new stage clear the batches..
    if(this.__stage !== stage)
    {
        if(stage.interactive)stage.interactionManager.removeEvents();

        // TODO make this work
        // dont think this is needed any more?
        this.__stage = stage;
    }

    // update the scene graph
    stage.updateTransform();

    var gl = this.gl;

    // interaction
    if(stage._interactive)
    {
        //need to add some events!
        if(!stage._interactiveEventsAdded)
        {
            stage._interactiveEventsAdded = true;
            stage.interactionManager.setTarget(this);
        }
    }
    else
    {
        if(stage._interactiveEventsAdded)
        {
            stage._interactiveEventsAdded = false;
            stage.interactionManager.setTarget(this);
        }
    }

    // -- Does this need to be set every frame? -- //
    gl.viewport(0, 0, this.width, this.height);

    // make sure we are bound to the main frame buffer
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);

    if (this.clearBeforeRender)
        {
        if(this.transparent)
        {
            gl.clearColor(0, 0, 0, 0);
        }
        else
        {
            gl.clearColor(stage.backgroundColorSplit[0],stage.backgroundColorSplit[1],stage.backgroundColorSplit[2], 1);
        }

        gl.clear (gl.COLOR_BUFFER_BIT);
    }

    this.renderDisplayObject( stage, this.projection );
};

/**
 * Renders a Display Object.
 *
 * @method renderDisplayObject
 * @param displayObject {DisplayObject} The DisplayObject to render
 * @param projection {Point} The projection
 * @param buffer {Array} a standard WebGL buffer
 */
PIXI.WebGLRenderer.prototype.renderDisplayObject = function(displayObject, projection, buffer)
{
    this.renderSession.blendModeManager.setBlendMode(PIXI.blendModes.NORMAL);

    // reset the render session data..
    this.renderSession.drawCount = 0;

    // make sure to flip the Y if using a render texture..
    this.renderSession.flipY = buffer ? -1 : 1;

    // set the default projection
    this.renderSession.projection = projection;

    //set the default offset
    this.renderSession.offset = this.offset;

    // start the sprite batch
    this.spriteBatch.begin(this.renderSession);

    // start the filter manager
    this.filterManager.begin(this.renderSession, buffer);

    // render the scene!
    displayObject._renderWebGL(this.renderSession);

    // finish the sprite batch
    this.spriteBatch.end();
};

/**
 * Resizes the webGL view to the specified width and height.
 *
 * @method resize
 * @param width {Number} the new width of the webGL view
 * @param height {Number} the new height of the webGL view
 */
PIXI.WebGLRenderer.prototype.resize = function(width, height)
{
    this.width = width * this.resolution;
    this.height = height * this.resolution;

    this.view.width = this.width;
    this.view.height = this.height;

    if (this.autoResize) {
        this.view.style.width = this.width / this.resolution + 'px';
        this.view.style.height = this.height / this.resolution + 'px';
    }

    this.gl.viewport(0, 0, this.width, this.height);

    this.projection.x =  this.width / 2 / this.resolution;
    this.projection.y =  -this.height / 2 / this.resolution;
};

/**
 * Updates and Creates a WebGL texture for the renderers context.
 *
 * @method updateTexture
 * @param texture {Texture} the texture to update
 */
PIXI.WebGLRenderer.prototype.updateTexture = function(texture)
{
    if(!texture.hasLoaded )return;

    var gl = this.gl;

    if(!texture._glTextures[gl.id])texture._glTextures[gl.id] = gl.createTexture();

    gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);

    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultipliedAlpha);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);

    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR : gl.NEAREST);
    

    if(texture.mipmap && PIXI.isPowerOfTwo(texture.width, texture.height))
    {
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);
        gl.generateMipmap(gl.TEXTURE_2D);
    }
    else
    {
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR : gl.NEAREST);
    }

    // reguler...
    if(!texture._powerOf2)
    {
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    }
    else
    {
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
    }

    texture._dirty[gl.id] = false;

    return  texture._glTextures[gl.id];
};

/**
 * Handles a lost webgl context
 *
 * @method handleContextLost
 * @param event {Event}
 * @private
 */
PIXI.WebGLRenderer.prototype.handleContextLost = function(event)
{
    event.preventDefault();
    this.contextLost = true;
};

/**
 * Handles a restored webgl context
 *
 * @method handleContextRestored
 * @param event {Event}
 * @private
 */
PIXI.WebGLRenderer.prototype.handleContextRestored = function()
{
    this.initContext();

    // empty all the ol gl textures as they are useless now
    for(var key in PIXI.TextureCache)
    {
        var texture = PIXI.TextureCache[key].baseTexture;
        texture._glTextures = [];
    }

    this.contextLost = false;
};

/**
 * Removes everything from the renderer (event listeners, spritebatch, etc...)
 *
 * @method destroy
 */
PIXI.WebGLRenderer.prototype.destroy = function()
{
    // remove listeners
    this.view.removeEventListener('webglcontextlost', this.contextLostBound);
    this.view.removeEventListener('webglcontextrestored', this.contextRestoredBound);

    PIXI.glContexts[this.glContextId] = null;

    this.projection = null;
    this.offset = null;

    // time to create the render managers! each one focuses on managine a state in webGL
    this.shaderManager.destroy();
    this.spriteBatch.destroy();
    this.maskManager.destroy();
    this.filterManager.destroy();

    this.shaderManager = null;
    this.spriteBatch = null;
    this.maskManager = null;
    this.filterManager = null;

    this.gl = null;
    this.renderSession = null;
};

/**
 * Maps Pixi blend modes to WebGL blend modes.
 *
 * @method mapBlendModes
 */
PIXI.WebGLRenderer.prototype.mapBlendModes = function()
{
    var gl = this.gl;

    if(!PIXI.blendModesWebGL)
    {
        PIXI.blendModesWebGL = [];

        PIXI.blendModesWebGL[PIXI.blendModes.NORMAL]        = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.ADD]           = [gl.SRC_ALPHA, gl.DST_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.MULTIPLY]      = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.SCREEN]        = [gl.SRC_ALPHA, gl.ONE];
        PIXI.blendModesWebGL[PIXI.blendModes.OVERLAY]       = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.DARKEN]        = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.LIGHTEN]       = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.COLOR_DODGE]   = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.COLOR_BURN]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.HARD_LIGHT]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.SOFT_LIGHT]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.DIFFERENCE]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.EXCLUSION]     = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.HUE]           = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.SATURATION]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.COLOR]         = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
        PIXI.blendModesWebGL[PIXI.blendModes.LUMINOSITY]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];
    }
};

PIXI.WebGLRenderer.glContextId = 0;

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class WebGLBlendModeManager
* @constructor
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.WebGLBlendModeManager = function()
{
    /**
     * @property currentBlendMode
     * @type Number
     */
    this.currentBlendMode = 99999;
};

PIXI.WebGLBlendModeManager.prototype.constructor = PIXI.WebGLBlendModeManager;

/**
 * Sets the WebGL Context.
 *
 * @method setContext
 * @param gl {WebGLContext} the current WebGL drawing context
 */
PIXI.WebGLBlendModeManager.prototype.setContext = function(gl)
{
    this.gl = gl;
};

/**
* Sets-up the given blendMode from WebGL's point of view.
* 
* @method setBlendMode 
* @param blendMode {Number} the blendMode, should be a Pixi const, such as PIXI.BlendModes.ADD
*/
PIXI.WebGLBlendModeManager.prototype.setBlendMode = function(blendMode)
{
    if(this.currentBlendMode === blendMode)return false;

    this.currentBlendMode = blendMode;
    
    var blendModeWebGL = PIXI.blendModesWebGL[this.currentBlendMode];
    this.gl.blendFunc(blendModeWebGL[0], blendModeWebGL[1]);
    
    return true;
};

/**
* Destroys this object.
* 
* @method destroy
*/
PIXI.WebGLBlendModeManager.prototype.destroy = function()
{
    this.gl = null;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class WebGLMaskManager
* @constructor
* @private
*/
PIXI.WebGLMaskManager = function()
{
};

PIXI.WebGLMaskManager.prototype.constructor = PIXI.WebGLMaskManager;

/**
* Sets the drawing context to the one given in parameter.
* 
* @method setContext 
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.WebGLMaskManager.prototype.setContext = function(gl)
{
    this.gl = gl;
};

/**
* Applies the Mask and adds it to the current filter stack.
* 
* @method pushMask
* @param maskData {Array}
* @param renderSession {Object}
*/
PIXI.WebGLMaskManager.prototype.pushMask = function(maskData, renderSession)
{
    var gl = renderSession.gl;

    if(maskData.dirty)
    {
        PIXI.WebGLGraphics.updateGraphics(maskData, gl);
    }

    if(!maskData._webGL[gl.id].data.length)return;

    renderSession.stencilManager.pushStencil(maskData, maskData._webGL[gl.id].data[0], renderSession);
};

/**
* Removes the last filter from the filter stack and doesn't return it.
* 
* @method popMask
* @param maskData {Array}
* @param renderSession {Object} an object containing all the useful parameters
*/
PIXI.WebGLMaskManager.prototype.popMask = function(maskData, renderSession)
{
    var gl = this.gl;
    renderSession.stencilManager.popStencil(maskData, maskData._webGL[gl.id].data[0], renderSession);
};

/**
* Destroys the mask stack.
* 
* @method destroy
*/
PIXI.WebGLMaskManager.prototype.destroy = function()
{
    this.gl = null;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class WebGLStencilManager
* @constructor
* @private
*/
PIXI.WebGLStencilManager = function()
{
    this.stencilStack = [];
    this.reverse = true;
    this.count = 0;
};

/**
* Sets the drawing context to the one given in parameter.
* 
* @method setContext 
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.WebGLStencilManager.prototype.setContext = function(gl)
{
    this.gl = gl;
};

/**
* Applies the Mask and adds it to the current filter stack.
* 
* @method pushMask
* @param graphics {Graphics}
* @param webGLData {Array}
* @param renderSession {Object}
*/
PIXI.WebGLStencilManager.prototype.pushStencil = function(graphics, webGLData, renderSession)
{
    var gl = this.gl;
    this.bindGraphics(graphics, webGLData, renderSession);

    if(this.stencilStack.length === 0)
    {
        gl.enable(gl.STENCIL_TEST);
        gl.clear(gl.STENCIL_BUFFER_BIT);
        this.reverse = true;
        this.count = 0;
    }

    this.stencilStack.push(webGLData);

    var level = this.count;

    gl.colorMask(false, false, false, false);

    gl.stencilFunc(gl.ALWAYS,0,0xFF);
    gl.stencilOp(gl.KEEP,gl.KEEP,gl.INVERT);

    // draw the triangle strip!

    if(webGLData.mode === 1)
    {
        gl.drawElements(gl.TRIANGLE_FAN,  webGLData.indices.length - 4, gl.UNSIGNED_SHORT, 0 );
       
        if(this.reverse)
        {
            gl.stencilFunc(gl.EQUAL, 0xFF - level, 0xFF);
            gl.stencilOp(gl.KEEP,gl.KEEP,gl.DECR);
        }
        else
        {
            gl.stencilFunc(gl.EQUAL,level, 0xFF);
            gl.stencilOp(gl.KEEP,gl.KEEP,gl.INCR);
        }

        // draw a quad to increment..
        gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_SHORT, ( webGLData.indices.length - 4 ) * 2 );
               
        if(this.reverse)
        {
            gl.stencilFunc(gl.EQUAL,0xFF-(level+1), 0xFF);
        }
        else
        {
            gl.stencilFunc(gl.EQUAL,level+1, 0xFF);
        }

        this.reverse = !this.reverse;
    }
    else
    {
        if(!this.reverse)
        {
            gl.stencilFunc(gl.EQUAL, 0xFF - level, 0xFF);
            gl.stencilOp(gl.KEEP,gl.KEEP,gl.DECR);
        }
        else
        {
            gl.stencilFunc(gl.EQUAL,level, 0xFF);
            gl.stencilOp(gl.KEEP,gl.KEEP,gl.INCR);
        }

        gl.drawElements(gl.TRIANGLE_STRIP,  webGLData.indices.length, gl.UNSIGNED_SHORT, 0 );

        if(!this.reverse)
        {
            gl.stencilFunc(gl.EQUAL,0xFF-(level+1), 0xFF);
        }
        else
        {
            gl.stencilFunc(gl.EQUAL,level+1, 0xFF);
        }
    }

    gl.colorMask(true, true, true, true);
    gl.stencilOp(gl.KEEP,gl.KEEP,gl.KEEP);

    this.count++;
};

/**
 * TODO this does not belong here!
 * 
 * @method bindGraphics
 * @param graphics {Graphics}
 * @param webGLData {Array}
 * @param renderSession {Object}
 */
PIXI.WebGLStencilManager.prototype.bindGraphics = function(graphics, webGLData, renderSession)
{
    //if(this._currentGraphics === graphics)return;
    this._currentGraphics = graphics;

    var gl = this.gl;

     // bind the graphics object..
    var projection = renderSession.projection,
        offset = renderSession.offset,
        shader;// = renderSession.shaderManager.primitiveShader;

    if(webGLData.mode === 1)
    {
        shader = renderSession.shaderManager.complexPrimitiveShader;

        renderSession.shaderManager.setShader( shader );

        gl.uniform1f(shader.flipY, renderSession.flipY);
       
        gl.uniformMatrix3fv(shader.translationMatrix, false, graphics.worldTransform.toArray(true));

        gl.uniform2f(shader.projectionVector, projection.x, -projection.y);
        gl.uniform2f(shader.offsetVector, -offset.x, -offset.y);

        gl.uniform3fv(shader.tintColor, PIXI.hex2rgb(graphics.tint));
        gl.uniform3fv(shader.color, webGLData.color);

        gl.uniform1f(shader.alpha, graphics.worldAlpha * webGLData.alpha);

        gl.bindBuffer(gl.ARRAY_BUFFER, webGLData.buffer);

        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 4 * 2, 0);


        // now do the rest..
        // set the index buffer!
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLData.indexBuffer);
    }
    else
    {
        //renderSession.shaderManager.activatePrimitiveShader();
        shader = renderSession.shaderManager.primitiveShader;
        renderSession.shaderManager.setShader( shader );

        gl.uniformMatrix3fv(shader.translationMatrix, false, graphics.worldTransform.toArray(true));

        gl.uniform1f(shader.flipY, renderSession.flipY);
        gl.uniform2f(shader.projectionVector, projection.x, -projection.y);
        gl.uniform2f(shader.offsetVector, -offset.x, -offset.y);

        gl.uniform3fv(shader.tintColor, PIXI.hex2rgb(graphics.tint));

        gl.uniform1f(shader.alpha, graphics.worldAlpha);
        
        gl.bindBuffer(gl.ARRAY_BUFFER, webGLData.buffer);

        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 4 * 6, 0);
        gl.vertexAttribPointer(shader.colorAttribute, 4, gl.FLOAT, false,4 * 6, 2 * 4);

        // set the index buffer!
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLData.indexBuffer);
    }
};

/**
 * @method popStencil
 * @param graphics {Graphics}
 * @param webGLData {Array}
 * @param renderSession {Object}
 */
PIXI.WebGLStencilManager.prototype.popStencil = function(graphics, webGLData, renderSession)
{
    var gl = this.gl;
    this.stencilStack.pop();
   
    this.count--;

    if(this.stencilStack.length === 0)
    {
        // the stack is empty!
        gl.disable(gl.STENCIL_TEST);

    }
    else
    {

        var level = this.count;

        this.bindGraphics(graphics, webGLData, renderSession);

        gl.colorMask(false, false, false, false);
    
        if(webGLData.mode === 1)
        {
            this.reverse = !this.reverse;

            if(this.reverse)
            {
                gl.stencilFunc(gl.EQUAL, 0xFF - (level+1), 0xFF);
                gl.stencilOp(gl.KEEP,gl.KEEP,gl.INCR);
            }
            else
            {
                gl.stencilFunc(gl.EQUAL,level+1, 0xFF);
                gl.stencilOp(gl.KEEP,gl.KEEP,gl.DECR);
            }

            // draw a quad to increment..
            gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_SHORT, ( webGLData.indices.length - 4 ) * 2 );
            
            gl.stencilFunc(gl.ALWAYS,0,0xFF);
            gl.stencilOp(gl.KEEP,gl.KEEP,gl.INVERT);

            // draw the triangle strip!
            gl.drawElements(gl.TRIANGLE_FAN,  webGLData.indices.length - 4, gl.UNSIGNED_SHORT, 0 );
           
            if(!this.reverse)
            {
                gl.stencilFunc(gl.EQUAL,0xFF-(level), 0xFF);
            }
            else
            {
                gl.stencilFunc(gl.EQUAL,level, 0xFF);
            }

        }
        else
        {
          //  console.log("<<>>")
            if(!this.reverse)
            {
                gl.stencilFunc(gl.EQUAL, 0xFF - (level+1), 0xFF);
                gl.stencilOp(gl.KEEP,gl.KEEP,gl.INCR);
            }
            else
            {
                gl.stencilFunc(gl.EQUAL,level+1, 0xFF);
                gl.stencilOp(gl.KEEP,gl.KEEP,gl.DECR);
            }

            gl.drawElements(gl.TRIANGLE_STRIP,  webGLData.indices.length, gl.UNSIGNED_SHORT, 0 );

            if(!this.reverse)
            {
                gl.stencilFunc(gl.EQUAL,0xFF-(level), 0xFF);
            }
            else
            {
                gl.stencilFunc(gl.EQUAL,level, 0xFF);
            }
        }

        gl.colorMask(true, true, true, true);
        gl.stencilOp(gl.KEEP,gl.KEEP,gl.KEEP);


    }
};

/**
* Destroys the mask stack.
* 
* @method destroy
*/
PIXI.WebGLStencilManager.prototype.destroy = function()
{
    this.stencilStack = null;
    this.gl = null;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class WebGLShaderManager
* @constructor
* @private
*/
PIXI.WebGLShaderManager = function()
{
    /**
     * @property maxAttibs
     * @type Number
     */
    this.maxAttibs = 10;

    /**
     * @property attribState
     * @type Array
     */
    this.attribState = [];

    /**
     * @property tempAttribState
     * @type Array
     */
    this.tempAttribState = [];

    for (var i = 0; i < this.maxAttibs; i++)
    {
        this.attribState[i] = false;
    }

    /**
     * @property stack
     * @type Array
     */
    this.stack = [];

};

PIXI.WebGLShaderManager.prototype.constructor = PIXI.WebGLShaderManager;

/**
* Initialises the context and the properties.
* 
* @method setContext 
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.WebGLShaderManager.prototype.setContext = function(gl)
{
    this.gl = gl;
    
    // the next one is used for rendering primitives
    this.primitiveShader = new PIXI.PrimitiveShader(gl);

    // the next one is used for rendering triangle strips
    this.complexPrimitiveShader = new PIXI.ComplexPrimitiveShader(gl);

    // this shader is used for the default sprite rendering
    this.defaultShader = new PIXI.PixiShader(gl);

    // this shader is used for the fast sprite rendering
    this.fastShader = new PIXI.PixiFastShader(gl);

    // the next one is used for rendering triangle strips
    this.stripShader = new PIXI.StripShader(gl);
    this.setShader(this.defaultShader);
};

/**
* Takes the attributes given in parameters.
* 
* @method setAttribs
* @param attribs {Array} attribs 
*/
PIXI.WebGLShaderManager.prototype.setAttribs = function(attribs)
{
    // reset temp state
    var i;

    for (i = 0; i < this.tempAttribState.length; i++)
    {
        this.tempAttribState[i] = false;
    }

    // set the new attribs
    for (i = 0; i < attribs.length; i++)
    {
        var attribId = attribs[i];
        this.tempAttribState[attribId] = true;
    }

    var gl = this.gl;

    for (i = 0; i < this.attribState.length; i++)
    {
        if(this.attribState[i] !== this.tempAttribState[i])
        {
            this.attribState[i] = this.tempAttribState[i];

            if(this.tempAttribState[i])
            {
                gl.enableVertexAttribArray(i);
            }
            else
            {
                gl.disableVertexAttribArray(i);
            }
        }
    }
};

/**
* Sets the current shader.
* 
* @method setShader
* @param shader {Any}
*/
PIXI.WebGLShaderManager.prototype.setShader = function(shader)
{
    if(this._currentId === shader._UID)return false;
    
    this._currentId = shader._UID;

    this.currentShader = shader;

    this.gl.useProgram(shader.program);
    this.setAttribs(shader.attributes);

    return true;
};

/**
* Destroys this object.
* 
* @method destroy
*/
PIXI.WebGLShaderManager.prototype.destroy = function()
{
    this.attribState = null;

    this.tempAttribState = null;

    this.primitiveShader.destroy();

    this.complexPrimitiveShader.destroy();

    this.defaultShader.destroy();

    this.fastShader.destroy();

    this.stripShader.destroy();

    this.gl = null;
};

/**
 * @author Mat Groves
 * 
 * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/
 * for creating the original pixi version!
 * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now share 4 bytes on the vertex buffer
 * 
 * Heavily inspired by LibGDX's WebGLSpriteBatch:
 * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/WebGLSpriteBatch.java
 */

 /**
 *
 * @class WebGLSpriteBatch
 * @private
 * @constructor
 */
PIXI.WebGLSpriteBatch = function()
{
    /**
     * @property vertSize
     * @type Number
     */
    this.vertSize = 5;

    /**
     * The number of images in the SpriteBatch before it flushes
     * @property size
     * @type Number
     */
    this.size = 2000;//Math.pow(2, 16) /  this.vertSize;

    //the total number of bytes in our batch
    var numVerts = this.size * 4 * 4 * this.vertSize;
    //the total number of indices in our batch
    var numIndices = this.size * 6;

    /**
    * Holds the vertices
    *
    * @property vertices
    * @type ArrayBuffer
    */
    this.vertices = new PIXI.ArrayBuffer(numVerts);

    /**
    * View on the vertices as a Float32Array
    *
    * @property positions
    * @type Float32Array
    */
    this.positions = new PIXI.Float32Array(this.vertices);

    /**
    * View on the vertices as a Uint32Array
    *
    * @property colors
    * @type Uint32Array
    */
    this.colors = new PIXI.Uint32Array(this.vertices);

    /**
     * Holds the indices
     *
     * @property indices
     * @type Uint16Array
     */
    this.indices = new PIXI.Uint16Array(numIndices);
    
    /**
     * @property lastIndexCount
     * @type Number
     */
    this.lastIndexCount = 0;

    for (var i=0, j=0; i < numIndices; i += 6, j += 4)
    {
        this.indices[i + 0] = j + 0;
        this.indices[i + 1] = j + 1;
        this.indices[i + 2] = j + 2;
        this.indices[i + 3] = j + 0;
        this.indices[i + 4] = j + 2;
        this.indices[i + 5] = j + 3;
    }

    /**
     * @property drawing
     * @type Boolean
     */
    this.drawing = false;

    /**
     * @property currentBatchSize
     * @type Number
     */
    this.currentBatchSize = 0;

    /**
     * @property currentBaseTexture
     * @type BaseTexture
     */
    this.currentBaseTexture = null;

    /**
     * @property dirty
     * @type Boolean
     */
    this.dirty = true;

    /**
     * @property textures
     * @type Array
     */
    this.textures = [];

    /**
     * @property blendModes
     * @type Array
     */
    this.blendModes = [];

    /**
     * @property shaders
     * @type Array
     */
    this.shaders = [];

    /**
     * @property sprites
     * @type Array
     */
    this.sprites = [];

    /**
     * @property defaultShader
     * @type AbstractFilter
     */
    this.defaultShader = new PIXI.AbstractFilter([
        'precision lowp float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform sampler2D uSampler;',
        'void main(void) {',
        '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;',
        '}'
    ]);
};

/**
* @method setContext
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.WebGLSpriteBatch.prototype.setContext = function(gl)
{
    this.gl = gl;

    // create a couple of buffers
    this.vertexBuffer = gl.createBuffer();
    this.indexBuffer = gl.createBuffer();

    // 65535 is max index, so 65535 / 6 = 10922.

    //upload the index data
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);

    this.currentBlendMode = 99999;

    var shader = new PIXI.PixiShader(gl);

    shader.fragmentSrc = this.defaultShader.fragmentSrc;
    shader.uniforms = {};
    shader.init();

    this.defaultShader.shaders[gl.id] = shader;
};

/**
* @method begin
* @param renderSession {Object} The RenderSession object
*/
PIXI.WebGLSpriteBatch.prototype.begin = function(renderSession)
{
    this.renderSession = renderSession;
    this.shader = this.renderSession.shaderManager.defaultShader;

    this.start();
};

/**
* @method end
*/
PIXI.WebGLSpriteBatch.prototype.end = function()
{
    this.flush();
};

/**
* @method render
* @param sprite {Sprite} the sprite to render when using this spritebatch
*/
PIXI.WebGLSpriteBatch.prototype.render = function(sprite)
{
    var texture = sprite.texture;

   //TODO set blend modes.. 
    // check texture..
    if(this.currentBatchSize >= this.size)
    {
        this.flush();
        this.currentBaseTexture = texture.baseTexture;
    }

    // get the uvs for the texture
    var uvs = texture._uvs;
    // if the uvs have not updated then no point rendering just yet!
    if(!uvs)return;

    // TODO trim??
    var aX = sprite.anchor.x;
    var aY = sprite.anchor.y;

    var w0, w1, h0, h1;
        
    if (texture.trim)
    {
        // if the sprite is trimmed then we need to add the extra space before transforming the sprite coords..
        var trim = texture.trim;

        w1 = trim.x - aX * trim.width;
        w0 = w1 + texture.crop.width;

        h1 = trim.y - aY * trim.height;
        h0 = h1 + texture.crop.height;

    }
    else
    {
        w0 = (texture.frame.width ) * (1-aX);
        w1 = (texture.frame.width ) * -aX;

        h0 = texture.frame.height * (1-aY);
        h1 = texture.frame.height * -aY;
    }

    var index = this.currentBatchSize * 4 * this.vertSize;
    
    var resolution = texture.baseTexture.resolution;

    var worldTransform = sprite.worldTransform;

    var a = worldTransform.a / resolution;
    var b = worldTransform.b / resolution;
    var c = worldTransform.c / resolution;
    var d = worldTransform.d / resolution;
    var tx = worldTransform.tx;
    var ty = worldTransform.ty;

    var colors = this.colors;
    var positions = this.positions;

    if(this.renderSession.roundPixels)
    {
        // xy
        positions[index] = a * w1 + c * h1 + tx | 0;
        positions[index+1] = d * h1 + b * w1 + ty | 0;

        // xy
        positions[index+5] = a * w0 + c * h1 + tx | 0;
        positions[index+6] = d * h1 + b * w0 + ty | 0;

         // xy
        positions[index+10] = a * w0 + c * h0 + tx | 0;
        positions[index+11] = d * h0 + b * w0 + ty | 0;

        // xy
        positions[index+15] = a * w1 + c * h0 + tx | 0;
        positions[index+16] = d * h0 + b * w1 + ty | 0;
    }
    else
    {
        // xy
        positions[index] = a * w1 + c * h1 + tx;
        positions[index+1] = d * h1 + b * w1 + ty;

        // xy
        positions[index+5] = a * w0 + c * h1 + tx;
        positions[index+6] = d * h1 + b * w0 + ty;

         // xy
        positions[index+10] = a * w0 + c * h0 + tx;
        positions[index+11] = d * h0 + b * w0 + ty;

        // xy
        positions[index+15] = a * w1 + c * h0 + tx;
        positions[index+16] = d * h0 + b * w1 + ty;
    }
    
    // uv
    positions[index+2] = uvs.x0;
    positions[index+3] = uvs.y0;

    // uv
    positions[index+7] = uvs.x1;
    positions[index+8] = uvs.y1;

     // uv
    positions[index+12] = uvs.x2;
    positions[index+13] = uvs.y2;

    // uv
    positions[index+17] = uvs.x3;
    positions[index+18] = uvs.y3;

    // color and alpha
    var tint = sprite.tint;
    colors[index+4] = colors[index+9] = colors[index+14] = colors[index+19] = (tint >> 16) + (tint & 0xff00) + ((tint & 0xff) << 16) + (sprite.worldAlpha * 255 << 24);

    // increment the batchsize
    this.sprites[this.currentBatchSize++] = sprite;


};

/**
* Renders a TilingSprite using the spriteBatch.
* 
* @method renderTilingSprite
* @param sprite {TilingSprite} the tilingSprite to render
*/
PIXI.WebGLSpriteBatch.prototype.renderTilingSprite = function(tilingSprite)
{
    var texture = tilingSprite.tilingTexture;

    // check texture..
    if(this.currentBatchSize >= this.size)
    {
        //return;
        this.flush();
        this.currentBaseTexture = texture.baseTexture;
    }

     // set the textures uvs temporarily
    // TODO create a separate texture so that we can tile part of a texture

    if(!tilingSprite._uvs)tilingSprite._uvs = new PIXI.TextureUvs();

    var uvs = tilingSprite._uvs;

    tilingSprite.tilePosition.x %= texture.baseTexture.width * tilingSprite.tileScaleOffset.x;
    tilingSprite.tilePosition.y %= texture.baseTexture.height * tilingSprite.tileScaleOffset.y;

    var offsetX =  tilingSprite.tilePosition.x/(texture.baseTexture.width*tilingSprite.tileScaleOffset.x);
    var offsetY =  tilingSprite.tilePosition.y/(texture.baseTexture.height*tilingSprite.tileScaleOffset.y);

    var scaleX =  (tilingSprite.width / texture.baseTexture.width)  / (tilingSprite.tileScale.x * tilingSprite.tileScaleOffset.x);
    var scaleY =  (tilingSprite.height / texture.baseTexture.height) / (tilingSprite.tileScale.y * tilingSprite.tileScaleOffset.y);

    uvs.x0 = 0 - offsetX;
    uvs.y0 = 0 - offsetY;

    uvs.x1 = (1 * scaleX) - offsetX;
    uvs.y1 = 0 - offsetY;

    uvs.x2 = (1 * scaleX) - offsetX;
    uvs.y2 = (1 * scaleY) - offsetY;

    uvs.x3 = 0 - offsetX;
    uvs.y3 = (1 * scaleY) - offsetY;

    // get the tilingSprites current alpha and tint and combining them into a single color
    var tint = tilingSprite.tint;
    var color = (tint >> 16) + (tint & 0xff00) + ((tint & 0xff) << 16) + (tilingSprite.alpha * 255 << 24);

    var positions = this.positions;
    var colors = this.colors;

    var width = tilingSprite.width;
    var height = tilingSprite.height;

    // TODO trim??
    var aX = tilingSprite.anchor.x;
    var aY = tilingSprite.anchor.y;
    var w0 = width * (1-aX);
    var w1 = width * -aX;

    var h0 = height * (1-aY);
    var h1 = height * -aY;

    var index = this.currentBatchSize * 4 * this.vertSize;

    var resolution = texture.baseTexture.resolution;

    var worldTransform = tilingSprite.worldTransform;

    var a = worldTransform.a / resolution;//[0];
    var b = worldTransform.b / resolution;//[3];
    var c = worldTransform.c / resolution;//[1];
    var d = worldTransform.d / resolution;//[4];
    var tx = worldTransform.tx;//[2];
    var ty = worldTransform.ty;//[5];

    // xy
    positions[index++] = a * w1 + c * h1 + tx;
    positions[index++] = d * h1 + b * w1 + ty;
    // uv
    positions[index++] = uvs.x0;
    positions[index++] = uvs.y0;
    // color
    colors[index++] = color;

    // xy
    positions[index++] = (a * w0 + c * h1 + tx);
    positions[index++] = d * h1 + b * w0 + ty;
    // uv
    positions[index++] = uvs.x1;
    positions[index++] = uvs.y1;
    // color
    colors[index++] = color;
    
    // xy
    positions[index++] = a * w0 + c * h0 + tx;
    positions[index++] = d * h0 + b * w0 + ty;
    // uv
    positions[index++] = uvs.x2;
    positions[index++] = uvs.y2;
    // color
    colors[index++] = color;

    // xy
    positions[index++] = a * w1 + c * h0 + tx;
    positions[index++] = d * h0 + b * w1 + ty;
    // uv
    positions[index++] = uvs.x3;
    positions[index++] = uvs.y3;
    // color
    colors[index++] = color;

    // increment the batchsize
    this.sprites[this.currentBatchSize++] = tilingSprite;
};

/**
* Renders the content and empties the current batch.
*
* @method flush
*/
PIXI.WebGLSpriteBatch.prototype.flush = function()
{
    // If the batch is length 0 then return as there is nothing to draw
    if (this.currentBatchSize===0)return;

    var gl = this.gl;
    var shader;

    if(this.dirty)
    {
        this.dirty = false;
        // bind the main texture
        gl.activeTexture(gl.TEXTURE0);

        // bind the buffers
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);

        shader =  this.defaultShader.shaders[gl.id];

        // this is the same for each shader?
        var stride =  this.vertSize * 4;
        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, stride, 0);
        gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, stride, 2 * 4);

        // color attributes will be interpreted as unsigned bytes and normalized
        gl.vertexAttribPointer(shader.colorAttribute, 4, gl.UNSIGNED_BYTE, true, stride, 4 * 4);
    }

    // upload the verts to the buffer  
    if(this.currentBatchSize > ( this.size * 0.5 ) )
    {
        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertices);
    }
    else
    {
        var view = this.positions.subarray(0, this.currentBatchSize * 4 * this.vertSize);
        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);
    }

    var nextTexture, nextBlendMode, nextShader;
    var batchSize = 0;
    var start = 0;

    var currentBaseTexture = null;
    var currentBlendMode = this.renderSession.blendModeManager.currentBlendMode;
    var currentShader = null;

    var blendSwap = false;
    var shaderSwap = false;
    var sprite;

    for (var i = 0, j = this.currentBatchSize; i < j; i++) {
        
        sprite = this.sprites[i];

        nextTexture = sprite.texture.baseTexture;
        nextBlendMode = sprite.blendMode;
        nextShader = sprite.shader || this.defaultShader;

        blendSwap = currentBlendMode !== nextBlendMode;
        shaderSwap = currentShader !== nextShader; // should I use _UIDS???

        if(currentBaseTexture !== nextTexture || blendSwap || shaderSwap)
        {
            this.renderBatch(currentBaseTexture, batchSize, start);

            start = i;
            batchSize = 0;
            currentBaseTexture = nextTexture;

            if( blendSwap )
            {
                currentBlendMode = nextBlendMode;
                this.renderSession.blendModeManager.setBlendMode( currentBlendMode );
            }

            if( shaderSwap )
            {
                currentShader = nextShader;
                
                shader = currentShader.shaders[gl.id];

                if(!shader)
                {
                    shader = new PIXI.PixiShader(gl);

                    shader.fragmentSrc =currentShader.fragmentSrc;
                    shader.uniforms =currentShader.uniforms;
                    shader.init();

                    currentShader.shaders[gl.id] = shader;
                }

                // set shader function???
                this.renderSession.shaderManager.setShader(shader);

                if(shader.dirty)shader.syncUniforms();
                
                // both thease only need to be set if they are changing..
                // set the projection
                var projection = this.renderSession.projection;
                gl.uniform2f(shader.projectionVector, projection.x, projection.y);

                // TODO - this is temprorary!
                var offsetVector = this.renderSession.offset;
                gl.uniform2f(shader.offsetVector, offsetVector.x, offsetVector.y);

                // set the pointers
            }
        }

        batchSize++;
    }

    this.renderBatch(currentBaseTexture, batchSize, start);

    // then reset the batch!
    this.currentBatchSize = 0;
};

/**
* @method renderBatch
* @param texture {Texture}
* @param size {Number}
* @param startIndex {Number}
*/
PIXI.WebGLSpriteBatch.prototype.renderBatch = function(texture, size, startIndex)
{
    if(size === 0)return;

    var gl = this.gl;

    // check if a texture is dirty..
    if(texture._dirty[gl.id])
    {
        this.renderSession.renderer.updateTexture(texture);
    }
    else
    {
        // bind the current texture
        gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);
    }

    // now draw those suckas!
    gl.drawElements(gl.TRIANGLES, size * 6, gl.UNSIGNED_SHORT, startIndex * 6 * 2);
    
    // increment the draw count
    this.renderSession.drawCount++;
};

/**
* @method stop
*/
PIXI.WebGLSpriteBatch.prototype.stop = function()
{
    this.flush();
    this.dirty = true;
};

/**
* @method start
*/
PIXI.WebGLSpriteBatch.prototype.start = function()
{
    this.dirty = true;
};

/**
* Destroys the SpriteBatch.
* 
* @method destroy
*/
PIXI.WebGLSpriteBatch.prototype.destroy = function()
{
    this.vertices = null;
    this.indices = null;
    
    this.gl.deleteBuffer( this.vertexBuffer );
    this.gl.deleteBuffer( this.indexBuffer );
    
    this.currentBaseTexture = null;
    
    this.gl = null;
};
/**
 * @author Mat Groves
 * 
 * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/
 * for creating the original pixi version!
 *
 * Heavily inspired by LibGDX's WebGLSpriteBatch:
 * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/WebGLSpriteBatch.java
 */

/**
* @class WebGLFastSpriteBatch
* @constructor
*/
PIXI.WebGLFastSpriteBatch = function(gl)
{
    /**
     * @property vertSize
     * @type Number
     */
    this.vertSize = 10;

    /**
     * @property maxSize
     * @type Number
     */
    this.maxSize = 6000;//Math.pow(2, 16) /  this.vertSize;

    /**
     * @property size
     * @type Number
     */
    this.size = this.maxSize;

    //the total number of floats in our batch
    var numVerts = this.size * 4 *  this.vertSize;

    //the total number of indices in our batch
    var numIndices = this.maxSize * 6;

    /**
     * Vertex data
     * @property vertices
     * @type Float32Array
     */
    this.vertices = new PIXI.Float32Array(numVerts);

    /**
     * Index data
     * @property indices
     * @type Uint16Array
     */
    this.indices = new PIXI.Uint16Array(numIndices);
    
    /**
     * @property vertexBuffer
     * @type Object
     */
    this.vertexBuffer = null;

    /**
     * @property indexBuffer
     * @type Object
     */
    this.indexBuffer = null;

    /**
     * @property lastIndexCount
     * @type Number
     */
    this.lastIndexCount = 0;

    for (var i=0, j=0; i < numIndices; i += 6, j += 4)
    {
        this.indices[i + 0] = j + 0;
        this.indices[i + 1] = j + 1;
        this.indices[i + 2] = j + 2;
        this.indices[i + 3] = j + 0;
        this.indices[i + 4] = j + 2;
        this.indices[i + 5] = j + 3;
    }

    /**
     * @property drawing
     * @type Boolean
     */
    this.drawing = false;

    /**
     * @property currentBatchSize
     * @type Number
     */
    this.currentBatchSize = 0;

    /**
     * @property currentBaseTexture
     * @type BaseTexture
     */
    this.currentBaseTexture = null;
   
    /**
     * @property currentBlendMode
     * @type Number
     */
    this.currentBlendMode = 0;

    /**
     * @property renderSession
     * @type Object
     */
    this.renderSession = null;
    
    /**
     * @property shader
     * @type Object
     */
    this.shader = null;

    /**
     * @property matrix
     * @type Matrix
     */
    this.matrix = null;

    this.setContext(gl);
};

PIXI.WebGLFastSpriteBatch.prototype.constructor = PIXI.WebGLFastSpriteBatch;

/**
 * Sets the WebGL Context.
 *
 * @method setContext
 * @param gl {WebGLContext} the current WebGL drawing context
 */
PIXI.WebGLFastSpriteBatch.prototype.setContext = function(gl)
{
    this.gl = gl;

    // create a couple of buffers
    this.vertexBuffer = gl.createBuffer();
    this.indexBuffer = gl.createBuffer();

    // 65535 is max index, so 65535 / 6 = 10922.

    //upload the index data
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);
};

/**
 * @method begin
 * @param spriteBatch {WebGLSpriteBatch}
 * @param renderSession {Object}
 */
PIXI.WebGLFastSpriteBatch.prototype.begin = function(spriteBatch, renderSession)
{
    this.renderSession = renderSession;
    this.shader = this.renderSession.shaderManager.fastShader;

    this.matrix = spriteBatch.worldTransform.toArray(true);

    this.start();
};

/**
 * @method end
 */
PIXI.WebGLFastSpriteBatch.prototype.end = function()
{
    this.flush();
};

/**
 * @method render
 * @param spriteBatch {WebGLSpriteBatch}
 */
PIXI.WebGLFastSpriteBatch.prototype.render = function(spriteBatch)
{
    var children = spriteBatch.children;
    var sprite = children[0];

    // if the uvs have not updated then no point rendering just yet!
    
    // check texture.
    if(!sprite.texture._uvs)return;
   
    this.currentBaseTexture = sprite.texture.baseTexture;
    
    // check blend mode
    if(sprite.blendMode !== this.renderSession.blendModeManager.currentBlendMode)
    {
        this.flush();
        this.renderSession.blendModeManager.setBlendMode(sprite.blendMode);
    }
    
    for(var i=0,j= children.length; i<j; i++)
    {
        this.renderSprite(children[i]);
    }

    this.flush();
};

/**
 * @method renderSprite
 * @param sprite {Sprite}
 */
PIXI.WebGLFastSpriteBatch.prototype.renderSprite = function(sprite)
{
    //sprite = children[i];
    if(!sprite.visible)return;
    
    // TODO trim??
    if(sprite.texture.baseTexture !== this.currentBaseTexture)
    {
        this.flush();
        this.currentBaseTexture = sprite.texture.baseTexture;
        
        if(!sprite.texture._uvs)return;
    }

    var uvs, verticies = this.vertices, width, height, w0, w1, h0, h1, index;

    uvs = sprite.texture._uvs;

    width = sprite.texture.frame.width;
    height = sprite.texture.frame.height;

    if (sprite.texture.trim)
    {
        // if the sprite is trimmed then we need to add the extra space before transforming the sprite coords..
        var trim = sprite.texture.trim;

        w1 = trim.x - sprite.anchor.x * trim.width;
        w0 = w1 + sprite.texture.crop.width;

        h1 = trim.y - sprite.anchor.y * trim.height;
        h0 = h1 + sprite.texture.crop.height;
    }
    else
    {
        w0 = (sprite.texture.frame.width ) * (1-sprite.anchor.x);
        w1 = (sprite.texture.frame.width ) * -sprite.anchor.x;

        h0 = sprite.texture.frame.height * (1-sprite.anchor.y);
        h1 = sprite.texture.frame.height * -sprite.anchor.y;
    }

    index = this.currentBatchSize * 4 * this.vertSize;

    // xy
    verticies[index++] = w1;
    verticies[index++] = h1;

    verticies[index++] = sprite.position.x;
    verticies[index++] = sprite.position.y;

    //scale
    verticies[index++] = sprite.scale.x;
    verticies[index++] = sprite.scale.y;

    //rotation
    verticies[index++] = sprite.rotation;

    // uv
    verticies[index++] = uvs.x0;
    verticies[index++] = uvs.y1;
    // color
    verticies[index++] = sprite.alpha;
 

    // xy
    verticies[index++] = w0;
    verticies[index++] = h1;

    verticies[index++] = sprite.position.x;
    verticies[index++] = sprite.position.y;

    //scale
    verticies[index++] = sprite.scale.x;
    verticies[index++] = sprite.scale.y;

     //rotation
    verticies[index++] = sprite.rotation;

    // uv
    verticies[index++] = uvs.x1;
    verticies[index++] = uvs.y1;
    // color
    verticies[index++] = sprite.alpha;
  

    // xy
    verticies[index++] = w0;
    verticies[index++] = h0;

    verticies[index++] = sprite.position.x;
    verticies[index++] = sprite.position.y;

    //scale
    verticies[index++] = sprite.scale.x;
    verticies[index++] = sprite.scale.y;

     //rotation
    verticies[index++] = sprite.rotation;

    // uv
    verticies[index++] = uvs.x2;
    verticies[index++] = uvs.y2;
    // color
    verticies[index++] = sprite.alpha;
 



    // xy
    verticies[index++] = w1;
    verticies[index++] = h0;

    verticies[index++] = sprite.position.x;
    verticies[index++] = sprite.position.y;

    //scale
    verticies[index++] = sprite.scale.x;
    verticies[index++] = sprite.scale.y;

     //rotation
    verticies[index++] = sprite.rotation;

    // uv
    verticies[index++] = uvs.x3;
    verticies[index++] = uvs.y3;
    // color
    verticies[index++] = sprite.alpha;

    // increment the batchs
    this.currentBatchSize++;

    if(this.currentBatchSize >= this.size)
    {
        this.flush();
    }
};

/**
 * @method flush
 */
PIXI.WebGLFastSpriteBatch.prototype.flush = function()
{
    // If the batch is length 0 then return as there is nothing to draw
    if (this.currentBatchSize===0)return;

    var gl = this.gl;
    
    // bind the current texture

    if(!this.currentBaseTexture._glTextures[gl.id])this.renderSession.renderer.updateTexture(this.currentBaseTexture, gl);

    gl.bindTexture(gl.TEXTURE_2D, this.currentBaseTexture._glTextures[gl.id]);

    // upload the verts to the buffer
   
    if(this.currentBatchSize > ( this.size * 0.5 ) )
    {
        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertices);
    }
    else
    {
        var view = this.vertices.subarray(0, this.currentBatchSize * 4 * this.vertSize);

        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);
    }
    
    // now draw those suckas!
    gl.drawElements(gl.TRIANGLES, this.currentBatchSize * 6, gl.UNSIGNED_SHORT, 0);
   
    // then reset the batch!
    this.currentBatchSize = 0;

    // increment the draw count
    this.renderSession.drawCount++;
};


/**
 * @method stop
 */
PIXI.WebGLFastSpriteBatch.prototype.stop = function()
{
    this.flush();
};

/**
 * @method start
 */
PIXI.WebGLFastSpriteBatch.prototype.start = function()
{
    var gl = this.gl;

    // bind the main texture
    gl.activeTexture(gl.TEXTURE0);

    // bind the buffers
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);

    // set the projection
    var projection = this.renderSession.projection;
    gl.uniform2f(this.shader.projectionVector, projection.x, projection.y);

    // set the matrix
    gl.uniformMatrix3fv(this.shader.uMatrix, false, this.matrix);

    // set the pointers
    var stride =  this.vertSize * 4;

    gl.vertexAttribPointer(this.shader.aVertexPosition, 2, gl.FLOAT, false, stride, 0);
    gl.vertexAttribPointer(this.shader.aPositionCoord, 2, gl.FLOAT, false, stride, 2 * 4);
    gl.vertexAttribPointer(this.shader.aScale, 2, gl.FLOAT, false, stride, 4 * 4);
    gl.vertexAttribPointer(this.shader.aRotation, 1, gl.FLOAT, false, stride, 6 * 4);
    gl.vertexAttribPointer(this.shader.aTextureCoord, 2, gl.FLOAT, false, stride, 7 * 4);
    gl.vertexAttribPointer(this.shader.colorAttribute, 1, gl.FLOAT, false, stride, 9 * 4);
    
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class WebGLFilterManager
* @constructor
*/
PIXI.WebGLFilterManager = function()
{
    /**
     * @property filterStack
     * @type Array
     */
    this.filterStack = [];
    
    /**
     * @property offsetX
     * @type Number
     */
    this.offsetX = 0;

    /**
     * @property offsetY
     * @type Number
     */
    this.offsetY = 0;
};

PIXI.WebGLFilterManager.prototype.constructor = PIXI.WebGLFilterManager;

/**
* Initialises the context and the properties.
* 
* @method setContext 
* @param gl {WebGLContext} the current WebGL drawing context
*/
PIXI.WebGLFilterManager.prototype.setContext = function(gl)
{
    this.gl = gl;
    this.texturePool = [];

    this.initShaderBuffers();
};

/**
* @method begin
* @param renderSession {RenderSession} 
* @param buffer {ArrayBuffer} 
*/
PIXI.WebGLFilterManager.prototype.begin = function(renderSession, buffer)
{
    this.renderSession = renderSession;
    this.defaultShader = renderSession.shaderManager.defaultShader;

    var projection = this.renderSession.projection;
    this.width = projection.x * 2;
    this.height = -projection.y * 2;
    this.buffer = buffer;
};

/**
* Applies the filter and adds it to the current filter stack.
* 
* @method pushFilter
* @param filterBlock {Object} the filter that will be pushed to the current filter stack
*/
PIXI.WebGLFilterManager.prototype.pushFilter = function(filterBlock)
{
    var gl = this.gl;

    var projection = this.renderSession.projection;
    var offset = this.renderSession.offset;

    filterBlock._filterArea = filterBlock.target.filterArea || filterBlock.target.getBounds();

    // filter program
    // OPTIMISATION - the first filter is free if its a simple color change?
    this.filterStack.push(filterBlock);

    var filter = filterBlock.filterPasses[0];

    this.offsetX += filterBlock._filterArea.x;
    this.offsetY += filterBlock._filterArea.y;

    var texture = this.texturePool.pop();
    if(!texture)
    {
        texture = new PIXI.FilterTexture(this.gl, this.width, this.height);
    }
    else
    {
        texture.resize(this.width, this.height);
    }

    gl.bindTexture(gl.TEXTURE_2D,  texture.texture);

    var filterArea = filterBlock._filterArea;// filterBlock.target.getBounds();///filterBlock.target.filterArea;

    var padding = filter.padding;
    filterArea.x -= padding;
    filterArea.y -= padding;
    filterArea.width += padding * 2;
    filterArea.height += padding * 2;

    // cap filter to screen size..
    if(filterArea.x < 0)filterArea.x = 0;
    if(filterArea.width > this.width)filterArea.width = this.width;
    if(filterArea.y < 0)filterArea.y = 0;
    if(filterArea.height > this.height)filterArea.height = this.height;

    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  filterArea.width, filterArea.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, texture.frameBuffer);

    // set view port
    gl.viewport(0, 0, filterArea.width, filterArea.height);

    projection.x = filterArea.width/2;
    projection.y = -filterArea.height/2;

    offset.x = -filterArea.x;
    offset.y = -filterArea.y;

    // update projection
    // now restore the regular shader..
    // this.renderSession.shaderManager.setShader(this.defaultShader);
    //gl.uniform2f(this.defaultShader.projectionVector, filterArea.width/2, -filterArea.height/2);
    //gl.uniform2f(this.defaultShader.offsetVector, -filterArea.x, -filterArea.y);

    gl.colorMask(true, true, true, true);
    gl.clearColor(0,0,0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);

    filterBlock._glFilterTexture = texture;

};

/**
* Removes the last filter from the filter stack and doesn't return it.
* 
* @method popFilter
*/
PIXI.WebGLFilterManager.prototype.popFilter = function()
{
    var gl = this.gl;
    var filterBlock = this.filterStack.pop();
    var filterArea = filterBlock._filterArea;
    var texture = filterBlock._glFilterTexture;
    var projection = this.renderSession.projection;
    var offset = this.renderSession.offset;

    if(filterBlock.filterPasses.length > 1)
    {
        gl.viewport(0, 0, filterArea.width, filterArea.height);

        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);

        this.vertexArray[0] = 0;
        this.vertexArray[1] = filterArea.height;

        this.vertexArray[2] = filterArea.width;
        this.vertexArray[3] = filterArea.height;

        this.vertexArray[4] = 0;
        this.vertexArray[5] = 0;

        this.vertexArray[6] = filterArea.width;
        this.vertexArray[7] = 0;

        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertexArray);

        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);
        // now set the uvs..
        this.uvArray[2] = filterArea.width/this.width;
        this.uvArray[5] = filterArea.height/this.height;
        this.uvArray[6] = filterArea.width/this.width;
        this.uvArray[7] = filterArea.height/this.height;

        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.uvArray);

        var inputTexture = texture;
        var outputTexture = this.texturePool.pop();
        if(!outputTexture)outputTexture = new PIXI.FilterTexture(this.gl, this.width, this.height);
        outputTexture.resize(this.width, this.height);

        // need to clear this FBO as it may have some left over elements from a previous filter.
        gl.bindFramebuffer(gl.FRAMEBUFFER, outputTexture.frameBuffer );
        gl.clear(gl.COLOR_BUFFER_BIT);

        gl.disable(gl.BLEND);

        for (var i = 0; i < filterBlock.filterPasses.length-1; i++)
        {
            var filterPass = filterBlock.filterPasses[i];

            gl.bindFramebuffer(gl.FRAMEBUFFER, outputTexture.frameBuffer );

            // set texture
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);

            // draw texture..
            //filterPass.applyFilterPass(filterArea.width, filterArea.height);
            this.applyFilterPass(filterPass, filterArea, filterArea.width, filterArea.height);

            // swap the textures..
            var temp = inputTexture;
            inputTexture = outputTexture;
            outputTexture = temp;
        }

        gl.enable(gl.BLEND);

        texture = inputTexture;
        this.texturePool.push(outputTexture);
    }

    var filter = filterBlock.filterPasses[filterBlock.filterPasses.length-1];

    this.offsetX -= filterArea.x;
    this.offsetY -= filterArea.y;

    var sizeX = this.width;
    var sizeY = this.height;

    var offsetX = 0;
    var offsetY = 0;

    var buffer = this.buffer;

    // time to render the filters texture to the previous scene
    if(this.filterStack.length === 0)
    {
        gl.colorMask(true, true, true, true);//this.transparent);
    }
    else
    {
        var currentFilter = this.filterStack[this.filterStack.length-1];
        filterArea = currentFilter._filterArea;

        sizeX = filterArea.width;
        sizeY = filterArea.height;

        offsetX = filterArea.x;
        offsetY = filterArea.y;

        buffer =  currentFilter._glFilterTexture.frameBuffer;
    }

    // TODO need to remove these global elements..
    projection.x = sizeX/2;
    projection.y = -sizeY/2;

    offset.x = offsetX;
    offset.y = offsetY;

    filterArea = filterBlock._filterArea;

    var x = filterArea.x-offsetX;
    var y = filterArea.y-offsetY;

    // update the buffers..
    // make sure to flip the y!
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);

    this.vertexArray[0] = x;
    this.vertexArray[1] = y + filterArea.height;

    this.vertexArray[2] = x + filterArea.width;
    this.vertexArray[3] = y + filterArea.height;

    this.vertexArray[4] = x;
    this.vertexArray[5] = y;

    this.vertexArray[6] = x + filterArea.width;
    this.vertexArray[7] = y;

    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertexArray);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);

    this.uvArray[2] = filterArea.width/this.width;
    this.uvArray[5] = filterArea.height/this.height;
    this.uvArray[6] = filterArea.width/this.width;
    this.uvArray[7] = filterArea.height/this.height;

    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.uvArray);

    gl.viewport(0, 0, sizeX, sizeY);

    // bind the buffer
    gl.bindFramebuffer(gl.FRAMEBUFFER, buffer );

    // set the blend mode! 
    //gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)

    // set texture
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, texture.texture);

    // apply!
    this.applyFilterPass(filter, filterArea, sizeX, sizeY);

    // now restore the regular shader.. should happen automatically now..
    // this.renderSession.shaderManager.setShader(this.defaultShader);
    // gl.uniform2f(this.defaultShader.projectionVector, sizeX/2, -sizeY/2);
    // gl.uniform2f(this.defaultShader.offsetVector, -offsetX, -offsetY);

    // return the texture to the pool
    this.texturePool.push(texture);
    filterBlock._glFilterTexture = null;
};


/**
* Applies the filter to the specified area.
* 
* @method applyFilterPass
* @param filter {AbstractFilter} the filter that needs to be applied
* @param filterArea {Texture} TODO - might need an update
* @param width {Number} the horizontal range of the filter
* @param height {Number} the vertical range of the filter
*/
PIXI.WebGLFilterManager.prototype.applyFilterPass = function(filter, filterArea, width, height)
{
    // use program
    var gl = this.gl;
    var shader = filter.shaders[gl.id];

    if(!shader)
    {
        shader = new PIXI.PixiShader(gl);

        shader.fragmentSrc = filter.fragmentSrc;
        shader.uniforms = filter.uniforms;
        shader.init();

        filter.shaders[gl.id] = shader;
    }

    // set the shader
    this.renderSession.shaderManager.setShader(shader);

//    gl.useProgram(shader.program);

    gl.uniform2f(shader.projectionVector, width/2, -height/2);
    gl.uniform2f(shader.offsetVector, 0,0);

    if(filter.uniforms.dimensions)
    {
        filter.uniforms.dimensions.value[0] = this.width;//width;
        filter.uniforms.dimensions.value[1] = this.height;//height;
        filter.uniforms.dimensions.value[2] = this.vertexArray[0];
        filter.uniforms.dimensions.value[3] = this.vertexArray[5];//filterArea.height;
    }

    shader.syncUniforms();

    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
    gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);
    gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, 0, 0);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);
    gl.vertexAttribPointer(shader.colorAttribute, 2, gl.FLOAT, false, 0, 0);

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);

    // draw the filter...
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

    this.renderSession.drawCount++;
};

/**
* Initialises the shader buffers.
* 
* @method initShaderBuffers
*/
PIXI.WebGLFilterManager.prototype.initShaderBuffers = function()
{
    var gl = this.gl;

    // create some buffers
    this.vertexBuffer = gl.createBuffer();
    this.uvBuffer = gl.createBuffer();
    this.colorBuffer = gl.createBuffer();
    this.indexBuffer = gl.createBuffer();

    // bind and upload the vertexs..
    // keep a reference to the vertexFloatData..
    this.vertexArray = new PIXI.Float32Array([0.0, 0.0,
                                         1.0, 0.0,
                                         0.0, 1.0,
                                         1.0, 1.0]);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.vertexArray, gl.STATIC_DRAW);

    // bind and upload the uv buffer
    this.uvArray = new PIXI.Float32Array([0.0, 0.0,
                                     1.0, 0.0,
                                     0.0, 1.0,
                                     1.0, 1.0]);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.uvArray, gl.STATIC_DRAW);

    this.colorArray = new PIXI.Float32Array([1.0, 0xFFFFFF,
                                        1.0, 0xFFFFFF,
                                        1.0, 0xFFFFFF,
                                        1.0, 0xFFFFFF]);

    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.colorArray, gl.STATIC_DRAW);

    // bind and upload the index
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 1, 3, 2]), gl.STATIC_DRAW);

};

/**
* Destroys the filter and removes it from the filter stack.
* 
* @method destroy
*/
PIXI.WebGLFilterManager.prototype.destroy = function()
{
    var gl = this.gl;

    this.filterStack = null;
    
    this.offsetX = 0;
    this.offsetY = 0;

    // destroy textures
    for (var i = 0; i < this.texturePool.length; i++) {
        this.texturePool[i].destroy();
    }
    
    this.texturePool = null;

    //destroy buffers..
    gl.deleteBuffer(this.vertexBuffer);
    gl.deleteBuffer(this.uvBuffer);
    gl.deleteBuffer(this.colorBuffer);
    gl.deleteBuffer(this.indexBuffer);
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
* @class FilterTexture
* @constructor
* @param gl {WebGLContext} the current WebGL drawing context
* @param width {Number} the horizontal range of the filter
* @param height {Number} the vertical range of the filter
* @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
*/
PIXI.FilterTexture = function(gl, width, height, scaleMode)
{
    /**
     * @property gl
     * @type WebGLContext
     */
    this.gl = gl;

    // next time to create a frame buffer and texture

    /**
     * @property frameBuffer
     * @type Any
     */
    this.frameBuffer = gl.createFramebuffer();

    /**
     * @property texture
     * @type Any
     */
    this.texture = gl.createTexture();

    /**
     * @property scaleMode
     * @type Number
     */
    scaleMode = scaleMode || PIXI.scaleModes.DEFAULT;

    gl.bindTexture(gl.TEXTURE_2D,  this.texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR : gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR : gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer );

    gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer );
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);

    // required for masking a mask??
    this.renderBuffer = gl.createRenderbuffer();
    gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderBuffer);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.renderBuffer);
  
    this.resize(width, height);
};

PIXI.FilterTexture.prototype.constructor = PIXI.FilterTexture;

/**
* Clears the filter texture.
* 
* @method clear
*/
PIXI.FilterTexture.prototype.clear = function()
{
    var gl = this.gl;
    
    gl.clearColor(0,0,0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);
};

/**
 * Resizes the texture to the specified width and height
 *
 * @method resize
 * @param width {Number} the new width of the texture
 * @param height {Number} the new height of the texture
 */
PIXI.FilterTexture.prototype.resize = function(width, height)
{
    if(this.width === width && this.height === height) return;

    this.width = width;
    this.height = height;

    var gl = this.gl;

    gl.bindTexture(gl.TEXTURE_2D,  this.texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  width , height , 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    // update the stencil buffer width and height
    gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderBuffer);
    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width , height );
};

/**
* Destroys the filter texture.
* 
* @method destroy
*/
PIXI.FilterTexture.prototype.destroy = function()
{
    var gl = this.gl;
    gl.deleteFramebuffer( this.frameBuffer );
    gl.deleteTexture( this.texture );

    this.frameBuffer = null;
    this.texture = null;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * Creates a Canvas element of the given size.
 *
 * @class CanvasBuffer
 * @constructor
 * @param width {Number} the width for the newly created canvas
 * @param height {Number} the height for the newly created canvas
 */
PIXI.CanvasBuffer = function(width, height)
{
    /**
     * The width of the Canvas in pixels.
     *
     * @property width
     * @type Number
     */
    this.width = width;

    /**
     * The height of the Canvas in pixels.
     *
     * @property height
     * @type Number
     */
    this.height = height;

    /**
     * The Canvas object that belongs to this CanvasBuffer.
     *
     * @property canvas
     * @type HTMLCanvasElement
     */
    this.canvas = document.createElement("canvas");

    /**
     * A CanvasRenderingContext2D object representing a two-dimensional rendering context.
     *
     * @property context
     * @type CanvasRenderingContext2D
     */
    this.context = this.canvas.getContext("2d");

    this.canvas.width = width;
    this.canvas.height = height;
};

PIXI.CanvasBuffer.prototype.constructor = PIXI.CanvasBuffer;

/**
 * Clears the canvas that was created by the CanvasBuffer class.
 *
 * @method clear
 * @private
 */
PIXI.CanvasBuffer.prototype.clear = function()
{
    this.context.setTransform(1, 0, 0, 1, 0, 0);
    this.context.clearRect(0,0, this.width, this.height);
};

/**
 * Resizes the canvas to the specified width and height.
 *
 * @method resize
 * @param width {Number} the new width of the canvas
 * @param height {Number} the new height of the canvas
 */
PIXI.CanvasBuffer.prototype.resize = function(width, height)
{
    this.width = this.canvas.width = width;
    this.height = this.canvas.height = height;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A set of functions used to handle masking.
 *
 * @class CanvasMaskManager
 * @constructor
 */
PIXI.CanvasMaskManager = function()
{
};

PIXI.CanvasMaskManager.prototype.constructor = PIXI.CanvasMaskManager;

/**
 * This method adds it to the current stack of masks.
 *
 * @method pushMask
 * @param maskData {Object} the maskData that will be pushed
 * @param renderSession {Object} The renderSession whose context will be used for this mask manager.
 */
PIXI.CanvasMaskManager.prototype.pushMask = function(maskData, renderSession)
{
    var context = renderSession.context;

    context.save();
    
    var cacheAlpha = maskData.alpha;
    var transform = maskData.worldTransform;

    var resolution = renderSession.resolution;

    context.setTransform(transform.a * resolution,
                         transform.b * resolution,
                         transform.c * resolution,
                         transform.d * resolution,
                         transform.tx * resolution,
                         transform.ty * resolution);

    PIXI.CanvasGraphics.renderGraphicsMask(maskData, context);

    context.clip();

    maskData.worldAlpha = cacheAlpha;
};

/**
 * Restores the current drawing context to the state it was before the mask was applied.
 *
 * @method popMask
 * @param renderSession {Object} The renderSession whose context will be used for this mask manager.
 */
PIXI.CanvasMaskManager.prototype.popMask = function(renderSession)
{
    renderSession.context.restore();
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * Utility methods for Sprite/Texture tinting.
 *
 * @class CanvasTinter
 * @static
 */
PIXI.CanvasTinter = function()
{
};

/**
 * Basically this method just needs a sprite and a color and tints the sprite with the given color.
 * 
 * @method getTintedTexture 
 * @static
 * @param sprite {Sprite} the sprite to tint
 * @param color {Number} the color to use to tint the sprite with
 * @return {HTMLCanvasElement} The tinted canvas
 */
PIXI.CanvasTinter.getTintedTexture = function(sprite, color)
{
    var texture = sprite.texture;

    color = PIXI.CanvasTinter.roundColor(color);

    var stringColor = "#" + ("00000" + ( color | 0).toString(16)).substr(-6);
   
    texture.tintCache = texture.tintCache || {};

    if(texture.tintCache[stringColor]) return texture.tintCache[stringColor];

     // clone texture..
    var canvas = PIXI.CanvasTinter.canvas || document.createElement("canvas");
    
    //PIXI.CanvasTinter.tintWithPerPixel(texture, stringColor, canvas);
    PIXI.CanvasTinter.tintMethod(texture, color, canvas);

    if(PIXI.CanvasTinter.convertTintToImage)
    {
        // is this better?
        var tintImage = new Image();
        tintImage.src = canvas.toDataURL();

        texture.tintCache[stringColor] = tintImage;
    }
    else
    {
        texture.tintCache[stringColor] = canvas;
        // if we are not converting the texture to an image then we need to lose the reference to the canvas
        PIXI.CanvasTinter.canvas = null;
    }

    return canvas;
};

/**
 * Tint a texture using the "multiply" operation.
 * 
 * @method tintWithMultiply
 * @static
 * @param texture {Texture} the texture to tint
 * @param color {Number} the color to use to tint the sprite with
 * @param canvas {HTMLCanvasElement} the current canvas
 */
PIXI.CanvasTinter.tintWithMultiply = function(texture, color, canvas)
{
    var context = canvas.getContext( "2d" );

    var crop = texture.crop;

    canvas.width = crop.width;
    canvas.height = crop.height;

    context.fillStyle = "#" + ("00000" + ( color | 0).toString(16)).substr(-6);
    
    context.fillRect(0, 0, crop.width, crop.height);
    
    context.globalCompositeOperation = "multiply";

    context.drawImage(texture.baseTexture.source,
                           crop.x,
                           crop.y,
                           crop.width,
                           crop.height,
                           0,
                           0,
                           crop.width,
                           crop.height);

    context.globalCompositeOperation = "destination-atop";

    context.drawImage(texture.baseTexture.source,
                           crop.x,
                           crop.y,
                           crop.width,
                           crop.height,
                           0,
                           0,
                           crop.width,
                           crop.height);
};

/**
 * Tint a texture using the "overlay" operation.
 * 
 * @method tintWithOverlay
 * @static
 * @param texture {Texture} the texture to tint
 * @param color {Number} the color to use to tint the sprite with
 * @param canvas {HTMLCanvasElement} the current canvas
 */
PIXI.CanvasTinter.tintWithOverlay = function(texture, color, canvas)
{
    var context = canvas.getContext( "2d" );

    var crop = texture.crop;

    canvas.width = crop.width;
    canvas.height = crop.height;
    
    context.globalCompositeOperation = "copy";
    context.fillStyle = "#" + ("00000" + ( color | 0).toString(16)).substr(-6);
    context.fillRect(0, 0, crop.width, crop.height);

    context.globalCompositeOperation = "destination-atop";
    context.drawImage(texture.baseTexture.source,
                           crop.x,
                           crop.y,
                           crop.width,
                           crop.height,
                           0,
                           0,
                           crop.width,
                           crop.height);
    
    //context.globalCompositeOperation = "copy";
};

/**
 * Tint a texture pixel per pixel.
 * 
 * @method tintPerPixel
 * @static
 * @param texture {Texture} the texture to tint
 * @param color {Number} the color to use to tint the sprite with
 * @param canvas {HTMLCanvasElement} the current canvas
 */
PIXI.CanvasTinter.tintWithPerPixel = function(texture, color, canvas)
{
    var context = canvas.getContext( "2d" );

    var crop = texture.crop;

    canvas.width = crop.width;
    canvas.height = crop.height;
  
    context.globalCompositeOperation = "copy";
    context.drawImage(texture.baseTexture.source,
                           crop.x,
                           crop.y,
                           crop.width,
                           crop.height,
                           0,
                           0,
                           crop.width,
                           crop.height);

    var rgbValues = PIXI.hex2rgb(color);
    var r = rgbValues[0], g = rgbValues[1], b = rgbValues[2];

    var pixelData = context.getImageData(0, 0, crop.width, crop.height);

    var pixels = pixelData.data;

    for (var i = 0; i < pixels.length; i += 4)
    {
        pixels[i+0] *= r;
        pixels[i+1] *= g;
        pixels[i+2] *= b;
    }

    context.putImageData(pixelData, 0, 0);
};

/**
 * Rounds the specified color according to the PIXI.CanvasTinter.cacheStepsPerColorChannel.
 * 
 * @method roundColor
 * @static
 * @param color {number} the color to round, should be a hex color
 */
PIXI.CanvasTinter.roundColor = function(color)
{
    var step = PIXI.CanvasTinter.cacheStepsPerColorChannel;

    var rgbValues = PIXI.hex2rgb(color);

    rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);
    rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);
    rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);

    return PIXI.rgb2hex(rgbValues);
};

/**
 * Number of steps which will be used as a cap when rounding colors.
 *
 * @property cacheStepsPerColorChannel 
 * @type Number
 * @static
 */
PIXI.CanvasTinter.cacheStepsPerColorChannel = 8;

/**
 * Tint cache boolean flag.
 *
 * @property convertTintToImage
 * @type Boolean
 * @static
 */
PIXI.CanvasTinter.convertTintToImage = false;

/**
 * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.
 *
 * @property canUseMultiply
 * @type Boolean
 * @static
 */
PIXI.CanvasTinter.canUseMultiply = PIXI.canUseNewCanvasBlendModes();

/**
 * The tinting method that will be used.
 * 
 * @method tintMethod
 * @static
 */
PIXI.CanvasTinter.tintMethod = PIXI.CanvasTinter.canUseMultiply ? PIXI.CanvasTinter.tintWithMultiply :  PIXI.CanvasTinter.tintWithPerPixel;

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The CanvasRenderer draws the Stage and all its content onto a 2d canvas. This renderer should be used for browsers that do not support webGL.
 * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything :)
 *
 * @class CanvasRenderer
 * @constructor
 * @param [width=800] {Number} the width of the canvas view
 * @param [height=600] {Number} the height of the canvas view
 * @param [options] {Object} The optional renderer parameters
 * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional
 * @param [options.transparent=false] {Boolean} If the render view is transparent, default false
 * @param [options.autoResize=false] {Boolean} If the render view is automatically resized, default false
 * @param [options.resolution=1] {Number} the resolution of the renderer retina would be 2
 * @param [options.clearBeforeRender=true] {Boolean} This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
 */
PIXI.CanvasRenderer = function(width, height, options)
{
    if(options)
    {
        for (var i in PIXI.defaultRenderOptions)
        {
            if (typeof options[i] === "undefined") options[i] = PIXI.defaultRenderOptions[i];
        }
    }
    else
    {
        options = PIXI.defaultRenderOptions;
    }

    if(!PIXI.defaultRenderer)
    {
        PIXI.sayHello("Canvas");
        PIXI.defaultRenderer = this;
    }

    /**
     * The renderer type.
     *
     * @property type
     * @type Number
     */
    this.type = PIXI.CANVAS_RENDERER;

    /**
     * The resolution of the canvas.
     *
     * @property resolution
     * @type Number
     */
    this.resolution = options.resolution;

    /**
     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
     * If the Stage is NOT transparent Pixi will use a canvas sized fillRect operation every frame to set the canvas background color.
     * If the Stage is transparent Pixi will use clearRect to clear the canvas every frame.
     * Disable this by setting this to false. For example if your game has a canvas filling background image you often don't need this set.
     *
     * @property clearBeforeRender
     * @type Boolean
     * @default
     */
    this.clearBeforeRender = options.clearBeforeRender;

    /**
     * Whether the render view is transparent
     *
     * @property transparent
     * @type Boolean
     */
    this.transparent = options.transparent;

    /**
     * Whether the render view should be resized automatically
     *
     * @property autoResize
     * @type Boolean
     */
    this.autoResize = options.autoResize || false;


    /**
     * The width of the canvas view
     *
     * @property width
     * @type Number
     * @default 800
     */
    this.width = width || 800;

    /**
     * The height of the canvas view
     *
     * @property height
     * @type Number
     * @default 600
     */
    this.height = height || 600;

    this.width *= this.resolution;
    this.height *= this.resolution;

    /**
     * The canvas element that everything is drawn to.
     *
     * @property view
     * @type HTMLCanvasElement
     */
    this.view = options.view || document.createElement( "canvas" );

    /**
     * The canvas 2d context that everything is drawn with
     * @property context
     * @type CanvasRenderingContext2D
     */
    this.context = this.view.getContext( "2d", { alpha: this.transparent } );

    /**
     * Boolean flag controlling canvas refresh.
     *
     * @property refresh
     * @type Boolean
     */
    this.refresh = true;

    this.view.width = this.width * this.resolution;
    this.view.height = this.height * this.resolution;

    /**
     * Internal var.
     *
     * @property count
     * @type Number
     */
    this.count = 0;

    /**
     * Instance of a PIXI.CanvasMaskManager, handles masking when using the canvas renderer
     * @property CanvasMaskManager
     * @type CanvasMaskManager
     */
    this.maskManager = new PIXI.CanvasMaskManager();

    /**
     * The render session is just a bunch of parameter used for rendering
     * @property renderSession
     * @type Object
     */
    this.renderSession = {
        context: this.context,
        maskManager: this.maskManager,
        scaleMode: null,
        smoothProperty: null,
        /**
         * If true Pixi will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Handy for crisp pixel art and speed on legacy devices.
         *
         */
        roundPixels: false
    };

    this.mapBlendModes();
    
    this.resize(width, height);

    if("imageSmoothingEnabled" in this.context)
        this.renderSession.smoothProperty = "imageSmoothingEnabled";
    else if("webkitImageSmoothingEnabled" in this.context)
        this.renderSession.smoothProperty = "webkitImageSmoothingEnabled";
    else if("mozImageSmoothingEnabled" in this.context)
        this.renderSession.smoothProperty = "mozImageSmoothingEnabled";
    else if("oImageSmoothingEnabled" in this.context)
        this.renderSession.smoothProperty = "oImageSmoothingEnabled";
    else if ("msImageSmoothingEnabled" in this.context)
        this.renderSession.smoothProperty = "msImageSmoothingEnabled";
};

// constructor
PIXI.CanvasRenderer.prototype.constructor = PIXI.CanvasRenderer;

/**
 * Renders the Stage to this canvas view
 *
 * @method render
 * @param stage {Stage} the Stage element to be rendered
 */
PIXI.CanvasRenderer.prototype.render = function(stage)
{
    stage.updateTransform();

    this.context.setTransform(1,0,0,1,0,0);

    this.context.globalAlpha = 1;

    this.renderSession.currentBlendMode = PIXI.blendModes.NORMAL;
    this.context.globalCompositeOperation = PIXI.blendModesCanvas[PIXI.blendModes.NORMAL];

    if (navigator.isCocoonJS && this.view.screencanvas) {
        this.context.fillStyle = "black";
        this.context.clear();
    }
    
    if (this.clearBeforeRender)
    {
        if (this.transparent)
        {
            this.context.clearRect(0, 0, this.width, this.height);
        }
        else
        {
            this.context.fillStyle = stage.backgroundColorString;
            this.context.fillRect(0, 0, this.width , this.height);
        }
    }
    
    this.renderDisplayObject(stage);

    // run interaction!
    if(stage.interactive)
    {
        //need to add some events!
        if(!stage._interactiveEventsAdded)
        {
            stage._interactiveEventsAdded = true;
            stage.interactionManager.setTarget(this);
        }
    }
};

/**
 * Removes everything from the renderer and optionally removes the Canvas DOM element.
 *
 * @method destroy
 * @param [removeView=true] {boolean} Removes the Canvas element from the DOM.
 */
PIXI.CanvasRenderer.prototype.destroy = function(removeView)
{
    if (typeof removeView === "undefined") { removeView = true; }

    if (removeView && this.view.parent)
    {
        this.view.parent.removeChild(this.view);
    }

    this.view = null;
    this.context = null;
    this.maskManager = null;
    this.renderSession = null;

};

/**
 * Resizes the canvas view to the specified width and height
 *
 * @method resize
 * @param width {Number} the new width of the canvas view
 * @param height {Number} the new height of the canvas view
 */
PIXI.CanvasRenderer.prototype.resize = function(width, height)
{
    this.width = width * this.resolution;
    this.height = height * this.resolution;

    this.view.width = this.width;
    this.view.height = this.height;

    if (this.autoResize) {
        this.view.style.width = this.width / this.resolution + "px";
        this.view.style.height = this.height / this.resolution + "px";
    }
};

/**
 * Renders a display object
 *
 * @method renderDisplayObject
 * @param displayObject {DisplayObject} The displayObject to render
 * @param context {CanvasRenderingContext2D} the context 2d method of the canvas
 * @private
 */
PIXI.CanvasRenderer.prototype.renderDisplayObject = function(displayObject, context)
{
    this.renderSession.context = context || this.context;
    this.renderSession.resolution = this.resolution;
    displayObject._renderCanvas(this.renderSession);
};

/**
 * Maps Pixi blend modes to canvas blend modes.
 *
 * @method mapBlendModes
 * @private
 */
PIXI.CanvasRenderer.prototype.mapBlendModes = function()
{
    if(!PIXI.blendModesCanvas)
    {
        PIXI.blendModesCanvas = [];

        if(PIXI.canUseNewCanvasBlendModes())
        {
            PIXI.blendModesCanvas[PIXI.blendModes.NORMAL]   = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.ADD]      = "lighter"; //IS THIS OK???
            PIXI.blendModesCanvas[PIXI.blendModes.MULTIPLY] = "multiply";
            PIXI.blendModesCanvas[PIXI.blendModes.SCREEN]   = "screen";
            PIXI.blendModesCanvas[PIXI.blendModes.OVERLAY]  = "overlay";
            PIXI.blendModesCanvas[PIXI.blendModes.DARKEN]   = "darken";
            PIXI.blendModesCanvas[PIXI.blendModes.LIGHTEN]  = "lighten";
            PIXI.blendModesCanvas[PIXI.blendModes.COLOR_DODGE] = "color-dodge";
            PIXI.blendModesCanvas[PIXI.blendModes.COLOR_BURN] = "color-burn";
            PIXI.blendModesCanvas[PIXI.blendModes.HARD_LIGHT] = "hard-light";
            PIXI.blendModesCanvas[PIXI.blendModes.SOFT_LIGHT] = "soft-light";
            PIXI.blendModesCanvas[PIXI.blendModes.DIFFERENCE] = "difference";
            PIXI.blendModesCanvas[PIXI.blendModes.EXCLUSION] = "exclusion";
            PIXI.blendModesCanvas[PIXI.blendModes.HUE]       = "hue";
            PIXI.blendModesCanvas[PIXI.blendModes.SATURATION] = "saturation";
            PIXI.blendModesCanvas[PIXI.blendModes.COLOR]      = "color";
            PIXI.blendModesCanvas[PIXI.blendModes.LUMINOSITY] = "luminosity";
        }
        else
        {
            // this means that the browser does not support the cool new blend modes in canvas "cough" ie "cough"
            PIXI.blendModesCanvas[PIXI.blendModes.NORMAL]   = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.ADD]      = "lighter"; //IS THIS OK???
            PIXI.blendModesCanvas[PIXI.blendModes.MULTIPLY] = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.SCREEN]   = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.OVERLAY]  = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.DARKEN]   = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.LIGHTEN]  = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.COLOR_DODGE] = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.COLOR_BURN] = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.HARD_LIGHT] = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.SOFT_LIGHT] = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.DIFFERENCE] = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.EXCLUSION] = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.HUE]       = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.SATURATION] = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.COLOR]      = "source-over";
            PIXI.blendModesCanvas[PIXI.blendModes.LUMINOSITY] = "source-over";
        }
    }
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */


/**
 * A set of functions used by the canvas renderer to draw the primitive graphics data.
 *
 * @class CanvasGraphics
 * @static
 */
PIXI.CanvasGraphics = function()
{
};

/*
 * Renders a PIXI.Graphics object to a canvas.
 *
 * @method renderGraphics
 * @static
 * @param graphics {Graphics} the actual graphics object to render
 * @param context {CanvasRenderingContext2D} the 2d drawing method of the canvas
 */
PIXI.CanvasGraphics.renderGraphics = function(graphics, context)
{
    var worldAlpha = graphics.worldAlpha;

    if(graphics.dirty)
    {
        this.updateGraphicsTint(graphics);
        graphics.dirty = false;
    }
    

    for (var i = 0; i < graphics.graphicsData.length; i++)
    {
        var data = graphics.graphicsData[i];
        var shape = data.shape;

        var fillColor = data._fillTint;
        var lineColor = data._lineTint;

        context.lineWidth = data.lineWidth;

        if(data.type === PIXI.Graphics.POLY)
        {
            context.beginPath();

            var points = shape.points;

            context.moveTo(points[0], points[1]);

            for (var j=1; j < points.length/2; j++)
            {
                context.lineTo(points[j * 2], points[j * 2 + 1]);
            }

            if(shape.closed)
            {
                context.lineTo(points[0], points[1]);
            }

            // if the first and last point are the same close the path - much neater :)
            if(points[0] === points[points.length-2] && points[1] === points[points.length-1])
            {
                context.closePath();
            }

            if(data.fill)
            {
                context.globalAlpha = data.fillAlpha * worldAlpha;
                context.fillStyle = '#' + ('00000' + ( fillColor | 0).toString(16)).substr(-6);
                context.fill();
            }
            if(data.lineWidth)
            {
                context.globalAlpha = data.lineAlpha * worldAlpha;
                context.strokeStyle = '#' + ('00000' + ( lineColor | 0).toString(16)).substr(-6);
                context.stroke();
            }
        }
        else if(data.type === PIXI.Graphics.RECT)
        {

            if(data.fillColor || data.fillColor === 0)
            {
                context.globalAlpha = data.fillAlpha * worldAlpha;
                context.fillStyle = '#' + ('00000' + ( fillColor | 0).toString(16)).substr(-6);
                context.fillRect(shape.x, shape.y, shape.width, shape.height);

            }
            if(data.lineWidth)
            {
                context.globalAlpha = data.lineAlpha * worldAlpha;
                context.strokeStyle = '#' + ('00000' + ( lineColor | 0).toString(16)).substr(-6);
                context.strokeRect(shape.x, shape.y, shape.width, shape.height);
            }
        }
        else if(data.type === PIXI.Graphics.CIRC)
        {
            // TODO - need to be Undefined!
            context.beginPath();
            context.arc(shape.x, shape.y, shape.radius,0,2*Math.PI);
            context.closePath();

            if(data.fill)
            {
                context.globalAlpha = data.fillAlpha * worldAlpha;
                context.fillStyle = '#' + ('00000' + ( fillColor | 0).toString(16)).substr(-6);
                context.fill();
            }
            if(data.lineWidth)
            {
                context.globalAlpha = data.lineAlpha * worldAlpha;
                context.strokeStyle = '#' + ('00000' + ( lineColor | 0).toString(16)).substr(-6);
                context.stroke();
            }
        }
        else if(data.type === PIXI.Graphics.ELIP)
        {
            // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas

            var w = shape.width * 2;
            var h = shape.height * 2;

            var x = shape.x - w/2;
            var y = shape.y - h/2;

            context.beginPath();

            var kappa = 0.5522848,
                ox = (w / 2) * kappa, // control point offset horizontal
                oy = (h / 2) * kappa, // control point offset vertical
                xe = x + w,           // x-end
                ye = y + h,           // y-end
                xm = x + w / 2,       // x-middle
                ym = y + h / 2;       // y-middle

            context.moveTo(x, ym);
            context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
            context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
            context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
            context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);

            context.closePath();

            if(data.fill)
            {
                context.globalAlpha = data.fillAlpha * worldAlpha;
                context.fillStyle = '#' + ('00000' + ( fillColor | 0).toString(16)).substr(-6);
                context.fill();
            }
            if(data.lineWidth)
            {
                context.globalAlpha = data.lineAlpha * worldAlpha;
                context.strokeStyle = '#' + ('00000' + ( lineColor | 0).toString(16)).substr(-6);
                context.stroke();
            }
        }
        else if (data.type === PIXI.Graphics.RREC)
        {
            var rx = shape.x;
            var ry = shape.y;
            var width = shape.width;
            var height = shape.height;
            var radius = shape.radius;

            var maxRadius = Math.min(width, height) / 2 | 0;
            radius = radius > maxRadius ? maxRadius : radius;

            context.beginPath();
            context.moveTo(rx, ry + radius);
            context.lineTo(rx, ry + height - radius);
            context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);
            context.lineTo(rx + width - radius, ry + height);
            context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);
            context.lineTo(rx + width, ry + radius);
            context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);
            context.lineTo(rx + radius, ry);
            context.quadraticCurveTo(rx, ry, rx, ry + radius);
            context.closePath();

            if(data.fillColor || data.fillColor === 0)
            {
                context.globalAlpha = data.fillAlpha * worldAlpha;
                context.fillStyle = '#' + ('00000' + ( fillColor | 0).toString(16)).substr(-6);
                context.fill();

            }
            if(data.lineWidth)
            {
                context.globalAlpha = data.lineAlpha * worldAlpha;
                context.strokeStyle = '#' + ('00000' + ( lineColor | 0).toString(16)).substr(-6);
                context.stroke();
            }
        }
    }
};

/*
 * Renders a graphics mask
 *
 * @static
 * @private
 * @method renderGraphicsMask
 * @param graphics {Graphics} the graphics which will be used as a mask
 * @param context {CanvasRenderingContext2D} the context 2d method of the canvas
 */
PIXI.CanvasGraphics.renderGraphicsMask = function(graphics, context)
{
    var len = graphics.graphicsData.length;

    if(len === 0) return;

    if(len > 1)
    {
        len = 1;
        window.console.log('Pixi.js warning: masks in canvas can only mask using the first path in the graphics object');
    }

    for (var i = 0; i < 1; i++)
    {
        var data = graphics.graphicsData[i];
        var shape = data.shape;

        if(data.type === PIXI.Graphics.POLY)
        {
            context.beginPath();
        
            var points = shape.points;
        
            context.moveTo(points[0], points[1]);

            for (var j=1; j < points.length/2; j++)
            {
                context.lineTo(points[j * 2], points[j * 2 + 1]);
            }

            // if the first and last point are the same close the path - much neater :)
            if(points[0] === points[points.length-2] && points[1] === points[points.length-1])
            {
                context.closePath();
            }

        }
        else if(data.type === PIXI.Graphics.RECT)
        {
            context.beginPath();
            context.rect(shape.x, shape.y, shape.width, shape.height);
            context.closePath();
        }
        else if(data.type === PIXI.Graphics.CIRC)
        {
            // TODO - need to be Undefined!
            context.beginPath();
            context.arc(shape.x, shape.y, shape.radius,0,2*Math.PI);
            context.closePath();
        }
        else if(data.type === PIXI.Graphics.ELIP)
        {

            // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas

            var w = shape.width * 2;
            var h = shape.height * 2;

            var x = shape.x - w/2;
            var y = shape.y - h/2;

            context.beginPath();

            var kappa = 0.5522848,
                ox = (w / 2) * kappa, // control point offset horizontal
                oy = (h / 2) * kappa, // control point offset vertical
                xe = x + w,           // x-end
                ye = y + h,           // y-end
                xm = x + w / 2,       // x-middle
                ym = y + h / 2;       // y-middle

            context.moveTo(x, ym);
            context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
            context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
            context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
            context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
            context.closePath();
        }
        else if (data.type === PIXI.Graphics.RREC)
        {
        
            var pts = shape.points;
            var rx = pts[0];
            var ry = pts[1];
            var width = pts[2];
            var height = pts[3];
            var radius = pts[4];

            var maxRadius = Math.min(width, height) / 2 | 0;
            radius = radius > maxRadius ? maxRadius : radius;

            context.beginPath();
            context.moveTo(rx, ry + radius);
            context.lineTo(rx, ry + height - radius);
            context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);
            context.lineTo(rx + width - radius, ry + height);
            context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);
            context.lineTo(rx + width, ry + radius);
            context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);
            context.lineTo(rx + radius, ry);
            context.quadraticCurveTo(rx, ry, rx, ry + radius);
            context.closePath();
        }
    }
};

PIXI.CanvasGraphics.updateGraphicsTint = function(graphics)
{
    if(graphics.tint === 0xFFFFFF)return;

    var tintR = (graphics.tint >> 16 & 0xFF) / 255;
    var tintG = (graphics.tint >> 8 & 0xFF) / 255;
    var tintB = (graphics.tint & 0xFF)/ 255;

    for (var i = 0; i < graphics.graphicsData.length; i++)
    {
        var data = graphics.graphicsData[i];

        var fillColor = data.fillColor | 0;
        var lineColor = data.lineColor | 0;

        /*
        var colorR = (fillColor >> 16 & 0xFF) / 255;
        var colorG = (fillColor >> 8 & 0xFF) / 255;
        var colorB = (fillColor & 0xFF) / 255; 

        colorR *= tintR;
        colorG *= tintG;
        colorB *= tintB;

        fillColor = ((colorR*255 << 16) + (colorG*255 << 8) + colorB*255);

        colorR = (lineColor >> 16 & 0xFF) / 255;
        colorG = (lineColor >> 8 & 0xFF) / 255;
        colorB = (lineColor & 0xFF) / 255; 

        colorR *= tintR;
        colorG *= tintG;
        colorB *= tintB;

        lineColor = ((colorR*255 << 16) + (colorG*255 << 8) + colorB*255);   
        */
        
        // super inline cos im an optimization NAZI :)
        data._fillTint = (((fillColor >> 16 & 0xFF) / 255 * tintR*255 << 16) + ((fillColor >> 8 & 0xFF) / 255 * tintG*255 << 8) +  (fillColor & 0xFF) / 255 * tintB*255);
        data._lineTint = (((lineColor >> 16 & 0xFF) / 255 * tintR*255 << 16) + ((lineColor >> 8 & 0xFF) / 255 * tintG*255 << 8) +  (lineColor & 0xFF) / 255 * tintB*255);

    }
};


/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The Graphics class contains methods used to draw primitive shapes such as lines, circles and rectangles to the display, and color and fill them.
 * 
 * @class Graphics
 * @extends DisplayObjectContainer
 * @constructor
 */
PIXI.Graphics = function()
{
    PIXI.DisplayObjectContainer.call( this );

    this.renderable = true;

    /**
     * The alpha value used when filling the Graphics object.
     *
     * @property fillAlpha
     * @type Number
     */
    this.fillAlpha = 1;

    /**
     * The width (thickness) of any lines drawn.
     *
     * @property lineWidth
     * @type Number
     */
    this.lineWidth = 0;

    /**
     * The color of any lines drawn.
     *
     * @property lineColor
     * @type String
     * @default 0
     */
    this.lineColor = 0;

    /**
     * Graphics data
     *
     * @property graphicsData
     * @type Array
     * @private
     */
    this.graphicsData = [];

    /**
     * The tint applied to the graphic shape. This is a hex value. Apply a value of 0xFFFFFF to reset the tint.
     *
     * @property tint
     * @type Number
     * @default 0xFFFFFF
     */
    this.tint = 0xFFFFFF;

    /**
     * The blend mode to be applied to the graphic shape. Apply a value of PIXI.blendModes.NORMAL to reset the blend mode.
     *
     * @property blendMode
     * @type Number
     * @default PIXI.blendModes.NORMAL;
     */
    this.blendMode = PIXI.blendModes.NORMAL;
    
    /**
     * Current path
     *
     * @property currentPath
     * @type Object
     * @private
     */
    this.currentPath = null;
    
    /**
     * Array containing some WebGL-related properties used by the WebGL renderer.
     *
     * @property _webGL
     * @type Array
     * @private
     */
    this._webGL = [];

    /**
     * Whether this shape is being used as a mask.
     *
     * @property isMask
     * @type Boolean
     */
    this.isMask = false;

    /**
     * The bounds' padding used for bounds calculation.
     *
     * @property boundsPadding
     * @type Number
     */
    this.boundsPadding = 0;

    this._localBounds = new PIXI.Rectangle(0,0,1,1);

    /**
     * Used to detect if the graphics object has changed. If this is set to true then the graphics object will be recalculated.
     * 
     * @property dirty
     * @type Boolean
     * @private
     */
    this.dirty = true;

    /**
     * Used to detect if the webgl graphics object has changed. If this is set to true then the graphics object will be recalculated.
     * 
     * @property webGLDirty
     * @type Boolean
     * @private
     */
    this.webGLDirty = false;

    /**
     * Used to detect if the cached sprite object needs to be updated.
     * 
     * @property cachedSpriteDirty
     * @type Boolean
     * @private
     */
    this.cachedSpriteDirty = false;

};

// constructor
PIXI.Graphics.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );
PIXI.Graphics.prototype.constructor = PIXI.Graphics;

/**
 * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.
 * This is useful if your graphics element does not change often, as it will speed up the rendering of the object in exchange for taking up texture memory.
 * It is also useful if you need the graphics object to be anti-aliased, because it will be rendered using canvas.
 * This is not recommended if you are constantly redrawing the graphics element.
 *
 * @property cacheAsBitmap
 * @type Boolean
 * @default false
 * @private
 */
Object.defineProperty(PIXI.Graphics.prototype, "cacheAsBitmap", {
    get: function() {
        return  this._cacheAsBitmap;
    },
    set: function(value) {
        this._cacheAsBitmap = value;

        if(this._cacheAsBitmap)
        {

            this._generateCachedSprite();
        }
        else
        {
            this.destroyCachedSprite();
            this.dirty = true;
        }

    }
});

/**
 * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo() method or the drawCircle() method.
 *
 * @method lineStyle
 * @param lineWidth {Number} width of the line to draw, will update the objects stored style
 * @param color {Number} color of the line to draw, will update the objects stored style
 * @param alpha {Number} alpha of the line to draw, will update the objects stored style
 * @return {Graphics}
 */
PIXI.Graphics.prototype.lineStyle = function(lineWidth, color, alpha)
{
    this.lineWidth = lineWidth || 0;
    this.lineColor = color || 0;
    this.lineAlpha = (arguments.length < 3) ? 1 : alpha;

    if(this.currentPath)
    {
        if(this.currentPath.shape.points.length)
        {
            // halfway through a line? start a new one!
            this.drawShape( new PIXI.Polygon( this.currentPath.shape.points.slice(-2) ));
            return this;
        }

        // otherwise its empty so lets just set the line properties
        this.currentPath.lineWidth = this.lineWidth;
        this.currentPath.lineColor = this.lineColor;
        this.currentPath.lineAlpha = this.lineAlpha;
        
    }

    return this;
};

/**
 * Moves the current drawing position to x, y.
 *
 * @method moveTo
 * @param x {Number} the X coordinate to move to
 * @param y {Number} the Y coordinate to move to
 * @return {Graphics}
  */
PIXI.Graphics.prototype.moveTo = function(x, y)
{
    this.drawShape(new PIXI.Polygon([x,y]));

    return this;
};

/**
 * Draws a line using the current line style from the current drawing position to (x, y);
 * The current drawing position is then set to (x, y).
 *
 * @method lineTo
 * @param x {Number} the X coordinate to draw to
 * @param y {Number} the Y coordinate to draw to
 * @return {Graphics}
 */
PIXI.Graphics.prototype.lineTo = function(x, y)
{
    this.currentPath.shape.points.push(x, y);
    this.dirty = true;

    return this;
};

/**
 * Calculate the points for a quadratic bezier curve and then draws it.
 * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
 *
 * @method quadraticCurveTo
 * @param cpX {Number} Control point x
 * @param cpY {Number} Control point y
 * @param toX {Number} Destination point x
 * @param toY {Number} Destination point y
 * @return {Graphics}
 */
PIXI.Graphics.prototype.quadraticCurveTo = function(cpX, cpY, toX, toY)
{
    if( this.currentPath )
    {
        if(this.currentPath.shape.points.length === 0)this.currentPath.shape.points = [0,0];
    }
    else
    {
        this.moveTo(0,0);
    }

    var xa,
    ya,
    n = 20,
    points = this.currentPath.shape.points;
    if(points.length === 0)this.moveTo(0, 0);
    

    var fromX = points[points.length-2];
    var fromY = points[points.length-1];

    var j = 0;
    for (var i = 1; i <= n; i++ )
    {
        j = i / n;

        xa = fromX + ( (cpX - fromX) * j );
        ya = fromY + ( (cpY - fromY) * j );

        points.push( xa + ( ((cpX + ( (toX - cpX) * j )) - xa) * j ),
                     ya + ( ((cpY + ( (toY - cpY) * j )) - ya) * j ) );
    }


    this.dirty = true;

    return this;
};

/**
 * Calculate the points for a bezier curve and then draws it.
 *
 * @method bezierCurveTo
 * @param cpX {Number} Control point x
 * @param cpY {Number} Control point y
 * @param cpX2 {Number} Second Control point x
 * @param cpY2 {Number} Second Control point y
 * @param toX {Number} Destination point x
 * @param toY {Number} Destination point y
 * @return {Graphics}
 */
PIXI.Graphics.prototype.bezierCurveTo = function(cpX, cpY, cpX2, cpY2, toX, toY)
{
    if( this.currentPath )
    {
        if(this.currentPath.shape.points.length === 0)this.currentPath.shape.points = [0,0];
    }
    else
    {
        this.moveTo(0,0);
    }

    var n = 20,
    dt,
    dt2,
    dt3,
    t2,
    t3,
    points = this.currentPath.shape.points;

    var fromX = points[points.length-2];
    var fromY = points[points.length-1];
    
    var j = 0;

    for (var i=1; i<=n; i++)
    {
        j = i / n;

        dt = (1 - j);
        dt2 = dt * dt;
        dt3 = dt2 * dt;

        t2 = j * j;
        t3 = t2 * j;
        
        points.push( dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX,
                     dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY);
    }
    
    this.dirty = true;

    return this;
};

/*
 * The arcTo() method creates an arc/curve between two tangents on the canvas.
 * 
 * "borrowed" from https://code.google.com/p/fxcanvas/ - thanks google!
 *
 * @method arcTo
 * @param x1 {Number} The x-coordinate of the beginning of the arc
 * @param y1 {Number} The y-coordinate of the beginning of the arc
 * @param x2 {Number} The x-coordinate of the end of the arc
 * @param y2 {Number} The y-coordinate of the end of the arc
 * @param radius {Number} The radius of the arc
 * @return {Graphics}
 */
PIXI.Graphics.prototype.arcTo = function(x1, y1, x2, y2, radius)
{
    if( this.currentPath )
    {
        if(this.currentPath.shape.points.length === 0)
        {
            this.currentPath.shape.points.push(x1, y1);
        }
    }
    else
    {
        this.moveTo(x1, y1);
    }

    var points = this.currentPath.shape.points;
    var fromX = points[points.length-2];
    var fromY = points[points.length-1];
    var a1 = fromY - y1;
    var b1 = fromX - x1;
    var a2 = y2   - y1;
    var b2 = x2   - x1;
    var mm = Math.abs(a1 * b2 - b1 * a2);


    if (mm < 1.0e-8 || radius === 0)
    {
        if( points[points.length-2] !== x1 || points[points.length-1] !== y1)
        {
            //console.log(">>")
            points.push(x1, y1);
        }
    }
    else
    {
        var dd = a1 * a1 + b1 * b1;
        var cc = a2 * a2 + b2 * b2;
        var tt = a1 * a2 + b1 * b2;
        var k1 = radius * Math.sqrt(dd) / mm;
        var k2 = radius * Math.sqrt(cc) / mm;
        var j1 = k1 * tt / dd;
        var j2 = k2 * tt / cc;
        var cx = k1 * b2 + k2 * b1;
        var cy = k1 * a2 + k2 * a1;
        var px = b1 * (k2 + j1);
        var py = a1 * (k2 + j1);
        var qx = b2 * (k1 + j2);
        var qy = a2 * (k1 + j2);
        var startAngle = Math.atan2(py - cy, px - cx);
        var endAngle   = Math.atan2(qy - cy, qx - cx);

        this.arc(cx + x1, cy + y1, radius, startAngle, endAngle, b1 * a2 > b2 * a1);
    }

    this.dirty = true;

    return this;
};

/**
 * The arc method creates an arc/curve (used to create circles, or parts of circles).
 *
 * @method arc
 * @param cx {Number} The x-coordinate of the center of the circle
 * @param cy {Number} The y-coordinate of the center of the circle
 * @param radius {Number} The radius of the circle
 * @param startAngle {Number} The starting angle, in radians (0 is at the 3 o'clock position of the arc's circle)
 * @param endAngle {Number} The ending angle, in radians
 * @param anticlockwise {Boolean} Optional. Specifies whether the drawing should be counterclockwise or clockwise. False is default, and indicates clockwise, while true indicates counter-clockwise.
 * @return {Graphics}
 */
PIXI.Graphics.prototype.arc = function(cx, cy, radius, startAngle, endAngle, anticlockwise)
{
    var startX = cx + Math.cos(startAngle) * radius;
    var startY = cy + Math.sin(startAngle) * radius;
    var points;

    if( this.currentPath )
    {
        points = this.currentPath.shape.points;

        if(points.length === 0)
        {
            points.push(startX, startY);
        }
        else if( points[points.length-2] !== startX || points[points.length-1] !== startY)
        {
            points.push(startX, startY);
        }
    }
    else
    {
        this.moveTo(startX, startY);
        points = this.currentPath.shape.points;
    }
    
    if (startAngle === endAngle)return this;

    if( !anticlockwise && endAngle <= startAngle )
    {
        endAngle += Math.PI * 2;
    }
    else if( anticlockwise && startAngle <= endAngle )
    {
        startAngle += Math.PI * 2;
    }

    var sweep = anticlockwise ? (startAngle - endAngle) *-1 : (endAngle - startAngle);
    var segs =  ( Math.abs(sweep)/ (Math.PI * 2) ) * 40;

    if( sweep === 0 ) return this;

    var theta = sweep/(segs*2);
    var theta2 = theta*2;

    var cTheta = Math.cos(theta);
    var sTheta = Math.sin(theta);
    
    var segMinus = segs - 1;

    var remainder = ( segMinus % 1 ) / segMinus;

    for(var i=0; i<=segMinus; i++)
    {
        var real =  i + remainder * i;

    
        var angle = ((theta) + startAngle + (theta2 * real));

        var c = Math.cos(angle);
        var s = -Math.sin(angle);

        points.push(( (cTheta *  c) + (sTheta * s) ) * radius + cx,
                    ( (cTheta * -s) + (sTheta * c) ) * radius + cy);
    }

    this.dirty = true;

    return this;
};

/**
 * Specifies a simple one-color fill that subsequent calls to other Graphics methods
 * (such as lineTo() or drawCircle()) use when drawing.
 *
 * @method beginFill
 * @param color {Number} the color of the fill
 * @param alpha {Number} the alpha of the fill
 * @return {Graphics}
 */
PIXI.Graphics.prototype.beginFill = function(color, alpha)
{
    this.filling = true;
    this.fillColor = color || 0;
    this.fillAlpha = (alpha === undefined) ? 1 : alpha;

    if(this.currentPath)
    {
        if(this.currentPath.shape.points.length <= 2)
        {
            this.currentPath.fill = this.filling;
            this.currentPath.fillColor = this.fillColor;
            this.currentPath.fillAlpha = this.fillAlpha;
        }
    }
    return this;
};

/**
 * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.
 *
 * @method endFill
 * @return {Graphics}
 */
PIXI.Graphics.prototype.endFill = function()
{
    this.filling = false;
    this.fillColor = null;
    this.fillAlpha = 1;

    return this;
};

/**
 * @method drawRect
 *
 * @param x {Number} The X coord of the top-left of the rectangle
 * @param y {Number} The Y coord of the top-left of the rectangle
 * @param width {Number} The width of the rectangle
 * @param height {Number} The height of the rectangle
 * @return {Graphics}
 */
PIXI.Graphics.prototype.drawRect = function( x, y, width, height )
{
    this.drawShape(new PIXI.Rectangle(x,y, width, height));

    return this;
};

/**
 * @method drawRoundedRect
 *
 * @param x {Number} The X coord of the top-left of the rectangle
 * @param y {Number} The Y coord of the top-left of the rectangle
 * @param width {Number} The width of the rectangle
 * @param height {Number} The height of the rectangle
 * @param radius {Number} Radius of the rectangle corners
 */
PIXI.Graphics.prototype.drawRoundedRect = function( x, y, width, height, radius )
{
    this.drawShape(new PIXI.RoundedRectangle(x, y, width, height, radius));

    return this;
};

/**
 * Draws a circle.
 *
 * @method drawCircle
 * @param x {Number} The X coordinate of the center of the circle
 * @param y {Number} The Y coordinate of the center of the circle
 * @param radius {Number} The radius of the circle
 * @return {Graphics}
 */
PIXI.Graphics.prototype.drawCircle = function(x, y, radius)
{
    this.drawShape(new PIXI.Circle(x,y, radius));

    return this;
};

/**
 * Draws an ellipse.
 *
 * @method drawEllipse
 * @param x {Number} The X coordinate of the center of the ellipse
 * @param y {Number} The Y coordinate of the center of the ellipse
 * @param width {Number} The half width of the ellipse
 * @param height {Number} The half height of the ellipse
 * @return {Graphics}
 */
PIXI.Graphics.prototype.drawEllipse = function(x, y, width, height)
{
    this.drawShape(new PIXI.Ellipse(x, y, width, height));

    return this;
};

/**
 * Draws a polygon using the given path.
 *
 * @method drawPolygon
 * @param path {Array} The path data used to construct the polygon.
 * @return {Graphics}
 */
PIXI.Graphics.prototype.drawPolygon = function(path)
{
    if(!(path instanceof Array))path = Array.prototype.slice.call(arguments);
    this.drawShape(new PIXI.Polygon(path));
    return this;
};

/**
 * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
 *
 * @method clear
 * @return {Graphics}
 */
PIXI.Graphics.prototype.clear = function()
{
    this.lineWidth = 0;
    this.filling = false;

    this.dirty = true;
    this.clearDirty = true;
    this.graphicsData = [];

    return this;
};

/**
 * Useful function that returns a texture of the graphics object that can then be used to create sprites
 * This can be quite useful if your geometry is complicated and needs to be reused multiple times.
 *
 * @method generateTexture
 * @param resolution {Number} The resolution of the texture being generated
 * @param scaleMode {Number} Should be one of the PIXI.scaleMode consts
 * @return {Texture} a texture of the graphics object
 */
PIXI.Graphics.prototype.generateTexture = function(resolution, scaleMode)
{
    resolution = resolution || 1;

    var bounds = this.getBounds();
   
    var canvasBuffer = new PIXI.CanvasBuffer(bounds.width * resolution, bounds.height * resolution);
    
    var texture = PIXI.Texture.fromCanvas(canvasBuffer.canvas, scaleMode);
    texture.baseTexture.resolution = resolution;

    canvasBuffer.context.scale(resolution, resolution);

    canvasBuffer.context.translate(-bounds.x,-bounds.y);
    
    PIXI.CanvasGraphics.renderGraphics(this, canvasBuffer.context);

    return texture;
};

/**
* Renders the object using the WebGL renderer
*
* @method _renderWebGL
* @param renderSession {RenderSession} 
* @private
*/
PIXI.Graphics.prototype._renderWebGL = function(renderSession)
{
    // if the sprite is not visible or the alpha is 0 then no need to render this element
    if(this.visible === false || this.alpha === 0 || this.isMask === true)return;

    if(this._cacheAsBitmap)
    {

        if(this.dirty || this.cachedSpriteDirty)
        {

            this._generateCachedSprite();
   
            // we will also need to update the texture on the gpu too!
            this.updateCachedSpriteTexture();

            this.cachedSpriteDirty = false;
            this.dirty = false;
        }

        this._cachedSprite.worldAlpha = this.worldAlpha;
        PIXI.Sprite.prototype._renderWebGL.call(this._cachedSprite, renderSession);

        return;
    }
    else
    {
        renderSession.spriteBatch.stop();
        renderSession.blendModeManager.setBlendMode(this.blendMode);

        if(this._mask)renderSession.maskManager.pushMask(this._mask, renderSession);
        if(this._filters)renderSession.filterManager.pushFilter(this._filterBlock);
      
        // check blend mode
        if(this.blendMode !== renderSession.spriteBatch.currentBlendMode)
        {
            renderSession.spriteBatch.currentBlendMode = this.blendMode;
            var blendModeWebGL = PIXI.blendModesWebGL[renderSession.spriteBatch.currentBlendMode];
            renderSession.spriteBatch.gl.blendFunc(blendModeWebGL[0], blendModeWebGL[1]);
        }
        
        // check if the webgl graphic needs to be updated
        if(this.webGLDirty)
        {
            this.dirty = true;
            this.webGLDirty = false;
        }
        
        PIXI.WebGLGraphics.renderGraphics(this, renderSession);
        
        // only render if it has children!
        if(this.children.length)
        {
            renderSession.spriteBatch.start();

             // simple render children!
            for(var i=0, j=this.children.length; i<j; i++)
            {
                this.children[i]._renderWebGL(renderSession);
            }

            renderSession.spriteBatch.stop();
        }

        if(this._filters)renderSession.filterManager.popFilter();
        if(this._mask)renderSession.maskManager.popMask(this.mask, renderSession);
          
        renderSession.drawCount++;

        renderSession.spriteBatch.start();
    }
};

/**
* Renders the object using the Canvas renderer
*
* @method _renderCanvas
* @param renderSession {RenderSession} 
* @private
*/
PIXI.Graphics.prototype._renderCanvas = function(renderSession)
{
    // if the sprite is not visible or the alpha is 0 then no need to render this element
    if(this.visible === false || this.alpha === 0 || this.isMask === true)return;
    
    if(this._cacheAsBitmap)
    {
        if(this.dirty || this.cachedSpriteDirty)
        {
            this._generateCachedSprite();
   
            // we will also need to update the texture
            this.updateCachedSpriteTexture();

            this.cachedSpriteDirty = false;
            this.dirty = false;
        }

        this._cachedSprite.alpha = this.alpha;
        PIXI.Sprite.prototype._renderCanvas.call(this._cachedSprite, renderSession);

        return;
    }
    else
    {
        var context = renderSession.context;
        var transform = this.worldTransform;
        
        if(this.blendMode !== renderSession.currentBlendMode)
        {
            renderSession.currentBlendMode = this.blendMode;
            context.globalCompositeOperation = PIXI.blendModesCanvas[renderSession.currentBlendMode];
        }

        if(this._mask)
        {
            renderSession.maskManager.pushMask(this._mask, renderSession);
        }

        var resolution = renderSession.resolution;
        context.setTransform(transform.a * resolution,
                             transform.b * resolution,
                             transform.c * resolution,
                             transform.d * resolution,
                             transform.tx * resolution,
                             transform.ty * resolution);

        PIXI.CanvasGraphics.renderGraphics(this, context);

         // simple render children!
        for(var i=0, j=this.children.length; i<j; i++)
        {
            this.children[i]._renderCanvas(renderSession);
        }

        if(this._mask)
        {
            renderSession.maskManager.popMask(renderSession);
        }
    }
};

/**
 * Retrieves the bounds of the graphic shape as a rectangle object
 *
 * @method getBounds
 * @return {Rectangle} the rectangular bounding area
 */
PIXI.Graphics.prototype.getBounds = function( matrix )
{
    // return an empty object if the item is a mask!
    if(this.isMask)return PIXI.EmptyRectangle;

    if(this.dirty)
    {
        this.updateLocalBounds();
        this.webGLDirty = true;
        this.cachedSpriteDirty = true;
        this.dirty = false;
    }

    var bounds = this._localBounds;

    var w0 = bounds.x;
    var w1 = bounds.width + bounds.x;

    var h0 = bounds.y;
    var h1 = bounds.height + bounds.y;

    var worldTransform = matrix || this.worldTransform;

    var a = worldTransform.a;
    var b = worldTransform.b;
    var c = worldTransform.c;
    var d = worldTransform.d;
    var tx = worldTransform.tx;
    var ty = worldTransform.ty;

    var x1 = a * w1 + c * h1 + tx;
    var y1 = d * h1 + b * w1 + ty;

    var x2 = a * w0 + c * h1 + tx;
    var y2 = d * h1 + b * w0 + ty;

    var x3 = a * w0 + c * h0 + tx;
    var y3 = d * h0 + b * w0 + ty;

    var x4 =  a * w1 + c * h0 + tx;
    var y4 =  d * h0 + b * w1 + ty;

    var maxX = x1;
    var maxY = y1;

    var minX = x1;
    var minY = y1;

    minX = x2 < minX ? x2 : minX;
    minX = x3 < minX ? x3 : minX;
    minX = x4 < minX ? x4 : minX;

    minY = y2 < minY ? y2 : minY;
    minY = y3 < minY ? y3 : minY;
    minY = y4 < minY ? y4 : minY;

    maxX = x2 > maxX ? x2 : maxX;
    maxX = x3 > maxX ? x3 : maxX;
    maxX = x4 > maxX ? x4 : maxX;

    maxY = y2 > maxY ? y2 : maxY;
    maxY = y3 > maxY ? y3 : maxY;
    maxY = y4 > maxY ? y4 : maxY;

    this._bounds.x = minX;
    this._bounds.width = maxX - minX;

    this._bounds.y = minY;
    this._bounds.height = maxY - minY;

    return  this._bounds;
};

/**
 * Update the bounds of the object
 *
 * @method updateLocalBounds
 */
PIXI.Graphics.prototype.updateLocalBounds = function()
{
    var minX = Infinity;
    var maxX = -Infinity;

    var minY = Infinity;
    var maxY = -Infinity;

    if(this.graphicsData.length)
    {
        var shape, points, x, y, w, h;

        for (var i = 0; i < this.graphicsData.length; i++) {
            var data = this.graphicsData[i];
            var type = data.type;
            var lineWidth = data.lineWidth;
            shape = data.shape;
           

            if(type === PIXI.Graphics.RECT || type === PIXI.Graphics.RREC)
            {
                x = shape.x - lineWidth/2;
                y = shape.y - lineWidth/2;
                w = shape.width + lineWidth;
                h = shape.height + lineWidth;

                minX = x < minX ? x : minX;
                maxX = x + w > maxX ? x + w : maxX;

                minY = y < minY ? y : minY;
                maxY = y + h > maxY ? y + h : maxY;
            }
            else if(type === PIXI.Graphics.CIRC)
            {
                x = shape.x;
                y = shape.y;
                w = shape.radius + lineWidth/2;
                h = shape.radius + lineWidth/2;

                minX = x - w < minX ? x - w : minX;
                maxX = x + w > maxX ? x + w : maxX;

                minY = y - h < minY ? y - h : minY;
                maxY = y + h > maxY ? y + h : maxY;
            }
            else if(type === PIXI.Graphics.ELIP)
            {
                x = shape.x;
                y = shape.y;
                w = shape.width + lineWidth/2;
                h = shape.height + lineWidth/2;

                minX = x - w < minX ? x - w : minX;
                maxX = x + w > maxX ? x + w : maxX;

                minY = y - h < minY ? y - h : minY;
                maxY = y + h > maxY ? y + h : maxY;
            }
            else
            {
                // POLY
                points = shape.points;
                
                for (var j = 0; j < points.length; j+=2)
                {

                    x = points[j];
                    y = points[j+1];
                    minX = x-lineWidth < minX ? x-lineWidth : minX;
                    maxX = x+lineWidth > maxX ? x+lineWidth : maxX;

                    minY = y-lineWidth < minY ? y-lineWidth : minY;
                    maxY = y+lineWidth > maxY ? y+lineWidth : maxY;
                }
            }
        }
    }
    else
    {
        minX = 0;
        maxX = 0;
        minY = 0;
        maxY = 0;
    }

    var padding = this.boundsPadding;
    
    this._localBounds.x = minX - padding;
    this._localBounds.width = (maxX - minX) + padding * 2;

    this._localBounds.y = minY - padding;
    this._localBounds.height = (maxY - minY) + padding * 2;
};

/**
 * Generates the cached sprite when the sprite has cacheAsBitmap = true
 *
 * @method _generateCachedSprite
 * @private
 */
PIXI.Graphics.prototype._generateCachedSprite = function()
{
    var bounds = this.getLocalBounds();

    if(!this._cachedSprite)
    {
        var canvasBuffer = new PIXI.CanvasBuffer(bounds.width, bounds.height);
        var texture = PIXI.Texture.fromCanvas(canvasBuffer.canvas);
        
        this._cachedSprite = new PIXI.Sprite(texture);
        this._cachedSprite.buffer = canvasBuffer;

        this._cachedSprite.worldTransform = this.worldTransform;
    }
    else
    {
        this._cachedSprite.buffer.resize(bounds.width, bounds.height);
    }

    // leverage the anchor to account for the offset of the element
    this._cachedSprite.anchor.x = -( bounds.x / bounds.width );
    this._cachedSprite.anchor.y = -( bounds.y / bounds.height );

   // this._cachedSprite.buffer.context.save();
    this._cachedSprite.buffer.context.translate(-bounds.x,-bounds.y);
    
    // make sure we set the alpha of the graphics to 1 for the render.. 
    this.worldAlpha = 1;

    // now render the graphic..
    PIXI.CanvasGraphics.renderGraphics(this, this._cachedSprite.buffer.context);
    this._cachedSprite.alpha = this.alpha;
};

/**
 * Updates texture size based on canvas size
 *
 * @method updateCachedSpriteTexture
 * @private
 */
PIXI.Graphics.prototype.updateCachedSpriteTexture = function()
{
    var cachedSprite = this._cachedSprite;
    var texture = cachedSprite.texture;
    var canvas = cachedSprite.buffer.canvas;

    texture.baseTexture.width = canvas.width;
    texture.baseTexture.height = canvas.height;
    texture.crop.width = texture.frame.width = canvas.width;
    texture.crop.height = texture.frame.height = canvas.height;

    cachedSprite._width = canvas.width;
    cachedSprite._height = canvas.height;

    // update the dirty base textures
    texture.baseTexture.dirty();
};

/**
 * Destroys a previous cached sprite.
 *
 * @method destroyCachedSprite
 */
PIXI.Graphics.prototype.destroyCachedSprite = function()
{
    this._cachedSprite.texture.destroy(true);

    // let the gc collect the unused sprite
    // TODO could be object pooled!
    this._cachedSprite = null;
};

/**
 * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
 *
 * @method drawShape
 * @param {Circle|Rectangle|Ellipse|Line|Polygon} shape The Shape object to draw.
 * @return {GraphicsData} The generated GraphicsData object.
 */
PIXI.Graphics.prototype.drawShape = function(shape)
{
    if(this.currentPath)
    {
        // check current path!
        if(this.currentPath.shape.points.length <= 2)this.graphicsData.pop();
    }

    this.currentPath = null;

    var data = new PIXI.GraphicsData(this.lineWidth, this.lineColor, this.lineAlpha, this.fillColor, this.fillAlpha, this.filling, shape);
    
    this.graphicsData.push(data);
    
    if(data.type === PIXI.Graphics.POLY)
    {
        data.shape.closed = this.filling;
        this.currentPath = data;
    }

    this.dirty = true;

    return data;
};

/**
 * A GraphicsData object.
 * 
 * @class GraphicsData
 * @constructor
 */
PIXI.GraphicsData = function(lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, shape)
{
    this.lineWidth = lineWidth;
    this.lineColor = lineColor;
    this.lineAlpha = lineAlpha;
    this._lineTint = lineColor;

    this.fillColor = fillColor;
    this.fillAlpha = fillAlpha;
    this._fillTint = fillColor;
    this.fill = fill;

    this.shape = shape;
    this.type = shape.type;
};

// SOME TYPES:
PIXI.Graphics.POLY = 0;
PIXI.Graphics.RECT = 1;
PIXI.Graphics.CIRC = 2;
PIXI.Graphics.ELIP = 3;
PIXI.Graphics.RREC = 4;

PIXI.Polygon.prototype.type = PIXI.Graphics.POLY;
PIXI.Rectangle.prototype.type = PIXI.Graphics.RECT;
PIXI.Circle.prototype.type = PIXI.Graphics.CIRC;
PIXI.Ellipse.prototype.type = PIXI.Graphics.ELIP;
PIXI.RoundedRectangle.prototype.type = PIXI.Graphics.RREC;


/**
 * @author Mat Groves http://matgroves.com/
 */

 /**
 *
 * @class Strip
 * @extends DisplayObjectContainer
 * @constructor
 * @param texture {Texture} The texture to use
 * @param width {Number} the width
 * @param height {Number} the height
 *
 */
PIXI.Strip = function(texture)
{
    PIXI.DisplayObjectContainer.call( this );


    /**
     * The texture of the strip
     *
     * @property texture
     * @type Texture
     */
    this.texture = texture;

    // set up the main bits..
    this.uvs = new PIXI.Float32Array([0, 1,
                                      1, 1,
                                      1, 0,
                                      0, 1]);

    this.vertices = new PIXI.Float32Array([0, 0,
                                            100, 0,
                                            100, 100,
                                            0, 100]);

    this.colors = new PIXI.Float32Array([1, 1, 1, 1]);

    this.indices = new PIXI.Uint16Array([0, 1, 2, 3]);

    /**
     * Whether the strip is dirty or not
     *
     * @property dirty
     * @type Boolean
     */
    this.dirty = true;

    /**
     * The blend mode to be applied to the sprite. Set to PIXI.blendModes.NORMAL to remove any blend mode.
     *
     * @property blendMode
     * @type Number
     * @default PIXI.blendModes.NORMAL;
     */
    this.blendMode = PIXI.blendModes.NORMAL;

    /**
     * Triangles in canvas mode are automatically antialiased, use this value to force triangles to overlap a bit with each other.
     *
     * @property canvasPadding
     * @type Number
     */
    this.canvasPadding = 0;

    this.drawMode = PIXI.Strip.DrawModes.TRIANGLE_STRIP;

};

// constructor
PIXI.Strip.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);
PIXI.Strip.prototype.constructor = PIXI.Strip;

PIXI.Strip.prototype._renderWebGL = function(renderSession)
{
    // if the sprite is not visible or the alpha is 0 then no need to render this element
    if(!this.visible || this.alpha <= 0)return;
    // render triangle strip..

    renderSession.spriteBatch.stop();

    // init! init!
    if(!this._vertexBuffer)this._initWebGL(renderSession);

    renderSession.shaderManager.setShader(renderSession.shaderManager.stripShader);

    this._renderStrip(renderSession);

    ///renderSession.shaderManager.activateDefaultShader();

    renderSession.spriteBatch.start();

    //TODO check culling
};

PIXI.Strip.prototype._initWebGL = function(renderSession)
{
    // build the strip!
    var gl = renderSession.gl;

    this._vertexBuffer = gl.createBuffer();
    this._indexBuffer = gl.createBuffer();
    this._uvBuffer = gl.createBuffer();
    this._colorBuffer = gl.createBuffer();

    gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);

    gl.bindBuffer(gl.ARRAY_BUFFER, this._uvBuffer);
    gl.bufferData(gl.ARRAY_BUFFER,  this.uvs, gl.STATIC_DRAW);

    gl.bindBuffer(gl.ARRAY_BUFFER, this._colorBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.STATIC_DRAW);

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);
};

PIXI.Strip.prototype._renderStrip = function(renderSession)
{
    var gl = renderSession.gl;
    var projection = renderSession.projection,
        offset = renderSession.offset,
        shader = renderSession.shaderManager.stripShader;

    var drawMode = this.drawMode === PIXI.Strip.DrawModes.TRIANGLE_STRIP ? gl.TRIANGLE_STRIP : gl.TRIANGLES;

    // gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mat4Real);

    renderSession.blendModeManager.setBlendMode(this.blendMode);


    // set uniforms
    gl.uniformMatrix3fv(shader.translationMatrix, false, this.worldTransform.toArray(true));
    gl.uniform2f(shader.projectionVector, projection.x, -projection.y);
    gl.uniform2f(shader.offsetVector, -offset.x, -offset.y);
    gl.uniform1f(shader.alpha, this.worldAlpha);

    if(!this.dirty)
    {

        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertices);
        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);

        // update the uvs
        gl.bindBuffer(gl.ARRAY_BUFFER, this._uvBuffer);
        gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, 0, 0);

        gl.activeTexture(gl.TEXTURE0);

        // check if a texture is dirty..
        if(this.texture.baseTexture._dirty[gl.id])
        {
            renderSession.renderer.updateTexture(this.texture.baseTexture);
        }
        else
        {
            // bind the current texture
            gl.bindTexture(gl.TEXTURE_2D, this.texture.baseTexture._glTextures[gl.id]);
        }

        // dont need to upload!
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);


    }
    else
    {

        this.dirty = false;
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.STATIC_DRAW);
        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);

        // update the uvs
        gl.bindBuffer(gl.ARRAY_BUFFER, this._uvBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.STATIC_DRAW);
        gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, 0, 0);

        gl.activeTexture(gl.TEXTURE0);

        // check if a texture is dirty..
        if(this.texture.baseTexture._dirty[gl.id])
        {
            renderSession.renderer.updateTexture(this.texture.baseTexture);
        }
        else
        {
            gl.bindTexture(gl.TEXTURE_2D, this.texture.baseTexture._glTextures[gl.id]);
        }

        // dont need to upload!
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);

    }
    //console.log(gl.TRIANGLE_STRIP)
    //
    //
    gl.drawElements(drawMode, this.indices.length, gl.UNSIGNED_SHORT, 0);


};



PIXI.Strip.prototype._renderCanvas = function(renderSession)
{
    var context = renderSession.context;

    var transform = this.worldTransform;

    if (renderSession.roundPixels)
    {
        context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx | 0, transform.ty | 0);
    }
    else
    {
        context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
    }

    if (this.drawMode === PIXI.Strip.DrawModes.TRIANGLE_STRIP)
    {
        this._renderCanvasTriangleStrip(context);
    }
    else
    {
        this._renderCanvasTriangles(context);
    }
};

PIXI.Strip.prototype._renderCanvasTriangleStrip = function(context)
{
    // draw triangles!!
    var vertices = this.vertices;
    var uvs = this.uvs;

    var length = vertices.length / 2;
    this.count++;

    for (var i = 0; i < length - 2; i++) {
        // draw some triangles!
        var index = i * 2;
        this._renderCanvasDrawTriangle(context, vertices, uvs, index, (index + 2), (index + 4));
    }
};

PIXI.Strip.prototype._renderCanvasTriangles = function(context)
{
    // draw triangles!!
    var vertices = this.vertices;
    var uvs = this.uvs;
    var indices = this.indices;

    var length = indices.length;
    this.count++;

    for (var i = 0; i < length; i += 3) {
        // draw some triangles!
        var index0 = indices[i] * 2, index1 = indices[i + 1] * 2, index2 = indices[i + 2] * 2;
        this._renderCanvasDrawTriangle(context, vertices, uvs, index0, index1, index2);
    }
};

PIXI.Strip.prototype._renderCanvasDrawTriangle = function(context, vertices, uvs, index0, index1, index2)
{
    var textureSource = this.texture.baseTexture.source;
    var textureWidth = this.texture.width;
    var textureHeight = this.texture.height;

    var x0 = vertices[index0], x1 = vertices[index1], x2 = vertices[index2];
    var y0 = vertices[index0 + 1], y1 = vertices[index1 + 1], y2 = vertices[index2 + 1];

    var u0 = uvs[index0] * textureWidth, u1 = uvs[index1] * textureWidth, u2 = uvs[index2] * textureWidth;
    var v0 = uvs[index0 + 1] * textureHeight, v1 = uvs[index1 + 1] * textureHeight, v2 = uvs[index2 + 1] * textureHeight;

    if (this.canvasPadding > 0) {
        var paddingX = this.canvasPadding / this.worldTransform.a;
        var paddingY = this.canvasPadding / this.worldTransform.d;
        var centerX = (x0 + x1 + x2) / 3;
        var centerY = (y0 + y1 + y2) / 3;

        var normX = x0 - centerX;
        var normY = y0 - centerY;

        var dist = Math.sqrt(normX * normX + normY * normY);
        x0 = centerX + (normX / dist) * (dist + paddingX);
        y0 = centerY + (normY / dist) * (dist + paddingY);

        //

        normX = x1 - centerX;
        normY = y1 - centerY;

        dist = Math.sqrt(normX * normX + normY * normY);
        x1 = centerX + (normX / dist) * (dist + paddingX);
        y1 = centerY + (normY / dist) * (dist + paddingY);

        normX = x2 - centerX;
        normY = y2 - centerY;

        dist = Math.sqrt(normX * normX + normY * normY);
        x2 = centerX + (normX / dist) * (dist + paddingX);
        y2 = centerY + (normY / dist) * (dist + paddingY);
    }

    context.save();
    context.beginPath();


    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);

    context.closePath();

    context.clip();

    // Compute matrix transform
    var delta =  (u0 * v1)      + (v0 * u2)      + (u1 * v2)      - (v1 * u2)      - (v0 * u1)      - (u0 * v2);
    var deltaA = (x0 * v1)      + (v0 * x2)      + (x1 * v2)      - (v1 * x2)      - (v0 * x1)      - (x0 * v2);
    var deltaB = (u0 * x1)      + (x0 * u2)      + (u1 * x2)      - (x1 * u2)      - (x0 * u1)      - (u0 * x2);
    var deltaC = (u0 * v1 * x2) + (v0 * x1 * u2) + (x0 * u1 * v2) - (x0 * v1 * u2) - (v0 * u1 * x2) - (u0 * x1 * v2);
    var deltaD = (y0 * v1)      + (v0 * y2)      + (y1 * v2)      - (v1 * y2)      - (v0 * y1)      - (y0 * v2);
    var deltaE = (u0 * y1)      + (y0 * u2)      + (u1 * y2)      - (y1 * u2)      - (y0 * u1)      - (u0 * y2);
    var deltaF = (u0 * v1 * y2) + (v0 * y1 * u2) + (y0 * u1 * v2) - (y0 * v1 * u2) - (v0 * u1 * y2) - (u0 * y1 * v2);

    context.transform(deltaA / delta, deltaD / delta,
        deltaB / delta, deltaE / delta,
        deltaC / delta, deltaF / delta);

    context.drawImage(textureSource, 0, 0);
    context.restore();
};



/**
 * Renders a flat strip
 *
 * @method renderStripFlat
 * @param strip {Strip} The Strip to render
 * @private
 */
PIXI.Strip.prototype.renderStripFlat = function(strip)
{
    var context = this.context;
    var vertices = strip.vertices;

    var length = vertices.length/2;
    this.count++;

    context.beginPath();
    for (var i=1; i < length-2; i++)
    {
        // draw some triangles!
        var index = i*2;

        var x0 = vertices[index],   x1 = vertices[index+2], x2 = vertices[index+4];
        var y0 = vertices[index+1], y1 = vertices[index+3], y2 = vertices[index+5];

        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
    }

    context.fillStyle = '#FF0000';
    context.fill();
    context.closePath();
};

/*
PIXI.Strip.prototype.setTexture = function(texture)
{
    //TODO SET THE TEXTURES
    //TODO VISIBILITY

    // stop current texture
    this.texture = texture;
    this.width   = texture.frame.width;
    this.height  = texture.frame.height;
    this.updateFrame = true;
};
*/

/**
 * When the texture is updated, this event will fire to update the scale and frame
 *
 * @method onTextureUpdate
 * @param event
 * @private
 */

PIXI.Strip.prototype.onTextureUpdate = function()
{
    this.updateFrame = true;
};

/**
 * Returns the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.
 *
 * @method getBounds
 * @param matrix {Matrix} the transformation matrix of the sprite
 * @return {Rectangle} the framing rectangle
 */
PIXI.Strip.prototype.getBounds = function(matrix)
{
    var worldTransform = matrix || this.worldTransform;

    var a = worldTransform.a;
    var b = worldTransform.b;
    var c = worldTransform.c;
    var d = worldTransform.d;
    var tx = worldTransform.tx;
    var ty = worldTransform.ty;

    var maxX = -Infinity;
    var maxY = -Infinity;

    var minX = Infinity;
    var minY = Infinity;

    var vertices = this.vertices;
    for (var i = 0, n = vertices.length; i < n; i += 2)
    {
        var rawX = vertices[i], rawY = vertices[i + 1];
        var x = (a * rawX) + (c * rawY) + tx;
        var y = (d * rawY) + (b * rawX) + ty;

        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;

        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
    }

    if (minX === -Infinity || maxY === Infinity)
    {
        return PIXI.EmptyRectangle;
    }

    var bounds = this._bounds;

    bounds.x = minX;
    bounds.width = maxX - minX;

    bounds.y = minY;
    bounds.height = maxY - minY;

    // store a reference so that if this function gets called again in the render cycle we do not have to recalculate
    this._currentBounds = bounds;

    return bounds;
};

/**
 * Different drawing buffer modes supported
 *
 * @property
 * @type {{TRIANGLE_STRIP: number, TRIANGLES: number}}
 * @static
 */
PIXI.Strip.DrawModes = {
    TRIANGLE_STRIP: 0,
    TRIANGLES: 1
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 * @copyright Mat Groves, Rovanion Luckey
 */

/**
 *
 * @class Rope
 * @constructor
 * @extends Strip
 * @param {Texture} texture - The texture to use on the rope.
 * @param {Array} points - An array of {PIXI.Point}.
 *
 */
PIXI.Rope = function(texture, points)
{
    PIXI.Strip.call( this, texture );
    this.points = points;

    this.vertices = new PIXI.Float32Array(points.length * 4);
    this.uvs = new PIXI.Float32Array(points.length * 4);
    this.colors = new PIXI.Float32Array(points.length * 2);
    this.indices = new PIXI.Uint16Array(points.length * 2);


    this.refresh();
};


// constructor
PIXI.Rope.prototype = Object.create( PIXI.Strip.prototype );
PIXI.Rope.prototype.constructor = PIXI.Rope;

/*
 * Refreshes
 *
 * @method refresh
 */
PIXI.Rope.prototype.refresh = function()
{
    var points = this.points;
    if(points.length < 1) return;

    var uvs = this.uvs;

    var lastPoint = points[0];
    var indices = this.indices;
    var colors = this.colors;

    this.count-=0.2;

    uvs[0] = 0;
    uvs[1] = 0;
    uvs[2] = 0;
    uvs[3] = 1;

    colors[0] = 1;
    colors[1] = 1;

    indices[0] = 0;
    indices[1] = 1;

    var total = points.length,
        point, index, amount;

    for (var i = 1; i < total; i++)
    {
        point = points[i];
        index = i * 4;
        // time to do some smart drawing!
        amount = i / (total-1);

        if(i%2)
        {
            uvs[index] = amount;
            uvs[index+1] = 0;

            uvs[index+2] = amount;
            uvs[index+3] = 1;
        }
        else
        {
            uvs[index] = amount;
            uvs[index+1] = 0;

            uvs[index+2] = amount;
            uvs[index+3] = 1;
        }

        index = i * 2;
        colors[index] = 1;
        colors[index+1] = 1;

        index = i * 2;
        indices[index] = index;
        indices[index + 1] = index + 1;

        lastPoint = point;
    }
};

/*
 * Updates the object transform for rendering
 *
 * @method updateTransform
 * @private
 */
PIXI.Rope.prototype.updateTransform = function()
{

    var points = this.points;
    if(points.length < 1)return;

    var lastPoint = points[0];
    var nextPoint;
    var perp = {x:0, y:0};

    this.count-=0.2;

    var vertices = this.vertices;
    var total = points.length,
        point, index, ratio, perpLength, num;

    for (var i = 0; i < total; i++)
    {
        point = points[i];
        index = i * 4;

        if(i < points.length-1)
        {
            nextPoint = points[i+1];
        }
        else
        {
            nextPoint = point;
        }

        perp.y = -(nextPoint.x - lastPoint.x);
        perp.x = nextPoint.y - lastPoint.y;

        ratio = (1 - (i / (total-1))) * 10;

        if(ratio > 1) ratio = 1;

        perpLength = Math.sqrt(perp.x * perp.x + perp.y * perp.y);
        num = this.texture.height / 2; //(20 + Math.abs(Math.sin((i + this.count) * 0.3) * 50) )* ratio;
        perp.x /= perpLength;
        perp.y /= perpLength;

        perp.x *= num;
        perp.y *= num;

        vertices[index] = point.x + perp.x;
        vertices[index+1] = point.y + perp.y;
        vertices[index+2] = point.x - perp.x;
        vertices[index+3] = point.y - perp.y;

        lastPoint = point;
    }

    PIXI.DisplayObjectContainer.prototype.updateTransform.call( this );
};
/*
 * Sets the texture that the Rope will use
 *
 * @method setTexture
 * @param texture {Texture} the texture that will be used
 */
PIXI.Rope.prototype.setTexture = function(texture)
{
    // stop current texture
    this.texture = texture;
    //this.updateFrame = true;
};

/**
 * @author Mat Groves http://matgroves.com/
 */

/**
 * A tiling sprite is a fast way of rendering a tiling image
 *
 * @class TilingSprite
 * @extends Sprite
 * @constructor
 * @param texture {Texture} the texture of the tiling sprite
 * @param width {Number}  the width of the tiling sprite
 * @param height {Number} the height of the tiling sprite
 */
PIXI.TilingSprite = function(texture, width, height)
{
    PIXI.Sprite.call( this, texture);

    /**
     * The with of the tiling sprite
     *
     * @property width
     * @type Number
     */
    this._width = width || 100;

    /**
     * The height of the tiling sprite
     *
     * @property height
     * @type Number
     */
    this._height = height || 100;

    /**
     * The scaling of the image that is being tiled
     *
     * @property tileScale
     * @type Point
     */
    this.tileScale = new PIXI.Point(1,1);

    /**
     * A point that represents the scale of the texture object
     *
     * @property tileScaleOffset
     * @type Point
     */
    this.tileScaleOffset = new PIXI.Point(1,1);
    
    /**
     * The offset position of the image that is being tiled
     *
     * @property tilePosition
     * @type Point
     */
    this.tilePosition = new PIXI.Point(0,0);

    /**
     * Whether this sprite is renderable or not
     *
     * @property renderable
     * @type Boolean
     * @default true
     */
    this.renderable = true;

    /**
     * The tint applied to the sprite. This is a hex value
     *
     * @property tint
     * @type Number
     * @default 0xFFFFFF
     */
    this.tint = 0xFFFFFF;
    
    /**
     * The blend mode to be applied to the sprite
     *
     * @property blendMode
     * @type Number
     * @default PIXI.blendModes.NORMAL;
     */
    this.blendMode = PIXI.blendModes.NORMAL;

    

};

// constructor
PIXI.TilingSprite.prototype = Object.create(PIXI.Sprite.prototype);
PIXI.TilingSprite.prototype.constructor = PIXI.TilingSprite;


/**
 * The width of the sprite, setting this will actually modify the scale to achieve the value set
 *
 * @property width
 * @type Number
 */
Object.defineProperty(PIXI.TilingSprite.prototype, 'width', {
    get: function() {
        return this._width;
    },
    set: function(value) {
        
        this._width = value;
    }
});

/**
 * The height of the TilingSprite, setting this will actually modify the scale to achieve the value set
 *
 * @property height
 * @type Number
 */
Object.defineProperty(PIXI.TilingSprite.prototype, 'height', {
    get: function() {
        return  this._height;
    },
    set: function(value) {
        this._height = value;
    }
});

PIXI.TilingSprite.prototype.setTexture = function(texture)
{
    if (this.texture === texture) return;

    this.texture = texture;

    this.refreshTexture = true;

    this.cachedTint = 0xFFFFFF;
};

/**
* Renders the object using the WebGL renderer
*
* @method _renderWebGL
* @param renderSession {RenderSession} 
* @private
*/
PIXI.TilingSprite.prototype._renderWebGL = function(renderSession)
{
    if (this.visible === false || this.alpha === 0) return;
    var i,j;

    if (this._mask)
    {
        renderSession.spriteBatch.stop();
        renderSession.maskManager.pushMask(this.mask, renderSession);
        renderSession.spriteBatch.start();
    }

    if (this._filters)
    {
        renderSession.spriteBatch.flush();
        renderSession.filterManager.pushFilter(this._filterBlock);
    }

   

    if (!this.tilingTexture || this.refreshTexture)
    {
        this.generateTilingTexture(true);

        if (this.tilingTexture && this.tilingTexture.needsUpdate)
        {
            //TODO - tweaking
            renderSession.renderer.updateTexture(this.tilingTexture.baseTexture);
            this.tilingTexture.needsUpdate = false;
           // this.tilingTexture._uvs = null;
        }
    }
    else
    {
        renderSession.spriteBatch.renderTilingSprite(this);
    }
    // simple render children!
    for (i=0,j=this.children.length; i<j; i++)
    {
        this.children[i]._renderWebGL(renderSession);
    }

    renderSession.spriteBatch.stop();

    if (this._filters) renderSession.filterManager.popFilter();
    if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);
    
    renderSession.spriteBatch.start();
};

/**
* Renders the object using the Canvas renderer
*
* @method _renderCanvas
* @param renderSession {RenderSession} 
* @private
*/
PIXI.TilingSprite.prototype._renderCanvas = function(renderSession)
{
    if (this.visible === false || this.alpha === 0)return;
    
    var context = renderSession.context;

    if (this._mask)
    {
        renderSession.maskManager.pushMask(this._mask, context);
    }

    context.globalAlpha = this.worldAlpha;
    
    var transform = this.worldTransform;

    var i,j;

    var resolution = renderSession.resolution;

    context.setTransform(transform.a * resolution,
                         transform.b * resolution,
                         transform.c * resolution,
                         transform.d * resolution,
                         transform.tx * resolution,
                         transform.ty * resolution);

    if (!this.__tilePattern ||  this.refreshTexture)
    {
        this.generateTilingTexture(false);
    
        if (this.tilingTexture)
        {
            this.__tilePattern = context.createPattern(this.tilingTexture.baseTexture.source, 'repeat');
        }
        else
        {
            return;
        }
    }

    // check blend mode
    if (this.blendMode !== renderSession.currentBlendMode)
    {
        renderSession.currentBlendMode = this.blendMode;
        context.globalCompositeOperation = PIXI.blendModesCanvas[renderSession.currentBlendMode];
    }

    var tilePosition = this.tilePosition;
    var tileScale = this.tileScale;

    tilePosition.x %= this.tilingTexture.baseTexture.width;
    tilePosition.y %= this.tilingTexture.baseTexture.height;

    // offset - make sure to account for the anchor point..
    context.scale(tileScale.x,tileScale.y);
    context.translate(tilePosition.x + (this.anchor.x * -this._width), tilePosition.y + (this.anchor.y * -this._height));

    context.fillStyle = this.__tilePattern;

    context.fillRect(-tilePosition.x,
                    -tilePosition.y,
                    this._width / tileScale.x,
                    this._height / tileScale.y);

    context.scale(1 / tileScale.x, 1 / tileScale.y);
    context.translate(-tilePosition.x + (this.anchor.x * this._width), -tilePosition.y + (this.anchor.y * this._height));

    if (this._mask)
    {
        renderSession.maskManager.popMask(renderSession.context);
    }

    for (i=0,j=this.children.length; i<j; i++)
    {
        this.children[i]._renderCanvas(renderSession);
    }
};


/**
* Returns the framing rectangle of the sprite as a PIXI.Rectangle object
*
* @method getBounds
* @return {Rectangle} the framing rectangle
*/
PIXI.TilingSprite.prototype.getBounds = function()
{
    var width = this._width;
    var height = this._height;

    var w0 = width * (1-this.anchor.x);
    var w1 = width * -this.anchor.x;

    var h0 = height * (1-this.anchor.y);
    var h1 = height * -this.anchor.y;

    var worldTransform = this.worldTransform;

    var a = worldTransform.a;
    var b = worldTransform.b;
    var c = worldTransform.c;
    var d = worldTransform.d;
    var tx = worldTransform.tx;
    var ty = worldTransform.ty;
    
    var x1 = a * w1 + c * h1 + tx;
    var y1 = d * h1 + b * w1 + ty;

    var x2 = a * w0 + c * h1 + tx;
    var y2 = d * h1 + b * w0 + ty;

    var x3 = a * w0 + c * h0 + tx;
    var y3 = d * h0 + b * w0 + ty;

    var x4 =  a * w1 + c * h0 + tx;
    var y4 =  d * h0 + b * w1 + ty;

    var maxX = -Infinity;
    var maxY = -Infinity;

    var minX = Infinity;
    var minY = Infinity;

    minX = x1 < minX ? x1 : minX;
    minX = x2 < minX ? x2 : minX;
    minX = x3 < minX ? x3 : minX;
    minX = x4 < minX ? x4 : minX;

    minY = y1 < minY ? y1 : minY;
    minY = y2 < minY ? y2 : minY;
    minY = y3 < minY ? y3 : minY;
    minY = y4 < minY ? y4 : minY;

    maxX = x1 > maxX ? x1 : maxX;
    maxX = x2 > maxX ? x2 : maxX;
    maxX = x3 > maxX ? x3 : maxX;
    maxX = x4 > maxX ? x4 : maxX;

    maxY = y1 > maxY ? y1 : maxY;
    maxY = y2 > maxY ? y2 : maxY;
    maxY = y3 > maxY ? y3 : maxY;
    maxY = y4 > maxY ? y4 : maxY;

    var bounds = this._bounds;

    bounds.x = minX;
    bounds.width = maxX - minX;

    bounds.y = minY;
    bounds.height = maxY - minY;

    // store a reference so that if this function gets called again in the render cycle we do not have to recalculate
    this._currentBounds = bounds;

    return bounds;
};



/**
 * When the texture is updated, this event will fire to update the scale and frame
 *
 * @method onTextureUpdate
 * @param event
 * @private
 */
PIXI.TilingSprite.prototype.onTextureUpdate = function()
{
   // overriding the sprite version of this!
};


/**
* 
* @method generateTilingTexture
* 
* @param forcePowerOfTwo {Boolean} Whether we want to force the texture to be a power of two
*/
PIXI.TilingSprite.prototype.generateTilingTexture = function(forcePowerOfTwo)
{
    if (!this.texture.baseTexture.hasLoaded) return;

    var texture = this.originalTexture || this.texture;
    var frame = texture.frame;
    var targetWidth, targetHeight;

    //  Check that the frame is the same size as the base texture.
    var isFrame = frame.width !== texture.baseTexture.width || frame.height !== texture.baseTexture.height;

    var newTextureRequired = false;

    if (!forcePowerOfTwo)
    {
        if (isFrame)
        {
            targetWidth = frame.width;
            targetHeight = frame.height;
           
            newTextureRequired = true;
        }
    }
    else
    {
        targetWidth = PIXI.getNextPowerOfTwo(frame.width);
        targetHeight = PIXI.getNextPowerOfTwo(frame.height);

        //  If the BaseTexture dimensions don't match the texture frame then we need a new texture anyway because it's part of a texture atlas
        if (frame.width !== targetWidth || frame.height !== targetHeight || texture.baseTexture.width !== targetWidth || texture.baseTexture.height || targetHeight) newTextureRequired = true;
    }

    if (newTextureRequired)
    {
        var canvasBuffer;

        if (this.tilingTexture && this.tilingTexture.isTiling)
        {
            canvasBuffer = this.tilingTexture.canvasBuffer;
            canvasBuffer.resize(targetWidth, targetHeight);
            this.tilingTexture.baseTexture.width = targetWidth;
            this.tilingTexture.baseTexture.height = targetHeight;
            this.tilingTexture.needsUpdate = true;
        }
        else
        {
            canvasBuffer = new PIXI.CanvasBuffer(targetWidth, targetHeight);

            this.tilingTexture = PIXI.Texture.fromCanvas(canvasBuffer.canvas);
            this.tilingTexture.canvasBuffer = canvasBuffer;
            this.tilingTexture.isTiling = true;
        }

        canvasBuffer.context.drawImage(texture.baseTexture.source,
                               texture.crop.x,
                               texture.crop.y,
                               texture.crop.width,
                               texture.crop.height,
                               0,
                               0,
                               targetWidth,
                               targetHeight);

        this.tileScaleOffset.x = frame.width / targetWidth;
        this.tileScaleOffset.y = frame.height / targetHeight;
    }
    else
    {
        //  TODO - switching?
        if (this.tilingTexture && this.tilingTexture.isTiling)
        {
            // destroy the tiling texture!
            // TODO could store this somewhere?
            this.tilingTexture.destroy(true);
        }

        this.tileScaleOffset.x = 1;
        this.tileScaleOffset.y = 1;
        this.tilingTexture = texture;
    }

    this.refreshTexture = false;
    
    this.originalTexture = this.texture;
    this.texture = this.tilingTexture;
    
    this.tilingTexture.baseTexture._powerOf2 = true;
};

/******************************************************************************
 * Spine Runtimes Software License
 * Version 2.1
 *
 * Copyright (c) 2013, Esoteric Software
 * All rights reserved.
 *
 * You are granted a perpetual, non-exclusive, non-sublicensable and
 * non-transferable license to install, execute and perform the Spine Runtimes
 * Software (the "Software") solely for internal use. Without the written
 * permission of Esoteric Software (typically granted by licensing Spine), you
 * may not (a) modify, translate, adapt or otherwise create derivative works,
 * improvements of the Software or develop new applications using the Software
 * or (b) remove, delete, alter or obscure any trademarks or any copyright,
 * trademark, patent or other intellectual property or proprietary rights
 * notices on or in the Software, including any copy thereof. Redistributions
 * in binary or source form must include this license and terms.
 *
 * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

var spine = {
    radDeg: 180 / Math.PI,
    degRad: Math.PI / 180,
    temp: [],
    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,
    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array
};

spine.BoneData = function (name, parent) {
    this.name = name;
    this.parent = parent;
};
spine.BoneData.prototype = {
    length: 0,
    x: 0, y: 0,
    rotation: 0,
    scaleX: 1, scaleY: 1,
    inheritScale: true,
    inheritRotation: true,
    flipX: false, flipY: false
};

spine.SlotData = function (name, boneData) {
    this.name = name;
    this.boneData = boneData;
};
spine.SlotData.prototype = {
    r: 1, g: 1, b: 1, a: 1,
    attachmentName: null,
    additiveBlending: false
};

spine.IkConstraintData = function (name) {
    this.name = name;
    this.bones = [];
};
spine.IkConstraintData.prototype = {
    target: null,
    bendDirection: 1,
    mix: 1
};

spine.Bone = function (boneData, skeleton, parent) {
    this.data = boneData;
    this.skeleton = skeleton;
    this.parent = parent;
    this.setToSetupPose();
};
spine.Bone.yDown = false;
spine.Bone.prototype = {
    x: 0, y: 0,
    rotation: 0, rotationIK: 0,
    scaleX: 1, scaleY: 1,
    flipX: false, flipY: false,
    m00: 0, m01: 0, worldX: 0, // a b x
    m10: 0, m11: 0, worldY: 0, // c d y
    worldRotation: 0,
    worldScaleX: 1, worldScaleY: 1,
    worldFlipX: false, worldFlipY: false,
    updateWorldTransform: function () {
        var parent = this.parent;
        if (parent) {
            this.worldX = this.x * parent.m00 + this.y * parent.m01 + parent.worldX;
            this.worldY = this.x * parent.m10 + this.y * parent.m11 + parent.worldY;
            if (this.data.inheritScale) {
                this.worldScaleX = parent.worldScaleX * this.scaleX;
                this.worldScaleY = parent.worldScaleY * this.scaleY;
            } else {
                this.worldScaleX = this.scaleX;
                this.worldScaleY = this.scaleY;
            }
            this.worldRotation = this.data.inheritRotation ? (parent.worldRotation + this.rotationIK) : this.rotationIK;
            this.worldFlipX = parent.worldFlipX != this.flipX;
            this.worldFlipY = parent.worldFlipY != this.flipY;
        } else {
            var skeletonFlipX = this.skeleton.flipX, skeletonFlipY = this.skeleton.flipY;
            this.worldX = skeletonFlipX ? -this.x : this.x;
            this.worldY = (skeletonFlipY != spine.Bone.yDown) ? -this.y : this.y;
            this.worldScaleX = this.scaleX;
            this.worldScaleY = this.scaleY;
            this.worldRotation = this.rotationIK;
            this.worldFlipX = skeletonFlipX != this.flipX;
            this.worldFlipY = skeletonFlipY != this.flipY;
        }
        var radians = this.worldRotation * spine.degRad;
        var cos = Math.cos(radians);
        var sin = Math.sin(radians);
        if (this.worldFlipX) {
            this.m00 = -cos * this.worldScaleX;
            this.m01 = sin * this.worldScaleY;
        } else {
            this.m00 = cos * this.worldScaleX;
            this.m01 = -sin * this.worldScaleY;
        }
        if (this.worldFlipY != spine.Bone.yDown) {
            this.m10 = -sin * this.worldScaleX;
            this.m11 = -cos * this.worldScaleY;
        } else {
            this.m10 = sin * this.worldScaleX;
            this.m11 = cos * this.worldScaleY;
        }
    },
    setToSetupPose: function () {
        var data = this.data;
        this.x = data.x;
        this.y = data.y;
        this.rotation = data.rotation;
        this.rotationIK = this.rotation;
        this.scaleX = data.scaleX;
        this.scaleY = data.scaleY;
        this.flipX = data.flipX;
        this.flipY = data.flipY;
    },
    worldToLocal: function (world) {
        var dx = world[0] - this.worldX, dy = world[1] - this.worldY;
        var m00 = this.m00, m10 = this.m10, m01 = this.m01, m11 = this.m11;
        if (this.worldFlipX != (this.worldFlipY != spine.Bone.yDown)) {
            m00 = -m00;
            m11 = -m11;
        }
        var invDet = 1 / (m00 * m11 - m01 * m10);
        world[0] = dx * m00 * invDet - dy * m01 * invDet;
        world[1] = dy * m11 * invDet - dx * m10 * invDet;
    },
    localToWorld: function (local) {
        var localX = local[0], localY = local[1];
        local[0] = localX * this.m00 + localY * this.m01 + this.worldX;
        local[1] = localX * this.m10 + localY * this.m11 + this.worldY;
    }
};

spine.Slot = function (slotData, bone) {
    this.data = slotData;
    this.bone = bone;
    this.setToSetupPose();
};
spine.Slot.prototype = {
    r: 1, g: 1, b: 1, a: 1,
    _attachmentTime: 0,
    attachment: null,
    attachmentVertices: [],
    setAttachment: function (attachment) {
        this.attachment = attachment;
        this._attachmentTime = this.bone.skeleton.time;
        this.attachmentVertices.length = 0;
    },
    setAttachmentTime: function (time) {
        this._attachmentTime = this.bone.skeleton.time - time;
    },
    getAttachmentTime: function () {
        return this.bone.skeleton.time - this._attachmentTime;
    },
    setToSetupPose: function () {
        var data = this.data;
        this.r = data.r;
        this.g = data.g;
        this.b = data.b;
        this.a = data.a;

        var slotDatas = this.bone.skeleton.data.slots;
        for (var i = 0, n = slotDatas.length; i < n; i++) {
            if (slotDatas[i] == data) {
                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));
                break;
            }
        }
    }
};

spine.IkConstraint = function (data, skeleton) {
    this.data = data;
    this.mix = data.mix;
    this.bendDirection = data.bendDirection;

    this.bones = [];
    for (var i = 0, n = data.bones.length; i < n; i++)
        this.bones.push(skeleton.findBone(data.bones[i].name));
    this.target = skeleton.findBone(data.target.name);
};
spine.IkConstraint.prototype = {
    apply: function () {
        var target = this.target;
        var bones = this.bones;
        switch (bones.length) {
        case 1:
            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);
            break;
        case 2:
            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);
            break;
        }
    }
};
/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world
 * coordinate system. */
spine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha) {
    var parentRotation = (!bone.data.inheritRotation || !bone.parent) ? 0 : bone.parent.worldRotation;
    var rotation = bone.rotation;
    var rotationIK = Math.atan2(targetY - bone.worldY, targetX - bone.worldX) * spine.radDeg - parentRotation;
    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;
};
/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The
 * target is specified in the world coordinate system.
 * @param child Any descendant bone of the parent. */
spine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDirection, alpha) {
    var childRotation = child.rotation, parentRotation = parent.rotation;
    if (!alpha) {
        child.rotationIK = childRotation;
        parent.rotationIK = parentRotation;
        return;
    }
    var positionX, positionY, tempPosition = spine.temp;
    var parentParent = parent.parent;
    if (parentParent) {
        tempPosition[0] = targetX;
        tempPosition[1] = targetY;
        parentParent.worldToLocal(tempPosition);
        targetX = (tempPosition[0] - parent.x) * parentParent.worldScaleX;
        targetY = (tempPosition[1] - parent.y) * parentParent.worldScaleY;
    } else {
        targetX -= parent.x;
        targetY -= parent.y;
    }
    if (child.parent == parent) {
        positionX = child.x;
        positionY = child.y;
    } else {
        tempPosition[0] = child.x;
        tempPosition[1] = child.y;
        child.parent.localToWorld(tempPosition);
        parent.worldToLocal(tempPosition);
        positionX = tempPosition[0];
        positionY = tempPosition[1];
    }
    var childX = positionX * parent.worldScaleX, childY = positionY * parent.worldScaleY;
    var offset = Math.atan2(childY, childX);
    var len1 = Math.sqrt(childX * childX + childY * childY), len2 = child.data.length * child.worldScaleX;
    // Based on code by Ryan Juckett with permission: Copyright (c) 2008-2009 Ryan Juckett, http://www.ryanjuckett.com/
    var cosDenom = 2 * len1 * len2;
    if (cosDenom < 0.0001) {
        child.rotationIK = childRotation + (Math.atan2(targetY, targetX) * spine.radDeg - parentRotation - childRotation) * alpha;
        return;
    }
    var cos = (targetX * targetX + targetY * targetY - len1 * len1 - len2 * len2) / cosDenom;
    if (cos < -1)
        cos = -1;
    else if (cos > 1)
        cos = 1;
    var childAngle = Math.acos(cos) * bendDirection;
    var adjacent = len1 + len2 * cos, opposite = len2 * Math.sin(childAngle);
    var parentAngle = Math.atan2(targetY * adjacent - targetX * opposite, targetX * adjacent + targetY * opposite);
    var rotation = (parentAngle - offset) * spine.radDeg - parentRotation;
    if (rotation > 180)
        rotation -= 360;
    else if (rotation < -180) //
        rotation += 360;
    parent.rotationIK = parentRotation + rotation * alpha;
    rotation = (childAngle + offset) * spine.radDeg - childRotation;
    if (rotation > 180)
        rotation -= 360;
    else if (rotation < -180) //
        rotation += 360;
    child.rotationIK = childRotation + (rotation + parent.worldRotation - child.parent.worldRotation) * alpha;
};

spine.Skin = function (name) {
    this.name = name;
    this.attachments = {};
};
spine.Skin.prototype = {
    addAttachment: function (slotIndex, name, attachment) {
        this.attachments[slotIndex + ":" + name] = attachment;
    },
    getAttachment: function (slotIndex, name) {
        return this.attachments[slotIndex + ":" + name];
    },
    _attachAll: function (skeleton, oldSkin) {
        for (var key in oldSkin.attachments) {
            var colon = key.indexOf(":");
            var slotIndex = parseInt(key.substring(0, colon));
            var name = key.substring(colon + 1);
            var slot = skeleton.slots[slotIndex];
            if (slot.attachment && slot.attachment.name == name) {
                var attachment = this.getAttachment(slotIndex, name);
                if (attachment) slot.setAttachment(attachment);
            }
        }
    }
};

spine.Animation = function (name, timelines, duration) {
    this.name = name;
    this.timelines = timelines;
    this.duration = duration;
};
spine.Animation.prototype = {
    apply: function (skeleton, lastTime, time, loop, events) {
        if (loop && this.duration != 0) {
            time %= this.duration;
            lastTime %= this.duration;
        }
        var timelines = this.timelines;
        for (var i = 0, n = timelines.length; i < n; i++)
            timelines[i].apply(skeleton, lastTime, time, events, 1);
    },
    mix: function (skeleton, lastTime, time, loop, events, alpha) {
        if (loop && this.duration != 0) {
            time %= this.duration;
            lastTime %= this.duration;
        }
        var timelines = this.timelines;
        for (var i = 0, n = timelines.length; i < n; i++)
            timelines[i].apply(skeleton, lastTime, time, events, alpha);
    }
};
spine.Animation.binarySearch = function (values, target, step) {
    var low = 0;
    var high = Math.floor(values.length / step) - 2;
    if (!high) return step;
    var current = high >>> 1;
    while (true) {
        if (values[(current + 1) * step] <= target)
            low = current + 1;
        else
            high = current;
        if (low == high) return (low + 1) * step;
        current = (low + high) >>> 1;
    }
};
spine.Animation.binarySearch1 = function (values, target) {
    var low = 0;
    var high = values.length - 2;
    if (!high) return 1;
    var current = high >>> 1;
    while (true) {
        if (values[current + 1] <= target)
            low = current + 1;
        else
            high = current;
        if (low == high) return low + 1;
        current = (low + high) >>> 1;
    }
};
spine.Animation.linearSearch = function (values, target, step) {
    for (var i = 0, last = values.length - step; i <= last; i += step)
        if (values[i] > target) return i;
    return -1;
};

spine.Curves = function (frameCount) {
    this.curves = []; // type, x, y, ...
    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;
};
spine.Curves.prototype = {
    setLinear: function (frameIndex) {
        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;
    },
    setStepped: function (frameIndex) {
        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;
    },
    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.
     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of
     * the difference between the keyframe's values. */
    setCurve: function (frameIndex, cx1, cy1, cx2, cy2) {
        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;
        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;
        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;
        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;
        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;
        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;

        var i = frameIndex * 19/*BEZIER_SIZE*/;
        var curves = this.curves;
        curves[i++] = 2/*BEZIER*/;

        var x = dfx, y = dfy;
        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2) {
            curves[i] = x;
            curves[i + 1] = y;
            dfx += ddfx;
            dfy += ddfy;
            ddfx += dddfx;
            ddfy += dddfy;
            x += dfx;
            y += dfy;
        }
    },
    getCurvePercent: function (frameIndex, percent) {
        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);
        var curves = this.curves;
        var i = frameIndex * 19/*BEZIER_SIZE*/;
        var type = curves[i];
        if (type === 0/*LINEAR*/) return percent;
        if (type == 1/*STEPPED*/) return 0;
        i++;
        var x = 0;
        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2) {
            x = curves[i];
            if (x >= percent) {
                var prevX, prevY;
                if (i == start) {
                    prevX = 0;
                    prevY = 0;
                } else {
                    prevX = curves[i - 2];
                    prevY = curves[i - 1];
                }
                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);
            }
        }
        var y = curves[i - 1];
        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.
    }
};

spine.RotateTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = []; // time, angle, ...
    this.frames.length = frameCount * 2;
};
spine.RotateTimeline.prototype = {
    boneIndex: 0,
    getFrameCount: function () {
        return this.frames.length / 2;
    },
    setFrame: function (frameIndex, time, angle) {
        frameIndex *= 2;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + 1] = angle;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) return; // Time is before first frame.

        var bone = skeleton.bones[this.boneIndex];

        if (time >= frames[frames.length - 2]) { // Time is after last frame.
            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;
            while (amount > 180)
                amount -= 360;
            while (amount < -180)
                amount += 360;
            bone.rotation += amount * alpha;
            return;
        }

        // Interpolate between the previous frame and the current frame.
        var frameIndex = spine.Animation.binarySearch(frames, time, 2);
        var prevFrameValue = frames[frameIndex - 1];
        var frameTime = frames[frameIndex];
        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);
        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);

        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;
        while (amount > 180)
            amount -= 360;
        while (amount < -180)
            amount += 360;
        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;
        while (amount > 180)
            amount -= 360;
        while (amount < -180)
            amount += 360;
        bone.rotation += amount * alpha;
    }
};

spine.TranslateTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = []; // time, x, y, ...
    this.frames.length = frameCount * 3;
};
spine.TranslateTimeline.prototype = {
    boneIndex: 0,
    getFrameCount: function () {
        return this.frames.length / 3;
    },
    setFrame: function (frameIndex, time, x, y) {
        frameIndex *= 3;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + 1] = x;
        this.frames[frameIndex + 2] = y;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) return; // Time is before first frame.

        var bone = skeleton.bones[this.boneIndex];

        if (time >= frames[frames.length - 3]) { // Time is after last frame.
            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;
            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;
            return;
        }

        // Interpolate between the previous frame and the current frame.
        var frameIndex = spine.Animation.binarySearch(frames, time, 3);
        var prevFrameX = frames[frameIndex - 2];
        var prevFrameY = frames[frameIndex - 1];
        var frameTime = frames[frameIndex];
        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);
        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);

        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;
        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;
    }
};

spine.ScaleTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = []; // time, x, y, ...
    this.frames.length = frameCount * 3;
};
spine.ScaleTimeline.prototype = {
    boneIndex: 0,
    getFrameCount: function () {
        return this.frames.length / 3;
    },
    setFrame: function (frameIndex, time, x, y) {
        frameIndex *= 3;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + 1] = x;
        this.frames[frameIndex + 2] = y;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) return; // Time is before first frame.

        var bone = skeleton.bones[this.boneIndex];

        if (time >= frames[frames.length - 3]) { // Time is after last frame.
            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;
            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;
            return;
        }

        // Interpolate between the previous frame and the current frame.
        var frameIndex = spine.Animation.binarySearch(frames, time, 3);
        var prevFrameX = frames[frameIndex - 2];
        var prevFrameY = frames[frameIndex - 1];
        var frameTime = frames[frameIndex];
        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);
        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);

        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;
        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;
    }
};

spine.ColorTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = []; // time, r, g, b, a, ...
    this.frames.length = frameCount * 5;
};
spine.ColorTimeline.prototype = {
    slotIndex: 0,
    getFrameCount: function () {
        return this.frames.length / 5;
    },
    setFrame: function (frameIndex, time, r, g, b, a) {
        frameIndex *= 5;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + 1] = r;
        this.frames[frameIndex + 2] = g;
        this.frames[frameIndex + 3] = b;
        this.frames[frameIndex + 4] = a;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) return; // Time is before first frame.

        var r, g, b, a;
        if (time >= frames[frames.length - 5]) {
            // Time is after last frame.
            var i = frames.length - 1;
            r = frames[i - 3];
            g = frames[i - 2];
            b = frames[i - 1];
            a = frames[i];
        } else {
            // Interpolate between the previous frame and the current frame.
            var frameIndex = spine.Animation.binarySearch(frames, time, 5);
            var prevFrameR = frames[frameIndex - 4];
            var prevFrameG = frames[frameIndex - 3];
            var prevFrameB = frames[frameIndex - 2];
            var prevFrameA = frames[frameIndex - 1];
            var frameTime = frames[frameIndex];
            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);
            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);

            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;
            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;
            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;
            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;
        }
        var slot = skeleton.slots[this.slotIndex];
        if (alpha < 1) {
            slot.r += (r - slot.r) * alpha;
            slot.g += (g - slot.g) * alpha;
            slot.b += (b - slot.b) * alpha;
            slot.a += (a - slot.a) * alpha;
        } else {
            slot.r = r;
            slot.g = g;
            slot.b = b;
            slot.a = a;
        }
    }
};

spine.AttachmentTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = []; // time, ...
    this.frames.length = frameCount;
    this.attachmentNames = [];
    this.attachmentNames.length = frameCount;
};
spine.AttachmentTimeline.prototype = {
    slotIndex: 0,
    getFrameCount: function () {
        return this.frames.length;
    },
    setFrame: function (frameIndex, time, attachmentName) {
        this.frames[frameIndex] = time;
        this.attachmentNames[frameIndex] = attachmentName;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) {
            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);
            return;
        } else if (lastTime > time) //
            lastTime = -1;

        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;
        if (frames[frameIndex] < lastTime) return;

        var attachmentName = this.attachmentNames[frameIndex];
        skeleton.slots[this.slotIndex].setAttachment(
            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));
    }
};

spine.EventTimeline = function (frameCount) {
    this.frames = []; // time, ...
    this.frames.length = frameCount;
    this.events = [];
    this.events.length = frameCount;
};
spine.EventTimeline.prototype = {
    getFrameCount: function () {
        return this.frames.length;
    },
    setFrame: function (frameIndex, time, event) {
        this.frames[frameIndex] = time;
        this.events[frameIndex] = event;
    },
    /** Fires events for frames > lastTime and <= time. */
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        if (!firedEvents) return;

        var frames = this.frames;
        var frameCount = frames.length;

        if (lastTime > time) { // Fire events after last time for looped animations.
            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);
            lastTime = -1;
        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.
            return;
        if (time < frames[0]) return; // Time is before first frame.

        var frameIndex;
        if (lastTime < frames[0])
            frameIndex = 0;
        else {
            frameIndex = spine.Animation.binarySearch1(frames, lastTime);
            var frame = frames[frameIndex];
            while (frameIndex > 0) { // Fire multiple events with the same frame.
                if (frames[frameIndex - 1] != frame) break;
                frameIndex--;
            }
        }
        var events = this.events;
        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)
            firedEvents.push(events[frameIndex]);
    }
};

spine.DrawOrderTimeline = function (frameCount) {
    this.frames = []; // time, ...
    this.frames.length = frameCount;
    this.drawOrders = [];
    this.drawOrders.length = frameCount;
};
spine.DrawOrderTimeline.prototype = {
    getFrameCount: function () {
        return this.frames.length;
    },
    setFrame: function (frameIndex, time, drawOrder) {
        this.frames[frameIndex] = time;
        this.drawOrders[frameIndex] = drawOrder;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) return; // Time is before first frame.

        var frameIndex;
        if (time >= frames[frames.length - 1]) // Time is after last frame.
            frameIndex = frames.length - 1;
        else
            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;

        var drawOrder = skeleton.drawOrder;
        var slots = skeleton.slots;
        var drawOrderToSetupIndex = this.drawOrders[frameIndex];
        if (!drawOrderToSetupIndex) {
            for (var i = 0, n = slots.length; i < n; i++)
                drawOrder[i] = slots[i];
        } else {
            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)
                drawOrder[i] = skeleton.slots[drawOrderToSetupIndex[i]];
        }

    }
};

spine.FfdTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = [];
    this.frames.length = frameCount;
    this.frameVertices = [];
    this.frameVertices.length = frameCount;
};
spine.FfdTimeline.prototype = {
    slotIndex: 0,
    attachment: 0,
    getFrameCount: function () {
        return this.frames.length;
    },
    setFrame: function (frameIndex, time, vertices) {
        this.frames[frameIndex] = time;
        this.frameVertices[frameIndex] = vertices;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var slot = skeleton.slots[this.slotIndex];
        if (slot.attachment != this.attachment) return;

        var frames = this.frames;
        if (time < frames[0]) return; // Time is before first frame.

        var frameVertices = this.frameVertices;
        var vertexCount = frameVertices[0].length;

        var vertices = slot.attachmentVertices;
        if (vertices.length != vertexCount) alpha = 1;
        vertices.length = vertexCount;

        if (time >= frames[frames.length - 1]) { // Time is after last frame.
            var lastVertices = frameVertices[frames.length - 1];
            if (alpha < 1) {
                for (var i = 0; i < vertexCount; i++)
                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;
            } else {
                for (var i = 0; i < vertexCount; i++)
                    vertices[i] = lastVertices[i];
            }
            return;
        }

        // Interpolate between the previous frame and the current frame.
        var frameIndex = spine.Animation.binarySearch1(frames, time);
        var frameTime = frames[frameIndex];
        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);
        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));

        var prevVertices = frameVertices[frameIndex - 1];
        var nextVertices = frameVertices[frameIndex];

        if (alpha < 1) {
            for (var i = 0; i < vertexCount; i++) {
                var prev = prevVertices[i];
                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;
            }
        } else {
            for (var i = 0; i < vertexCount; i++) {
                var prev = prevVertices[i];
                vertices[i] = prev + (nextVertices[i] - prev) * percent;
            }
        }
    }
};

spine.IkConstraintTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = []; // time, mix, bendDirection, ...
    this.frames.length = frameCount * 3;
};
spine.IkConstraintTimeline.prototype = {
    ikConstraintIndex: 0,
    getFrameCount: function () {
        return this.frames.length / 3;
    },
    setFrame: function (frameIndex, time, mix, bendDirection) {
        frameIndex *= 3;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + 1] = mix;
        this.frames[frameIndex + 2] = bendDirection;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) return; // Time is before first frame.

        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];

        if (time >= frames[frames.length - 3]) { // Time is after last frame.
            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;
            ikConstraint.bendDirection = frames[frames.length - 1];
            return;
        }

        // Interpolate between the previous frame and the current frame.
        var frameIndex = spine.Animation.binarySearch(frames, time, 3);
        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];
        var frameTime = frames[frameIndex];
        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);
        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);

        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;
        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;
        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];
    }
};

spine.FlipXTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = []; // time, flip, ...
    this.frames.length = frameCount * 2;
};
spine.FlipXTimeline.prototype = {
    boneIndex: 0,
    getFrameCount: function () {
        return this.frames.length / 2;
    },
    setFrame: function (frameIndex, time, flip) {
        frameIndex *= 2;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + 1] = flip ? 1 : 0;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) {
            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);
            return;
        } else if (lastTime > time) //
            lastTime = -1;
        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;
        if (frames[frameIndex] < lastTime) return;
        skeleton.bones[boneIndex].flipX = frames[frameIndex + 1] != 0;
    }
};

spine.FlipYTimeline = function (frameCount) {
    this.curves = new spine.Curves(frameCount);
    this.frames = []; // time, flip, ...
    this.frames.length = frameCount * 2;
};
spine.FlipYTimeline.prototype = {
    boneIndex: 0,
    getFrameCount: function () {
        return this.frames.length / 2;
    },
    setFrame: function (frameIndex, time, flip) {
        frameIndex *= 2;
        this.frames[frameIndex] = time;
        this.frames[frameIndex + 1] = flip ? 1 : 0;
    },
    apply: function (skeleton, lastTime, time, firedEvents, alpha) {
        var frames = this.frames;
        if (time < frames[0]) {
            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);
            return;
        } else if (lastTime > time) //
            lastTime = -1;
        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;
        if (frames[frameIndex] < lastTime) return;
        skeleton.bones[boneIndex].flipY = frames[frameIndex + 1] != 0;
    }
};

spine.SkeletonData = function () {
    this.bones = [];
    this.slots = [];
    this.skins = [];
    this.events = [];
    this.animations = [];
    this.ikConstraints = [];
};
spine.SkeletonData.prototype = {
    name: null,
    defaultSkin: null,
    width: 0, height: 0,
    version: null, hash: null,
    /** @return May be null. */
    findBone: function (boneName) {
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++)
            if (bones[i].name == boneName) return bones[i];
        return null;
    },
    /** @return -1 if the bone was not found. */
    findBoneIndex: function (boneName) {
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++)
            if (bones[i].name == boneName) return i;
        return -1;
    },
    /** @return May be null. */
    findSlot: function (slotName) {
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++) {
            if (slots[i].name == slotName) return slot[i];
        }
        return null;
    },
    /** @return -1 if the bone was not found. */
    findSlotIndex: function (slotName) {
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++)
            if (slots[i].name == slotName) return i;
        return -1;
    },
    /** @return May be null. */
    findSkin: function (skinName) {
        var skins = this.skins;
        for (var i = 0, n = skins.length; i < n; i++)
            if (skins[i].name == skinName) return skins[i];
        return null;
    },
    /** @return May be null. */
    findEvent: function (eventName) {
        var events = this.events;
        for (var i = 0, n = events.length; i < n; i++)
            if (events[i].name == eventName) return events[i];
        return null;
    },
    /** @return May be null. */
    findAnimation: function (animationName) {
        var animations = this.animations;
        for (var i = 0, n = animations.length; i < n; i++)
            if (animations[i].name == animationName) return animations[i];
        return null;
    },
    /** @return May be null. */
    findIkConstraint: function (ikConstraintName) {
        var ikConstraints = this.ikConstraints;
        for (var i = 0, n = ikConstraints.length; i < n; i++)
            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];
        return null;
    }
};

spine.Skeleton = function (skeletonData) {
    this.data = skeletonData;

    this.bones = [];
    for (var i = 0, n = skeletonData.bones.length; i < n; i++) {
        var boneData = skeletonData.bones[i];
        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];
        this.bones.push(new spine.Bone(boneData, this, parent));
    }

    this.slots = [];
    this.drawOrder = [];
    for (var i = 0, n = skeletonData.slots.length; i < n; i++) {
        var slotData = skeletonData.slots[i];
        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];
        var slot = new spine.Slot(slotData, bone);
        this.slots.push(slot);
        this.drawOrder.push(slot);
    }

    this.ikConstraints = [];
    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)
        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));

    this.boneCache = [];
    this.updateCache();
};
spine.Skeleton.prototype = {
    x: 0, y: 0,
    skin: null,
    r: 1, g: 1, b: 1, a: 1,
    time: 0,
    flipX: false, flipY: false,
    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */
    updateCache: function () {
        var ikConstraints = this.ikConstraints;
        var ikConstraintsCount = ikConstraints.length;

        var arrayCount = ikConstraintsCount + 1;
        var boneCache = this.boneCache;
        if (boneCache.length > arrayCount) boneCache.length = arrayCount;
        for (var i = 0, n = boneCache.length; i < n; i++)
            boneCache[i].length = 0;
        while (boneCache.length < arrayCount)
            boneCache[boneCache.length] = [];

        var nonIkBones = boneCache[0];
        var bones = this.bones;

        outer:
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            var current = bone;
            do {
                for (var ii = 0; ii < ikConstraintsCount; ii++) {
                    var ikConstraint = ikConstraints[ii];
                    var parent = ikConstraint.bones[0];
                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];
                    while (true) {
                        if (current == child) {
                            boneCache[ii].push(bone);
                            boneCache[ii + 1].push(bone);
                            continue outer;
                        }
                        if (child == parent) break;
                        child = child.parent;
                    }
                }
                current = current.parent;
            } while (current);
            nonIkBones[nonIkBones.length] = bone;
        }
    },
    /** Updates the world transform for each bone. */
    updateWorldTransform: function () {
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++) {
            var bone = bones[i];
            bone.rotationIK = bone.rotation;
        }
        var i = 0, last = this.boneCache.length - 1;
        while (true) {
            var cacheBones = this.boneCache[i];
            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)
                cacheBones[ii].updateWorldTransform();
            if (i == last) break;
            this.ikConstraints[i].apply();
            i++;
        }
    },
    /** Sets the bones and slots to their setup pose values. */
    setToSetupPose: function () {
        this.setBonesToSetupPose();
        this.setSlotsToSetupPose();
    },
    setBonesToSetupPose: function () {
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++)
            bones[i].setToSetupPose();

        var ikConstraints = this.ikConstraints;
        for (var i = 0, n = ikConstraints.length; i < n; i++) {
            var ikConstraint = ikConstraints[i];
            ikConstraint.bendDirection = ikConstraint.data.bendDirection;
            ikConstraint.mix = ikConstraint.data.mix;
        }
    },
    setSlotsToSetupPose: function () {
        var slots = this.slots;
        var drawOrder = this.drawOrder;
        for (var i = 0, n = slots.length; i < n; i++) {
            drawOrder[i] = slots[i];
            slots[i].setToSetupPose(i);
        }
    },
    /** @return May return null. */
    getRootBone: function () {
        return this.bones.length ? this.bones[0] : null;
    },
    /** @return May be null. */
    findBone: function (boneName) {
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++)
            if (bones[i].data.name == boneName) return bones[i];
        return null;
    },
    /** @return -1 if the bone was not found. */
    findBoneIndex: function (boneName) {
        var bones = this.bones;
        for (var i = 0, n = bones.length; i < n; i++)
            if (bones[i].data.name == boneName) return i;
        return -1;
    },
    /** @return May be null. */
    findSlot: function (slotName) {
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++)
            if (slots[i].data.name == slotName) return slots[i];
        return null;
    },
    /** @return -1 if the bone was not found. */
    findSlotIndex: function (slotName) {
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++)
            if (slots[i].data.name == slotName) return i;
        return -1;
    },
    setSkinByName: function (skinName) {
        var skin = this.data.findSkin(skinName);
        if (!skin) throw "Skin not found: " + skinName;
        this.setSkin(skin);
    },
    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.
     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was
     * no old skin, each slot's setup mode attachment is attached from the new skin.
     * @param newSkin May be null. */
    setSkin: function (newSkin) {
        if (newSkin) {
            if (this.skin)
                newSkin._attachAll(this, this.skin);
            else {
                var slots = this.slots;
                for (var i = 0, n = slots.length; i < n; i++) {
                    var slot = slots[i];
                    var name = slot.data.attachmentName;
                    if (name) {
                        var attachment = newSkin.getAttachment(i, name);
                        if (attachment) slot.setAttachment(attachment);
                    }
                }
            }
        }
        this.skin = newSkin;
    },
    /** @return May be null. */
    getAttachmentBySlotName: function (slotName, attachmentName) {
        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);
    },
    /** @return May be null. */
    getAttachmentBySlotIndex: function (slotIndex, attachmentName) {
        if (this.skin) {
            var attachment = this.skin.getAttachment(slotIndex, attachmentName);
            if (attachment) return attachment;
        }
        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);
        return null;
    },
    /** @param attachmentName May be null. */
    setAttachment: function (slotName, attachmentName) {
        var slots = this.slots;
        for (var i = 0, n = slots.length; i < n; i++) {
            var slot = slots[i];
            if (slot.data.name == slotName) {
                var attachment = null;
                if (attachmentName) {
                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);
                    if (!attachment) throw "Attachment not found: " + attachmentName + ", for slot: " + slotName;
                }
                slot.setAttachment(attachment);
                return;
            }
        }
        throw "Slot not found: " + slotName;
    },
    /** @return May be null. */
    findIkConstraint: function (ikConstraintName) {
        var ikConstraints = this.ikConstraints;
        for (var i = 0, n = ikConstraints.length; i < n; i++)
            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];
        return null;
    },
    update: function (delta) {
        this.time += delta;
    }
};

spine.EventData = function (name) {
    this.name = name;
};
spine.EventData.prototype = {
    intValue: 0,
    floatValue: 0,
    stringValue: null
};

spine.Event = function (data) {
    this.data = data;
};
spine.Event.prototype = {
    intValue: 0,
    floatValue: 0,
    stringValue: null
};

spine.AttachmentType = {
    region: 0,
    boundingbox: 1,
    mesh: 2,
    skinnedmesh: 3
};

spine.RegionAttachment = function (name) {
    this.name = name;
    this.offset = [];
    this.offset.length = 8;
    this.uvs = [];
    this.uvs.length = 8;
};
spine.RegionAttachment.prototype = {
    type: spine.AttachmentType.region,
    x: 0, y: 0,
    rotation: 0,
    scaleX: 1, scaleY: 1,
    width: 0, height: 0,
    r: 1, g: 1, b: 1, a: 1,
    path: null,
    rendererObject: null,
    regionOffsetX: 0, regionOffsetY: 0,
    regionWidth: 0, regionHeight: 0,
    regionOriginalWidth: 0, regionOriginalHeight: 0,
    setUVs: function (u, v, u2, v2, rotate) {
        var uvs = this.uvs;
        if (rotate) {
            uvs[2/*X2*/] = u;
            uvs[3/*Y2*/] = v2;
            uvs[4/*X3*/] = u;
            uvs[5/*Y3*/] = v;
            uvs[6/*X4*/] = u2;
            uvs[7/*Y4*/] = v;
            uvs[0/*X1*/] = u2;
            uvs[1/*Y1*/] = v2;
        } else {
            uvs[0/*X1*/] = u;
            uvs[1/*Y1*/] = v2;
            uvs[2/*X2*/] = u;
            uvs[3/*Y2*/] = v;
            uvs[4/*X3*/] = u2;
            uvs[5/*Y3*/] = v;
            uvs[6/*X4*/] = u2;
            uvs[7/*Y4*/] = v2;
        }
    },
    updateOffset: function () {
        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;
        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;
        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;
        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;
        var localX2 = localX + this.regionWidth * regionScaleX;
        var localY2 = localY + this.regionHeight * regionScaleY;
        var radians = this.rotation * spine.degRad;
        var cos = Math.cos(radians);
        var sin = Math.sin(radians);
        var localXCos = localX * cos + this.x;
        var localXSin = localX * sin;
        var localYCos = localY * cos + this.y;
        var localYSin = localY * sin;
        var localX2Cos = localX2 * cos + this.x;
        var localX2Sin = localX2 * sin;
        var localY2Cos = localY2 * cos + this.y;
        var localY2Sin = localY2 * sin;
        var offset = this.offset;
        offset[0/*X1*/] = localXCos - localYSin;
        offset[1/*Y1*/] = localYCos + localXSin;
        offset[2/*X2*/] = localXCos - localY2Sin;
        offset[3/*Y2*/] = localY2Cos + localXSin;
        offset[4/*X3*/] = localX2Cos - localY2Sin;
        offset[5/*Y3*/] = localY2Cos + localX2Sin;
        offset[6/*X4*/] = localX2Cos - localYSin;
        offset[7/*Y4*/] = localYCos + localX2Sin;
    },
    computeVertices: function (x, y, bone, vertices) {
        x += bone.worldX;
        y += bone.worldY;
        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;
        var offset = this.offset;
        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;
        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;
        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;
        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;
        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;
        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;
        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;
        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;
    }
};

spine.MeshAttachment = function (name) {
    this.name = name;
};
spine.MeshAttachment.prototype = {
    type: spine.AttachmentType.mesh,
    vertices: null,
    uvs: null,
    regionUVs: null,
    triangles: null,
    hullLength: 0,
    r: 1, g: 1, b: 1, a: 1,
    path: null,
    rendererObject: null,
    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,
    regionOffsetX: 0, regionOffsetY: 0,
    regionWidth: 0, regionHeight: 0,
    regionOriginalWidth: 0, regionOriginalHeight: 0,
    edges: null,
    width: 0, height: 0,
    updateUVs: function () {
        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;
        var n = this.regionUVs.length;
        if (!this.uvs || this.uvs.length != n) {
            this.uvs = new spine.Float32Array(n);
        }
        if (this.regionRotate) {
            for (var i = 0; i < n; i += 2) {
                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;
                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;
            }
        } else {
            for (var i = 0; i < n; i += 2) {
                this.uvs[i] = this.regionU + this.regionUVs[i] * width;
                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;
            }
        }
    },
    computeWorldVertices: function (x, y, slot, worldVertices) {
        var bone = slot.bone;
        x += bone.worldX;
        y += bone.worldY;
        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;
        var vertices = this.vertices;
        var verticesCount = vertices.length;
        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;
        for (var i = 0; i < verticesCount; i += 2) {
            var vx = vertices[i];
            var vy = vertices[i + 1];
            worldVertices[i] = vx * m00 + vy * m01 + x;
            worldVertices[i + 1] = vx * m10 + vy * m11 + y;
        }
    }
};

spine.SkinnedMeshAttachment = function (name) {
    this.name = name;
};
spine.SkinnedMeshAttachment.prototype = {
    type: spine.AttachmentType.skinnedmesh,
    bones: null,
    weights: null,
    uvs: null,
    regionUVs: null,
    triangles: null,
    hullLength: 0,
    r: 1, g: 1, b: 1, a: 1,
    path: null,
    rendererObject: null,
    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,
    regionOffsetX: 0, regionOffsetY: 0,
    regionWidth: 0, regionHeight: 0,
    regionOriginalWidth: 0, regionOriginalHeight: 0,
    edges: null,
    width: 0, height: 0,
    updateUVs: function (u, v, u2, v2, rotate) {
        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;
        var n = this.regionUVs.length;
        if (!this.uvs || this.uvs.length != n) {
            this.uvs = new spine.Float32Array(n);
        }
        if (this.regionRotate) {
            for (var i = 0; i < n; i += 2) {
                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;
                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;
            }
        } else {
            for (var i = 0; i < n; i += 2) {
                this.uvs[i] = this.regionU + this.regionUVs[i] * width;
                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;
            }
        }
    },
    computeWorldVertices: function (x, y, slot, worldVertices) {
        var skeletonBones = slot.bone.skeleton.bones;
        var weights = this.weights;
        var bones = this.bones;

        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;
        var wx, wy, bone, vx, vy, weight;
        if (!slot.attachmentVertices.length) {
            for (; v < n; w += 2) {
                wx = 0;
                wy = 0;
                nn = bones[v++] + v;
                for (; v < nn; v++, b += 3) {
                    bone = skeletonBones[bones[v]];
                    vx = weights[b];
                    vy = weights[b + 1];
                    weight = weights[b + 2];
                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;
                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;
                }
                worldVertices[w] = wx + x;
                worldVertices[w + 1] = wy + y;
            }
        } else {
            var ffd = slot.attachmentVertices;
            for (; v < n; w += 2) {
                wx = 0;
                wy = 0;
                nn = bones[v++] + v;
                for (; v < nn; v++, b += 3, f += 2) {
                    bone = skeletonBones[bones[v]];
                    vx = weights[b] + ffd[f];
                    vy = weights[b + 1] + ffd[f + 1];
                    weight = weights[b + 2];
                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;
                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;
                }
                worldVertices[w] = wx + x;
                worldVertices[w + 1] = wy + y;
            }
        }
    }
};

spine.BoundingBoxAttachment = function (name) {
    this.name = name;
    this.vertices = [];
};
spine.BoundingBoxAttachment.prototype = {
    type: spine.AttachmentType.boundingbox,
    computeWorldVertices: function (x, y, bone, worldVertices) {
        x += bone.worldX;
        y += bone.worldY;
        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;
        var vertices = this.vertices;
        for (var i = 0, n = vertices.length; i < n; i += 2) {
            var px = vertices[i];
            var py = vertices[i + 1];
            worldVertices[i] = px * m00 + py * m01 + x;
            worldVertices[i + 1] = px * m10 + py * m11 + y;
        }
    }
};

spine.AnimationStateData = function (skeletonData) {
    this.skeletonData = skeletonData;
    this.animationToMixTime = {};
};
spine.AnimationStateData.prototype = {
    defaultMix: 0,
    setMixByName: function (fromName, toName, duration) {
        var from = this.skeletonData.findAnimation(fromName);
        if (!from) throw "Animation not found: " + fromName;
        var to = this.skeletonData.findAnimation(toName);
        if (!to) throw "Animation not found: " + toName;
        this.setMix(from, to, duration);
    },
    setMix: function (from, to, duration) {
        this.animationToMixTime[from.name + ":" + to.name] = duration;
    },
    getMix: function (from, to) {
        var key = from.name + ":" + to.name;
        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;
    }
};

spine.TrackEntry = function () {};
spine.TrackEntry.prototype = {
    next: null, previous: null,
    animation: null,
    loop: false,
    delay: 0, time: 0, lastTime: -1, endTime: 0,
    timeScale: 1,
    mixTime: 0, mixDuration: 0, mix: 1,
    onStart: null, onEnd: null, onComplete: null, onEvent: null
};

spine.AnimationState = function (stateData) {
    this.data = stateData;
    this.tracks = [];
    this.events = [];
};
spine.AnimationState.prototype = {
    onStart: null,
    onEnd: null,
    onComplete: null,
    onEvent: null,
    timeScale: 1,
    update: function (delta) {
        delta *= this.timeScale;
        for (var i = 0; i < this.tracks.length; i++) {
            var current = this.tracks[i];
            if (!current) continue;

            current.time += delta * current.timeScale;
            if (current.previous) {
                var previousDelta = delta * current.previous.timeScale;
                current.previous.time += previousDelta;
                current.mixTime += previousDelta;
            }

            var next = current.next;
            if (next) {
                next.time = current.lastTime - next.delay;
                if (next.time >= 0) this.setCurrent(i, next);
            } else {
                // End non-looping animation when it reaches its end time and there is no next entry.
                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);
            }
        }
    },
    apply: function (skeleton) {
        for (var i = 0; i < this.tracks.length; i++) {
            var current = this.tracks[i];
            if (!current) continue;

            this.events.length = 0;

            var time = current.time;
            var lastTime = current.lastTime;
            var endTime = current.endTime;
            var loop = current.loop;
            if (!loop && time > endTime) time = endTime;

            var previous = current.previous;
            if (!previous) {
                if (current.mix == 1)
                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);
                else
                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);
            } else {
                var previousTime = previous.time;
                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;
                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);

                var alpha = current.mixTime / current.mixDuration * current.mix;
                if (alpha >= 1) {
                    alpha = 1;
                    current.previous = null;
                }
                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);
            }

            for (var ii = 0, nn = this.events.length; ii < nn; ii++) {
                var event = this.events[ii];
                if (current.onEvent) current.onEvent(i, event);
                if (this.onEvent) this.onEvent(i, event);
            }

            // Check if completed the animation or a loop iteration.
            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime)) {
                var count = Math.floor(time / endTime);
                if (current.onComplete) current.onComplete(i, count);
                if (this.onComplete) this.onComplete(i, count);
            }

            current.lastTime = current.time;
        }
    },
    clearTracks: function () {
        for (var i = 0, n = this.tracks.length; i < n; i++)
            this.clearTrack(i);
        this.tracks.length = 0;
    },
    clearTrack: function (trackIndex) {
        if (trackIndex >= this.tracks.length) return;
        var current = this.tracks[trackIndex];
        if (!current) return;

        if (current.onEnd) current.onEnd(trackIndex);
        if (this.onEnd) this.onEnd(trackIndex);

        this.tracks[trackIndex] = null;
    },
    _expandToIndex: function (index) {
        if (index < this.tracks.length) return this.tracks[index];
        while (index >= this.tracks.length)
            this.tracks.push(null);
        return null;
    },
    setCurrent: function (index, entry) {
        var current = this._expandToIndex(index);
        if (current) {
            var previous = current.previous;
            current.previous = null;

            if (current.onEnd) current.onEnd(index);
            if (this.onEnd) this.onEnd(index);

            entry.mixDuration = this.data.getMix(current.animation, entry.animation);
            if (entry.mixDuration > 0) {
                entry.mixTime = 0;
                // If a mix is in progress, mix from the closest animation.
                if (previous && current.mixTime / current.mixDuration < 0.5)
                    entry.previous = previous;
                else
                    entry.previous = current;
            }
        }

        this.tracks[index] = entry;

        if (entry.onStart) entry.onStart(index);
        if (this.onStart) this.onStart(index);
    },
    setAnimationByName: function (trackIndex, animationName, loop) {
        var animation = this.data.skeletonData.findAnimation(animationName);
        if (!animation) throw "Animation not found: " + animationName;
        return this.setAnimation(trackIndex, animation, loop);
    },
    /** Set the current animation. Any queued animations are cleared. */
    setAnimation: function (trackIndex, animation, loop) {
        var entry = new spine.TrackEntry();
        entry.animation = animation;
        entry.loop = loop;
        entry.endTime = animation.duration;
        this.setCurrent(trackIndex, entry);
        return entry;
    },
    addAnimationByName: function (trackIndex, animationName, loop, delay) {
        var animation = this.data.skeletonData.findAnimation(animationName);
        if (!animation) throw "Animation not found: " + animationName;
        return this.addAnimation(trackIndex, animation, loop, delay);
    },
    /** Adds an animation to be played delay seconds after the current or last queued animation.
     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */
    addAnimation: function (trackIndex, animation, loop, delay) {
        var entry = new spine.TrackEntry();
        entry.animation = animation;
        entry.loop = loop;
        entry.endTime = animation.duration;

        var last = this._expandToIndex(trackIndex);
        if (last) {
            while (last.next)
                last = last.next;
            last.next = entry;
        } else
            this.tracks[trackIndex] = entry;

        if (delay <= 0) {
            if (last)
                delay += last.endTime - this.data.getMix(last.animation, animation);
            else
                delay = 0;
        }
        entry.delay = delay;

        return entry;
    },
    /** May be null. */
    getCurrent: function (trackIndex) {
        if (trackIndex >= this.tracks.length) return null;
        return this.tracks[trackIndex];
    }
};

spine.SkeletonJson = function (attachmentLoader) {
    this.attachmentLoader = attachmentLoader;
};
spine.SkeletonJson.prototype = {
    scale: 1,
    readSkeletonData: function (root, name) {
        var skeletonData = new spine.SkeletonData();
        skeletonData.name = name;

        // Skeleton.
        var skeletonMap = root["skeleton"];
        if (skeletonMap) {
            skeletonData.hash = skeletonMap["hash"];
            skeletonData.version = skeletonMap["spine"];
            skeletonData.width = skeletonMap["width"] || 0;
            skeletonData.height = skeletonMap["height"] || 0;
        }

        // Bones.
        var bones = root["bones"];
        for (var i = 0, n = bones.length; i < n; i++) {
            var boneMap = bones[i];
            var parent = null;
            if (boneMap["parent"]) {
                parent = skeletonData.findBone(boneMap["parent"]);
                if (!parent) throw "Parent bone not found: " + boneMap["parent"];
            }
            var boneData = new spine.BoneData(boneMap["name"], parent);
            boneData.length = (boneMap["length"] || 0) * this.scale;
            boneData.x = (boneMap["x"] || 0) * this.scale;
            boneData.y = (boneMap["y"] || 0) * this.scale;
            boneData.rotation = (boneMap["rotation"] || 0);
            boneData.scaleX = boneMap.hasOwnProperty("scaleX") ? boneMap["scaleX"] : 1;
            boneData.scaleY = boneMap.hasOwnProperty("scaleY") ? boneMap["scaleY"] : 1;
            boneData.inheritScale = boneMap.hasOwnProperty("inheritScale") ? boneMap["inheritScale"] : true;
            boneData.inheritRotation = boneMap.hasOwnProperty("inheritRotation") ? boneMap["inheritRotation"] : true;
            skeletonData.bones.push(boneData);
        }

        // IK constraints.
        var ik = root["ik"];
        if (ik) {
            for (var i = 0, n = ik.length; i < n; i++) {
                var ikMap = ik[i];
                var ikConstraintData = new spine.IkConstraintData(ikMap["name"]);

                var bones = ikMap["bones"];
                for (var ii = 0, nn = bones.length; ii < nn; ii++) {
                    var bone = skeletonData.findBone(bones[ii]);
                    if (!bone) throw "IK bone not found: " + bones[ii];
                    ikConstraintData.bones.push(bone);
                }

                ikConstraintData.target = skeletonData.findBone(ikMap["target"]);
                if (!ikConstraintData.target) throw "Target bone not found: " + ikMap["target"];

                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty("bendPositive") || ikMap["bendPositive"]) ? 1 : -1;
                ikConstraintData.mix = ikMap.hasOwnProperty("mix") ? ikMap["mix"] : 1;

                skeletonData.ikConstraints.push(ikConstraintData);
            }
        }

        // Slots.
        var slots = root["slots"];
        for (var i = 0, n = slots.length; i < n; i++) {
            var slotMap = slots[i];
            var boneData = skeletonData.findBone(slotMap["bone"]);
            if (!boneData) throw "Slot bone not found: " + slotMap["bone"];
            var slotData = new spine.SlotData(slotMap["name"], boneData);

            var color = slotMap["color"];
            if (color) {
                slotData.r = this.toColor(color, 0);
                slotData.g = this.toColor(color, 1);
                slotData.b = this.toColor(color, 2);
                slotData.a = this.toColor(color, 3);
            }

            slotData.attachmentName = slotMap["attachment"];
            slotData.additiveBlending = slotMap["additive"] && slotMap["additive"] == "true";

            skeletonData.slots.push(slotData);
        }

        // Skins.
        var skins = root["skins"];
        for (var skinName in skins) {
            if (!skins.hasOwnProperty(skinName)) continue;
            var skinMap = skins[skinName];
            var skin = new spine.Skin(skinName);
            for (var slotName in skinMap) {
                if (!skinMap.hasOwnProperty(slotName)) continue;
                var slotIndex = skeletonData.findSlotIndex(slotName);
                var slotEntry = skinMap[slotName];
                for (var attachmentName in slotEntry) {
                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;
                    var attachment = this.readAttachment(skin, attachmentName, slotEntry[attachmentName]);
                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);
                }
            }
            skeletonData.skins.push(skin);
            if (skin.name == "default") skeletonData.defaultSkin = skin;
        }

        // Events.
        var events = root["events"];
        for (var eventName in events) {
            if (!events.hasOwnProperty(eventName)) continue;
            var eventMap = events[eventName];
            var eventData = new spine.EventData(eventName);
            eventData.intValue = eventMap["int"] || 0;
            eventData.floatValue = eventMap["float"] || 0;
            eventData.stringValue = eventMap["string"] || null;
            skeletonData.events.push(eventData);
        }

        // Animations.
        var animations = root["animations"];
        for (var animationName in animations) {
            if (!animations.hasOwnProperty(animationName)) continue;
            this.readAnimation(animationName, animations[animationName], skeletonData);
        }

        return skeletonData;
    },
    readAttachment: function (skin, name, map) {
        name = map["name"] || name;

        var type = spine.AttachmentType[map["type"] || "region"];
        var path = map["path"] || name;

        var scale = this.scale;
        if (type == spine.AttachmentType.region) {
            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);
            if (!region) return null;
            region.path = path;
            region.x = (map["x"] || 0) * scale;
            region.y = (map["y"] || 0) * scale;
            region.scaleX = map.hasOwnProperty("scaleX") ? map["scaleX"] : 1;
            region.scaleY = map.hasOwnProperty("scaleY") ? map["scaleY"] : 1;
            region.rotation = map["rotation"] || 0;
            region.width = (map["width"] || 0) * scale;
            region.height = (map["height"] || 0) * scale;

            var color = map["color"];
            if (color) {
                region.r = this.toColor(color, 0);
                region.g = this.toColor(color, 1);
                region.b = this.toColor(color, 2);
                region.a = this.toColor(color, 3);
            }

            region.updateOffset();
            return region;
        } else if (type == spine.AttachmentType.mesh) {
            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);
            if (!mesh) return null;
            mesh.path = path;
            mesh.vertices = this.getFloatArray(map, "vertices", scale);
            mesh.triangles = this.getIntArray(map, "triangles");
            mesh.regionUVs = this.getFloatArray(map, "uvs", 1);
            mesh.updateUVs();

            color = map["color"];
            if (color) {
                mesh.r = this.toColor(color, 0);
                mesh.g = this.toColor(color, 1);
                mesh.b = this.toColor(color, 2);
                mesh.a = this.toColor(color, 3);
            }

            mesh.hullLength = (map["hull"] || 0) * 2;
            if (map["edges"]) mesh.edges = this.getIntArray(map, "edges");
            mesh.width = (map["width"] || 0) * scale;
            mesh.height = (map["height"] || 0) * scale;
            return mesh;
        } else if (type == spine.AttachmentType.skinnedmesh) {
            var mesh = this.attachmentLoader.newSkinnedMeshAttachment(skin, name, path);
            if (!mesh) return null;
            mesh.path = path;

            var uvs = this.getFloatArray(map, "uvs", 1);
            var vertices = this.getFloatArray(map, "vertices", 1);
            var weights = [];
            var bones = [];
            for (var i = 0, n = vertices.length; i < n; ) {
                var boneCount = vertices[i++] | 0;
                bones[bones.length] = boneCount;
                for (var nn = i + boneCount * 4; i < nn; ) {
                    bones[bones.length] = vertices[i];
                    weights[weights.length] = vertices[i + 1] * scale;
                    weights[weights.length] = vertices[i + 2] * scale;
                    weights[weights.length] = vertices[i + 3];
                    i += 4;
                }
            }
            mesh.bones = bones;
            mesh.weights = weights;
            mesh.triangles = this.getIntArray(map, "triangles");
            mesh.regionUVs = uvs;
            mesh.updateUVs();

            color = map["color"];
            if (color) {
                mesh.r = this.toColor(color, 0);
                mesh.g = this.toColor(color, 1);
                mesh.b = this.toColor(color, 2);
                mesh.a = this.toColor(color, 3);
            }

            mesh.hullLength = (map["hull"] || 0) * 2;
            if (map["edges"]) mesh.edges = this.getIntArray(map, "edges");
            mesh.width = (map["width"] || 0) * scale;
            mesh.height = (map["height"] || 0) * scale;
            return mesh;
        } else if (type == spine.AttachmentType.boundingbox) {
            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);
            var vertices = map["vertices"];
            for (var i = 0, n = vertices.length; i < n; i++)
                attachment.vertices.push(vertices[i] * scale);
            return attachment;
        }
        throw "Unknown attachment type: " + type;
    },
    readAnimation: function (name, map, skeletonData) {
        var timelines = [];
        var duration = 0;

        var slots = map["slots"];
        for (var slotName in slots) {
            if (!slots.hasOwnProperty(slotName)) continue;
            var slotMap = slots[slotName];
            var slotIndex = skeletonData.findSlotIndex(slotName);

            for (var timelineName in slotMap) {
                if (!slotMap.hasOwnProperty(timelineName)) continue;
                var values = slotMap[timelineName];
                if (timelineName == "color") {
                    var timeline = new spine.ColorTimeline(values.length);
                    timeline.slotIndex = slotIndex;

                    var frameIndex = 0;
                    for (var i = 0, n = values.length; i < n; i++) {
                        var valueMap = values[i];
                        var color = valueMap["color"];
                        var r = this.toColor(color, 0);
                        var g = this.toColor(color, 1);
                        var b = this.toColor(color, 2);
                        var a = this.toColor(color, 3);
                        timeline.setFrame(frameIndex, valueMap["time"], r, g, b, a);
                        this.readCurve(timeline, frameIndex, valueMap);
                        frameIndex++;
                    }
                    timelines.push(timeline);
                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);

                } else if (timelineName == "attachment") {
                    var timeline = new spine.AttachmentTimeline(values.length);
                    timeline.slotIndex = slotIndex;

                    var frameIndex = 0;
                    for (var i = 0, n = values.length; i < n; i++) {
                        var valueMap = values[i];
                        timeline.setFrame(frameIndex++, valueMap["time"], valueMap["name"]);
                    }
                    timelines.push(timeline);
                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);

                } else
                    throw "Invalid timeline type for a slot: " + timelineName + " (" + slotName + ")";
            }
        }

        var bones = map["bones"];
        for (var boneName in bones) {
            if (!bones.hasOwnProperty(boneName)) continue;
            var boneIndex = skeletonData.findBoneIndex(boneName);
            if (boneIndex == -1) throw "Bone not found: " + boneName;
            var boneMap = bones[boneName];

            for (var timelineName in boneMap) {
                if (!boneMap.hasOwnProperty(timelineName)) continue;
                var values = boneMap[timelineName];
                if (timelineName == "rotate") {
                    var timeline = new spine.RotateTimeline(values.length);
                    timeline.boneIndex = boneIndex;

                    var frameIndex = 0;
                    for (var i = 0, n = values.length; i < n; i++) {
                        var valueMap = values[i];
                        timeline.setFrame(frameIndex, valueMap["time"], valueMap["angle"]);
                        this.readCurve(timeline, frameIndex, valueMap);
                        frameIndex++;
                    }
                    timelines.push(timeline);
                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);

                } else if (timelineName == "translate" || timelineName == "scale") {
                    var timeline;
                    var timelineScale = 1;
                    if (timelineName == "scale")
                        timeline = new spine.ScaleTimeline(values.length);
                    else {
                        timeline = new spine.TranslateTimeline(values.length);
                        timelineScale = this.scale;
                    }
                    timeline.boneIndex = boneIndex;

                    var frameIndex = 0;
                    for (var i = 0, n = values.length; i < n; i++) {
                        var valueMap = values[i];
                        var x = (valueMap["x"] || 0) * timelineScale;
                        var y = (valueMap["y"] || 0) * timelineScale;
                        timeline.setFrame(frameIndex, valueMap["time"], x, y);
                        this.readCurve(timeline, frameIndex, valueMap);
                        frameIndex++;
                    }
                    timelines.push(timeline);
                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);

                } else if (timelineName == "flipX" || timelineName == "flipY") {
                    var x = timelineName == "flipX";
                    var timeline = x ? new spine.FlipXTimeline(values.length) : new spine.FlipYTimeline(values.length);
                    timeline.boneIndex = boneIndex;

                    var field = x ? "x" : "y";
                    var frameIndex = 0;
                    for (var i = 0, n = values.length; i < n; i++) {
                        var valueMap = values[i];
                        timeline.setFrame(frameIndex, valueMap["time"], valueMap[field] || false);
                        frameIndex++;
                    }
                    timelines.push(timeline);
                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);
                } else
                    throw "Invalid timeline type for a bone: " + timelineName + " (" + boneName + ")";
            }
        }

        var ikMap = map["ik"];
        for (var ikConstraintName in ikMap) {
            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;
            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);
            var values = ikMap[ikConstraintName];
            var timeline = new spine.IkConstraintTimeline(values.length);
            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);
            var frameIndex = 0;
            for (var i = 0, n = values.length; i < n; i++) {
                var valueMap = values[i];
                var mix = valueMap.hasOwnProperty("mix") ? valueMap["mix"] : 1;
                var bendDirection = (!valueMap.hasOwnProperty("bendPositive") || valueMap["bendPositive"]) ? 1 : -1;
                timeline.setFrame(frameIndex, valueMap["time"], mix, bendDirection);
                this.readCurve(timeline, frameIndex, valueMap);
                frameIndex++;
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[timeline.frameCount * 3 - 3]);
        }

        var ffd = map["ffd"];
        for (var skinName in ffd) {
            var skin = skeletonData.findSkin(skinName);
            var slotMap = ffd[skinName];
            for (slotName in slotMap) {
                var slotIndex = skeletonData.findSlotIndex(slotName);
                var meshMap = slotMap[slotName];
                for (var meshName in meshMap) {
                    var values = meshMap[meshName];
                    var timeline = new spine.FfdTimeline(values.length);
                    var attachment = skin.getAttachment(slotIndex, meshName);
                    if (!attachment) throw "FFD attachment not found: " + meshName;
                    timeline.slotIndex = slotIndex;
                    timeline.attachment = attachment;

                    var isMesh = attachment.type == spine.AttachmentType.mesh;
                    var vertexCount;
                    if (isMesh)
                        vertexCount = attachment.vertices.length;
                    else
                        vertexCount = attachment.weights.length / 3 * 2;

                    var frameIndex = 0;
                    for (var i = 0, n = values.length; i < n; i++) {
                        var valueMap = values[i];
                        var vertices;
                        if (!valueMap["vertices"]) {
                            if (isMesh)
                                vertices = attachment.vertices;
                            else {
                                vertices = [];
                                vertices.length = vertexCount;
                            }
                        } else {
                            var verticesValue = valueMap["vertices"];
                            var vertices = [];
                            vertices.length = vertexCount;
                            var start = valueMap["offset"] || 0;
                            var nn = verticesValue.length;
                            if (this.scale == 1) {
                                for (var ii = 0; ii < nn; ii++)
                                    vertices[ii + start] = verticesValue[ii];
                            } else {
                                for (var ii = 0; ii < nn; ii++)
                                    vertices[ii + start] = verticesValue[ii] * this.scale;
                            }
                            if (isMesh) {
                                var meshVertices = attachment.vertices;
                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)
                                    vertices[ii] += meshVertices[ii];
                            }
                        }

                        timeline.setFrame(frameIndex, valueMap["time"], vertices);
                        this.readCurve(timeline, frameIndex, valueMap);
                        frameIndex++;
                    }
                    timelines[timelines.length] = timeline;
                    duration = Math.max(duration, timeline.frames[timeline.frameCount - 1]);
                }
            }
        }

        var drawOrderValues = map["drawOrder"];
        if (!drawOrderValues) drawOrderValues = map["draworder"];
        if (drawOrderValues) {
            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);
            var slotCount = skeletonData.slots.length;
            var frameIndex = 0;
            for (var i = 0, n = drawOrderValues.length; i < n; i++) {
                var drawOrderMap = drawOrderValues[i];
                var drawOrder = null;
                if (drawOrderMap["offsets"]) {
                    drawOrder = [];
                    drawOrder.length = slotCount;
                    for (var ii = slotCount - 1; ii >= 0; ii--)
                        drawOrder[ii] = -1;
                    var offsets = drawOrderMap["offsets"];
                    var unchanged = [];
                    unchanged.length = slotCount - offsets.length;
                    var originalIndex = 0, unchangedIndex = 0;
                    for (var ii = 0, nn = offsets.length; ii < nn; ii++) {
                        var offsetMap = offsets[ii];
                        var slotIndex = skeletonData.findSlotIndex(offsetMap["slot"]);
                        if (slotIndex == -1) throw "Slot not found: " + offsetMap["slot"];
                        // Collect unchanged items.
                        while (originalIndex != slotIndex)
                            unchanged[unchangedIndex++] = originalIndex++;
                        // Set changed items.
                        drawOrder[originalIndex + offsetMap["offset"]] = originalIndex++;
                    }
                    // Collect remaining unchanged items.
                    while (originalIndex < slotCount)
                        unchanged[unchangedIndex++] = originalIndex++;
                    // Fill in unchanged items.
                    for (var ii = slotCount - 1; ii >= 0; ii--)
                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];
                }
                timeline.setFrame(frameIndex++, drawOrderMap["time"], drawOrder);
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);
        }

        var events = map["events"];
        if (events) {
            var timeline = new spine.EventTimeline(events.length);
            var frameIndex = 0;
            for (var i = 0, n = events.length; i < n; i++) {
                var eventMap = events[i];
                var eventData = skeletonData.findEvent(eventMap["name"]);
                if (!eventData) throw "Event not found: " + eventMap["name"];
                var event = new spine.Event(eventData);
                event.intValue = eventMap.hasOwnProperty("int") ? eventMap["int"] : eventData.intValue;
                event.floatValue = eventMap.hasOwnProperty("float") ? eventMap["float"] : eventData.floatValue;
                event.stringValue = eventMap.hasOwnProperty("string") ? eventMap["string"] : eventData.stringValue;
                timeline.setFrame(frameIndex++, eventMap["time"], event);
            }
            timelines.push(timeline);
            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);
        }

        skeletonData.animations.push(new spine.Animation(name, timelines, duration));
    },
    readCurve: function (timeline, frameIndex, valueMap) {
        var curve = valueMap["curve"];
        if (!curve)
            timeline.curves.setLinear(frameIndex);
        else if (curve == "stepped")
            timeline.curves.setStepped(frameIndex);
        else if (curve instanceof Array)
            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);
    },
    toColor: function (hexString, colorIndex) {
        if (hexString.length != 8) throw "Color hexidecimal length must be 8, recieved: " + hexString;
        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;
    },
    getFloatArray: function (map, name, scale) {
        var list = map[name];
        var values = new spine.Float32Array(list.length);
        var i = 0, n = list.length;
        if (scale == 1) {
            for (; i < n; i++)
                values[i] = list[i];
        } else {
            for (; i < n; i++)
                values[i] = list[i] * scale;
        }
        return values;
    },
    getIntArray: function (map, name) {
        var list = map[name];
        var values = new spine.Uint16Array(list.length);
        for (var i = 0, n = list.length; i < n; i++)
            values[i] = list[i] | 0;
        return values;
    }
};

spine.Atlas = function (atlasText, textureLoader) {
    this.textureLoader = textureLoader;
    this.pages = [];
    this.regions = [];

    var reader = new spine.AtlasReader(atlasText);
    var tuple = [];
    tuple.length = 4;
    var page = null;
    while (true) {
        var line = reader.readLine();
        if (line === null) break;
        line = reader.trim(line);
        if (!line.length)
            page = null;
        else if (!page) {
            page = new spine.AtlasPage();
            page.name = line;

            if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.
                page.width = parseInt(tuple[0]);
                page.height = parseInt(tuple[1]);
                reader.readTuple(tuple);
            }
            page.format = spine.Atlas.Format[tuple[0]];

            reader.readTuple(tuple);
            page.minFilter = spine.Atlas.TextureFilter[tuple[0]];
            page.magFilter = spine.Atlas.TextureFilter[tuple[1]];

            var direction = reader.readValue();
            page.uWrap = spine.Atlas.TextureWrap.clampToEdge;
            page.vWrap = spine.Atlas.TextureWrap.clampToEdge;
            if (direction == "x")
                page.uWrap = spine.Atlas.TextureWrap.repeat;
            else if (direction == "y")
                page.vWrap = spine.Atlas.TextureWrap.repeat;
            else if (direction == "xy")
                page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;

            textureLoader.load(page, line, this);

            this.pages.push(page);

        } else {
            var region = new spine.AtlasRegion();
            region.name = line;
            region.page = page;

            region.rotate = reader.readValue() == "true";

            reader.readTuple(tuple);
            var x = parseInt(tuple[0]);
            var y = parseInt(tuple[1]);

            reader.readTuple(tuple);
            var width = parseInt(tuple[0]);
            var height = parseInt(tuple[1]);

            region.u = x / page.width;
            region.v = y / page.height;
            if (region.rotate) {
                region.u2 = (x + height) / page.width;
                region.v2 = (y + width) / page.height;
            } else {
                region.u2 = (x + width) / page.width;
                region.v2 = (y + height) / page.height;
            }
            region.x = x;
            region.y = y;
            region.width = Math.abs(width);
            region.height = Math.abs(height);

            if (reader.readTuple(tuple) == 4) { // split is optional
                region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];

                if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits
                    region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];

                    reader.readTuple(tuple);
                }
            }

            region.originalWidth = parseInt(tuple[0]);
            region.originalHeight = parseInt(tuple[1]);

            reader.readTuple(tuple);
            region.offsetX = parseInt(tuple[0]);
            region.offsetY = parseInt(tuple[1]);

            region.index = parseInt(reader.readValue());

            this.regions.push(region);
        }
    }
};
spine.Atlas.prototype = {
    findRegion: function (name) {
        var regions = this.regions;
        for (var i = 0, n = regions.length; i < n; i++)
            if (regions[i].name == name) return regions[i];
        return null;
    },
    dispose: function () {
        var pages = this.pages;
        for (var i = 0, n = pages.length; i < n; i++)
            this.textureLoader.unload(pages[i].rendererObject);
    },
    updateUVs: function (page) {
        var regions = this.regions;
        for (var i = 0, n = regions.length; i < n; i++) {
            var region = regions[i];
            if (region.page != page) continue;
            region.u = region.x / page.width;
            region.v = region.y / page.height;
            if (region.rotate) {
                region.u2 = (region.x + region.height) / page.width;
                region.v2 = (region.y + region.width) / page.height;
            } else {
                region.u2 = (region.x + region.width) / page.width;
                region.v2 = (region.y + region.height) / page.height;
            }
        }
    }
};

spine.Atlas.Format = {
    alpha: 0,
    intensity: 1,
    luminanceAlpha: 2,
    rgb565: 3,
    rgba4444: 4,
    rgb888: 5,
    rgba8888: 6
};

spine.Atlas.TextureFilter = {
    nearest: 0,
    linear: 1,
    mipMap: 2,
    mipMapNearestNearest: 3,
    mipMapLinearNearest: 4,
    mipMapNearestLinear: 5,
    mipMapLinearLinear: 6
};

spine.Atlas.TextureWrap = {
    mirroredRepeat: 0,
    clampToEdge: 1,
    repeat: 2
};

spine.AtlasPage = function () {};
spine.AtlasPage.prototype = {
    name: null,
    format: null,
    minFilter: null,
    magFilter: null,
    uWrap: null,
    vWrap: null,
    rendererObject: null,
    width: 0,
    height: 0
};

spine.AtlasRegion = function () {};
spine.AtlasRegion.prototype = {
    page: null,
    name: null,
    x: 0, y: 0,
    width: 0, height: 0,
    u: 0, v: 0, u2: 0, v2: 0,
    offsetX: 0, offsetY: 0,
    originalWidth: 0, originalHeight: 0,
    index: 0,
    rotate: false,
    splits: null,
    pads: null
};

spine.AtlasReader = function (text) {
    this.lines = text.split(/\r\n|\r|\n/);
};
spine.AtlasReader.prototype = {
    index: 0,
    trim: function (value) {
        return value.replace(/^\s+|\s+$/g, "");
    },
    readLine: function () {
        if (this.index >= this.lines.length) return null;
        return this.lines[this.index++];
    },
    readValue: function () {
        var line = this.readLine();
        var colon = line.indexOf(":");
        if (colon == -1) throw "Invalid line: " + line;
        return this.trim(line.substring(colon + 1));
    },
    /** Returns the number of tuple values read (1, 2 or 4). */
    readTuple: function (tuple) {
        var line = this.readLine();
        var colon = line.indexOf(":");
        if (colon == -1) throw "Invalid line: " + line;
        var i = 0, lastMatch = colon + 1;
        for (; i < 3; i++) {
            var comma = line.indexOf(",", lastMatch);
            if (comma == -1) break;
            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));
            lastMatch = comma + 1;
        }
        tuple[i] = this.trim(line.substring(lastMatch));
        return i + 1;
    }
};

spine.AtlasAttachmentLoader = function (atlas) {
    this.atlas = atlas;
};
spine.AtlasAttachmentLoader.prototype = {
    newRegionAttachment: function (skin, name, path) {
        var region = this.atlas.findRegion(path);
        if (!region) throw "Region not found in atlas: " + path + " (region attachment: " + name + ")";
        var attachment = new spine.RegionAttachment(name);
        attachment.rendererObject = region;
        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);
        attachment.regionOffsetX = region.offsetX;
        attachment.regionOffsetY = region.offsetY;
        attachment.regionWidth = region.width;
        attachment.regionHeight = region.height;
        attachment.regionOriginalWidth = region.originalWidth;
        attachment.regionOriginalHeight = region.originalHeight;
        return attachment;
    },
    newMeshAttachment: function (skin, name, path) {
        var region = this.atlas.findRegion(path);
        if (!region) throw "Region not found in atlas: " + path + " (mesh attachment: " + name + ")";
        var attachment = new spine.MeshAttachment(name);
        attachment.rendererObject = region;
        attachment.regionU = region.u;
        attachment.regionV = region.v;
        attachment.regionU2 = region.u2;
        attachment.regionV2 = region.v2;
        attachment.regionRotate = region.rotate;
        attachment.regionOffsetX = region.offsetX;
        attachment.regionOffsetY = region.offsetY;
        attachment.regionWidth = region.width;
        attachment.regionHeight = region.height;
        attachment.regionOriginalWidth = region.originalWidth;
        attachment.regionOriginalHeight = region.originalHeight;
        return attachment;
    },
    newSkinnedMeshAttachment: function (skin, name, path) {
        var region = this.atlas.findRegion(path);
        if (!region) throw "Region not found in atlas: " + path + " (skinned mesh attachment: " + name + ")";
        var attachment = new spine.SkinnedMeshAttachment(name);
        attachment.rendererObject = region;
        attachment.regionU = region.u;
        attachment.regionV = region.v;
        attachment.regionU2 = region.u2;
        attachment.regionV2 = region.v2;
        attachment.regionRotate = region.rotate;
        attachment.regionOffsetX = region.offsetX;
        attachment.regionOffsetY = region.offsetY;
        attachment.regionWidth = region.width;
        attachment.regionHeight = region.height;
        attachment.regionOriginalWidth = region.originalWidth;
        attachment.regionOriginalHeight = region.originalHeight;
        return attachment;
    },
    newBoundingBoxAttachment: function (skin, name) {
        return new spine.BoundingBoxAttachment(name);
    }
};

spine.SkeletonBounds = function () {
    this.polygonPool = [];
    this.polygons = [];
    this.boundingBoxes = [];
};
spine.SkeletonBounds.prototype = {
    minX: 0, minY: 0, maxX: 0, maxY: 0,
    update: function (skeleton, updateAabb) {
        var slots = skeleton.slots;
        var slotCount = slots.length;
        var x = skeleton.x, y = skeleton.y;
        var boundingBoxes = this.boundingBoxes;
        var polygonPool = this.polygonPool;
        var polygons = this.polygons;

        boundingBoxes.length = 0;
        for (var i = 0, n = polygons.length; i < n; i++)
            polygonPool.push(polygons[i]);
        polygons.length = 0;

        for (var i = 0; i < slotCount; i++) {
            var slot = slots[i];
            var boundingBox = slot.attachment;
            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;
            boundingBoxes.push(boundingBox);

            var poolCount = polygonPool.length, polygon;
            if (poolCount > 0) {
                polygon = polygonPool[poolCount - 1];
                polygonPool.splice(poolCount - 1, 1);
            } else
                polygon = [];
            polygons.push(polygon);

            polygon.length = boundingBox.vertices.length;
            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);
        }

        if (updateAabb) this.aabbCompute();
    },
    aabbCompute: function () {
        var polygons = this.polygons;
        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;
        for (var i = 0, n = polygons.length; i < n; i++) {
            var vertices = polygons[i];
            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2) {
                var x = vertices[ii];
                var y = vertices[ii + 1];
                minX = Math.min(minX, x);
                minY = Math.min(minY, y);
                maxX = Math.max(maxX, x);
                maxY = Math.max(maxY, y);
            }
        }
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
    },
    /** Returns true if the axis aligned bounding box contains the point. */
    aabbContainsPoint: function (x, y) {
        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;
    },
    /** Returns true if the axis aligned bounding box intersects the line segment. */
    aabbIntersectsSegment: function (x1, y1, x2, y2) {
        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;
        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))
            return false;
        var m = (y2 - y1) / (x2 - x1);
        var y = m * (minX - x1) + y1;
        if (y > minY && y < maxY) return true;
        y = m * (maxX - x1) + y1;
        if (y > minY && y < maxY) return true;
        var x = (minY - y1) / m + x1;
        if (x > minX && x < maxX) return true;
        x = (maxY - y1) / m + x1;
        if (x > minX && x < maxX) return true;
        return false;
    },
    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */
    aabbIntersectsSkeleton: function (bounds) {
        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;
    },
    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more
     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */
    containsPoint: function (x, y) {
        var polygons = this.polygons;
        for (var i = 0, n = polygons.length; i < n; i++)
            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];
        return null;
    },
    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually
     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */
    intersectsSegment: function (x1, y1, x2, y2) {
        var polygons = this.polygons;
        for (var i = 0, n = polygons.length; i < n; i++)
            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];
        return null;
    },
    /** Returns true if the polygon contains the point. */
    polygonContainsPoint: function (polygon, x, y) {
        var nn = polygon.length;
        var prevIndex = nn - 2;
        var inside = false;
        for (var ii = 0; ii < nn; ii += 2) {
            var vertexY = polygon[ii + 1];
            var prevY = polygon[prevIndex + 1];
            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {
                var vertexX = polygon[ii];
                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;
            }
            prevIndex = ii;
        }
        return inside;
    },
    /** Returns true if the polygon contains the line segment. */
    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2) {
        var nn = polygon.length;
        var width12 = x1 - x2, height12 = y1 - y2;
        var det1 = x1 * y2 - y1 * x2;
        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];
        for (var ii = 0; ii < nn; ii += 2) {
            var x4 = polygon[ii], y4 = polygon[ii + 1];
            var det2 = x3 * y4 - y3 * x4;
            var width34 = x3 - x4, height34 = y3 - y4;
            var det3 = width12 * height34 - height12 * width34;
            var x = (det1 * width34 - width12 * det2) / det3;
            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {
                var y = (det1 * height34 - height12 * det2) / det3;
                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;
            }
            x3 = x4;
            y3 = y4;
        }
        return false;
    },
    getPolygon: function (attachment) {
        var index = this.boundingBoxes.indexOf(attachment);
        return index == -1 ? null : this.polygons[index];
    },
    getWidth: function () {
        return this.maxX - this.minX;
    },
    getHeight: function () {
        return this.maxY - this.minY;
    }
};

/* Esoteric Software SPINE wrapper for pixi.js */

spine.Bone.yDown = true;
PIXI.AnimCache = {};

/**
 * Supporting class to load images from spine atlases as per spine spec.
 *
 * @class SpineTextureLoader
 * @uses EventTarget
 * @constructor
 * @param basePath {String} Tha base path where to look for the images to be loaded
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 */
PIXI.SpineTextureLoader = function(basePath, crossorigin)
{
    PIXI.EventTarget.call(this);

    this.basePath = basePath;
    this.crossorigin = crossorigin;
    this.loadingCount = 0;
};

/* constructor */
PIXI.SpineTextureLoader.prototype = PIXI.SpineTextureLoader;

/**
 * Starts loading a base texture as per spine specification
 *
 * @method load
 * @param page {spine.AtlasPage} Atlas page to which texture belongs
 * @param file {String} The file to load, this is just the file path relative to the base path configured in the constructor
 */
PIXI.SpineTextureLoader.prototype.load = function(page, file)
{
    page.rendererObject = PIXI.BaseTexture.fromImage(this.basePath + '/' + file, this.crossorigin);
    if (!page.rendererObject.hasLoaded)
    {
        var scope = this;
        ++scope.loadingCount;
        page.rendererObject.addEventListener('loaded', function(){
            --scope.loadingCount;
            scope.dispatchEvent({
                type: 'loadedBaseTexture',
                content: scope
            });
        });
    }
};

/**
 * Unloads a previously loaded texture as per spine specification
 *
 * @method unload
 * @param texture {BaseTexture} Texture object to destroy
 */
PIXI.SpineTextureLoader.prototype.unload = function(texture)
{
    texture.destroy(true);
};

/**
 * A class that enables the you to import and run your spine animations in pixi.
 * Spine animation data needs to be loaded using the PIXI.AssetLoader or PIXI.SpineLoader before it can be used by this class
 * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source
 *
 * @class Spine
 * @extends DisplayObjectContainer
 * @constructor
 * @param url {String} The url of the spine anim file to be used
 */
PIXI.Spine = function (url) {
    PIXI.DisplayObjectContainer.call(this);

    this.spineData = PIXI.AnimCache[url];

    if (!this.spineData) {
        throw new Error('Spine data must be preloaded using PIXI.SpineLoader or PIXI.AssetLoader: ' + url);
    }

    this.skeleton = new spine.Skeleton(this.spineData);
    this.skeleton.updateWorldTransform();

    this.stateData = new spine.AnimationStateData(this.spineData);
    this.state = new spine.AnimationState(this.stateData);

    this.slotContainers = [];

    for (var i = 0, n = this.skeleton.drawOrder.length; i < n; i++) {
        var slot = this.skeleton.drawOrder[i];
        var attachment = slot.attachment;
        var slotContainer = new PIXI.DisplayObjectContainer();
        this.slotContainers.push(slotContainer);
        this.addChild(slotContainer);

        if (attachment instanceof spine.RegionAttachment)
        {
            var spriteName = attachment.rendererObject.name;
            var sprite = this.createSprite(slot, attachment);
            slot.currentSprite = sprite;
            slot.currentSpriteName = spriteName;
            slotContainer.addChild(sprite);
        }
        else if (attachment instanceof spine.MeshAttachment)
        {
            var mesh = this.createMesh(slot, attachment);
            slot.currentMesh = mesh;
            slot.currentMeshName = attachment.name;
            slotContainer.addChild(mesh);
        }
        else
        {
            continue;
        }

    }

    this.autoUpdate = true;
};

PIXI.Spine.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);
PIXI.Spine.prototype.constructor = PIXI.Spine;

/**
 * If this flag is set to true, the spine animation will be autoupdated every time
 * the object id drawn. The down side of this approach is that the delta time is
 * automatically calculated and you could miss out on cool effects like slow motion,
 * pause, skip ahead and the sorts. Most of these effects can be achieved even with
 * autoupdate enabled but are harder to achieve.
 *
 * @property autoUpdate
 * @type { Boolean }
 * @default true
 */
Object.defineProperty(PIXI.Spine.prototype, 'autoUpdate', {
    get: function()
    {
        return (this.updateTransform === PIXI.Spine.prototype.autoUpdateTransform);
    },

    set: function(value)
    {
        this.updateTransform = value ? PIXI.Spine.prototype.autoUpdateTransform : PIXI.DisplayObjectContainer.prototype.updateTransform;
    }
});

/**
 * Update the spine skeleton and its animations by delta time (dt)
 *
 * @method update
 * @param dt {Number} Delta time. Time by which the animation should be updated
 */
PIXI.Spine.prototype.update = function(dt)
{
    this.state.update(dt);
    this.state.apply(this.skeleton);
    this.skeleton.updateWorldTransform();

    var drawOrder = this.skeleton.drawOrder;
    for (var i = 0, n = drawOrder.length; i < n; i++) {
        var slot = drawOrder[i];
        var attachment = slot.attachment;
        var slotContainer = this.slotContainers[i];

        if (!attachment)
        {
            slotContainer.visible = false;
            continue;
        }

        var type = attachment.type;
        if (type === spine.AttachmentType.region)
        {
            if (attachment.rendererObject)
            {
                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.name)
                {
                    var spriteName = attachment.rendererObject.name;
                    if (slot.currentSprite !== undefined)
                    {
                        slot.currentSprite.visible = false;
                    }
                    slot.sprites = slot.sprites || {};
                    if (slot.sprites[spriteName] !== undefined)
                    {
                        slot.sprites[spriteName].visible = true;
                    }
                    else
                    {
                        var sprite = this.createSprite(slot, attachment);
                        slotContainer.addChild(sprite);
                    }
                    slot.currentSprite = slot.sprites[spriteName];
                    slot.currentSpriteName = spriteName;
                }
            }

            var bone = slot.bone;

            slotContainer.position.x = bone.worldX + attachment.x * bone.m00 + attachment.y * bone.m01;
            slotContainer.position.y = bone.worldY + attachment.x * bone.m10 + attachment.y * bone.m11;
            slotContainer.scale.x = bone.worldScaleX;
            slotContainer.scale.y = bone.worldScaleY;

            slotContainer.rotation = -(slot.bone.worldRotation * spine.degRad);

            slot.currentSprite.tint = PIXI.rgb2hex([slot.r,slot.g,slot.b]);
        }
        else if (type === spine.AttachmentType.skinnedmesh)
        {
            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)
            {
                var meshName = attachment.name;
                if (slot.currentMesh !== undefined)
                {
                    slot.currentMesh.visible = false;
                }

                slot.meshes = slot.meshes || {};

                if (slot.meshes[meshName] !== undefined)
                {
                    slot.meshes[meshName].visible = true;
                }
                else
                {
                    var mesh = this.createMesh(slot, attachment);
                    slotContainer.addChild(mesh);
                }

                slot.currentMesh = slot.meshes[meshName];
                slot.currentMeshName = meshName;
            }

            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);

        }
        else
        {
            slotContainer.visible = false;
            continue;
        }
        slotContainer.visible = true;

        slotContainer.alpha = slot.a;
    }
};

/**
 * When autoupdate is set to yes this function is used as pixi's updateTransform function
 *
 * @method autoUpdateTransform
 * @private
 */
PIXI.Spine.prototype.autoUpdateTransform = function () {
    this.lastTime = this.lastTime || Date.now();
    var timeDelta = (Date.now() - this.lastTime) * 0.001;
    this.lastTime = Date.now();

    this.update(timeDelta);

    PIXI.DisplayObjectContainer.prototype.updateTransform.call(this);
};

/**
 * Create a new sprite to be used with spine.RegionAttachment
 *
 * @method createSprite
 * @param slot {spine.Slot} The slot to which the attachment is parented
 * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent
 * @private
 */
PIXI.Spine.prototype.createSprite = function (slot, attachment) {
    var descriptor = attachment.rendererObject;
    var baseTexture = descriptor.page.rendererObject;
    var spriteRect = new PIXI.Rectangle(descriptor.x,
                                        descriptor.y,
                                        descriptor.rotate ? descriptor.height : descriptor.width,
                                        descriptor.rotate ? descriptor.width : descriptor.height);
    var spriteTexture = new PIXI.Texture(baseTexture, spriteRect);
    var sprite = new PIXI.Sprite(spriteTexture);

    var baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;
    sprite.scale.set(descriptor.width / descriptor.originalWidth, descriptor.height / descriptor.originalHeight);
    sprite.rotation = baseRotation - (attachment.rotation * spine.degRad);
    sprite.anchor.x = sprite.anchor.y = 0.5;

    slot.sprites = slot.sprites || {};
    slot.sprites[descriptor.name] = sprite;
    return sprite;
};

PIXI.Spine.prototype.createMesh = function (slot, attachment) {
    var descriptor = attachment.rendererObject;
    var baseTexture = descriptor.page.rendererObject;
    var texture = new PIXI.Texture(baseTexture);

    var strip = new PIXI.Strip(texture);
    strip.drawMode = PIXI.Strip.DrawModes.TRIANGLES;
    strip.canvasPadding = 1.5;

    strip.vertices = new PIXI.Float32Array(attachment.uvs.length);
    strip.uvs = attachment.uvs;
    strip.indices = attachment.triangles;

    slot.meshes = slot.meshes || {};
    slot.meshes[attachment.name] = strip;

    return strip;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

PIXI.BaseTextureCache = {};

PIXI.BaseTextureCacheIdGenerator = 0;

/**
 * A texture stores the information that represents an image. All textures have a base texture.
 *
 * @class BaseTexture
 * @uses EventTarget
 * @constructor
 * @param source {String} the source object (image or canvas)
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 */
PIXI.BaseTexture = function(source, scaleMode)
{
    /**
     * The Resolution of the texture. 
     *
     * @property resolution
     * @type Number
     */
    this.resolution = 1;
    
    /**
     * [read-only] The width of the base texture set when the image has loaded
     *
     * @property width
     * @type Number
     * @readOnly
     */
    this.width = 100;

    /**
     * [read-only] The height of the base texture set when the image has loaded
     *
     * @property height
     * @type Number
     * @readOnly
     */
    this.height = 100;

    /**
     * The scale mode to apply when scaling this texture
     * 
     * @property scaleMode
     * @type {Number}
     * @default PIXI.scaleModes.LINEAR
     */
    this.scaleMode = scaleMode || PIXI.scaleModes.DEFAULT;

    /**
     * [read-only] Set to true once the base texture has loaded
     *
     * @property hasLoaded
     * @type Boolean
     * @readOnly
     */
    this.hasLoaded = false;

    /**
     * The image source that is used to create the texture.
     *
     * @property source
     * @type Image
     */
    this.source = source;

    this._UID = PIXI._UID++;

    /**
     * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)
     *
     * @property premultipliedAlpha
     * @type Boolean
     * @default true
     */
    this.premultipliedAlpha = true;

    // used for webGL

    /**
     * @property _glTextures
     * @type Array
     * @private
     */
    this._glTextures = [];

    /**
     *
     * Set this to true if a mipmap of this texture needs to be generated. This value needs to be set before the texture is used
     * Also the texture must be a power of two size to work
     * 
     * @property mipmap
     * @type {Boolean}
     */
    this.mipmap = false;

    // used for webGL texture updating...
    // TODO - this needs to be addressed

    /**
     * @property _dirty
     * @type Array
     * @private
     */
    this._dirty = [true, true, true, true];

    if(!source)return;

    if((this.source.complete || this.source.getContext) && this.source.width && this.source.height)
    {
        this.hasLoaded = true;
        this.width = this.source.naturalWidth || this.source.width;
        this.height = this.source.naturalHeight || this.source.height;
        this.dirty();
    }
    else
    {
        var scope = this;

        this.source.onload = function() {

            scope.hasLoaded = true;
            scope.width = scope.source.naturalWidth || scope.source.width;
            scope.height = scope.source.naturalHeight || scope.source.height;

            scope.dirty();

            // add it to somewhere...
            scope.dispatchEvent( { type: 'loaded', content: scope } );
        };

        this.source.onerror = function() {
            scope.dispatchEvent( { type: 'error', content: scope } );
        };
    }

    /**
     * @property imageUrl
     * @type String
     */
    this.imageUrl = null;

    /**
     * @property _powerOf2
     * @type Boolean
     * @private
     */
    this._powerOf2 = false;

};

PIXI.BaseTexture.prototype.constructor = PIXI.BaseTexture;

PIXI.EventTarget.mixin(PIXI.BaseTexture.prototype);

/**
 * Destroys this base texture
 *
 * @method destroy
 */
PIXI.BaseTexture.prototype.destroy = function()
{
    if(this.imageUrl)
    {
        delete PIXI.BaseTextureCache[this.imageUrl];
        delete PIXI.TextureCache[this.imageUrl];
        this.imageUrl = null;
        if (!navigator.isCocoonJS) this.source.src = '';
    }
    else if (this.source && this.source._pixiId)
    {
        delete PIXI.BaseTextureCache[this.source._pixiId];
    }
    this.source = null;

    this.unloadFromGPU();
};

/**
 * Changes the source image of the texture
 *
 * @method updateSourceImage
 * @param newSrc {String} the path of the image
 */
PIXI.BaseTexture.prototype.updateSourceImage = function(newSrc)
{
    this.hasLoaded = false;
    this.source.src = null;
    this.source.src = newSrc;
};

/**
 * Sets all glTextures to be dirty.
 *
 * @method dirty
 */
PIXI.BaseTexture.prototype.dirty = function()
{
    for (var i = 0; i < this._glTextures.length; i++)
    {
        this._dirty[i] = true;
    }
};

/**
 * Removes the base texture from the GPU, useful for managing resources on the GPU.
 * Atexture is still 100% usable and will simply be reuploaded if there is a sprite on screen that is using it.
 *
 * @method unloadFromGPU
 */
PIXI.BaseTexture.prototype.unloadFromGPU = function()
{
    this.dirty();

    // delete the webGL textures if any.
    for (var i = this._glTextures.length - 1; i >= 0; i--)
    {
        var glTexture = this._glTextures[i];
        var gl = PIXI.glContexts[i];

        if(gl && glTexture)
        {
            gl.deleteTexture(glTexture);
        }
        
    }

    this._glTextures.length = 0;

    this.dirty();
};

/**
 * Helper function that creates a base texture from the given image url.
 * If the image is not in the base texture cache it will be created and loaded.
 *
 * @static
 * @method fromImage
 * @param imageUrl {String} The image url of the texture
 * @param crossorigin {Boolean}
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @return BaseTexture
 */
PIXI.BaseTexture.fromImage = function(imageUrl, crossorigin, scaleMode)
{
    var baseTexture = PIXI.BaseTextureCache[imageUrl];

    if(crossorigin === undefined && imageUrl.indexOf('data:') === -1) crossorigin = true;

    if(!baseTexture)
    {
        // new Image() breaks tex loading in some versions of Chrome.
        // See https://code.google.com/p/chromium/issues/detail?id=238071
        var image = new Image();//document.createElement('img');
        if (crossorigin)
        {
            image.crossOrigin = '';
        }

        image.src = imageUrl;
        baseTexture = new PIXI.BaseTexture(image, scaleMode);
        baseTexture.imageUrl = imageUrl;
        PIXI.BaseTextureCache[imageUrl] = baseTexture;

        // if there is an @2x at the end of the url we are going to assume its a highres image
        if( imageUrl.indexOf(PIXI.RETINA_PREFIX + '.') !== -1)
        {
            baseTexture.resolution = 2;
        }
    }

    return baseTexture;
};

/**
 * Helper function that creates a base texture from the given canvas element.
 *
 * @static
 * @method fromCanvas
 * @param canvas {Canvas} The canvas element source of the texture
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @return BaseTexture
 */
PIXI.BaseTexture.fromCanvas = function(canvas, scaleMode)
{
    if(!canvas._pixiId)
    {
        canvas._pixiId = 'canvas_' + PIXI.TextureCacheIdGenerator++;
    }

    var baseTexture = PIXI.BaseTextureCache[canvas._pixiId];

    if(!baseTexture)
    {
        baseTexture = new PIXI.BaseTexture(canvas, scaleMode);
        PIXI.BaseTextureCache[canvas._pixiId] = baseTexture;
    }

    return baseTexture;
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

PIXI.TextureCache = {};
PIXI.FrameCache = {};

PIXI.TextureCacheIdGenerator = 0;

/**
 * A texture stores the information that represents an image or part of an image. It cannot be added
 * to the display list directly. Instead use it as the texture for a PIXI.Sprite. If no frame is provided then the whole image is used.
 *
 * @class Texture
 * @uses EventTarget
 * @constructor
 * @param baseTexture {BaseTexture} The base texture source to create the texture from
 * @param frame {Rectangle} The rectangle frame of the texture to show
 * @param [crop] {Rectangle} The area of original texture 
 * @param [trim] {Rectangle} Trimmed texture rectangle
 */
PIXI.Texture = function(baseTexture, frame, crop, trim)
{
    /**
     * Does this Texture have any frame data assigned to it?
     *
     * @property noFrame
     * @type Boolean
     */
    this.noFrame = false;

    if (!frame)
    {
        this.noFrame = true;
        frame = new PIXI.Rectangle(0,0,1,1);
    }

    if (baseTexture instanceof PIXI.Texture)
    {
        baseTexture = baseTexture.baseTexture;
    }

    /**
     * The base texture that this texture uses.
     *
     * @property baseTexture
     * @type BaseTexture
     */
    this.baseTexture = baseTexture;

    /**
     * The frame specifies the region of the base texture that this texture uses
     *
     * @property frame
     * @type Rectangle
     */
    this.frame = frame;

    /**
     * The texture trim data.
     *
     * @property trim
     * @type Rectangle
     */
    this.trim = trim;

    /**
     * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
     *
     * @property valid
     * @type Boolean
     */
    this.valid = false;

    /**
     * This will let a renderer know that a texture has been updated (used mainly for webGL uv updates)
     *
     * @property requiresUpdate
     * @type Boolean
     */
    this.requiresUpdate = false;

    /**
     * The WebGL UV data cache.
     *
     * @property _uvs
     * @type Object
     * @private
     */
    this._uvs = null;

    /**
     * The width of the Texture in pixels.
     *
     * @property width
     * @type Number
     */
    this.width = 0;

    /**
     * The height of the Texture in pixels.
     *
     * @property height
     * @type Number
     */
    this.height = 0;

    /**
     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,
     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)
     *
     * @property crop
     * @type Rectangle
     */
    this.crop = crop || new PIXI.Rectangle(0, 0, 1, 1);

    if (baseTexture.hasLoaded)
    {
        if (this.noFrame) frame = new PIXI.Rectangle(0, 0, baseTexture.width, baseTexture.height);
        this.setFrame(frame);
    }
    else
    {
        baseTexture.addEventListener('loaded', this.onBaseTextureLoaded.bind(this));
    }
};

PIXI.Texture.prototype.constructor = PIXI.Texture;
PIXI.EventTarget.mixin(PIXI.Texture.prototype);

/**
 * Called when the base texture is loaded
 *
 * @method onBaseTextureLoaded
 * @private
 */
PIXI.Texture.prototype.onBaseTextureLoaded = function()
{
    var baseTexture = this.baseTexture;
    baseTexture.removeEventListener('loaded', this.onLoaded);

    if (this.noFrame) this.frame = new PIXI.Rectangle(0, 0, baseTexture.width, baseTexture.height);

    this.setFrame(this.frame);

    this.dispatchEvent( { type: 'update', content: this } );
};

/**
 * Destroys this texture
 *
 * @method destroy
 * @param destroyBase {Boolean} Whether to destroy the base texture as well
 */
PIXI.Texture.prototype.destroy = function(destroyBase)
{
    if (destroyBase) this.baseTexture.destroy();

    this.valid = false;
};

/**
 * Specifies the region of the baseTexture that this texture will use.
 *
 * @method setFrame
 * @param frame {Rectangle} The frame of the texture to set it to
 */
PIXI.Texture.prototype.setFrame = function(frame)
{
    this.noFrame = false;

    this.frame = frame;
    this.width = frame.width;
    this.height = frame.height;

    this.crop.x = frame.x;
    this.crop.y = frame.y;
    this.crop.width = frame.width;
    this.crop.height = frame.height;

    if (!this.trim && (frame.x + frame.width > this.baseTexture.width || frame.y + frame.height > this.baseTexture.height))
    {
        throw new Error('Texture Error: frame does not fit inside the base Texture dimensions ' + this);
    }

    this.valid = frame && frame.width && frame.height && this.baseTexture.source && this.baseTexture.hasLoaded;

    if (this.trim)
    {
        this.width = this.trim.width;
        this.height = this.trim.height;
        this.frame.width = this.trim.width;
        this.frame.height = this.trim.height;
    }
    
    if (this.valid) this._updateUvs();

};

/**
 * Updates the internal WebGL UV cache.
 *
 * @method _updateUvs
 * @private
 */
PIXI.Texture.prototype._updateUvs = function()
{
    if(!this._uvs)this._uvs = new PIXI.TextureUvs();

    var frame = this.crop;
    var tw = this.baseTexture.width;
    var th = this.baseTexture.height;
    
    this._uvs.x0 = frame.x / tw;
    this._uvs.y0 = frame.y / th;

    this._uvs.x1 = (frame.x + frame.width) / tw;
    this._uvs.y1 = frame.y / th;

    this._uvs.x2 = (frame.x + frame.width) / tw;
    this._uvs.y2 = (frame.y + frame.height) / th;

    this._uvs.x3 = frame.x / tw;
    this._uvs.y3 = (frame.y + frame.height) / th;
};

/**
 * Helper function that creates a Texture object from the given image url.
 * If the image is not in the texture cache it will be  created and loaded.
 *
 * @static
 * @method fromImage
 * @param imageUrl {String} The image url of the texture
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @return Texture
 */
PIXI.Texture.fromImage = function(imageUrl, crossorigin, scaleMode)
{
    var texture = PIXI.TextureCache[imageUrl];

    if(!texture)
    {
        texture = new PIXI.Texture(PIXI.BaseTexture.fromImage(imageUrl, crossorigin, scaleMode));
        PIXI.TextureCache[imageUrl] = texture;
    }

    return texture;
};

/**
 * Helper function that returns a Texture objected based on the given frame id.
 * If the frame id is not in the texture cache an error will be thrown.
 *
 * @static
 * @method fromFrame
 * @param frameId {String} The frame id of the texture
 * @return Texture
 */
PIXI.Texture.fromFrame = function(frameId)
{
    var texture = PIXI.TextureCache[frameId];
    if(!texture) throw new Error('The frameId "' + frameId + '" does not exist in the texture cache ');
    return texture;
};

/**
 * Helper function that creates a new a Texture based on the given canvas element.
 *
 * @static
 * @method fromCanvas
 * @param canvas {Canvas} The canvas element source of the texture
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @return Texture
 */
PIXI.Texture.fromCanvas = function(canvas, scaleMode)
{
    var baseTexture = PIXI.BaseTexture.fromCanvas(canvas, scaleMode);

    return new PIXI.Texture( baseTexture );

};

/**
 * Adds a texture to the global PIXI.TextureCache. This cache is shared across the whole PIXI object.
 *
 * @static
 * @method addTextureToCache
 * @param texture {Texture} The Texture to add to the cache.
 * @param id {String} The id that the texture will be stored against.
 */
PIXI.Texture.addTextureToCache = function(texture, id)
{
    PIXI.TextureCache[id] = texture;
};

/**
 * Remove a texture from the global PIXI.TextureCache.
 *
 * @static
 * @method removeTextureFromCache
 * @param id {String} The id of the texture to be removed
 * @return {Texture} The texture that was removed
 */
PIXI.Texture.removeTextureFromCache = function(id)
{
    var texture = PIXI.TextureCache[id];
    delete PIXI.TextureCache[id];
    delete PIXI.BaseTextureCache[id];
    return texture;
};

PIXI.TextureUvs = function()
{
    this.x0 = 0;
    this.y0 = 0;

    this.x1 = 0;
    this.y1 = 0;

    this.x2 = 0;
    this.y2 = 0;

    this.x3 = 0;
    this.y3 = 0;
};

PIXI.Texture.emptyTexture = new PIXI.Texture(new PIXI.BaseTexture());


/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A RenderTexture is a special texture that allows any Pixi display object to be rendered to it.
 *
 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded otherwise black rectangles will be drawn instead.
 *
 * A RenderTexture takes a snapshot of any Display Object given to its render method. The position and rotation of the given Display Objects is ignored. For example:
 *
 *    var renderTexture = new PIXI.RenderTexture(800, 600);
 *    var sprite = PIXI.Sprite.fromImage("spinObj_01.png");
 *    sprite.position.x = 800/2;
 *    sprite.position.y = 600/2;
 *    sprite.anchor.x = 0.5;
 *    sprite.anchor.y = 0.5;
 *    renderTexture.render(sprite);
 *
 * The Sprite in this case will be rendered to a position of 0,0. To render this sprite at its actual position a DisplayObjectContainer should be used:
 *
 *    var doc = new PIXI.DisplayObjectContainer();
 *    doc.addChild(sprite);
 *    renderTexture.render(doc);  // Renders to center of renderTexture
 *
 * @class RenderTexture
 * @extends Texture
 * @constructor
 * @param width {Number} The width of the render texture
 * @param height {Number} The height of the render texture
 * @param renderer {CanvasRenderer|WebGLRenderer} The renderer used for this RenderTexture
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @param resolution {Number} The resolution of the texture being generated
 */
PIXI.RenderTexture = function(width, height, renderer, scaleMode, resolution)
{
    /**
     * The with of the render texture
     *
     * @property width
     * @type Number
     */
    this.width = width || 100;

    /**
     * The height of the render texture
     *
     * @property height
     * @type Number
     */
    this.height = height || 100;

    /**
     * The Resolution of the texture.
     *
     * @property resolution
     * @type Number
     */
    this.resolution = resolution || 1;

    /**
     * The framing rectangle of the render texture
     *
     * @property frame
     * @type Rectangle
     */
    this.frame = new PIXI.Rectangle(0, 0, this.width * this.resolution, this.height * this.resolution);

    /**
     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,
     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)
     *
     * @property crop
     * @type Rectangle
     */
    this.crop = new PIXI.Rectangle(0, 0, this.width * this.resolution, this.height * this.resolution);

    /**
     * The base texture object that this texture uses
     *
     * @property baseTexture
     * @type BaseTexture
     */
    this.baseTexture = new PIXI.BaseTexture();
    this.baseTexture.width = this.width * this.resolution;
    this.baseTexture.height = this.height * this.resolution;
    this.baseTexture._glTextures = [];
    this.baseTexture.resolution = this.resolution;

    this.baseTexture.scaleMode = scaleMode || PIXI.scaleModes.DEFAULT;

    this.baseTexture.hasLoaded = true;

    PIXI.Texture.call(this,
        this.baseTexture,
        new PIXI.Rectangle(0, 0, this.width, this.height)
    );

    /**
     * The renderer this RenderTexture uses. A RenderTexture can only belong to one renderer at the moment if its webGL.
     *
     * @property renderer
     * @type CanvasRenderer|WebGLRenderer
     */
    this.renderer = renderer || PIXI.defaultRenderer;

    if(this.renderer.type === PIXI.WEBGL_RENDERER)
    {
        var gl = this.renderer.gl;
        this.baseTexture._dirty[gl.id] = false;

        this.textureBuffer = new PIXI.FilterTexture(gl, this.width * this.resolution, this.height * this.resolution, this.baseTexture.scaleMode);
        this.baseTexture._glTextures[gl.id] =  this.textureBuffer.texture;

        this.render = this.renderWebGL;
        this.projection = new PIXI.Point(this.width*0.5, -this.height*0.5);
    }
    else
    {
        this.render = this.renderCanvas;
        this.textureBuffer = new PIXI.CanvasBuffer(this.width* this.resolution, this.height* this.resolution);
        this.baseTexture.source = this.textureBuffer.canvas;
    }

    /**
     * @property valid
     * @type Boolean
     */
    this.valid = true;

    this._updateUvs();
};

PIXI.RenderTexture.prototype = Object.create(PIXI.Texture.prototype);
PIXI.RenderTexture.prototype.constructor = PIXI.RenderTexture;

/**
 * Resizes the RenderTexture.
 *
 * @method resize
 * @param width {Number} The width to resize to.
 * @param height {Number} The height to resize to.
 * @param updateBase {Boolean} Should the baseTexture.width and height values be resized as well?
 */
PIXI.RenderTexture.prototype.resize = function(width, height, updateBase)
{
    if (width === this.width && height === this.height)return;

    this.valid = (width > 0 && height > 0);

    this.width = this.frame.width = this.crop.width = width;
    this.height =  this.frame.height = this.crop.height = height;

    if (updateBase)
    {
        this.baseTexture.width = this.width;
        this.baseTexture.height = this.height;
    }

    if (this.renderer.type === PIXI.WEBGL_RENDERER)
    {
        this.projection.x = this.width / 2;
        this.projection.y = -this.height / 2;
    }

    if(!this.valid)return;

    this.textureBuffer.resize(this.width * this.resolution, this.height * this.resolution);
};

/**
 * Clears the RenderTexture.
 *
 * @method clear
 */
PIXI.RenderTexture.prototype.clear = function()
{
    if(!this.valid)return;

    if (this.renderer.type === PIXI.WEBGL_RENDERER)
    {
        this.renderer.gl.bindFramebuffer(this.renderer.gl.FRAMEBUFFER, this.textureBuffer.frameBuffer);
    }

    this.textureBuffer.clear();
};

/**
 * This function will draw the display object to the texture.
 *
 * @method renderWebGL
 * @param displayObject {DisplayObject} The display object to render this texture on
 * @param [matrix] {Matrix} Optional matrix to apply to the display object before rendering.
 * @param [clear] {Boolean} If true the texture will be cleared before the displayObject is drawn
 * @private
 */
PIXI.RenderTexture.prototype.renderWebGL = function(displayObject, matrix, clear)
{
    if(!this.valid)return;
    //TOOD replace position with matrix..
   
    //Lets create a nice matrix to apply to our display object. Frame buffers come in upside down so we need to flip the matrix 
    var wt = displayObject.worldTransform;
    wt.identity();
    wt.translate(0, this.projection.y * 2);
    if(matrix)wt.append(matrix);
    wt.scale(1,-1);

    // setWorld Alpha to ensure that the object is renderer at full opacity
    displayObject.worldAlpha = 1;

    // Time to update all the children of the displayObject with the new matrix..    
    var children = displayObject.children;

    for(var i=0,j=children.length; i<j; i++)
    {
        children[i].updateTransform();
    }
    
    // time for the webGL fun stuff!
    var gl = this.renderer.gl;

    gl.viewport(0, 0, this.width * this.resolution, this.height * this.resolution);

    gl.bindFramebuffer(gl.FRAMEBUFFER, this.textureBuffer.frameBuffer );

    if(clear)this.textureBuffer.clear();

    this.renderer.spriteBatch.dirty = true;

    this.renderer.renderDisplayObject(displayObject, this.projection, this.textureBuffer.frameBuffer);

    this.renderer.spriteBatch.dirty = true;
};


/**
 * This function will draw the display object to the texture.
 *
 * @method renderCanvas
 * @param displayObject {DisplayObject} The display object to render this texture on
 * @param [matrix] {Matrix} Optional matrix to apply to the display object before rendering.
 * @param [clear] {Boolean} If true the texture will be cleared before the displayObject is drawn
 * @private
 */
PIXI.RenderTexture.prototype.renderCanvas = function(displayObject, matrix, clear)
{
    if(!this.valid)return;

    var wt = displayObject.worldTransform;
    wt.identity();
    if(matrix)wt.append(matrix);
    
    // setWorld Alpha to ensure that the object is renderer at full opacity
    displayObject.worldAlpha = 1;

    // Time to update all the children of the displayObject with the new matrix..    
    var children = displayObject.children;

    for(var i = 0, j = children.length; i < j; i++)
    {
        children[i].updateTransform();
    }

    if(clear)this.textureBuffer.clear();

    var context = this.textureBuffer.context;

    var realResolution = this.renderer.resolution;

    this.renderer.resolution = this.resolution;

    this.renderer.renderDisplayObject(displayObject, context);

    this.renderer.resolution = realResolution;
};

/**
 * Will return a HTML Image of the texture
 *
 * @method getImage
 * @return {Image}
 */
PIXI.RenderTexture.prototype.getImage = function()
{
    var image = new Image();
    image.src = this.getBase64();
    return image;
};

/**
 * Will return a a base64 encoded string of this texture. It works by calling RenderTexture.getCanvas and then running toDataURL on that.
 *
 * @method getBase64
 * @return {String} A base64 encoded string of the texture.
 */
PIXI.RenderTexture.prototype.getBase64 = function()
{
    return this.getCanvas().toDataURL();
};

/**
 * Creates a Canvas element, renders this RenderTexture to it and then returns it.
 *
 * @method getCanvas
 * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.
 */
PIXI.RenderTexture.prototype.getCanvas = function()
{
    if (this.renderer.type === PIXI.WEBGL_RENDERER)
    {
        var gl =  this.renderer.gl;
        var width = this.textureBuffer.width;
        var height = this.textureBuffer.height;

        var webGLPixels = new Uint8Array(4 * width * height);

        gl.bindFramebuffer(gl.FRAMEBUFFER, this.textureBuffer.frameBuffer);
        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webGLPixels);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        var tempCanvas = new PIXI.CanvasBuffer(width, height);
        var canvasData = tempCanvas.context.getImageData(0, 0, width, height);
        canvasData.data.set(webGLPixels);

        tempCanvas.context.putImageData(canvasData, 0, 0);

        return tempCanvas.canvas;
    }
    else
    {
        return this.textureBuffer.canvas;
    }
};

PIXI.RenderTexture.tempMatrix = new PIXI.Matrix();

/**
 * A texture of a [playing] Video.
 *
 * See the ["deus" demo](http://www.goodboydigital.com/pixijs/examples/deus/).
 *
 * @class VideoTexture
 * @extends BaseTexture
 * @constructor
 * @param source {HTMLVideoElement}
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 */
PIXI.VideoTexture = function( source, scaleMode )
{
    if( !source ){
        throw new Error( 'No video source element specified.' );
    }

    // hook in here to check if video is already available.
    // PIXI.BaseTexture looks for a source.complete boolean, plus width & height.

    if( (source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA ) && source.width && source.height )
    {
        source.complete = true;
    }

    PIXI.BaseTexture.call( this, source, scaleMode );

    this.autoUpdate = false;
    this.updateBound = this._onUpdate.bind(this);

    if( !source.complete )
    {
        this._onCanPlay = this.onCanPlay.bind(this);

        source.addEventListener( 'canplay', this._onCanPlay );
        source.addEventListener( 'canplaythrough', this._onCanPlay );

        // started playing..
        source.addEventListener( 'play', this.onPlayStart.bind(this) );
        source.addEventListener( 'pause', this.onPlayStop.bind(this) );
    }

};

PIXI.VideoTexture.prototype   = Object.create( PIXI.BaseTexture.prototype );

PIXI.VideoTexture.constructor = PIXI.VideoTexture;

PIXI.VideoTexture.prototype._onUpdate = function()
{
    if(this.autoUpdate)
    {
        window.requestAnimationFrame(this.updateBound);
        this.dirty();
    }
};

PIXI.VideoTexture.prototype.onPlayStart = function()
{
    if(!this.autoUpdate)
    {
        window.requestAnimationFrame(this.updateBound);
        this.autoUpdate = true;
    }
};

PIXI.VideoTexture.prototype.onPlayStop = function()
{
    this.autoUpdate = false;
};

PIXI.VideoTexture.prototype.onCanPlay = function()
{
    if( event.type === 'canplaythrough' )
    {
        this.hasLoaded  = true;


        if( this.source )
        {
            this.source.removeEventListener( 'canplay', this._onCanPlay );
            this.source.removeEventListener( 'canplaythrough', this._onCanPlay );

            this.width      = this.source.videoWidth;
            this.height     = this.source.videoHeight;

            // prevent multiple loaded dispatches..
            if( !this.__loaded ){
                this.__loaded = true;
                this.dispatchEvent( { type: 'loaded', content: this } );
            }
        }
    }
};

PIXI.VideoTexture.prototype.destroy = function()
{
    if( this.source && this.source._pixiId )
    {
        PIXI.BaseTextureCache[ this.source._pixiId ] = null;
        delete PIXI.BaseTextureCache[ this.source._pixiId ];

        this.source._pixiId = null;
        delete this.source._pixiId;
    }

    PIXI.BaseTexture.prototype.destroy.call( this );
};

/**
 * Mimic Pixi BaseTexture.from.... method.
 *
 * @static
 * @method baseTextureFromVideo
 * @param video {HTMLVideoElement}
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @return {VideoTexture}
 */
PIXI.VideoTexture.baseTextureFromVideo = function( video, scaleMode )
{
    if( !video._pixiId )
    {
        video._pixiId = 'video_' + PIXI.TextureCacheIdGenerator++;
    }

    var baseTexture = PIXI.BaseTextureCache[ video._pixiId ];

    if( !baseTexture )
    {
        baseTexture = new PIXI.VideoTexture( video, scaleMode );
        PIXI.BaseTextureCache[ video._pixiId ] = baseTexture;
    }

    return baseTexture;
};

/**
 * Mimic Pixi BaseTexture.from.... method.
 *
 * @static
 * @method textureFromVideo 
 * @param video {HTMLVideoElement}
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @return {Texture} A Texture, but not a VideoTexture.
 */
PIXI.VideoTexture.textureFromVideo = function( video, scaleMode )
{
    var baseTexture = PIXI.VideoTexture.baseTextureFromVideo( video, scaleMode );
    return new PIXI.Texture( baseTexture );
};

/**
 * Mimic Pixi BaseTexture.from.... method.
 *
 * @static
 * @method fromUrl 
 * @param videoSrc {String} The URL for the video.
 * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
 * @return {VideoTexture}
 */
PIXI.VideoTexture.fromUrl = function( videoSrc, scaleMode )
{
    var video = document.createElement('video');
    video.src = videoSrc;
    video.autoPlay = true;
    video.play();
    return PIXI.VideoTexture.textureFromVideo( video, scaleMode);
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A Class that loads a bunch of images / sprite sheet / bitmap font files. Once the
 * assets have been loaded they are added to the PIXI Texture cache and can be accessed
 * easily through PIXI.Texture.fromImage() and PIXI.Sprite.fromImage()
 * When all items have been loaded this class will dispatch a 'onLoaded' event
 * As each individual item is loaded this class will dispatch a 'onProgress' event
 *
 * @class AssetLoader
 * @constructor
 * @uses EventTarget
 * @param assetURLs {Array(String)} An array of image/sprite sheet urls that you would like loaded
 *      supported. Supported image formats include 'jpeg', 'jpg', 'png', 'gif'. Supported
 *      sprite sheet data formats only include 'JSON' at this time. Supported bitmap font
 *      data formats include 'xml' and 'fnt'.
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 */
PIXI.AssetLoader = function(assetURLs, crossorigin)
{
    /**
     * The array of asset URLs that are going to be loaded
     *
     * @property assetURLs
     * @type Array(String)
     */
    this.assetURLs = assetURLs;

    /**
     * Whether the requests should be treated as cross origin
     *
     * @property crossorigin
     * @type Boolean
     */
    this.crossorigin = crossorigin;

    /**
     * Maps file extension to loader types
     *
     * @property loadersByType
     * @type Object
     */
    this.loadersByType = {
        'jpg':  PIXI.ImageLoader,
        'jpeg': PIXI.ImageLoader,
        'png':  PIXI.ImageLoader,
        'gif':  PIXI.ImageLoader,
        'webp': PIXI.ImageLoader,
        'json': PIXI.JsonLoader,
        'atlas': PIXI.AtlasLoader,
        'anim': PIXI.SpineLoader,
        'xml':  PIXI.BitmapFontLoader,
        'fnt':  PIXI.BitmapFontLoader
    };
};

PIXI.EventTarget.mixin(PIXI.AssetLoader.prototype);

/**
 * Fired when an item has loaded
 * @event onProgress
 */

/**
 * Fired when all the assets have loaded
 * @event onComplete
 */

// constructor
PIXI.AssetLoader.prototype.constructor = PIXI.AssetLoader;

/**
 * Given a filename, returns its extension.
 *
 * @method _getDataType
 * @param str {String} the name of the asset
 */
PIXI.AssetLoader.prototype._getDataType = function(str)
{
    var test = 'data:';
    //starts with 'data:'
    var start = str.slice(0, test.length).toLowerCase();
    if (start === test) {
        var data = str.slice(test.length);

        var sepIdx = data.indexOf(',');
        if (sepIdx === -1) //malformed data URI scheme
            return null;

        //e.g. 'image/gif;base64' => 'image/gif'
        var info = data.slice(0, sepIdx).split(';')[0];

        //We might need to handle some special cases here...
        //standardize text/plain to 'txt' file extension
        if (!info || info.toLowerCase() === 'text/plain')
            return 'txt';

        //User specified mime type, try splitting it by '/'
        return info.split('/').pop().toLowerCase();
    }

    return null;
};

/**
 * Starts loading the assets sequentially
 *
 * @method load
 */
PIXI.AssetLoader.prototype.load = function()
{
    var scope = this;

    function onLoad(evt) {
        scope.onAssetLoaded(evt.data.content);
    }

    this.loadCount = this.assetURLs.length;

    for (var i=0; i < this.assetURLs.length; i++)
    {
        var fileName = this.assetURLs[i];
        //first see if we have a data URI scheme..
        var fileType = this._getDataType(fileName);

        //if not, assume it's a file URI
        if (!fileType)
            fileType = fileName.split('?').shift().split('.').pop().toLowerCase();

        var Constructor = this.loadersByType[fileType];
        if(!Constructor)
            throw new Error(fileType + ' is an unsupported file type');

        var loader = new Constructor(fileName, this.crossorigin);

        loader.on('loaded', onLoad);
        loader.load();
    }
};

/**
 * Invoked after each file is loaded
 *
 * @method onAssetLoaded
 * @private
 */
PIXI.AssetLoader.prototype.onAssetLoaded = function(loader)
{
    this.loadCount--;
    this.emit('onProgress', { content: this, loader: loader });
    if (this.onProgress) this.onProgress(loader);

    if (!this.loadCount)
    {
        this.emit('onComplete', { content: this });
        if(this.onComplete) this.onComplete();
    }
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The json file loader is used to load in JSON data and parse it
 * When loaded this class will dispatch a 'loaded' event
 * If loading fails this class will dispatch an 'error' event
 *
 * @class JsonLoader
 * @uses EventTarget
 * @constructor
 * @param url {String} The url of the JSON file
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 */
PIXI.JsonLoader = function (url, crossorigin) {
    /**
     * The url of the bitmap font data
     *
     * @property url
     * @type String
     */
    this.url = url;

    /**
     * Whether the requests should be treated as cross origin
     *
     * @property crossorigin
     * @type Boolean
     */
    this.crossorigin = crossorigin;

    /**
     * [read-only] The base url of the bitmap font data
     *
     * @property baseUrl
     * @type String
     * @readOnly
     */
    this.baseUrl = url.replace(/[^\/]*$/, '');

    /**
     * [read-only] Whether the data has loaded yet
     *
     * @property loaded
     * @type Boolean
     * @readOnly
     */
    this.loaded = false;

};

// constructor
PIXI.JsonLoader.prototype.constructor = PIXI.JsonLoader;
PIXI.EventTarget.mixin(PIXI.JsonLoader.prototype);

/**
 * Loads the JSON data
 *
 * @method load
 */
PIXI.JsonLoader.prototype.load = function () {

    if(window.XDomainRequest && this.crossorigin)
    {
        this.ajaxRequest = new window.XDomainRequest();

        // XDomainRequest has a few quirks. Occasionally it will abort requests
        // A way to avoid this is to make sure ALL callbacks are set even if not used
        // More info here: http://stackoverflow.com/questions/15786966/xdomainrequest-aborts-post-on-ie-9
        this.ajaxRequest.timeout = 3000;

        this.ajaxRequest.onerror = this.onError.bind(this);

        this.ajaxRequest.ontimeout = this.onError.bind(this);

        this.ajaxRequest.onprogress = function() {};

        this.ajaxRequest.onload = this.onJSONLoaded.bind(this);
    }
    else
    {
        if (window.XMLHttpRequest)
        {
            this.ajaxRequest = new window.XMLHttpRequest();
        }
        else
        {
            this.ajaxRequest = new window.ActiveXObject('Microsoft.XMLHTTP');
        }

        this.ajaxRequest.onreadystatechange = this.onReadyStateChanged.bind(this);
    }

    this.ajaxRequest.open('GET',this.url,true);

    this.ajaxRequest.send();
};

/**
 * Bridge function to be able to use the more reliable onreadystatechange in XMLHttpRequest.
 *
 * @method onReadyStateChanged
 * @private
 */
PIXI.JsonLoader.prototype.onReadyStateChanged = function () {
    if (this.ajaxRequest.readyState === 4 && (this.ajaxRequest.status === 200 || window.location.href.indexOf('http') === -1)) {
        this.onJSONLoaded();
    }
};

/**
 * Invoke when JSON file is loaded
 *
 * @method onJSONLoaded
 * @private
 */
PIXI.JsonLoader.prototype.onJSONLoaded = function () {

    if(!this.ajaxRequest.responseText )
    {
        this.onError();
        return;
    }

    this.json = JSON.parse(this.ajaxRequest.responseText);

    if(this.json.frames && this.json.meta && this.json.meta.image)
    {
        // sprite sheet
        var textureUrl = this.baseUrl + this.json.meta.image;
        var image = new PIXI.ImageLoader(textureUrl, this.crossorigin);
        var frameData = this.json.frames;

        this.texture = image.texture.baseTexture;
        image.addEventListener('loaded', this.onLoaded.bind(this));

        for (var i in frameData)
        {
            var rect = frameData[i].frame;

            if (rect)
            {
                var textureSize = new PIXI.Rectangle(rect.x, rect.y, rect.w, rect.h);
                var crop = textureSize.clone();
                var trim = null;

                //  Check to see if the sprite is trimmed
                if (frameData[i].trimmed)
                {
                    var actualSize = frameData[i].sourceSize;
                    var realSize = frameData[i].spriteSourceSize;
                    trim = new PIXI.Rectangle(realSize.x, realSize.y, actualSize.w, actualSize.h);
                }
                PIXI.TextureCache[i] = new PIXI.Texture(this.texture, textureSize, crop, trim);
            }
        }

        image.load();

    }
    else if(this.json.bones)
    {
        /* check if the json was loaded before */
        if (PIXI.AnimCache[this.url])
        {
            this.onLoaded();
        }
        else
        {
            /* use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files
             * that correspond to the spine file are in the same base URL and that the .json and .atlas files
             * have the same name
            */
            var atlasPath = this.url.substr(0, this.url.lastIndexOf('.')) + '.atlas';
            var atlasLoader = new PIXI.JsonLoader(atlasPath, this.crossorigin);
            // save a copy of the current object for future reference //
            var originalLoader = this;
            // before loading the file, replace the "onJSONLoaded" function for our own //
            atlasLoader.onJSONLoaded = function()
            {
                // at this point "this" points at the atlasLoader (JsonLoader) instance //
                if(!this.ajaxRequest.responseText)
                {
                    this.onError(); // FIXME: hmm, this is funny because we are not responding to errors yet
                    return;
                }
                // create a new instance of a spine texture loader for this spine object //
                var textureLoader = new PIXI.SpineTextureLoader(this.url.substring(0, this.url.lastIndexOf('/')));
                // create a spine atlas using the loaded text and a spine texture loader instance //
                var spineAtlas = new spine.Atlas(this.ajaxRequest.responseText, textureLoader);
                // now we use an atlas attachment loader //
                var attachmentLoader = new spine.AtlasAttachmentLoader(spineAtlas);
                // spine animation
                var spineJsonParser = new spine.SkeletonJson(attachmentLoader);
                var skeletonData = spineJsonParser.readSkeletonData(originalLoader.json);
                PIXI.AnimCache[originalLoader.url] = skeletonData;
                originalLoader.spine = skeletonData;
                originalLoader.spineAtlas = spineAtlas;
                originalLoader.spineAtlasLoader = atlasLoader;
                // wait for textures to finish loading if needed
                if (textureLoader.loadingCount > 0)
                {
                    textureLoader.addEventListener('loadedBaseTexture', function(evt){
                        if (evt.content.content.loadingCount <= 0)
                        {
                            originalLoader.onLoaded();
                        }
                    });
                }
                else
                {
                    originalLoader.onLoaded();
                }
            };
            // start the loading //
            atlasLoader.load();
        }
    }
    else
    {
        this.onLoaded();
    }
};

/**
 * Invoke when json file loaded
 *
 * @method onLoaded
 * @private
 */
PIXI.JsonLoader.prototype.onLoaded = function () {
    this.loaded = true;
    this.dispatchEvent({
        type: 'loaded',
        content: this
    });
};

/**
 * Invoke when error occured
 *
 * @method onError
 * @private
 */
PIXI.JsonLoader.prototype.onError = function () {

    this.dispatchEvent({
        type: 'error',
        content: this
    });
};

/**
 * @author Martin Kelm http://mkelm.github.com
 */

/**
 * The atlas file loader is used to load in Texture Atlas data and parse it. When loaded this class will dispatch a 'loaded' event. If loading fails this class will dispatch an 'error' event.
 *
 * To generate the data you can use http://www.codeandweb.com/texturepacker and publish in the 'JSON' format.
 * 
 * It is highly recommended to use texture atlases (also know as 'sprite sheets') as it allowed sprites to be batched and drawn together for highly increased rendering speed.
 * Once the data has been loaded the frames are stored in the PIXI texture cache and can be accessed though PIXI.Texture.fromFrameId() and PIXI.Sprite.fromFrameId()
 * 
 * @class AtlasLoader
 * @uses EventTarget
 * @constructor
 * @param url {String} The url of the JSON file
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 */
PIXI.AtlasLoader = function (url, crossorigin) {
    this.url = url;
    this.baseUrl = url.replace(/[^\/]*$/, '');
    this.crossorigin = crossorigin;
    this.loaded = false;

};

// constructor
PIXI.AtlasLoader.constructor = PIXI.AtlasLoader;

PIXI.EventTarget.mixin(PIXI.AtlasLoader.prototype);

 /**
 * Starts loading the JSON file
 *
 * @method load
 */
PIXI.AtlasLoader.prototype.load = function () {
    this.ajaxRequest = new PIXI.AjaxRequest();
    this.ajaxRequest.onreadystatechange = this.onAtlasLoaded.bind(this);

    this.ajaxRequest.open('GET', this.url, true);
    if (this.ajaxRequest.overrideMimeType) this.ajaxRequest.overrideMimeType('application/json');
    this.ajaxRequest.send(null);
};

/**
 * Invoked when the Atlas has fully loaded. Parses the JSON and builds the texture frames.
 * 
 * @method onAtlasLoaded
 * @private
 */
PIXI.AtlasLoader.prototype.onAtlasLoaded = function () {
    if (this.ajaxRequest.readyState === 4) {
        if (this.ajaxRequest.status === 200 || window.location.href.indexOf('http') === -1) {
            this.atlas = {
                meta : {
                    image : []
                },
                frames : []
            };
            var result = this.ajaxRequest.responseText.split(/\r?\n/);
            var lineCount = -3;

            var currentImageId = 0;
            var currentFrame = null;
            var nameInNextLine = false;

            var i = 0,
                j = 0,
                selfOnLoaded = this.onLoaded.bind(this);

            // parser without rotation support yet!
            for (i = 0; i < result.length; i++) {
                result[i] = result[i].replace(/^\s+|\s+$/g, '');
                if (result[i] === '') {
                    nameInNextLine = i+1;
                }
                if (result[i].length > 0) {
                    if (nameInNextLine === i) {
                        this.atlas.meta.image.push(result[i]);
                        currentImageId = this.atlas.meta.image.length - 1;
                        this.atlas.frames.push({});
                        lineCount = -3;
                    } else if (lineCount > 0) {
                        if (lineCount % 7 === 1) { // frame name
                            if (currentFrame != null) { //jshint ignore:line
                                this.atlas.frames[currentImageId][currentFrame.name] = currentFrame;
                            }
                            currentFrame = { name: result[i], frame : {} };
                        } else {
                            var text = result[i].split(' ');
                            if (lineCount % 7 === 3) { // position
                                currentFrame.frame.x = Number(text[1].replace(',', ''));
                                currentFrame.frame.y = Number(text[2]);
                            } else if (lineCount % 7 === 4) { // size
                                currentFrame.frame.w = Number(text[1].replace(',', ''));
                                currentFrame.frame.h = Number(text[2]);
                            } else if (lineCount % 7 === 5) { // real size
                                var realSize = {
                                    x : 0,
                                    y : 0,
                                    w : Number(text[1].replace(',', '')),
                                    h : Number(text[2])
                                };

                                if (realSize.w > currentFrame.frame.w || realSize.h > currentFrame.frame.h) {
                                    currentFrame.trimmed = true;
                                    currentFrame.realSize = realSize;
                                } else {
                                    currentFrame.trimmed = false;
                                }
                            }
                        }
                    }
                    lineCount++;
                }
            }

            if (currentFrame != null) { //jshint ignore:line
                this.atlas.frames[currentImageId][currentFrame.name] = currentFrame;
            }

            if (this.atlas.meta.image.length > 0) {
                this.images = [];
                for (j = 0; j < this.atlas.meta.image.length; j++) {
                    // sprite sheet
                    var textureUrl = this.baseUrl + this.atlas.meta.image[j];
                    var frameData = this.atlas.frames[j];
                    this.images.push(new PIXI.ImageLoader(textureUrl, this.crossorigin));

                    for (i in frameData) {
                        var rect = frameData[i].frame;
                        if (rect) {
                            PIXI.TextureCache[i] = new PIXI.Texture(this.images[j].texture.baseTexture, {
                                x: rect.x,
                                y: rect.y,
                                width: rect.w,
                                height: rect.h
                            });
                            if (frameData[i].trimmed) {
                                PIXI.TextureCache[i].realSize = frameData[i].realSize;
                                // trim in pixi not supported yet, todo update trim properties if it is done ...
                                PIXI.TextureCache[i].trim.x = 0;
                                PIXI.TextureCache[i].trim.y = 0;
                            }
                        }
                    }
                }

                this.currentImageId = 0;
                for (j = 0; j < this.images.length; j++) {
                    this.images[j].on('loaded', selfOnLoaded);
                }
                this.images[this.currentImageId].load();

            } else {
                this.onLoaded();
            }

        } else {
            this.onError();
        }
    }
};

/**
 * Invoked when json file has loaded.
 * 
 * @method onLoaded
 * @private
 */
PIXI.AtlasLoader.prototype.onLoaded = function () {
    if (this.images.length - 1 > this.currentImageId) {
        this.currentImageId++;
        this.images[this.currentImageId].load();
    } else {
        this.loaded = true;
        this.emit('loaded', { content: this });
    }
};

/**
 * Invoked when an error occurs.
 * 
 * @method onError
 * @private
 */
PIXI.AtlasLoader.prototype.onError = function () {
    this.emit('error', { content: this });
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The sprite sheet loader is used to load in JSON sprite sheet data
 * To generate the data you can use http://www.codeandweb.com/texturepacker and publish in the 'JSON' format
 * There is a free version so thats nice, although the paid version is great value for money.
 * It is highly recommended to use Sprite sheets (also know as a 'texture atlas') as it means sprites can be batched and drawn together for highly increased rendering speed.
 * Once the data has been loaded the frames are stored in the PIXI texture cache and can be accessed though PIXI.Texture.fromFrameId() and PIXI.Sprite.fromFrameId()
 * This loader will load the image file that the Spritesheet points to as well as the data.
 * When loaded this class will dispatch a 'loaded' event
 *
 * @class SpriteSheetLoader
 * @uses EventTarget
 * @constructor
 * @param url {String} The url of the sprite sheet JSON file
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 */
PIXI.SpriteSheetLoader = function (url, crossorigin) {

    /**
     * The url of the atlas data
     *
     * @property url
     * @type String
     */
    this.url = url;

    /**
     * Whether the requests should be treated as cross origin
     *
     * @property crossorigin
     * @type Boolean
     */
    this.crossorigin = crossorigin;

    /**
     * [read-only] The base url of the bitmap font data
     *
     * @property baseUrl
     * @type String
     * @readOnly
     */
    this.baseUrl = url.replace(/[^\/]*$/, '');

    /**
     * The texture being loaded
     *
     * @property texture
     * @type Texture
     */
    this.texture = null;

    /**
     * The frames of the sprite sheet
     *
     * @property frames
     * @type Object
     */
    this.frames = {};
};

// constructor
PIXI.SpriteSheetLoader.prototype.constructor = PIXI.SpriteSheetLoader;

PIXI.EventTarget.mixin(PIXI.SpriteSheetLoader.prototype);

/**
 * This will begin loading the JSON file
 *
 * @method load
 */
PIXI.SpriteSheetLoader.prototype.load = function () {
    var scope = this;
    var jsonLoader = new PIXI.JsonLoader(this.url, this.crossorigin);
    jsonLoader.on('loaded', function (event) {
        scope.json = event.data.content.json;
        scope.onLoaded();
    });
    jsonLoader.load();
};

/**
 * Invoke when all files are loaded (json and texture)
 *
 * @method onLoaded
 * @private
 */
PIXI.SpriteSheetLoader.prototype.onLoaded = function () {
    this.emit('loaded', {
        content: this
    });
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The image loader class is responsible for loading images file formats ('jpeg', 'jpg', 'png' and 'gif')
 * Once the image has been loaded it is stored in the PIXI texture cache and can be accessed though PIXI.Texture.fromFrame() and PIXI.Sprite.fromFrame()
 * When loaded this class will dispatch a 'loaded' event
 *
 * @class ImageLoader
 * @uses EventTarget
 * @constructor
 * @param url {String} The url of the image
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 */
PIXI.ImageLoader = function(url, crossorigin)
{
    /**
     * The texture being loaded
     *
     * @property texture
     * @type Texture
     */
    this.texture = PIXI.Texture.fromImage(url, crossorigin);

    /**
     * if the image is loaded with loadFramedSpriteSheet
     * frames will contain the sprite sheet frames
     *
     * @property frames
     * @type Array
     * @readOnly
     */
    this.frames = [];
};

// constructor
PIXI.ImageLoader.prototype.constructor = PIXI.ImageLoader;

PIXI.EventTarget.mixin(PIXI.ImageLoader.prototype);

/**
 * Loads image or takes it from cache
 *
 * @method load
 */
PIXI.ImageLoader.prototype.load = function()
{
    if(!this.texture.baseTexture.hasLoaded)
    {
        this.texture.baseTexture.on('loaded', this.onLoaded.bind(this));
    }
    else
    {
        this.onLoaded();
    }
};

/**
 * Invoked when image file is loaded or it is already cached and ready to use
 *
 * @method onLoaded
 * @private
 */
PIXI.ImageLoader.prototype.onLoaded = function()
{
    this.emit('loaded', { content: this });
};

/**
 * Loads image and split it to uniform sized frames
 *
 * @method loadFramedSpriteSheet
 * @param frameWidth {Number} width of each frame
 * @param frameHeight {Number} height of each frame
 * @param textureName {String} if given, the frames will be cached in <textureName>-<ord> format
 */
PIXI.ImageLoader.prototype.loadFramedSpriteSheet = function(frameWidth, frameHeight, textureName)
{
    this.frames = [];
    var cols = Math.floor(this.texture.width / frameWidth);
    var rows = Math.floor(this.texture.height / frameHeight);

    var i=0;
    for (var y=0; y<rows; y++)
    {
        for (var x=0; x<cols; x++,i++)
        {
            var texture = new PIXI.Texture(this.texture.baseTexture, {
                x: x*frameWidth,
                y: y*frameHeight,
                width: frameWidth,
                height: frameHeight
            });

            this.frames.push(texture);
            if (textureName) PIXI.TextureCache[textureName + '-' + i] = texture;
        }
    }

    this.load();
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The xml loader is used to load in XML bitmap font data ('xml' or 'fnt')
 * To generate the data you can use http://www.angelcode.com/products/bmfont/
 * This loader will also load the image file as the data.
 * When loaded this class will dispatch a 'loaded' event
 *
 * @class BitmapFontLoader
 * @uses EventTarget
 * @constructor
 * @param url {String} The url of the sprite sheet JSON file
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 */
PIXI.BitmapFontLoader = function(url, crossorigin)
{
    /**
     * The url of the bitmap font data
     *
     * @property url
     * @type String
     */
    this.url = url;

    /**
     * Whether the requests should be treated as cross origin
     *
     * @property crossorigin
     * @type Boolean
     */
    this.crossorigin = crossorigin;

    /**
     * [read-only] The base url of the bitmap font data
     *
     * @property baseUrl
     * @type String
     * @readOnly
     */
    this.baseUrl = url.replace(/[^\/]*$/, '');

    /**
     * [read-only] The texture of the bitmap font
     *
     * @property texture
     * @type Texture
     */
    this.texture = null;
};

// constructor
PIXI.BitmapFontLoader.prototype.constructor = PIXI.BitmapFontLoader;
PIXI.EventTarget.mixin(PIXI.BitmapFontLoader.prototype);

/**
 * Loads the XML font data
 *
 * @method load
 */
PIXI.BitmapFontLoader.prototype.load = function()
{
    this.ajaxRequest = new PIXI.AjaxRequest();
    this.ajaxRequest.onreadystatechange = this.onXMLLoaded.bind(this);

    this.ajaxRequest.open('GET', this.url, true);
    if (this.ajaxRequest.overrideMimeType) this.ajaxRequest.overrideMimeType('application/xml');
    this.ajaxRequest.send(null);
};

/**
 * Invoked when the XML file is loaded, parses the data.
 *
 * @method onXMLLoaded
 * @private
 */
PIXI.BitmapFontLoader.prototype.onXMLLoaded = function()
{
    if (this.ajaxRequest.readyState === 4)
    {
        if (this.ajaxRequest.status === 200 || window.location.protocol.indexOf('http') === -1)
        {
            var responseXML = this.ajaxRequest.responseXML;
            if(!responseXML || /MSIE 9/i.test(navigator.userAgent) || navigator.isCocoonJS) {
                if(typeof(window.DOMParser) === 'function') {
                    var domparser = new DOMParser();
                    responseXML = domparser.parseFromString(this.ajaxRequest.responseText, 'text/xml');
                } else {
                    var div = document.createElement('div');
                    div.innerHTML = this.ajaxRequest.responseText;
                    responseXML = div;
                }
            }

            var textureUrl = this.baseUrl + responseXML.getElementsByTagName('page')[0].getAttribute('file');
            var image = new PIXI.ImageLoader(textureUrl, this.crossorigin);
            this.texture = image.texture.baseTexture;

            var data = {};
            var info = responseXML.getElementsByTagName('info')[0];
            var common = responseXML.getElementsByTagName('common')[0];
            data.font = info.getAttribute('face');
            data.size = parseInt(info.getAttribute('size'), 10);
            data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);
            data.chars = {};

            //parse letters
            var letters = responseXML.getElementsByTagName('char');

            for (var i = 0; i < letters.length; i++)
            {
                var charCode = parseInt(letters[i].getAttribute('id'), 10);

                var textureRect = new PIXI.Rectangle(
                    parseInt(letters[i].getAttribute('x'), 10),
                    parseInt(letters[i].getAttribute('y'), 10),
                    parseInt(letters[i].getAttribute('width'), 10),
                    parseInt(letters[i].getAttribute('height'), 10)
                );

                data.chars[charCode] = {
                    xOffset: parseInt(letters[i].getAttribute('xoffset'), 10),
                    yOffset: parseInt(letters[i].getAttribute('yoffset'), 10),
                    xAdvance: parseInt(letters[i].getAttribute('xadvance'), 10),
                    kerning: {},
                    texture: PIXI.TextureCache[charCode] = new PIXI.Texture(this.texture, textureRect)

                };
            }

            //parse kernings
            var kernings = responseXML.getElementsByTagName('kerning');
            for (i = 0; i < kernings.length; i++)
            {
                var first = parseInt(kernings[i].getAttribute('first'), 10);
                var second = parseInt(kernings[i].getAttribute('second'), 10);
                var amount = parseInt(kernings[i].getAttribute('amount'), 10);

                data.chars[second].kerning[first] = amount;

            }

            PIXI.BitmapText.fonts[data.font] = data;

            image.addEventListener('loaded', this.onLoaded.bind(this));
            image.load();
        }
    }
};

/**
 * Invoked when all files are loaded (xml/fnt and texture)
 *
 * @method onLoaded
 * @private
 */
PIXI.BitmapFontLoader.prototype.onLoaded = function()
{
    this.emit('loaded', { content: this });
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 * based on pixi impact spine implementation made by Eemeli Kelokorpi (@ekelokorpi) https://github.com/ekelokorpi
 *
 * Awesome JS run time provided by EsotericSoftware
 * https://github.com/EsotericSoftware/spine-runtimes
 *
 */

/**
 * The Spine loader is used to load in JSON spine data
 * To generate the data you need to use http://esotericsoftware.com/ and export in the "JSON" format
 * Due to a clash of names  You will need to change the extension of the spine file from *.json to *.anim for it to load
 * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source
 * You will need to generate a sprite sheet to accompany the spine data
 * When loaded this class will dispatch a "loaded" event
 *
 * @class SpineLoader
 * @uses EventTarget
 * @constructor
 * @param url {String} The url of the JSON file
 * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
 */
PIXI.SpineLoader = function(url, crossorigin)
{
    /**
     * The url of the bitmap font data
     *
     * @property url
     * @type String
     */
    this.url = url;

    /**
     * Whether the requests should be treated as cross origin
     *
     * @property crossorigin
     * @type Boolean
     */
    this.crossorigin = crossorigin;

    /**
     * [read-only] Whether the data has loaded yet
     *
     * @property loaded
     * @type Boolean
     * @readOnly
     */
    this.loaded = false;
};

PIXI.SpineLoader.prototype.constructor = PIXI.SpineLoader;

PIXI.EventTarget.mixin(PIXI.SpineLoader.prototype);

/**
 * Loads the JSON data
 *
 * @method load
 */
PIXI.SpineLoader.prototype.load = function () {

    var scope = this;
    var jsonLoader = new PIXI.JsonLoader(this.url, this.crossorigin);
    jsonLoader.on('loaded', function (event) {
        scope.json = event.data.content.json;
        scope.onLoaded();
    });
    jsonLoader.load();
};

/**
 * Invoked when JSON file is loaded.
 *
 * @method onLoaded
 * @private
 */
PIXI.SpineLoader.prototype.onLoaded = function () {
    this.loaded = true;
    this.emit('loaded', { content: this });
};

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * This is the base class for creating a PIXI filter. Currently only webGL supports filters.
 * If you want to make a custom filter this should be your base class.
 * @class AbstractFilter
 * @constructor
 * @param fragmentSrc {Array} The fragment source in an array of strings.
 * @param uniforms {Object} An object containing the uniforms for this filter.
 */
PIXI.AbstractFilter = function(fragmentSrc, uniforms)
{
    /**
    * An array of passes - some filters contain a few steps this array simply stores the steps in a liniear fashion.
    * For example the blur filter has two passes blurX and blurY.
    * @property passes
    * @type Array(Filter)
    * @private
    */
    this.passes = [this];

    /**
    * @property shaders
    * @type Array(Shader)
    * @private
    */
    this.shaders = [];
    
    /**
    * @property dirty
    * @type Boolean
    */
    this.dirty = true;

    /**
    * @property padding
    * @type Number
    */
    this.padding = 0;

    /**
    * @property uniforms
    * @type object
    * @private
    */
    this.uniforms = uniforms || {};

    /**
    * @property fragmentSrc
    * @type Array
    * @private
    */
    this.fragmentSrc = fragmentSrc || [];
};

PIXI.AbstractFilter.prototype.constructor = PIXI.AbstractFilter;

/**
 * Syncs the uniforms between the class object and the shaders.
 *
 * @method syncUniforms
 */
PIXI.AbstractFilter.prototype.syncUniforms = function()
{
    for(var i=0,j=this.shaders.length; i<j; i++)
    {
        this.shaders[i].dirty = true;
    }
};

/*
PIXI.AbstractFilter.prototype.apply = function(frameBuffer)
{
    // TODO :)
};
*/
/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The AlphaMaskFilter class uses the pixel values from the specified texture (called the displacement map) to perform a displacement of an object.
 * You can use this filter to apply all manor of crazy warping effects
 * Currently the r property of the texture is used to offset the x and the g property of the texture is used to offset the y.
 * 
 * @class AlphaMaskFilter
 * @extends AbstractFilter
 * @constructor
 * @param texture {Texture} The texture used for the displacement map * must be power of 2 texture at the moment
 */
PIXI.AlphaMaskFilter = function(texture)
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];
    texture.baseTexture._powerOf2 = true;

    // set the uniforms
    this.uniforms = {
        mask: {type: 'sampler2D', value:texture},
        mapDimensions:   {type: '2f', value:{x:1, y:5112}},
        dimensions:   {type: '4fv', value:[0,0,0,0]}
    };

    if(texture.baseTexture.hasLoaded)
    {
        this.uniforms.mask.value.x = texture.width;
        this.uniforms.mask.value.y = texture.height;
    }
    else
    {
        this.boundLoadedFunction = this.onTextureLoaded.bind(this);

        texture.baseTexture.on('loaded', this.boundLoadedFunction);
    }

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform sampler2D mask;',
        'uniform sampler2D uSampler;',
        'uniform vec2 offset;',
        'uniform vec4 dimensions;',
        'uniform vec2 mapDimensions;',

        'void main(void) {',
        '   vec2 mapCords = vTextureCoord.xy;',
        '   mapCords += (dimensions.zw + offset)/ dimensions.xy ;',
        '   mapCords.y *= -1.0;',
        '   mapCords.y += 1.0;',
        '   mapCords *= dimensions.xy / mapDimensions;',

        '   vec4 original =  texture2D(uSampler, vTextureCoord);',
        '   float maskAlpha =  texture2D(mask, mapCords).r;',
        '   original *= maskAlpha;',
        //'   original.rgb *= maskAlpha;',
        '   gl_FragColor =  original;',
        //'   gl_FragColor = gl_FragColor;',
        '}'
    ];
};

PIXI.AlphaMaskFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.AlphaMaskFilter.prototype.constructor = PIXI.AlphaMaskFilter;

/**
 * Sets the map dimensions uniforms when the texture becomes available.
 *
 * @method onTextureLoaded
 */
PIXI.AlphaMaskFilter.prototype.onTextureLoaded = function()
{
    this.uniforms.mapDimensions.value.x = this.uniforms.mask.value.width;
    this.uniforms.mapDimensions.value.y = this.uniforms.mask.value.height;

    this.uniforms.mask.value.baseTexture.off('loaded', this.boundLoadedFunction);
};

/**
 * The texture used for the displacement map. Must be power of 2 sized texture.
 *
 * @property map
 * @type Texture
 */
Object.defineProperty(PIXI.AlphaMaskFilter.prototype, 'map', {
    get: function() {
        return this.uniforms.mask.value;
    },
    set: function(value) {
        this.uniforms.mask.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The ColorMatrixFilter class lets you apply a 4x4 matrix transformation on the RGBA
 * color and alpha values of every pixel on your displayObject to produce a result
 * with a new set of RGBA color and alpha values. It's pretty powerful!
 * 
 * @class ColorMatrixFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.ColorMatrixFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        matrix: {type: 'mat4', value: [1,0,0,0,
                                       0,1,0,0,
                                       0,0,1,0,
                                       0,0,0,1]}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform float invert;',
        'uniform mat4 matrix;',
        'uniform sampler2D uSampler;',

        'void main(void) {',
        '   gl_FragColor = texture2D(uSampler, vTextureCoord) * matrix;',
      //  '   gl_FragColor = gl_FragColor;',
        '}'
    ];
};

PIXI.ColorMatrixFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.ColorMatrixFilter.prototype.constructor = PIXI.ColorMatrixFilter;

/**
 * Sets the matrix of the color matrix filter
 *
 * @property matrix
 * @type Array(Number)
 * @default [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]
 */
Object.defineProperty(PIXI.ColorMatrixFilter.prototype, 'matrix', {
    get: function() {
        return this.uniforms.matrix.value;
    },
    set: function(value) {
        this.uniforms.matrix.value = value;
    }
});
/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * This greyscales the palette of your Display Objects.
 * 
 * @class GrayFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.GrayFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        gray: {type: '1f', value: 1}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform sampler2D uSampler;',
        'uniform float gray;',

        'void main(void) {',
        '   gl_FragColor = texture2D(uSampler, vTextureCoord);',
        '   gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.2126*gl_FragColor.r + 0.7152*gl_FragColor.g + 0.0722*gl_FragColor.b), gray);',
     //   '   gl_FragColor = gl_FragColor;',
        '}'
    ];
};

PIXI.GrayFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.GrayFilter.prototype.constructor = PIXI.GrayFilter;

/**
 * The strength of the gray. 1 will make the object black and white, 0 will make the object its normal color.
 * @property gray
 * @type Number
 */
Object.defineProperty(PIXI.GrayFilter.prototype, 'gray', {
    get: function() {
        return this.uniforms.gray.value;
    },
    set: function(value) {
        this.uniforms.gray.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The DisplacementFilter class uses the pixel values from the specified texture (called the displacement map) to perform a displacement of an object.
 * You can use this filter to apply all manor of crazy warping effects
 * Currently the r property of the texture is used offset the x and the g property of the texture is used to offset the y.
 * 
 * @class DisplacementFilter
 * @extends AbstractFilter
 * @constructor
 * @param texture {Texture} The texture used for the displacement map * must be power of 2 texture at the moment
 */
PIXI.DisplacementFilter = function(texture)
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];
    texture.baseTexture._powerOf2 = true;

    // set the uniforms
    this.uniforms = {
        displacementMap: {type: 'sampler2D', value:texture},
        scale:           {type: '2f', value:{x:30, y:30}},
        offset:          {type: '2f', value:{x:0, y:0}},
        mapDimensions:   {type: '2f', value:{x:1, y:5112}},
        dimensions:   {type: '4fv', value:[0,0,0,0]}
    };

    if(texture.baseTexture.hasLoaded)
    {
        this.uniforms.mapDimensions.value.x = texture.width;
        this.uniforms.mapDimensions.value.y = texture.height;
    }
    else
    {
        this.boundLoadedFunction = this.onTextureLoaded.bind(this);

        texture.baseTexture.on('loaded', this.boundLoadedFunction);
    }

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform sampler2D displacementMap;',
        'uniform sampler2D uSampler;',
        'uniform vec2 scale;',
        'uniform vec2 offset;',
        'uniform vec4 dimensions;',
        'uniform vec2 mapDimensions;',// = vec2(256.0, 256.0);',
        // 'const vec2 textureDimensions = vec2(750.0, 750.0);',

        'void main(void) {',
        '   vec2 mapCords = vTextureCoord.xy;',
        //'   mapCords -= ;',
        '   mapCords += (dimensions.zw + offset)/ dimensions.xy ;',
        '   mapCords.y *= -1.0;',
        '   mapCords.y += 1.0;',
        '   vec2 matSample = texture2D(displacementMap, mapCords).xy;',
        '   matSample -= 0.5;',
        '   matSample *= scale;',
        '   matSample /= mapDimensions;',
        '   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x + matSample.x, vTextureCoord.y + matSample.y));',
        '   gl_FragColor.rgb = mix( gl_FragColor.rgb, gl_FragColor.rgb, 1.0);',
        '   vec2 cord = vTextureCoord;',

        //'   gl_FragColor =  texture2D(displacementMap, cord);',
     //   '   gl_FragColor = gl_FragColor;',
        '}'
    ];
};

PIXI.DisplacementFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.DisplacementFilter.prototype.constructor = PIXI.DisplacementFilter;

/**
 * Sets the map dimensions uniforms when the texture becomes available.
 *
 * @method onTextureLoaded
 */
PIXI.DisplacementFilter.prototype.onTextureLoaded = function()
{
    this.uniforms.mapDimensions.value.x = this.uniforms.displacementMap.value.width;
    this.uniforms.mapDimensions.value.y = this.uniforms.displacementMap.value.height;

    this.uniforms.displacementMap.value.baseTexture.off('loaded', this.boundLoadedFunction);
};

/**
 * The texture used for the displacement map. Must be power of 2 texture.
 *
 * @property map
 * @type Texture
 */
Object.defineProperty(PIXI.DisplacementFilter.prototype, 'map', {
    get: function() {
        return this.uniforms.displacementMap.value;
    },
    set: function(value) {
        this.uniforms.displacementMap.value = value;
    }
});

/**
 * The multiplier used to scale the displacement result from the map calculation.
 *
 * @property scale
 * @type Point
 */
Object.defineProperty(PIXI.DisplacementFilter.prototype, 'scale', {
    get: function() {
        return this.uniforms.scale.value;
    },
    set: function(value) {
        this.uniforms.scale.value = value;
    }
});

/**
 * The offset used to move the displacement map.
 *
 * @property offset
 * @type Point
 */
Object.defineProperty(PIXI.DisplacementFilter.prototype, 'offset', {
    get: function() {
        return this.uniforms.offset.value;
    },
    set: function(value) {
        this.uniforms.offset.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * This filter applies a pixelate effect making display objects appear 'blocky'.
 * 
 * @class PixelateFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.PixelateFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        invert: {type: '1f', value: 0},
        dimensions: {type: '4fv', value:new PIXI.Float32Array([10000, 100, 10, 10])},
        pixelSize: {type: '2f', value:{x:10, y:10}}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform vec2 testDim;',
        'uniform vec4 dimensions;',
        'uniform vec2 pixelSize;',
        'uniform sampler2D uSampler;',

        'void main(void) {',
        '   vec2 coord = vTextureCoord;',

        '   vec2 size = dimensions.xy/pixelSize;',

        '   vec2 color = floor( ( vTextureCoord * size ) ) / size + pixelSize/dimensions.xy * 0.5;',
        '   gl_FragColor = texture2D(uSampler, color);',
        '}'
    ];
};

PIXI.PixelateFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.PixelateFilter.prototype.constructor = PIXI.PixelateFilter;

/**
 * This a point that describes the size of the blocks. x is the width of the block and y is the height.
 * 
 * @property size
 * @type Point
 */
Object.defineProperty(PIXI.PixelateFilter.prototype, 'size', {
    get: function() {
        return this.uniforms.pixelSize.value;
    },
    set: function(value) {
        this.dirty = true;
        this.uniforms.pixelSize.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The BlurXFilter applies a horizontal Gaussian blur to an object.
 *
 * @class BlurXFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.BlurXFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        blur: {type: '1f', value: 1/512}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform float blur;',
        'uniform sampler2D uSampler;',

        'void main(void) {',
        '   vec4 sum = vec4(0.0);',

        '   sum += texture2D(uSampler, vec2(vTextureCoord.x - 4.0*blur, vTextureCoord.y)) * 0.05;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x - 3.0*blur, vTextureCoord.y)) * 0.09;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x - 2.0*blur, vTextureCoord.y)) * 0.12;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x - blur, vTextureCoord.y)) * 0.15;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x + blur, vTextureCoord.y)) * 0.15;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x + 2.0*blur, vTextureCoord.y)) * 0.12;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x + 3.0*blur, vTextureCoord.y)) * 0.09;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x + 4.0*blur, vTextureCoord.y)) * 0.05;',

        '   gl_FragColor = sum;',
        '}'
    ];
};

PIXI.BlurXFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.BlurXFilter.prototype.constructor = PIXI.BlurXFilter;

/**
 * Sets the strength of both the blur.
 *
 * @property blur
 * @type Number
 * @default 2
 */
Object.defineProperty(PIXI.BlurXFilter.prototype, 'blur', {
    get: function() {
        return this.uniforms.blur.value / (1/7000);
    },
    set: function(value) {

        this.dirty = true;
        this.uniforms.blur.value = (1/7000) * value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The BlurYFilter applies a vertical Gaussian blur to an object.
 *
 * @class BlurYFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.BlurYFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        blur: {type: '1f', value: 1/512}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform float blur;',
        'uniform sampler2D uSampler;',

        'void main(void) {',
        '   vec4 sum = vec4(0.0);',

        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 4.0*blur)) * 0.05;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 3.0*blur)) * 0.09;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 2.0*blur)) * 0.12;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - blur)) * 0.15;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + blur)) * 0.15;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 2.0*blur)) * 0.12;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 3.0*blur)) * 0.09;',
        '   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 4.0*blur)) * 0.05;',

        '   gl_FragColor = sum;',
        '}'
    ];
};

PIXI.BlurYFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.BlurYFilter.prototype.constructor = PIXI.BlurYFilter;

/**
 * Sets the strength of both the blur.
 *
 * @property blur
 * @type Number
 * @default 2
 */
Object.defineProperty(PIXI.BlurYFilter.prototype, 'blur', {
    get: function() {
        return this.uniforms.blur.value / (1/7000);
    },
    set: function(value) {
        //this.padding = value;
        this.uniforms.blur.value = (1/7000) * value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * The BlurFilter applies a Gaussian blur to an object.
 * The strength of the blur can be set for x- and y-axis separately (always relative to the stage).
 *
 * @class BlurFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.BlurFilter = function()
{
    this.blurXFilter = new PIXI.BlurXFilter();
    this.blurYFilter = new PIXI.BlurYFilter();

    this.passes =[this.blurXFilter, this.blurYFilter];
};

PIXI.BlurFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.BlurFilter.prototype.constructor = PIXI.BlurFilter;

/**
 * Sets the strength of both the blurX and blurY properties simultaneously
 *
 * @property blur
 * @type Number
 * @default 2
 */
Object.defineProperty(PIXI.BlurFilter.prototype, 'blur', {
    get: function() {
        return this.blurXFilter.blur;
    },
    set: function(value) {
        this.blurXFilter.blur = this.blurYFilter.blur = value;
    }
});

/**
 * Sets the strength of the blurX property
 *
 * @property blurX
 * @type Number
 * @default 2
 */
Object.defineProperty(PIXI.BlurFilter.prototype, 'blurX', {
    get: function() {
        return this.blurXFilter.blur;
    },
    set: function(value) {
        this.blurXFilter.blur = value;
    }
});

/**
 * Sets the strength of the blurY property
 *
 * @property blurY
 * @type Number
 * @default 2
 */
Object.defineProperty(PIXI.BlurFilter.prototype, 'blurY', {
    get: function() {
        return this.blurYFilter.blur;
    },
    set: function(value) {
        this.blurYFilter.blur = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * This inverts your Display Objects colors.
 * 
 * @class InvertFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.InvertFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        invert: {type: '1f', value: 1}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform float invert;',
        'uniform sampler2D uSampler;',

        'void main(void) {',
        '   gl_FragColor = texture2D(uSampler, vTextureCoord);',
        '   gl_FragColor.rgb = mix( (vec3(1)-gl_FragColor.rgb) * gl_FragColor.a, gl_FragColor.rgb, 1.0 - invert);',
        //'   gl_FragColor.rgb = gl_FragColor.rgb  * gl_FragColor.a;',
      //  '   gl_FragColor = gl_FragColor * vColor;',
        '}'
    ];
};

PIXI.InvertFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.InvertFilter.prototype.constructor = PIXI.InvertFilter;

/**
 * The strength of the invert. 1 will fully invert the colors, 0 will make the object its normal color
 * @property invert
 * @type Number
*/
Object.defineProperty(PIXI.InvertFilter.prototype, 'invert', {
    get: function() {
        return this.uniforms.invert.value;
    },
    set: function(value) {
        this.uniforms.invert.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * This applies a sepia effect to your Display Objects.
 * 
 * @class SepiaFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.SepiaFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        sepia: {type: '1f', value: 1}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform float sepia;',
        'uniform sampler2D uSampler;',

        'const mat3 sepiaMatrix = mat3(0.3588, 0.7044, 0.1368, 0.2990, 0.5870, 0.1140, 0.2392, 0.4696, 0.0912);',

        'void main(void) {',
        '   gl_FragColor = texture2D(uSampler, vTextureCoord);',
        '   gl_FragColor.rgb = mix( gl_FragColor.rgb, gl_FragColor.rgb * sepiaMatrix, sepia);',
       // '   gl_FragColor = gl_FragColor * vColor;',
        '}'
    ];
};

PIXI.SepiaFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.SepiaFilter.prototype.constructor = PIXI.SepiaFilter;

/**
 * The strength of the sepia. 1 will apply the full sepia effect, 0 will make the object its normal color.
 * @property sepia
 * @type Number
*/
Object.defineProperty(PIXI.SepiaFilter.prototype, 'sepia', {
    get: function() {
        return this.uniforms.sepia.value;
    },
    set: function(value) {
        this.uniforms.sepia.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * This filter applies a twist effect making display objects appear twisted in the given direction.
 * 
 * @class TwistFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.TwistFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        radius: {type: '1f', value:0.5},
        angle: {type: '1f', value:5},
        offset: {type: '2f', value:{x:0.5, y:0.5}}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform vec4 dimensions;',
        'uniform sampler2D uSampler;',

        'uniform float radius;',
        'uniform float angle;',
        'uniform vec2 offset;',

        'void main(void) {',
        '   vec2 coord = vTextureCoord - offset;',
        '   float distance = length(coord);',

        '   if (distance < radius) {',
        '       float ratio = (radius - distance) / radius;',
        '       float angleMod = ratio * ratio * angle;',
        '       float s = sin(angleMod);',
        '       float c = cos(angleMod);',
        '       coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);',
        '   }',

        '   gl_FragColor = texture2D(uSampler, coord+offset);',
        '}'
    ];
};

PIXI.TwistFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.TwistFilter.prototype.constructor = PIXI.TwistFilter;

/**
 * This point describes the the offset of the twist.
 * 
 * @property offset
 * @type Point
 */
Object.defineProperty(PIXI.TwistFilter.prototype, 'offset', {
    get: function() {
        return this.uniforms.offset.value;
    },
    set: function(value) {
        this.dirty = true;
        this.uniforms.offset.value = value;
    }
});

/**
 * This radius of the twist.
 * 
 * @property radius
 * @type Number
 */
Object.defineProperty(PIXI.TwistFilter.prototype, 'radius', {
    get: function() {
        return this.uniforms.radius.value;
    },
    set: function(value) {
        this.dirty = true;
        this.uniforms.radius.value = value;
    }
});

/**
 * This angle of the twist.
 * 
 * @property angle
 * @type Number
 */
Object.defineProperty(PIXI.TwistFilter.prototype, 'angle', {
    get: function() {
        return this.uniforms.angle.value;
    },
    set: function(value) {
        this.dirty = true;
        this.uniforms.angle.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * This lowers the color depth of your image by the given amount, producing an image with a smaller palette.
 * 
 * @class ColorStepFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.ColorStepFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        step: {type: '1f', value: 5}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform sampler2D uSampler;',
        'uniform float step;',

        'void main(void) {',
        '   vec4 color = texture2D(uSampler, vTextureCoord);',
        '   color = floor(color * step) / step;',
        '   gl_FragColor = color;',
        '}'
    ];
};

PIXI.ColorStepFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.ColorStepFilter.prototype.constructor = PIXI.ColorStepFilter;

/**
 * The number of steps to reduce the palette by.
 *
 * @property step
 * @type Number
 */
Object.defineProperty(PIXI.ColorStepFilter.prototype, 'step', {
    get: function() {
        return this.uniforms.step.value;
    },
    set: function(value) {
        this.uniforms.step.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/fun/dotscreen.js
 */

/**
 * This filter applies a dotscreen effect making display objects appear to be made out of black and white halftone dots like an old printer.
 * 
 * @class DotScreenFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.DotScreenFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        scale: {type: '1f', value:1},
        angle: {type: '1f', value:5},
        dimensions:   {type: '4fv', value:[0,0,0,0]}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform vec4 dimensions;',
        'uniform sampler2D uSampler;',

        'uniform float angle;',
        'uniform float scale;',

        'float pattern() {',
        '   float s = sin(angle), c = cos(angle);',
        '   vec2 tex = vTextureCoord * dimensions.xy;',
        '   vec2 point = vec2(',
        '       c * tex.x - s * tex.y,',
        '       s * tex.x + c * tex.y',
        '   ) * scale;',
        '   return (sin(point.x) * sin(point.y)) * 4.0;',
        '}',

        'void main() {',
        '   vec4 color = texture2D(uSampler, vTextureCoord);',
        '   float average = (color.r + color.g + color.b) / 3.0;',
        '   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);',
        '}'
    ];
};

PIXI.DotScreenFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.DotScreenFilter.prototype.constructor = PIXI.DotScreenFilter;

/**
 * The scale of the effect.
 * @property scale
 * @type Number
 */
Object.defineProperty(PIXI.DotScreenFilter.prototype, 'scale', {
    get: function() {
        return this.uniforms.scale.value;
    },
    set: function(value) {
        this.dirty = true;
        this.uniforms.scale.value = value;
    }
});

/**
 * The radius of the effect.
 * @property angle
 * @type Number
 */
Object.defineProperty(PIXI.DotScreenFilter.prototype, 'angle', {
    get: function() {
        return this.uniforms.angle.value;
    },
    set: function(value) {
        this.dirty = true;
        this.uniforms.angle.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * A Cross Hatch effect filter.
 * 
 * @class CrossHatchFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.CrossHatchFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        blur: {type: '1f', value: 1 / 512}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform float blur;',
        'uniform sampler2D uSampler;',

        'void main(void) {',
        '    float lum = length(texture2D(uSampler, vTextureCoord.xy).rgb);',

        '    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);',

        '    if (lum < 1.00) {',
        '        if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {',
        '            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);',
        '        }',
        '    }',

        '    if (lum < 0.75) {',
        '        if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {',
        '            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);',
        '        }',
        '    }',

        '    if (lum < 0.50) {',
        '        if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {',
        '            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);',
        '        }',
        '    }',

        '    if (lum < 0.3) {',
        '        if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {',
        '            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);',
        '        }',
        '    }',
        '}'
    ];
};

PIXI.CrossHatchFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.CrossHatchFilter.prototype.constructor = PIXI.CrossHatchFilter;

/**
 * Sets the strength of both the blur.
 *
 * @property blur
 * @type Number
 * @default 2
 */
Object.defineProperty(PIXI.CrossHatchFilter.prototype, 'blur', {
    get: function() {
        return this.uniforms.blur.value / (1/7000);
    },
    set: function(value) {
        //this.padding = value;
        this.uniforms.blur.value = (1/7000) * value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

/**
 * An RGB Split Filter.
 * 
 * @class RGBSplitFilter
 * @extends AbstractFilter
 * @constructor
 */
PIXI.RGBSplitFilter = function()
{
    PIXI.AbstractFilter.call( this );

    this.passes = [this];

    // set the uniforms
    this.uniforms = {
        red: {type: '2f', value: {x:20, y:20}},
        green: {type: '2f', value: {x:-20, y:20}},
        blue: {type: '2f', value: {x:20, y:-20}},
        dimensions:   {type: '4fv', value:[0,0,0,0]}
    };

    this.fragmentSrc = [
        'precision mediump float;',
        'varying vec2 vTextureCoord;',
        'varying vec4 vColor;',
        'uniform vec2 red;',
        'uniform vec2 green;',
        'uniform vec2 blue;',
        'uniform vec4 dimensions;',
        'uniform sampler2D uSampler;',

        'void main(void) {',
        '   gl_FragColor.r = texture2D(uSampler, vTextureCoord + red/dimensions.xy).r;',
        '   gl_FragColor.g = texture2D(uSampler, vTextureCoord + green/dimensions.xy).g;',
        '   gl_FragColor.b = texture2D(uSampler, vTextureCoord + blue/dimensions.xy).b;',
        '   gl_FragColor.a = texture2D(uSampler, vTextureCoord).a;',
        '}'
    ];
};

PIXI.RGBSplitFilter.prototype = Object.create( PIXI.AbstractFilter.prototype );
PIXI.RGBSplitFilter.prototype.constructor = PIXI.RGBSplitFilter;

/**
 * Red channel offset.
 * 
 * @property red
 * @type Point
 */
Object.defineProperty(PIXI.RGBSplitFilter.prototype, 'red', {
    get: function() {
        return this.uniforms.red.value;
    },
    set: function(value) {
        this.uniforms.red.value = value;
    }
});

/**
 * Green channel offset.
 * 
 * @property green
 * @type Point
 */
Object.defineProperty(PIXI.RGBSplitFilter.prototype, 'green', {
    get: function() {
        return this.uniforms.green.value;
    },
    set: function(value) {
        this.uniforms.green.value = value;
    }
});

/**
 * Blue offset.
 * 
 * @property blue
 * @type Point
 */
Object.defineProperty(PIXI.RGBSplitFilter.prototype, 'blue', {
    get: function() {
        return this.uniforms.blue.value;
    },
    set: function(value) {
        this.uniforms.blue.value = value;
    }
});

/**
 * @author Mat Groves http://matgroves.com/ @Doormat23
 */

    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = PIXI;
        }
        exports.PIXI = PIXI;
    } else if (typeof define !== 'undefined' && define.amd) {
        define('PIXI',PIXI);
    } else {
        root.PIXI = PIXI;
    }
}).call(this);
/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */
/*global define:false, require:false, exports:false, module:false, signals:false */

/** @license
 * JS Signals <http://millermedeiros.github.com/js-signals/>
 * Released under the MIT license
 * Author: Miller Medeiros
 * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
 */

(function(global){

    // SignalBinding -------------------------------------------------
    //================================================================

    /**
     * Object that represents a binding between a Signal and a listener function.
     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>
     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.
     * @author Miller Medeiros
     * @constructor
     * @internal
     * @name SignalBinding
     * @param {Signal} signal Reference to Signal object that listener is currently bound to.
     * @param {Function} listener Handler function bound to the signal.
     * @param {boolean} isOnce If binding should be executed just once.
     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
     * @param {Number} [priority] The priority level of the event listener. (default = 0).
     */
    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {

        /**
         * Handler function bound to the signal.
         * @type Function
         * @private
         */
        this._listener = listener;

        /**
         * If binding should be executed just once.
         * @type boolean
         * @private
         */
        this._isOnce = isOnce;

        /**
         * Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @memberOf SignalBinding.prototype
         * @name context
         * @type Object|undefined|null
         */
        this.context = listenerContext;

        /**
         * Reference to Signal object that listener is currently bound to.
         * @type Signal
         * @private
         */
        this._signal = signal;

        /**
         * Listener priority
         * @type Number
         * @private
         */
        this._priority = priority || 0;
    }

    SignalBinding.prototype = {

        /**
         * If binding is active and should be executed.
         * @type boolean
         */
        active : true,

        /**
         * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)
         * @type Array|null
         */
        params : null,

        /**
         * Call listener passing arbitrary parameters.
         * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>
         * @param {Array} [paramsArr] Array of parameters that should be passed to the listener
         * @return {*} Value returned by the listener.
         */
        execute : function (paramsArr) {
            var handlerReturn, params;
            if (this.active && !!this._listener) {
                params = this.params? this.params.concat(paramsArr) : paramsArr;
                handlerReturn = this._listener.apply(this.context, params);
                if (this._isOnce) {
                    this.detach();
                }
            }
            return handlerReturn;
        },

        /**
         * Detach binding from signal.
         * - alias to: mySignal.remove(myBinding.getListener());
         * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.
         */
        detach : function () {
            return this.isBound()? this._signal.remove(this._listener, this.context) : null;
        },

        /**
         * @return {Boolean} `true` if binding is still bound to the signal and have a listener.
         */
        isBound : function () {
            return (!!this._signal && !!this._listener);
        },

        /**
         * @return {boolean} If SignalBinding will only be executed once.
         */
        isOnce : function () {
            return this._isOnce;
        },

        /**
         * @return {Function} Handler function bound to the signal.
         */
        getListener : function () {
            return this._listener;
        },

        /**
         * @return {Signal} Signal that listener is currently bound to.
         */
        getSignal : function () {
            return this._signal;
        },

        /**
         * Delete instance properties
         * @private
         */
        _destroy : function () {
            delete this._signal;
            delete this._listener;
            delete this.context;
        },

        /**
         * @return {string} String representation of the object.
         */
        toString : function () {
            return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';
        }

    };


/*global SignalBinding:false*/

    // Signal --------------------------------------------------------
    //================================================================

    function validateListener(listener, fnName) {
        if (typeof listener !== 'function') {
            throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );
        }
    }

    /**
     * Custom event broadcaster
     * <br />- inspired by Robert Penner's AS3 Signals.
     * @name Signal
     * @author Miller Medeiros
     * @constructor
     */
    function Signal() {
        /**
         * @type Array.<SignalBinding>
         * @private
         */
        this._bindings = [];
        this._prevParams = null;

        // enforce dispatch to aways work on same context (#47)
        var self = this;
        this.dispatch = function(){
            Signal.prototype.dispatch.apply(self, arguments);
        };
    }

    Signal.prototype = {

        /**
         * Signals Version Number
         * @type String
         * @const
         */
        VERSION : '1.0.0',

        /**
         * If Signal should keep record of previously dispatched parameters and
         * automatically execute listener during `add()`/`addOnce()` if Signal was
         * already dispatched before.
         * @type boolean
         */
        memorize : false,

        /**
         * @type boolean
         * @private
         */
        _shouldPropagate : true,

        /**
         * If Signal is active and should broadcast events.
         * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>
         * @type boolean
         */
        active : true,

        /**
         * @param {Function} listener
         * @param {boolean} isOnce
         * @param {Object} [listenerContext]
         * @param {Number} [priority]
         * @return {SignalBinding}
         * @private
         */
        _registerListener : function (listener, isOnce, listenerContext, priority) {

            var prevIndex = this._indexOfListener(listener, listenerContext),
                binding;

            if (prevIndex !== -1) {
                binding = this._bindings[prevIndex];
                if (binding.isOnce() !== isOnce) {
                    throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');
                }
            } else {
                binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);
                this._addBinding(binding);
            }

            if(this.memorize && this._prevParams){
                binding.execute(this._prevParams);
            }

            return binding;
        },

        /**
         * @param {SignalBinding} binding
         * @private
         */
        _addBinding : function (binding) {
            //simplified insertion sort
            var n = this._bindings.length;
            do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);
            this._bindings.splice(n + 1, 0, binding);
        },

        /**
         * @param {Function} listener
         * @return {number}
         * @private
         */
        _indexOfListener : function (listener, context) {
            var n = this._bindings.length,
                cur;
            while (n--) {
                cur = this._bindings[n];
                if (cur._listener === listener && cur.context === context) {
                    return n;
                }
            }
            return -1;
        },

        /**
         * Check if listener was attached to Signal.
         * @param {Function} listener
         * @param {Object} [context]
         * @return {boolean} if Signal has the specified listener.
         */
        has : function (listener, context) {
            return this._indexOfListener(listener, context) !== -1;
        },

        /**
         * Add a listener to the signal.
         * @param {Function} listener Signal handler function.
         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
         */
        add : function (listener, listenerContext, priority) {
            validateListener(listener, 'add');
            return this._registerListener(listener, false, listenerContext, priority);
        },

        /**
         * Add listener to the signal that should be removed after first execution (will be executed only once).
         * @param {Function} listener Signal handler function.
         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
         */
        addOnce : function (listener, listenerContext, priority) {
            validateListener(listener, 'addOnce');
            return this._registerListener(listener, true, listenerContext, priority);
        },

        /**
         * Remove a single listener from the dispatch queue.
         * @param {Function} listener Handler function that should be removed.
         * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).
         * @return {Function} Listener handler function.
         */
        remove : function (listener, context) {
            validateListener(listener, 'remove');

            var i = this._indexOfListener(listener, context);
            if (i !== -1) {
                this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal
                this._bindings.splice(i, 1);
            }
            return listener;
        },

        /**
         * Remove all listeners from the Signal.
         */
        removeAll : function () {
            var n = this._bindings.length;
            while (n--) {
                this._bindings[n]._destroy();
            }
            this._bindings.length = 0;
        },

        /**
         * @return {number} Number of listeners attached to the Signal.
         */
        getNumListeners : function () {
            return this._bindings.length;
        },

        /**
         * Stop propagation of the event, blocking the dispatch to next listeners on the queue.
         * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>
         * @see Signal.prototype.disable
         */
        halt : function () {
            this._shouldPropagate = false;
        },

        /**
         * Dispatch/Broadcast Signal to all listeners added to the queue.
         * @param {...*} [params] Parameters that should be passed to each handler.
         */
        dispatch : function (params) {
            if (! this.active) {
                return;
            }

            var paramsArr = Array.prototype.slice.call(arguments),
                n = this._bindings.length,
                bindings;

            if (this.memorize) {
                this._prevParams = paramsArr;
            }

            if (! n) {
                //should come after memorize
                return;
            }

            bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch
            this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.

            //execute all callbacks until end of the list or until a callback returns `false` or stops propagation
            //reverse loop since listeners with higher priority will be added at the end of the list
            do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
        },

        /**
         * Forget memorized arguments.
         * @see Signal.memorize
         */
        forget : function(){
            this._prevParams = null;
        },

        /**
         * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).
         * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>
         */
        dispose : function () {
            this.removeAll();
            delete this._bindings;
            delete this._prevParams;
        },

        /**
         * @return {string} String representation of the object.
         */
        toString : function () {
            return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';
        }

    };


    // Namespace -----------------------------------------------------
    //================================================================

    /**
     * Signals namespace
     * @namespace
     * @name signals
     */
    var signals = Signal;

    /**
     * Custom event broadcaster
     * @see Signal
     */
    // alias for backwards compatibility (see #gh-44)
    signals.Signal = Signal;



    //exports to multiple environments
    if(typeof define === 'function' && define.amd){ //AMD
        define('signals',[],function () { return signals; });
    } else if (typeof module !== 'undefined' && module.exports){ //node
        module.exports = signals;
    } else { //browser
        //use string because of Google closure compiler ADVANCED_MODE
        /*jslint sub:true */
        global['signals'] = signals;
    }

}(this));

define('com/fido/loader/Cache',['require','exports','module'],function (require, exports, module) 
{
    var Cache = function()
    {
        this._json = {};
        this._text = {};

    }


    // add...
    

    Cache.prototype.addJson = function(json, id) 
    {
        // body...
        this._json[id] = json;
    };

    Cache.prototype.addText = function(text, id) 
    {
        this._text[id] = text;
    };


    // get...
    

    Cache.prototype.getJson = function(id) 
    {
        if (this._json[id])
        {
            return this._json[id];
        }
        else
        {
            console.warn('Fido.Cache.getJson: "' + id + '" not found in Cache');
        }
    };

    Cache.prototype.getText = function(id) 
    {
        if (this._text[id])
        {
            return this._text[id];
        }
        else
        {
            console.warn('Fido.Cache.getText: "' + id + '" not found in Cache');
        }
    };

    module.exports = new Cache;

});

var Modes = 
{
	Easy : 0,
	Hard : 1
}

var Fonts = {
    MainFont : 'Ultra'
}

/* 

if (this.checkDevice.fullscreenKeyboard)
                {
                    document.body[this.checkDevice.requestFullscreen](Element.ALLOW_KEYBOARD_INPUT);
                }
                else
                {
                    document.body[this.checkDevice.requestFullscreen]();
                }
                */;
define("com/sc/Consts", function(){});

define('com/fido/loader/Loader',['require','exports','module','PIXI','signals','com/fido/loader/Cache','com/sc/Consts'],function (require, exports, module) 
{
    var PIXI    = require("PIXI");
    var Signal  = require('signals');
    var Cache   = require('com/fido/loader/Cache');
    var Consts  = require('com/sc/Consts');
  
    var Loader = function()
    {  
        this.crossdomain = false;

        if(window.XDomainRequest && this.crossdomain)
        {
            this.ajaxRequest = new XDomainRequest();
            // XDomainRequest has a few querks. Occasionally it will abort requests
            // A way to avoid this is to make sure ALL callbacks are set even if not used
            // More info here: http://stackoverflow.com/questions/15786966/xdomainrequest-aborts-post-on-ie-9
            this.ajaxRequest.timeout = 3000;

            this.ajaxRequest.onerror = function(){};

            this.ajaxRequest.ontimeout = function(){};

            this.ajaxRequest.onprogress = function(){};

        }
        else if (window.XMLHttpRequest)
        {
            this.ajaxRequest = new XMLHttpRequest();
        }

        this.ajaxRequest.onload = this._onFileLoaded.bind(this)
        this.ajaxRequest.onreadystatechange = function(e){}
        
        this.fileCount = 0;
        this.filesToLoad = [];

        this.fontsToLoad = [];
        this.pixiAssetsToLoad = [];
        this.soundsToLoad = [];
        this.customToLoad = [];

        this.onComplete = new Signal();
        this.onProgress = new Signal();

        
        
    }

    Loader.prototype.addFonts = function(fonts)
    {   
        this.fontsToLoad = this.fontsToLoad.concat(fonts);
    }

    Loader.prototype.addText = function(url, id)
    {   
        var fileData = {url:url, id:id, type:Loader.TEXT};

        this.filesToLoad.push(fileData);
    }

    Loader.prototype.addJson = function(url, id)
    {   
        var fileData = {url:url, id:id, type:Loader.JSON};
        
        this.filesToLoad.push(fileData);
    }

    Loader.prototype.addPixiAssets = function(assets)
    {   
        this.pixiAssetsToLoad = this.pixiAssetsToLoad.concat(assets);
    }

    Loader.prototype.addCSS = function(url)
    {
        var link = document.createElement("link");
        link.type = "text/css";
        link.rel = "stylesheet";
        link.href = url;
        document.getElementsByTagName("head")[0].appendChild(link);

        // var tester = document.createElement("div");
        // tester.setAttribute('id', 'test-chunkFiveRoman');
        // tester.innerHTML = 'TEST';
        // document.body.appendChild(tester);
    }
    
    Loader.prototype.addCustom = function(customObject)
    {   
        var fileData = {object:customObject, type:Loader.CUSTOM};

        this.filesToLoad.push(fileData);
    }

    Loader.prototype.load = function()
    {  
        this._loadFonts();
    }


    /*
    
        PRIVATE...

     */
    Loader.prototype._loadFiles = function()
    {
        this.fileCount = 0;
        
        if(this.filesToLoad.length)
        {
            this._loadNextFile();
        }
        else
        {
            this._loadPixiAssets();
        }
    }
    
    Loader.prototype._loadNextFile = function()
    {
        var fileData = this.filesToLoad[this.fileCount];
        console.log("LOADING " + fileData);

        if(fileData.type === Loader.CUSTOM)
        {
            fileData.object.onLoaded.addOnce(this._onFileLoaded, this);
            fileData.object.load();
        }
        else
        {
            this.ajaxRequest.open('GET',fileData.url,true);
            this.ajaxRequest.send();
        }
    }

    Loader.prototype._onFileLoaded = function()
    {
        var fileData = this.filesToLoad[this.fileCount];

        if(fileData.type === Loader.CUSTOM)
        {
            // done!
        }
        else
        {
            if(this.ajaxRequest.status !== 200)
            {
                console.warn("Fido.Loader: " + fileData.url + " not found")
                
            }
            else
            {
                switch(fileData.type)
                {
                    case Loader.TEXT:
                        
                        var text = this.ajaxRequest.responseText;
                        Cache.addText( text, fileData.id );
                        
                        break;

                    case Loader.JSON:

                   //     console.log(this.ajaxRequest.responseText);
                        var jsonObject = JSON.parse( this.ajaxRequest.responseText );
                        Cache.addJson( jsonObject, fileData.id );
                    
                        break;
                }
            }
        }

        this.fileCount++;
        this._onProgress();

        if(this.fileCount === this.filesToLoad.length)
        {
            // complete!
            this._loadPixiAssets();
        }
        else
        {
            this._loadNextFile();
        }

    }

    Loader.prototype._loadPixiAssets = function()
    {
        if(this.pixiAssetsToLoad.length === 0)
        {
            this._onComplete();
            return;
        }
        
        this.pixiAssetLoader = new PIXI.AssetLoader(this.pixiAssetsToLoad, false);
        this.pixiAssetLoader.onComplete = this._onComplete.bind(this);
        this.pixiAssetLoader.onProgress = this._onProgress.bind(this);
        this.pixiAssetLoader.load(); 
    }

    Loader.prototype._loadFonts = function()
    {   
        console.log("LOADING FONTS" );

        if(this.fontsToLoad.length === 0)
        {
            
            return;
        }

        WebFont.load({
            
            custom: {
                families: this.fontsToLoad,
                urls: [ASSET_URL + 'css/fonts.css']
            },

            active: function() 
            {
                for (var i = 0; i < this.fontsToLoad.length; i++) 
                {
                    console.log(this.fontsToLoad[i])
                    var cheekyBox = new PIXI.Text("cheeky", {font : '32px '+this.fontsToLoad[i]});
                    cheekyBox.updateText();
                };
                //this._loadFiles();

            }.bind(this)
          });

        this._loadFiles();
    }

    Loader.prototype._onComplete = function()
    {   
        this.onComplete.dispatch();
    }

    Loader.prototype._onProgress = function()
    {
        //console.log("file : " + this.fileCount )
        var total =  this.filesToLoad.length + this.pixiAssetsToLoad.length;
        var loaded = this.fileCount;

        if(this.pixiAssetLoader)
        {
            loaded += this.pixiAssetsToLoad.length - this.pixiAssetLoader.loadCount
        }
        //(this.pixiAssetsToLoad.length - this.pixiAssetLoader.loadCount) + this.fileCount ;
      
//        var pixiPercent = (this.pixiAssetLoader.assetURLs.length - this.pixiAssetLoader.loadCount) / this.pixiAssetLoader.assetURLs.length;

        this.onProgress.dispatch(loaded  / total);
    }

    // some constants..
    Loader.TEXT = 0;
    Loader.JSON = 1;
    Loader.CUSTOM = 2;

    module.exports = Loader;

});

define('com/fido/app/transitions/AlphaTransition',['require','exports','module'],function (require, exports, module) {

AlphaTransition = function()
{
    
}

AlphaTransition.constructor = AlphaTransition;

AlphaTransition.prototype.begin = function(screenManager, currentScreen, nextScreen)
{
    this.screenManager = screenManager;

    this.currentScreen = currentScreen;
    this.nextScreen = nextScreen;

    if(this.currentScreen)
    {
        if(this.currentScreen.onHide)this.currentScreen.onHide();
        TweenLite.to(this.currentScreen, 0.4, {alpha:0, onComplete:this.onFadeout.bind(this)})
    }
    else
    {
        this.onFadeout();
    }
}

AlphaTransition.prototype.onFadeout = function()
{
    if(this.currentScreen)
    {
        if(this.currentScreen.onHidden)this.currentScreen.onHidden();
        this.screenManager.container.removeChild(this.currentScreen);
        this.currentScreen.alpha = 1;
    }
    
    this.nextScreen.alpha = 0;

    if(this.nextScreen.onShow)this.nextScreen.onShow();
    if(this.nextScreen.resize)this.nextScreen.resize(this.screenManager.w, this.screenManager.h);

    TweenLite.to(this.nextScreen, 0.4, {alpha:1, onComplete:this.onFadein.bind(this)});

    this.screenManager.container.addChild(this.nextScreen);
}

AlphaTransition.prototype.onFadein = function()
{   
    if(this.nextScreen.onShown)this.nextScreen.onShown();
    this.screenManager.onTransitionComplete();
}

AlphaTransition.prototype.resize = function(w, h)
{
    this.w = w;
    this.h = h;
}

module.exports = AlphaTransition;


});

define('com/fido/app/AssetManager',['require','exports','module','PIXI','signals'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Signal          = require("signals");

    var AssetManager = function()
    {
        this.groupHash = {};
        this.onAssetsLoaded = new Signal();
        this.onAssetsLoadBegin = new Signal();
        this.displayLoader = true;

        this.loadCount = 0;
    }



    AssetManager.prototype.registerGroup = function(id, assets)
    {
        var group = {
            assets:assets,
            id:id,
            loaded:false
        }

        this.groupHash[id] = group;

        
    }

    AssetManager.prototype.activateGroups = function(groupIds)
    {
        // make sure all the groups are load..
        // unload all the nont groups
        
        var toLoad = [];

        for (var i = 0; i < groupIds.length; i++) {
            
            var group = this.groupHash[ groupIds[i] ];
            if(group && !group.loaded)
            {
                toLoad.push(group);
            }
            else
            {
                toLoad.push(group); // I added that, crossing my finger (Clément)
                console.log( "WARNING: group " + groupIds[i] + " does not exist" );
            }
        };

        var assetsToLoad = [];

        for (var i = 0; i < toLoad.length; i++) {
            
            var group = toLoad[i];
            group.loaded = true;
            assetsToLoad = assetsToLoad.concat(group.assets); 

        };

        if(assetsToLoad.length === 0)
        {
            // nothing to load!
            // 
            this.onAssetsLoaded.dispatch();
            return
        }

        var loader = new PIXI.AssetLoader(assetsToLoad, false);


        loader.onComplete = this._onComplete.bind(this);
        loader.onProgress = this._onProgress.bind(this);

        if(this.displayLoader)
        {
            this.onAssetsLoadBegin.dispatch();
        }

        loader.load();
    }

    AssetManager.prototype.doesGroupExist = function(id)
    {
        return !!this.groupHash[id]
    }

    // remove and unload assets from the cache
    AssetManager.prototype.unloadGroup = function(id)
    {
    }

    // remove and unload assets from the cache
    AssetManager.prototype.unloadGroup = function(id)
    {
    }

    // remove assets from the GPU.
    AssetManager.prototype.freeGroup = function(id)
    {
    }

    // private
    
    AssetManager.prototype._onProgress = function(data)
    {
    }

    AssetManager.prototype._onComplete = function(data)
    {
        // all loaded! now lets collect the textures
        this.onAssetsLoaded.dispatch();    
    }

    module.exports = new AssetManager();

});
define('com/fido/app/ScreenManager',['require','exports','module','PIXI','./transitions/AlphaTransition','com/fido/app/AssetManager','signals'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var AlphaTransition = require("./transitions/AlphaTransition");
    var AssetManager    = require('com/fido/app/AssetManager');
    var Signal          = require('signals');

    ScreenManager = function(container, width, height)
    {
        this.container = container || new PIXI.DisplayObjectContainer();
        
        this.onSegmentChange = new Signal();
        this.screens = {};
        this.currentScreen;
        this.fading = false;
        
        this.w = width || 400;
        this.h = height || 400;
        
        this.history = [];

        this.defaultTransition = new AlphaTransition();
        
        this.transition = this.defaultTransition;
        this.active = false;
        this.nextId = null;
    }

    ScreenManager.constructor = ScreenManager;

    ScreenManager.prototype.gotoScreenByID = function(id, instant, toItself)
    {
        var screen = this.screens[id];
        if( !screen ){
            throw new Error( 'screen not found with id : ', id );
        }else{

            this.gotoScreen( screen, instant, toItself);
        }
    };


    ScreenManager.prototype.addScreen = function(screen, id)
    {
        this.screens[id] =  screen;
        screen._firstRun = true;
        screen._screenID = id;
        screen.screenManager = this;
    }

    ScreenManager.prototype.goBack = function()
    {
        this.history.pop();
        var prev = this.history.pop();

        if(prev)
        {
            this.gotoScreen(prev);   
        }    
    }

    ScreenManager.prototype.getScreenId = function( screen )
    {
        for( var key in this.screens )
        {
            if( this.screens[ key] === screen )
            {
                return key;
            }
        }

        return null;
    }

    ScreenManager.prototype.gotoScreen = function(screen, instant, toItself)
    {
        if(this.currentScreen === screen && !toItself) return;
       

        this.onSegmentChange.dispatch();
        
        this.history.push(screen);
        this.nextScreen = screen;
        
        if(this.active) return;
        this.active = true;

        this.loadingAssets = false;
        this.fadedOut = true;

        this.transition = screen.transition || this.defaultTransition;
        if(this.transition.onResize) this.transition.onResize(this.w, this.h);

        var current = this.currentScreen;

        this.currentScreen = screen;

        if(screen._firstRun)
        {
            screen._firstRun = false;
            
            // load assets first??
            if(screen.requiredAssets)
            {
                this.loadingAssets = true;
                this.fadedOut = false;
                this._nextScreen = screen;
                AssetManager.onAssetsLoaded.addOnce(this.onAssetsLoaded, this);
                AssetManager.activateGroups(screen.requiredAssets);



            }
            else
            {
                if(screen.init)screen.init();
                if(this.nextScreen)if(this.nextScreen.resize)this.nextScreen.resize(this.w, this.h);
            }
        }
        

        if(this.transition.pauseForLoad)
        {
            this.fadedOut = false;
            this.transition.onHidden = this.onTransitionFadedOut.bind(this);
        }

        this.transition.begin(this, current, this.nextScreen);     
        
    }

    ScreenManager.prototype.onTransitionFadedOut = function()
    {
        this.fadedOut = true;

        if(!this.loadingAssets)
        {
            var screen = this._nextScreen;
            if(screen.init)screen.init();
            this.transition.fadeIn();
        }
    }


    ScreenManager.prototype.onAssetsLoaded = function(screen, id)
    {     
        this.loadingAssets = false;
        
        if(this.fadedOut)
        {
            var screen = this._nextScreen;
            if(screen.init)screen.init();
            this.transition.fadeIn();
        }
    }

    ScreenManager.prototype.onTransitionComplete = function()
    {
        this.active = false;
        if(this.currentScreen != this.nextScreen)
        {
            this.gotoScreen(this.nextScreen);
        }
    }

    ScreenManager.prototype.resize = function(w, h)
    {
        this.w = w;
        this.h = h;

        if(this.transition.onResize)this.transition.onResize(w, h);
        if(this.currentScreen)if(this.currentScreen.resize)this.currentScreen.resize(w, h);
    }

    module.exports = ScreenManager;

});
define('com/fido/system/Ticker',['require','exports','module','signals'],function (require, exports, module) {


var Signal = require('signals');

var Ticker = function()
{
    this.onUpdate = new Signal();
    
    this.updateBind = this.update.bind(this);

    this.active = false;

    // 

    this.deltaTime = 1;
    this.timeElapsed = 0;
    this.lastTime = 0;  

    this.speed = 1;
}

Ticker.prototype.start = function()
{
    if(this.active)return;

    this.active = true;
    requestAnimationFrame(this.updateBind);
}


Ticker.prototype.stop = function()
{
    if(!this.active)return;
    this.active = false;
}

Ticker.prototype.update = function()
{
    if(this.active)
    {
        requestAnimationFrame(this.updateBind);

        var currentTime =  new Date().getTime();
        this.timeElapsed = currentTime - this.lastTime;
    
        // cap the time!
        if(this.timeElapsed > 100)this.timeElapsed = 100;
        this.deltaTime = (this.timeElapsed * 0.06);

        this.deltaTime *= this.speed;// * 3;
        
       // console.log(this.deltaTime)
        // 60 ---> 1
        // 30 ---> 2

        this.onUpdate.dispatch(this.deltaTime);

        this.lastTime = currentTime;
    }
    
}

Ticker.prototype.add = function(listener, scope)
{
    this.onUpdate.add(listener, scope);
}

Ticker.prototype.remove = function(listener, scope)
{
    this.onUpdate.remove(listener, scope);
}

Ticker.instance = new Ticker();

module.exports = Ticker;

});

define('com/fido/system/Device',['require','exports','module'],function (require, exports, module) {var Fido = Fido || {};

Device = function()
{
    this.arora = false;
    this.chrome = false;
    this.epiphany = false;
    this.firefox = false;
    this.mobileSafari = false;
    /**
    * @property {boolean} ie - Set to true if running in Internet Explorer.
    * @default
    */
    this.ie = false;

    /**
    * @property {number} ieVersion - If running in Internet Explorer this will contain the major version number. Beyond IE10 you should use Device.trident and Device.tridentVersion.
    * @default
    */
    this.ieVersion = 0;

    /**
    * @property {boolean} trident - Set to true if running a Trident version of Internet Explorer (IE11+)
    * @default
    */
    this.trident = false;

    /**
    * @property {number} tridentVersion - If running in Internet Explorer 11 this will contain the major version number. See http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
    * @default
    */
    this.tridentVersion = 0;
    this.midori = false;
    this.opera = false;
    this.safari = false;
    this.webApp = false;
    this.cocoonJS = false;
    this.android = false;
    this.chromeOS = false;
    this.iOS = false;
    this.linux = false;
    this.macOS = false;
    this.windows = false;
    this.desktop = false;
    this.pixelRatio = 0;
    this.iPhone = false;
    this.iPhone4 = false;
    this.iPad = false;
    this.blob = false;
    this.canvas = false;
    this.localStorage = false;
    this.file = false;
    this.fileSystem = false;
    this.webGL = false;
    this.worker = false;
    this.audioData = false;
    this.webAudio = false;
    this.ogg = false;
    this.opus = false;
    this.mp3 = false;
    this.wav = false;
    this.m4a = false;
    this.webm = false;
    this.blendModeFriendly = false;

    /**
    * @property {boolean} fullscreen - Does the browser support the Full Screen API?
    * @default
    */
    this.fullscreen = false;

    /**
    * @property {string} requestFullscreen - If the browser supports the Full Screen API this holds the call you need to use to activate it.
    */
    this.requestFullscreen = '';

    /**
    * @property {string} cancelFullscreen - If the browser supports the Full Screen API this holds the call you need to use to cancel it.
    */
    this.cancelFullscreen = '';

    /**
    * @property {boolean} fullscreenKeyboard - Does the browser support access to the Keyboard during Full Screen mode?
    */
    this.fullscreenKeyboard = false;
    
    var ua = navigator.userAgent;
    
    this._checkBrowser(ua);
    this._checkOS(ua);
    this._checkDevice(ua);
    this._checkAudio();
    this._checkFeatures();
    this._checkIsMobile();
    this._checkFullScreenSupport();

    // For devices that are fast enough for blendmodes and particles
    this.blendModeFriendly = this.webGL || ( this.desktop && (!this.ie || this.ieVersion >= 10) );
};

Device.prototype._checkBrowser = function(ua)
{
    if (/Arora/.test(ua)) 
    {
        this.arora = true;
    } 
    else if (/Chrome/.test(ua)) 
    {
        this.chrome = true;
    } 
    else if (/Epiphany/.test(ua)) 
    {
        this.epiphany = true;
    } 
    else if (/Firefox/.test(ua)) 
    {
        this.firefox = true;
    } 
    else if (/Mobile Safari/.test(ua)) 
    {
        this.mobileSafari = true;
    } 
    else if (/MSIE (\d+\.\d+);/.test(ua) || !!navigator.userAgent.match(/Trident.*rv[ :]*11\./)) 
    {
        this.ie = true;
        this.ieVersion = parseInt(RegExp.$1, 10);
    } 
    else if (/Midori/.test(ua)) 
    {
        this.midori = true;
    } 
    else if (/Opera/.test(ua)) 
    {
        this.opera = true;
    } 
    else if (/Safari/.test(ua)) 
    {
        this.safari = true;
    }
    else if (/Trident\/(\d+\.\d+)(.*)rv:(\d+\.\d+)/.test(ua))
    {
        this.ie = true;
        this.trident = true;
        this.tridentVersion = parseInt(RegExp.$1, 10);
        this.ieVersion = parseInt(RegExp.$3, 10);
    }
        
    if (typeof window.cordova !== "undefined")
    {
        this.cordova = true;
    }

    // Native Application
    if (navigator['standalone']) 
    {
        this.webApp = true;
    }

    // CocoonJS Application
    if (navigator['isCocoonJS']) 
    {
        this.cocoonJS = true;
    }
}

Device.prototype._checkOS = function(ua) 
{
    if (/Android/.test(ua)) 
    {
        this.android = true;
    } 
    else if (/CrOS/.test(ua)) 
    {
        this.chromeOS = true;
    } 
    else if (/iP[ao]d|iPhone/i.test(ua)) 
    {
        this.iOS = true;

        this.iOS_version = parseFloat(
            ('' + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0,''])[1])
                .replace('undefined', '3_2').replace('_', '.').replace('_', '')
        ) || false;
    } 
    else if (/Linux/.test(ua)) 
    {
        this.linux = true;
    } 
    else if (/Mac OS/.test(ua)) 
    {
        this.macOS = true;
    } 
    else if (/Windows/.test(ua)) 
    {
        this.windows = true;
    }

    if (this.windows || this.macOS || this.linux) 
    {
        this.desktop = true;
    }
}

Device.prototype._checkDevice = function()
{
    this.pixelRatio = window['devicePixelRatio'] || 1;
    this.iPhone = navigator.userAgent.toLowerCase().indexOf('iphone') !== -1;
    this.iPhone4 = (this.pixelRatio === 2 && this.iPhone);
    this.iPad = navigator.userAgent.toLowerCase().indexOf('ipad') !== -1;
}

Device.prototype._checkFeatures = function()
{
    if (typeof window['Blob'] !== 'undefined') this.blob = true;

    this.canvas = !!window['CanvasRenderingContext2D'];

    try
    {
        this.localStorage = !!localStorage.getItem;
    }
    catch (error)
    {
        this.localStorage = false;
    }

    this.file = !!window['File'] && !!window['FileReader'] && !!window['FileList'] && !!window['Blob'];
    this.fileSystem = !!window['requestFileSystem'];
    this.webGL = ( function () { try {
                                    var canvas = document.createElement( 'canvas' );
                                    if( window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) )){
                                        return true;
                                    };
                                } catch( e ) {
                                    return false;
                                }
                            } )();


    if( (this.android && !this.chrome) ||  this.ie) this.webGL = false;
    
    this.worker = !!window['Worker'];

    if ('ontouchstart' in document.documentElement || window.navigator.msPointerEnabled)
    {
        this.touch = true;
    }
}

/**
    * Checks for support of the Full Screen API.
    */
Device.prototype._checkFullScreenSupport = function () {

        var fs = [
            'requestFullscreen',
            'requestFullScreen',
            'webkitRequestFullscreen',
            'webkitRequestFullScreen',
            'msRequestFullscreen',
            'msRequestFullScreen',
            'mozRequestFullScreen',
            'mozRequestFullscreen'
        ];

        var element = document.createElement('div');

        for (var i = 0; i < fs.length; i++)
        {
            if (element[fs[i]])
            {
                if(!this.cocoonJS)
                {
                    this.fullscreen = true;
                    this.requestFullscreen = fs[i];
                }
                
                break;
            }
        }

        var cfs = [
            'cancelFullScreen',
            'exitFullscreen',
            'webkitCancelFullScreen',
            'webkitExitFullscreen',
            'msCancelFullScreen',
            'msExitFullscreen',
            'mozCancelFullScreen',
            'mozExitFullscreen'
        ];

        if (this.fullscreen)
        {
            for (var i = 0; i < cfs.length; i++)
            {
                if (document[cfs[i]])
                {
                    this.cancelFullscreen = cfs[i];
                    break;
                }
            }
        }

        //  Keyboard Input?
        if (window['Element'] && Element['ALLOW_KEYBOARD_INPUT'])
        {
            this.fullscreenKeyboard = true;
        }

}

Device.prototype._checkAudio = function()
{
    this.audioData = !!(window['Audio']);
    this.webaudio = !!(window['webkitAudioContext'] || window['AudioContext']);

    var audioElement = document.createElement('audio');
    var result = false;
    try
    {
        if (result = !!audioElement.canPlayType)
        {
            if (audioElement.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''))
            {
                this.ogg = true;
            }

            if (audioElement.canPlayType('audio/mpeg;').replace(/^no$/, ''))
            {
                this.mp3 = true;
            }

            // Mimetypes accepted:
            //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
            //   bit.ly/iphoneoscodecs
            if (audioElement.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''))
            {
                this.wav = true;
            }

            if (audioElement.canPlayType('audio/x-m4a;') || audioElement.canPlayType('audio/aac;').replace(/^no$/, ''))
            {
                this.m4a = true;
            }
        }
    } 
    catch (e) { }
}

Device.prototype._checkIsMobile = function()
{
    var check = false;

    (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
    
    this.isMobile = check; 
}

Device.prototype.getInfo = function()
{
    var output = "DEVICE OUTPUT\n\n";
    
    output += "---\n";
    output += "Browser Info :: \n";
    output += "Arora : " + this.arora + "\n";
    output += "Chrome : " + this.chrome + "\n";
    output += "Epiphany : " + this.epiphany + "\n";
    output += "Firefox : " + this.firefox + "\n";
    output += "Mobile Safari : " + this.mobileSafari + "\n";
    output += "IE : " + this.ie;
    
    if(this.ie)
    {
        output += " (Version " + this.ieVersion + ")\n";
    }
    else
    {
        output += "\n";
    }
    
    output += "Midori : " + this.midori + "\n";
    output += "Opera : " + this.opera + "\n";
    output += "Safari : " + this.safari + "\n";
    output += "Web App : " + this.webApp + "\n";
    output += "CocoonJS : " + this.cocoonJS + "\n";
    output += "Android : " + this.android + "\n";
    output += "---\n";
    output += "Operating System :: \n";
    output += "Chrome OS : " + this.chromeOS + "\n";
    output += "iOS : " + this.iOS + "\n";
    output += "Linux : " + this.linux + "\n";
    output += "Mac OS : " + this.macOS + "\n";
    output += "Windows : " + this.windows + "\n";
    output += "Desktop : " + this.desktop + "\n";
    output += "---\n";
    output += "Device Type : \n";
    output += "Pixel Ratio : " + this.pixelRatio + "\n";
    output += "iPhone : " + this.iPhone + "\n";
    output += "iPhone 4 : " + this.iPhone4 + "\n";
    output += "iPad : " + this.iPad + "\n";
    output += "---\n";
    output += "Features :: \n";
    output += "Blob : " + this.blob + "\n";
    output += "Canvas : " + this.canvas + "\n";
    output += "LocalStorage : " + this.localStorage + "\n";
    output += "File : " + this.file + "\n";
    output += "File System : " + this.fileSystem + "\n";
    output += "WebGL : " + this.webGL + "\n";
    output += "Workers : " + this.worker + "\n";
    output += "---\n";
    output += "Audio :: \n";
    output += "AudioData : " + this.audioData + "\n";
    output += "WebAudio : " + this.webAudio + "\n";
    output += "Supports .ogg : " + this.ogg + "\n";
    output += "Supports Opus : " + this.opus + "\n";
    output += "Supports .mp3 : " + this.mp3 + "\n";
    output += "Supports .wav : " + this.wav + "\n";
    output += "Supports .m4a : " + this.m4a + "\n";
    output += "Supports .webm : " + this.webm;
    
    return output;
}

Device.instance = new Device();

module.exports = Device;
});

define('com/fido/utils/FrameWait',['require','exports','module'],function (require, exports, module) {


var FrameWait = function()
{
    this.updateBind = this.update.bind(this);
    this.waits = [];
}

FrameWait.prototype.wait = function(callback, count)
{
    var wait = {callback:callback, count:count || 2};
    this.waits.push(wait);

    requestAnimationFrame(this.updateBind);
}

FrameWait.prototype.update = function()
{

    for (var i = this.waits.length - 1; i >= 0; i--) 
    {
        var wait = this.waits[i];

        wait.count--;
        if(wait.count <= 0)
        {
            wait.callback();
            this.waits.splice(i, 1);
        }
    };

    if(this.waits.length > 0)requestAnimationFrame(this.updateBind);
}


module.exports = new FrameWait();

});

define('com/fido/app/LoaderScreen',['require','exports','module','PIXI','com/fido/system/Ticker','com/fido/utils/FrameWait','signals'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Ticker          = require('com/fido/system/Ticker')
    var Wait            = require("com/fido/utils/FrameWait");
    var Signal          = require("signals");

    var LoaderScreen = function(app)
    {
        PIXI.DisplayObjectContainer.call( this );
        
        this.app = app;
        
        this.easeLoad = 0;
        this.targetLoad = 0;
        
        this.onReady = new Signal();
        this.onComplete = new Signal();

        this.initLoader();
    }

    LoaderScreen.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    LoaderScreen.prototype.initLoader = function()
    {
        this.barBg = new PIXI.Graphics().beginFill(0x363b6c).drawRect(0, 0, 100, 100);

        this.bar = new PIXI.Graphics().beginFill(0xff45a4).drawRect(0, 0, 100, 100);

        this.addChild(this.barBg);
        this.barBg.addChild(this.bar);
        this.bar.y = 10;

        Ticker.instance.add(this.update, this);

        this.resize(this.w, this.h);
        Wait.wait(this.showLoader.bind(this));
    }

    LoaderScreen.prototype.showLoader = function()
    {
        // add stuff here?   
        this.onReady.dispatch();
    }

    LoaderScreen.prototype.update = function()
    {
        this.easeLoad += (this.targetLoad - this.easeLoad) * 0.3;

        if(this.easeLoad > 0.99)
        {
            this.easeLoad = 1;
            Ticker.instance.remove(this.update, this);
            this.onComplete.dispatch();
        }
        
        this.bar.scale.x = this.easeLoad;
    }

    LoaderScreen.prototype.updateProgress = function(percent)
    {
        this.targetLoad = percent;
    }

    LoaderScreen.prototype.onHide = function()
    {
        // make sure to remove tick on hide!
        Ticker.instance.remove(this.update, this);
    }

    LoaderScreen.prototype.resize = function(w, h)
    {
        this.w = w;
        this.h = h;

        if(this.barBg)
        {
            this.barBg.scale.x = w/100;
             this.barBg.y = h/2 - 100/2
        }
    }

    module.exports = LoaderScreen;

});
define('com/fido/app/OrientationManager',['require','exports','module','com/fido/system/Ticker','com/fido/system/Device','signals'],function (require, exports, module) 
{
   	var Ticker = require('com/fido/system/Ticker');
    var Device = require('com/fido/system/Device');
    var Signal = require('signals');


    OrientationManager = function(mode)
    {
    	this.mode = mode;
        
        this.onRotationChanged = new Signal();
        this.rotationWarning = true;
        this.orientation;

        this.rotateScreen = document.createElement('div');
        this.rotateScreen.style.backgroundPosition = "50% 50%";
        this.rotateScreen.style.backgroundColor = "#3b3b3b";
        this.rotateScreen.style.backgroundRepeat = "no-repeat";
        this.rotateScreen.style.position = "absolute";
        this.rotateScreen.style.top = "0";
        this.rotateScreen.style.left = "0";
        this.rotateScreen.style.bottom = "0";
        this.rotateScreen.style.right = "0";
        this.rotateScreen.style.zIndex = 10000000;
        this.rotateScreen.style.display = "none";
        this.rotateScreen.height = "100%"; 
        this.rotateScreen.width = "100%";

        this.changeRotationImage(ASSET_URL + "img/orientation_iphone.png");

        if(Device.instance.iPad)
        {
            this.changeRotationImage(ASSET_URL + "img/orientation_ipad.png");
        }

        this.apha = 0;
        this.beta = 0;
        this.gamma = 0;

        document.body.appendChild(this.rotateScreen);

        // support for firefox
        if(Device.instance.firefox)
        {
            var firefoxFallbackOrientationChange = window.matchMedia("(orientation: portrait)");
            firefoxFallbackOrientationChange.addListener(this.checkOrientationChangesFirefox.bind(this));
        }

        this.supportsOrientationChange = "onorientationchange" in window;

        if(this.supportsOrientationChange )
        {
            this.orientation = window.orientation;
            window.addEventListener("orientationchange", this.checkOrientationChanges.bind(this), false);
            // check first time
            this.checkOrientationChanges();
        }

        this.supportsOrientationEvent = "DeviceOrientationEvent" in window;
        
        if(this.supportsOrientationEvent)
        {
            window.addEventListener("deviceorientation", this.checkOrientation.bind(this), false);
        }        
    }

    OrientationManager.constructor = OrientationManager;

    OrientationManager.prototype.checkOrientationResize = function (data) {
    };

    OrientationManager.prototype.changeRotationImage = function (url) {

        this.rotateScreen.style.backgroundImage = 'url(' + url + ')';
    }

    

    // make it work for firefox
    OrientationManager.prototype.checkOrientationChangesFirefox = function()
    {
        var orientation = screen.orientation || screen.mozOrientation || screen.msOrientation;

        if(orientation === "landscape-primary")
        {
            this.orientation = 90;
        }
        else if(orientation === "landscape-secondary")
        {
            this.orientation = -90;   
        }

        this.onRotationChanged.dispatch(this.orientation);

        // this.check(window.innerWidth, window.innerHeight);
    }

    OrientationManager.prototype.checkOrientationChanges = function()
    {
        // if (this.rotationWarning)
        // {

        //     var isActive= window.orientation === 90 || window.orientation === -90;

        //     // if(this.mode === 0) isActive = !isActive;

        // //     if(!isActive)
        // //     {
        // //         Ticker.instance.stop();
        // //         this.rotateScreen.style.display = "block"
        // //     }
        // //     else
        // //     {
        // //        Ticker.instance.start();
        // //        this.rotateScreen.style.display = "none"
        // //     }
        // }
        // this.check(window.innerWidth, window.innerHeight);
        this.orientation = window.orientation;
        this.onRotationChanged.dispatch(window.orientation);
    }
    
    OrientationManager.prototype.checkOrientation = function(event)
    {
        this.alpha = event.alpha;
        this.beta = event.beta;
        this.gamma = event.gamma;
    }




    OrientationManager.prototype.check = function(w, h)
    {
        var active = this.mode === 0 ? !(w < h) : w < h;

        var ratio1 = w / 892;
        var ratio2 = h / 576;

        var ratio = Math.max(ratio1, ratio2);

        // if( this.supportsOrientationChange ) return;
/*
        if(active)
        {
            Ticker.instance.stop();
            this.rotateScreen.style.display = "block"
        }
        else
        {
           Ticker.instance.start();
           this.rotateScreen.style.display = "none"
        }
        */
    }

    module.exports = OrientationManager;

});
define('com/fido/app/App',['require','exports','module','PIXI','com/fido/loader/Loader','com/fido/app/ScreenManager','com/fido/system/Ticker','com/fido/system/Device','com/fido/app/LoaderScreen','com/fido/app/OrientationManager','signals'],function (require, exports, module) {
/**
*
*   Simple App to get a pixi stage up and running..
*
*/
var PIXI                = require("PIXI");

var Loader              = require('com/fido/loader/Loader')
var ScreenManager       = require('com/fido/app/ScreenManager')
var Ticker              = require('com/fido/system/Ticker')
var Device              = require('com/fido/system/Device');
var LoaderScreen        = require('com/fido/app/LoaderScreen');
var OrientationManager  = require('com/fido/app/OrientationManager');
var Signal              = require('signals');

var App = function(options)
{
    options = options || App.defaultOptions;

    // eventually we may want more options than none! 
    // but no point adding anything unless we know we will need it!
    this.options = {};//options;
    for (var i in App.defaultOptions) this.options[i] = options[i] || App.defaultOptions[i];

    this.setupPixi();

    // start the ticker and start rendereing!
    Ticker.instance.start();
    Ticker.instance.add(this.update, this);

    // if required set up the orientation manager that will pause and show the rotate screen if required
    if(this.options.orientationMode !== App.orientationModes.BOTH)
    {
        this.orientationManager = new OrientationManager(this.options.orientationMode);
        this.orientationManager.rotationWarning = true;
    }

    // first things first!
    // load the preloader assets...
    // then show the the loading screen
    // once the loading screen has completed showing
    // start loading the real assets
    // when all assets have loaded fire up the start up!
    // then load the ????


    this.screenManager = new ScreenManager(null, 300, 300);
    this.stage.addChild(this.screenManager.container);

    // a loader.. to load stuff!
    this.loader = new Loader();

    // some signals..
    this.onReady = new Signal();
}

/**
*
*   setup pixi..
*
*/
App.prototype.setupPixi = function()
{
    var options = this.options;

    if(options.forceCanvas || (Device.instance.android && !Device.instance.chrome) || Device.trident )
    {
        this.renderer = new PIXI.CanvasRenderer(options.width, options.height);
        this.renderer.clearBeforeRender = false;
    }
    else
    {
        this.renderer = PIXI.autoDetectRenderer(options.width, options.height);
    }

    window.WEBGL = PIXI.isWebGL = ( this.renderer instanceof PIXI.WebGLRenderer );
    window.isDesktop = Device.instance.desktop;

    this.view = this.renderer.view;
    this.view.style.position = "absolute";
    this.view.style.backgroundColor = 'black';
    this.stage = new PIXI.Stage(options.backgroundColor);

    PIXI.stage = this.stage;
}

/**
*
*   renders the pixi stage..
*
*/
App.prototype.update = function()
{
    this.renderer.render(this.stage);
}

/**
*
*   default startup..
*
*/
App.prototype.startup = function( )
{
    // preload preloader assets
    // goto a loader screen
    // load main assets
    
    // goto main screen
    this.loaderScreen = new this.options.loaderScreen(this);
    this.loaderScreen.onReady.addOnce(this.onLoaderScreenReady, this);
    this.loaderScreen.onComplete.addOnce(this.onLoaderScreenComplete, this);

    this.screenManager.addScreen(this.loaderScreen, "loader");
    this.screenManager.gotoScreenByID("loader");  

}

App.prototype.onLoaderScreenReady = function( )
{

    // loader screen is ready! time to start loading assets..
    this.loader.onComplete.addOnce(this.onAssetsLoaded, this);
    this.loader.onProgress.add(this.onProgresss, this)
    this.loader.load();
}

App.prototype.onAssetsLoaded = function( )
{
    // might want to add some extra steps here??
    //this.assetsLoaded = true;
}

App.prototype.onProgresss = function(percent)
{
    // might want to add some extra steps here??
    this.loaderScreen.updateProgress(percent);
}

/*
    We want to listen to this as it means everything should be loaded AND the loader screen animations are finished..
 */
App.prototype.onLoaderScreenComplete = function( )
{
    // time to build the site!
    this.onReady.dispatch(); 
}



/**
*
*   Resizes the pixi renderer..
*
*/
App.prototype.resize = function(w, h)
{
    // if(this.orientationManager) this.orientationManager.check(w, h);

    if(this.options.resizeMode === App.resizeModes.DEFUALT)
    {
        this.renderer.resize(w, h);
        this.view.style.width = "auto";
        this.view.style.height = "auto";
    }
    else if(this.options.resizeMode === App.resizeModes.CSS_RESIZE_PRESERVE_RATIO)
    {
        // TODO implement!
    }
    else if(this.options.resizeMode === App.resizeModes.CSS_RESIZE)
    {
        this.view.style.width = w + "px";
        this.view.style.height = h + "px";
    }
}


// 2 resize modes at the moment..
// DEFAULT - resize the actual view so that there are more pixels in the renderer
// CSS_RESIZE_PRESERVE_RATIO - maintains the ratio but resizes using css
// CSS_RESIZE - resizes the view to fit using css without preserving the ratio
App.resizeModes = {
    DEFUALT:0,
    CSS_RESIZE_PRESERVE_RATIO:1,
    CSS_RESIZE:2
}

App.orientationModes = {
    LANDSCAPE:0,
    PORTRAIT:1,
    BOTH:2
}

App.defaultOptions = {
    width:800,
    height:600,
    forceCanvas:false,
    backgroundColor:0x000000,
    resizeMode:App.resizeModes.DEFUALT,
    orientationMode:App.orientationModes.LANDSCAPE,
    loaderScreen:LoaderScreen
}



module.exports = App;

});

define('com/fido/system/VisibilityChecker',['require','exports','module','signals'],function (require, exports, module) 
{
    var Signal              = require('signals');

    var VisibilityChecker = function()
    {

        if (typeof document.hidden !== "undefined") 
        { 
            // Opera 12.10 and Firefox 18 and later support 
            this.hidden = "hidden";
            this.visibilityChange = "visibilitychange";
        } 
        else if (typeof document.mozHidden !== "undefined") 
        {
            this.hidden = "mozHidden";
            this.visibilityChange = "mozvisibilitychange";
        }
        else if (typeof document.msHidden !== "undefined") 
        {
            this.hidden = "msHidden";
            this.visibilityChange = "msvisibilitychange";
        } 
        else if (typeof document.webkitHidden !== "undefined") 
        {
            this.hidden = "webkitHidden";
            this.visibilityChange = "webkitvisibilitychange";
        }


        this.onHide = new Signal();
        this.onShow = new Signal();


        this.init();
    };

    VisibilityChecker.prototype.handleVisibilityChange = function() 
    {
        if (document[this.hidden]) 
        {
            this.onHide.dispatch();
        } 
        else 
        {
            this.onShow.dispatch();
        }
    }

    VisibilityChecker.prototype.init = function()
    {
        document.addEventListener(this.visibilityChange, this.handleVisibilityChange.bind(this), false);
        console.log("CHECKING VISIBILITY " + this.hidden + " " + this.visibilityChange)
    }


    module.exports = new VisibilityChecker();

});




define('com/fido/sound/SoundManager',['require','exports','module','signals','com/fido/system/VisibilityChecker'],function (require, exports, module) {

    
var Signal              = require('signals');
var VisibilityChecker   = require('com/fido/system/VisibilityChecker');

var SoundManager = function()
{
    this.disabled = false;
    this.preload = true;

    this.sounds = {};
    this.groups = {};
    this.globalVolume = 1;
    this.isMuted = false;

    window.onfocus = this._onFocus.bind(this);    

    this.onMuteToggle = new Signal();
}

SoundManager.prototype._onFocus = function()
{
    if(this.isMuted)
    {
        this.mute();
    }
    else
    {
        this.unmute();
    }
    
}

SoundManager.prototype.addSound = function(url, id, options)
{
    if(this.disabled || this.sounds[id]) return;
    
    options = options || {};

    var sound = new Howl({
        urls        : [url + ".mp3", url + ".ogg"],
        autoplay    : options.autoplay || false,
        loop        : options.loop || false,
        volume      : options.volume || 1
    });

    sound.realVolume = options.volume || 1;
    this.sounds[id] = sound;
}

SoundManager.prototype.addGroup = function(ids, id)
{
    if(this.disabled || this.groups[id])return;

    var group = {index:0, type:0, sounds:ids};
    this.groups[id] = group;   
}

SoundManager.prototype.play = function(id, volume)
{
    if(this.disabled)return;

    this.sounds[id].play();
}

SoundManager.prototype.fadeTo = function (id,volume,duration) {

    if (typeof duration === 'undefined') { duration = 2.5; }

    if (typeof callback === 'undefined') { callback = null; }

    if (typeof volume === 'undefined')
    {
        console.warn("fadeTo : No volume specified !!");
        return;
    }
    var sound = this.sounds[id];

    if(sound)
    {
        TweenLite.to(sound,duration, 
        { 
            _volume: volume,
            onUpdate : this.actuallyChangeVolume.bind(this),
            onComplete : this.stopAndReset.bind(this),
            onCompleteParams : [id],
            onUpdateParams : ["{self}", id]
        });
    }
}

// there is no volume property in f*cking howler,  it's a function (contrary to what the docs say);
SoundManager.prototype.actuallyChangeVolume = function (tween,sound) {

    this.setVolume(sound,tween.target._volume);

};

SoundManager.prototype.stopAndReset = function (id) {

    this.stop(id);
    
    this.setVolume(id,1);

    this.stop(id);
};

SoundManager.prototype.isPlaying = function(id)
{
    if(this.disabled)return;

    return !this.sounds[id]._audioNode[0].paused;
}

SoundManager.prototype.playGroup = function(id)
{
    if(this.disabled)return;

    var group = this.groups[id];
    var index = (Math.random() * group.sounds.length) | 0;
    this.sounds[group.sounds[index]].play();
}

SoundManager.prototype.setVolume = function(id, volume)
{
     if(this.disabled)return;

    var sound = this.sounds[id];

    sound.realVolume = volume;
    //console.log("sound: "+volume * this.globalVolume)
    sound.volume(volume * this.globalVolume);
}

SoundManager.prototype.stop = function(id)
{
    if(this.disabled)return;

    this.sounds[id].stop();
}

SoundManager.prototype.stopAll = function()
{
    if(this.disabled)return;

    for(var key in this.sounds){
        this.sounds[key].stop();
    }
}

SoundManager.prototype.setPlaybackSpeed = function(id, speed)
{
    if(this.disabled)return;

    var sound = this.sounds[id];
    sound._playbackSpeed = speed;

    //console.log(Howler);
    // need to figure out this.. but a hack for now!
    var hackId = id == "music" ? 0 : 1;


    if(sound._webAudio)
    {
        if(Howler._howls[hackId]._audioNode[0])
        {

        // alert("!")
            Howler._howls[hackId]._audioNode[0].bufferSource.playbackRate.value = speed;
           // console.log( Howler._howls[hackId]._audioNode[0].bufferSource )
        }
    }
    
}

SoundManager.prototype.getPlaybackSpeed = function(id)
{
    if(this.disabled)return;
    
    var sound = this.sounds[id];
    return sound._playbackSpeed || 1;
  //  console.log(Howler);

}


SoundManager.prototype.setGlobalVolume = function(volume)
{
    this.globalVolume = volume;

    for(var i in this.sounds)
    {
        var sound = this.sounds[i];
        sound.volume( sound.realVolume * volume );
    };
}

SoundManager.prototype.mute = function()
{
   this.isMuted = true; 
   Howler.mute();
   this.onMuteToggle.dispatch(true);
}

SoundManager.prototype.unmute = function()
{
    this.isMuted = false;
    Howler.unmute();
    this.onMuteToggle.dispatch(false);
}

SoundManager.prototype.check = function()
{
    this.lastSeen = Date.now();


    var loop = function (){
        lastSeen = Date.now();
        setTimeout(loop, 50);
    };
    loop();

    var music = document.getElementById('music');
    music.addEventListener('timeupdate', function (){
        if(Date.now() - exports.lastSeen > 100){
            this.pause();
        }
    }, false);
}

SoundManager.sfx = new SoundManager();
SoundManager.music = new SoundManager();

// disable sound by default if there is no web audio api..
SoundManager.sfx.disabled = !Howler.usingWebAudio;

VisibilityChecker.onHide.add(Howler.mute, Howler);
VisibilityChecker.onShow.add(Howler.unmute, Howler);

// SoundManager.sfx.disabled = SoundManager.music.disabled = true;

module.exports = SoundManager;

});

define('com/fido/utils/Utils',['require','exports','module','PIXI'],function (require, exports, module) 
{
    var PIXI = require("PIXI");
    var Utils = {};

    /*Object.defineProperty(Object.prototype, "extend", {
        enumerable: false,
        value: function(from) 
        {
            var props = Object.getOwnPropertyNames(from);
            var dest = this;
            props.forEach(function(name) 
            {
                if (name in dest) 
                {
                    var destination = Object.getOwnPropertyDescriptor(from, name);
                    Object.defineProperty(dest, name, destination);
                }
            });
            return this;
        }
    });*/

    Utils.arrayEquals = function (array1,array2) {

        var everyFunc = function(element, index) {
            return element === array2[index]; 
        }

        return array1.length == array2.length && array1.every(everyFunc);
    },

    Utils.stringArrayEquals = function (array1,array2) {

        return array1.sort().join(',') === array2.sort().join(',')
    },


    Utils.defaults = function(options, defaults){
        options = options || {};
        for(var key in defaults){
            if(!(key in options)){
                options[key] = defaults[key];
            }
        }
        return options;
    };

    Utils.getTexturesFromFrames = function(ids)
    {
       var textures = [];

        for (var i = 0; i < ids.length; i++) 
        {
            textures.push(new PIXI.Texture.fromFrame(ids[i]));
        }

        return textures;
    }

    Utils.getTexturesFromImages = function(ids)
    {
        var textures = [];

        for (var i = 0; i < ids.length; i++) 
        {
            textures.push(new PIXI.Texture.fromImage(ids[i]));
        }

        return textures;
    }

    Utils.getTexturesFromFramesWithPrefix = function(prefix, total, start)
    {
       var textures = [];
       if(start ==undefined)start = 0;

        for (var i = 0; i < total; i++) 
        {
            var num = i+start;
            var path = prefix.replace("%%", num < 10 ? "0" + num : num);
            textures.push(new PIXI.Texture.fromFrame(path));
        }

        return textures;
    }

    Utils.formatScore = function(n)
    {
        var nArray = n.toString().split("");
        var text = "";
        var total = nArray.length;
        
        var offset = (total % 3)-1;
        for(var i = 0; i < total; i++)
        {
            text += nArray[i];
            if((i - offset) % 3 == 0 && i != total-1) text += ","; 
        }
        
        return text;
    }

    Utils.formatName = function(n)
    {
        var words = n.split(" ");
        for (var i = words.length - 1; i >= 0; i--) {
            if( words[i].length === 0)continue;

            wordArray = words[i].split("");
            wordArray[0] = wordArray[0].toUpperCase();
            console.log(wordArray[0])
            words[i] = wordArray.join("");
        };

        word = words.join(" ");

        return word;
    }

    if(!window.console) 
    {
        window.console = 
        {
            log : function(stuff)
            {

            }
        }
    }

    Utils.get_query = function(index)
    {
        var url = location.href;
        var qs = url.substring(url.indexOf('?') + 1).split('&');

        for(var i = 0, result = {}; i < qs.length; i++)
        {
            qs[i] = qs[i].split('=');
            result[qs[i][0]] = decodeURIComponent(qs[i][1]);
        }

        return result.hasOwnProperty(index) ? result[index] : false;
    }

    /**
    * A standard Fisher-Yates Array shuffle implementation which modifies the array in place.
    *
    * @method Utils.shuffle
    * @param {Array} array - The array to shuffle.
    * @return {Array} The original array, now shuffled.
    */
    Utils.shuffle = function (array) {

        for (var i = array.length - 1; i > 0; i--)
        {
            var j = Math.floor(Math.random() * (i + 1));
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }

        return array;

    }

    module.exports = Utils;

});
define('com/fido/Flash',['require','exports','module','PIXI'],function (require, exports, module) {
/**
*   Flashing Graphic object
*
*/

var PIXI = require("PIXI");

var Flash = function(w, h)
{
    PIXI.Graphics.call( this );

    this.beginFill(0xFFFFFF).drawRect(0, 0, 100, 100);  
    this.resize(w, h);

    this.alpha = 0;

    return this;
}


Flash.prototype = Object.create( PIXI.Graphics.prototype );

Flash.prototype.flash = function(hold, out)
{
    this.alpha = 1;
    TweenLite.to(this, out || 0.5, {alpha:0, delay:hold || 0, ease:Expo.easeOut})
}

Flash.prototype.resize = function(w, h)
{
    this.scale.x = w/100;
    this.scale.y = w/100;
}

module.exports = Flash;
});

define('com/fido/Fade',['require','exports','module','PIXI','signals'],function (require, exports, module) {
/**
*   Black version of the flash 
*
*/

var PIXI    = require("PIXI");
var Signal = require("signals");

var Fade = function(w, h, colour)
{
    PIXI.Graphics.call( this );

    colour = colour || 0x000000;

    this.beginFill(colour).drawRect(0, 0, 100, 100);  
    this.resize(w, h);

    this.alpha = 0;

    this.onFadeIn = new Signal();

    return this;
}


Fade.prototype = Object.create( PIXI.Graphics.prototype );

Fade.prototype.fade = function(fadein,hold,out,colour)
{	
	if(colour)
	{
		this.clear();
		this.beginFill(colour);
		this.drawRect(0, 0, 100, 100);
	}


    TweenLite.to(this, fadein || 0.5, {alpha:1, ease:Ease.easeIn,onComplete : this.onFadeIn.dispatch.bind(this)});


    TweenLite.to(this, out || 1.0, {alpha:0, delay: hold || 0, ease:Ease.easeOut});
    
}

Fade.prototype.resize = function(w, h)
{
    this.scale.x = w;
    this.scale.y = w;
}

module.exports = Fade;
});

define('com/fido/utils/Debug',['require','exports','module','PIXI'],function (require, exports, module) {

var PIXI  = require("PIXI");

var DebugGraphics = function()
{
    PIXI.DisplayObjectContainer.call(this);

    this.graphics = new PIXI.Graphics();

    this.addChild(this.graphics);

    this.colour = 0xff0000;

    return this;
}

DebugGraphics.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);

DebugGraphics.prototype.constructor = DebugGraphics;

DebugGraphics.prototype.line = function(x1,y1,x2,y2)
{
    this.graphics.lineStyle(2,0x000000,0.6);

    this.graphics.moveTo(x1,y1);
    this.graphics.lineTo(x2,y2);
}

DebugGraphics.prototype.circle = function(x,y,radius)
{
    radius = radius || 32;

    this.graphics.beginFill(this.colour,0.4);

    this.graphics.drawCircle(x,y,radius);

    this.graphics.endFill();
}

DebugGraphics.prototype.rect = function (x,y,w,h) {

    w = w || 40;
    h = h || 50;

    this.graphics.beginFill(this.colour,0.4);

    this.graphics.drawRect(0,0,w,h);

    this.graphics.endFill();
}

DebugGraphics.prototype.spriteBounds = function (sprite) {

    var bounds = sprite.getBounds();

    this.rect(bounds.x + sprite.parent.x,bounds.y + sprite.parent.y,bounds.width,bounds.height);
}

DebugGraphics.prototype.clear = function () {
    this.reset();
}


DebugGraphics.prototype.reset = function()
{

    this.graphics.clear();
    
}

module.exports = DebugGraphics;

});

define('com/sc/games/shared/particles/ParticleBridge',['require','exports','module'],function (require, exports, module) 
{
	var ParticleBridge = function()
	{	
		this.game = false;
	};

	ParticleBridge.prototype.setGame = function(game)
	{
		this.game = game;
	};

	ParticleBridge.prototype.fire = function(options) 
	{
		this.game.particleManager.addParticle(options.x, options.y, options.type);
	};

	module.exports = ParticleBridge;

	ParticleBridge.instance = new ParticleBridge();
	
});
define('com/sc/games/shared/Hud',['require','exports','module','PIXI','signals','../shared/particles/ParticleBridge','com/fido/sound/SoundManager','com/fido/system/Device'],function (require,exports,module) {

    var PIXI            = require("PIXI");
    var Signal          = require('signals');
    var ParticleBridge  = require('../shared/particles/ParticleBridge');
    var SoundManager    = require('com/fido/sound/SoundManager');
    var Device          = require('com/fido/system/Device');


    var Hud = function(maxRounds)
    {

        PIXI.DisplayObjectContainer.call(this);

        this.empties = [];
        this.fills = [];
        this.onFinished = new Signal();
        this.currentIndex = 0;

        var x = 50;

        for (var i = 0; i < 6; i++) {

            // empty tick
            var empty = new PIXI.Sprite.fromFrame("tick_slot.png");
            empty.anchor.set(.5);
            empty.alpha = 0;
            empty.position = new PIXI.Point(x + 20,  585);

            // fill tick
            var fill = new PIXI.Sprite.fromFrame("bigTick.png");
            fill.anchor.set(.5);
            fill.alpha = 0;
            fill.position.set(1136 * 0.5, 640 * 0.5);

            x += empty.width;
            empty.scale.set(0);
            fill.scale.set(3);

            this.addChild(empty);
            this.addChild(fill);

            this.empties.push(empty);
            this.fills.push(fill);

        };

    };

    Hud.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);

    Hud.prototype.constructor = Hud;

    Hud.prototype.start = function ()
    {

        this.visible = true;
        for (var i = 0; i < 6; i++) {

            var empty = this.empties[i];
            var fill = this.fills[i];

            empty.scale.set(0);
            empty.alpha = 0;

            fill.scale.set(3);
            fill.alpha = 0;
            fill.position.set(1136 * 0.5, 640 * 0.5);

            TweenLite.to(this.empties[i].scale, .8, 
            {
                x: 1,
                y: 1,
                ease: Back.easeOut,
                delay: i*.2
            });

            TweenLite.to(this.empties[i], .5, 
            {
                alpha: 1,
                ease: Ease.easeOut,
                delay: i*.2 + .2
            });

        };

    }

    Hud.prototype.check = function () {

        if(this.currentIndex === 6)
        {
            //console.log("finish");
            this.onFinished.dispatch();
        }

    }

    Hud.prototype.reset = function () {

        this.currentIndex = 0;

    }

    Hud.prototype.updateLives = function () {

        var life = this.fills[this.currentIndex];
        var empty = this.empties[this.currentIndex];

        life.alpha = 1;
        life.scale.set(1);

        SoundManager.sfx.play('tick');

        var options = {
            x : life.x,
            y : life.y,
            type : 0
        }

        if(!(Device.instance.iPad && !window.WEBGL))
        {
            ParticleBridge.instance.fire(options);
        }

        TweenLite.to(life.scale, .5, 
        {
            x: 1,
            y: 1,
            ease: Back.easeOut,
            
            onComplete : function () {

                TweenLite.to(life.scale, 1.4, 
                {
                    x: 1/3,
                    y: 1/3,
                    delay : 0.5,
                    ease: Back.easeOut
                });

                TweenLite.to(life, 1.4, 
                {
                    x : empty.x,
                    y : empty.y,
                    delay : 0.2,
                    ease: Expo.easeInOut,
                    onComplete : this.check.bind(this)
                });
            }.bind(this)
        });

        this.currentIndex++;
    }

    module.exports = Hud;
});
define('libs/gameConfig/gameTracking',['require','exports','module'],function (require, exports, module) {

    var gamenametitle = 'disney_spl_arc_sheriffcallie';
    document.title = "Sheriff Callie : Deputy for a Day";

    var gn = gamenametitle.split("_");

    var ctoAssetTypeCode = 'gam';
    var ctoGameEvent = 'load';
    var ctoGameBuCode = 'xd';
    var ctoGameSeriesCode = gn[0];
    var ctoGameOwnerName = 'dol';
    var ctoGameTypeCode = gn[1];
    var ctoGameGenreCode = gn[2];
    var ctoGameName = gn[3];
    var ctoAssetId = '4f5fda27d73f1f0488fb628c';

    var playdom_app = "qa_gamesportal";
    var playdom_network = "bd";
    var playdom_view_network = "bd";
    var playdom_app_locale = "en_US";

    /*
    function gameStart() {
    	SwitEntryPoint.start();
    }
    */

    window.trackGameEvent = function(Event)
    {
    		var data = {
    			assetTypeCode: ctoAssetTypeCode,
    			gameEvent: "omni:"+Event,
    			gameBuCode: ctoGameBuCode,
    			gameSeriesCode: ctoGameSeriesCode,
    			gameOwnerName: ctoGameOwnerName,
    			gameTypeCode: ctoGameTypeCode,
    			gameGenreCode: ctoGameGenreCode,
    			gameName: ctoGameName,
    			assetId: ctoAssetId,
    			gameTime: new Date().getTime(),
    			gameSessionId: ctoGameSessionId
    		}
    		cto.trackGame(data);
    }


    /**
    *   @param action string - this is the game action that is taking place, ie - start, end, character select, 
                level start/finish, anything we want to track during the game.
        @since Sept 29, 2014
        @author Greg Burks
        
        For in game tracking, tag and context are always constants.  tag = 'game_action' and context = the game name.  
    */

    window.DIBIGameTracking = function (vars){
        // set tag and context automatically
        var vars = {"tag":"game_action", "context":gamenametitle, "action":vars.action, "message":vars.message };        
        window.DIBITracking(vars);


    }

    window.playdomTracking = function(vars) { window.DIBITracking(vars); }

    window.DIBITracking = function(vars){

        // changed format of tracking call, had to add an argument at the beginning.  If its null we need to assume its game_action.
        var eventInfo =  vars;

        var data = {
    		app:playdom_app,
    		tag:eventInfo.tag,
    		app_locale:playdom_app_locale,
    		network:playdom_network,
    		view_network:playdom_view_network,
    		user_id:1
    	};
        
        var user_info = navigator.userAgent;

    	var browser_id=getCookie("browser_id");
    	if (browser_id=="") {
    		browser_id = 'xxxxxxxx-xxxx-7xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8); return v.toString(16); });
    		setCookie("browser_id", browser_id,365)
    	}

    	var transaction_id=getCookie("transaction_id");
    	if (transaction_id=="") {
    		transaction_id = 'xxxxxxxx-xxxx-8xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8); return v.toString(16); });
    		setCookie("transaction_id", transaction_id)
    	}
        // all events need these vars
        var allEventVars;
        // specific vars for each event
        var trackingVars;
        

        allEventVars = "app="+data.app+
            "&network="+data.network+
            "&view_network="+data.view_network+
            "&user_id="+browser_id+
            "&transaction_id="+transaction_id+
            "&app_locale="+data.app_locale+
            "&browser_id="+browser_id;

        
        // which type of event is this?
        switch(data.tag){
                case "clicked_link":
                    var newUser = (document.cookie.indexOf(gamenametitle) > 0)? 0 : 1;
                    
                    trackingVars = 
                        "&tracking_code=unknown"+
                        "&is_new_user="+newUser+
                        "&referrer_url="+encodeURI(data.referrer)+
                        "&tag="+data.tag+
                        "&context="+data.event_description+ 
                        "&app_locale="+data.app_locale+
                        "&online=y&timeLogged="+Date.now();
                    break;
                case "user_info":
                    trackingVars = 
                        "&device_type="+user_info+
                        "&model="+user_info+
                        "&os_version="+user_info;
                    break;
                case "pageview":
                    trackingVars = 
                        "&pageview="+String(window.location).substring(String(window.location).indexOf("//")+2, String(window.location).lastIndexOf("/"));
                    break;
                case "game_action":
                    trackingVars = 
                        "&tag=game_action"+
                        "&context="+gamenametitle+
                        "&action="+eventInfo.action;
    				if(eventInfo.message != undefined)	trackingVars += "&message="+eventInfo.message;
                        
                    break;
                case "geo":
        }
        
        // before sending tracking we will set any cookie info we need to
        document.cookie = gamenametitle + "=true";

    	var trackingHash = "#";
        trackingHash += trackingVars + "&" + allEventVars;
        
        var i = new Image();
        i.src = trackingHash;
        
        
    /* =============== OLDER CODE =================== //
    	xmlhttp = new XMLHttpRequest();
    	xmlhttp.open("POST",trackingHash,true);
    	xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
    xmlhttp.send("app="+data.app+"&"+data.tag+"="+data.description&app_locale="+data.app_locale+"&network="+data.network+"&view_network="+data.view_network+"&user_id="+browser_id+"&transaction_id="+transaction_id);
    */
        
    }


    function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays*24*60*60*1000));
        var expires = "expires="+d.toGMTString();
    	if(exdays == undefined) { exdays = ""; }
        document.cookie = cname + "=" + cvalue + "; " + exdays
    }

    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for(var i=0; i<ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1);
            if (c.indexOf(name) != -1) return c.substring(name.length,c.length);
        }
        return "";
    }
        

    if(typeof console === "undefined") {
        console = {
            log: function() { },
            debug: function() { }
        };
    }

    var Tracker = {

        trackAction : function (action, message) {

            var vars = {
                message:message || "",
                action:action,
            };

            window.DIBIGameTracking(vars);
        },

        trackDevice : function () {
            
        },

        trackClick : function () {
            
        }


    }

    module.exports = Tracker;
});
define('com/fido/game/GameObjectPool',['require','exports','module'],function (require, exports, module) {/**
 * @author Mat Groves
 */


GameObjectPool = function(classType)
{
	this.classType = classType;
	this.pool = [];
}

// constructor
GameObjectPool.constructor = GameObjectPool;

GameObjectPool.prototype.getObject = function()
{
	var object = this.pool.pop();
	if(!object)
	{
		object = new this.classType();
	}
	return object;
}

GameObjectPool.prototype.returnObject = function(object)
{
	this.pool.push(object);
}

GameObjectPool.pools = [];
GameObjectPool.idGenerator = 1;

GameObjectPool.getObject = function(classType)
{
   // console.log("Getting object")
    if(!classType._CLASS_ID)
    {
        classType._CLASS_ID = GameObjectPool.idGenerator++;
        GameObjectPool.pools[classType._CLASS_ID] = new GameObjectPool(classType);
    }

    var object = GameObjectPool.pools[classType._CLASS_ID].getObject();
    object._CLASS_ID = classType._CLASS_ID;
    return object;
}

GameObjectPool.returnObject = function(object)
{
//    console.log("Returning object")
  //  console.log(GameObjectPool.pools);
    GameObjectPool.pools[object._CLASS_ID].returnObject(object);
}

module.exports = GameObjectPool;

});

define('com/sc/games/shared/particles/LoaderParticles',['require','exports','module','com/fido/game/GameObjectPool'],function (require, exports, module) 
{
	var GameObjectPool = require('com/fido/game/GameObjectPool');

	var LoaderParticles = function(view)
	{
		this.view = view;

		this.pools = [];
		this.activeParticles = [];
	}

	LoaderParticles.prototype = {

		setView : function(view)
		{
			this.view = view;
		},

		registerParticle : function(ParticleClass, id)
		{
			ParticleClass.prototype._particleId = id;
			this.pools[id] = new GameObjectPool(ParticleClass);
		},

		addParticle : function(x, y, id)
		{
			// Optimised non leaking of arguments
			var particle = this.pools[id].getObject();

			if(arguments.length > 3)
			{	
				var args = new Array(arguments.length);
				args[0] = x;
				args[1] = y;

			    for(var i = 3; i < args.length; ++i) 
			    {
			        args[i-1] = arguments[i];
			    }

			    particle.activate.apply(particle, args);
			}
			else
			{
				particle.activate(x,y);
			}

			this.view.addChild(particle);
			this.activeParticles.push(particle);
		},

		update : function()
		{
			for (var i = 0; i < this.activeParticles.length; i++) 
			{	
				var particle = this.activeParticles[i];
				particle.update();

				if(particle.isDead)
				{
					this.activeParticles.splice(i, 1);
					i--;

					this.view.removeChild(particle);
					this.pools[particle._particleId].returnObject(particle); 
				}
			};
		}

	}

	module.exports = LoaderParticles;

});
define('com/fido/utils/Math2',['require','exports','module'],function (require, exports, module) 
{
    var Math2 = {};

    Math2.random = function(from, to)
    {
       from = from || 0;
       to = to === undefined ? 1 : to;

       return from + Math.random() * (to-from);
    }

    Math2.randomInt = function(from, to)
    {

       return (from + Math.random() * (to-from)) | 0;
    }
   
    // in order to work 'Math2.seed' must NOT be undefined,
    // so in any case, you HAVE to provide a Math.seed
    // @Tom are you sure this still applies ?
    Math2.randomSeed = function(from, to, seed) 
    {
        min = from;
        max = to;
        seed = seed || 1;

        seed = (seed * 9301 + 49297) % 233280;
        var rnd = seed / 233280;
     
        return min + rnd * (max - min);
    }

    Math2.randomChance = function(chance, seed) 
    {
      return Math2.randomSeed(0, 1, seed) > chance;
    }

    Math2.sign = function (x)
    {
        if(Math.sign)
        {
            return Math.sign(x);
        }
        else
        {
            return ( x < 0 ) ? -1 : ( ( x > 0 ) ? 1 : 0 );
        }
        
    }

/*
    var percent = 0;

    for (var i = 0; i < 10000; i++) {
      
        var number =  Math2.randomSeed(0, 1, Math.random() * 11001);
        console.log(number)
        if(number < 0.5)percent += 1; 

    };

    //percent /= 100;

    console.log("PERCENT : " +  percent)*/
    module.exports = Math2;

});
define('com/sc/games/shared/particles/LoaderSparkle',['require','exports','module','PIXI','com/fido/utils/Math2','com/fido/system/Device'],function (require, exports, module) 
{
    var PIXI   = require("PIXI");
    var Math2  = require("com/fido/utils/Math2");
    var Device = require('com/fido/system/Device');

    /**
     * Sparkley particles, because who doesn't love a bit of sparkle?
     */
    var LoaderSparkle = function()
    {
        PIXI.DisplayObjectContainer.call(this);

        this.particles = [];
        this.total = 3;

        for (var i = 0; i < this.total; i++) {
            
            var sprite = PIXI.Sprite.fromImage(ASSET_URL + "img/loader/sparkle.png");

            sprite.speed = new PIXI.Point();
            sprite.pos = new PIXI.Point();


            if(Device.instance.blendModeFriendly)
            {
                sprite.blendMode = PIXI.blendModes.ADD;
            }
            else
            {
                sprite.alpha = .3;
            }

            this.addChild(sprite);
            sprite.anchor.set(0.5);
            this.particles.push(sprite);
        };

        this.ratio = 0;
    }

    LoaderSparkle.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * Standard function to activate this particle system
     * @param  {Number} x [X Position]
     * @param  {Number} y [Y position]
     * @return {null}
     */
    LoaderSparkle.prototype.activate = function(x, y)
    {
        this.position.x = x;
        this.position.y = y;
        this.isDead = false;
        this.life = 1;
        this.ratio = 0;

        for (var i = 0; i < this.total; i++) 
        {        
            var sprite = this.particles[i]
                sprite.pos = new PIXI.Point();
            
            var dir = ((Math.PI * 2) / this.total) * i;
            var speed = 4 + Math.random() * 8;
                sprite.speed.x = Math.sin(dir) * speed;
                sprite.speed.y = Math.cos(dir) * speed;
                if(sprite.speed.y < -1) sprite.speed.y += 1;
                sprite.visible = true;
                sprite.position.x = Math2.random(-20, 20);
                sprite.position.y = Math2.random(-10, 10);
                sprite.rotation = Math.random() * Math.PI * 2;
                sprite.alpha = 0.1;
                sprite.scale.x = sprite.scale.y = 0.01 + Math.random() * 0.1;
                sprite.offset = Math.random() * 100;
                sprite.rotationSpeed = 0.1;
                sprite.maxScale = 0.2;
        }
    }

    /**
     * Update loop
     * @return {null}
     */
    LoaderSparkle.prototype.update = function()
    {
        this.life -= 0.03;
        
        if(this.life < 0)
        {
            this.isDead = true;
        } 

       for (var i = 0; i < this.total; i++) 
        {
            var sprite = this.particles[i];
                sprite.speed.y += 0.15;
                sprite.position.x += sprite.speed.x;
                sprite.position.y += sprite.speed.y;
                sprite.rotation += sprite.rotationSpeed;
                sprite.speed.x *= 0.95;
                sprite.scale.x += 0.02;
                sprite.scale.y += 0.02;
                sprite.alpha += 0.05;

            if(sprite.scale.x > sprite.maxScale)
            {
                sprite.scale.x = sprite.maxScale;
                sprite.scale.y = sprite.maxScale;
            } 

            if(this.life < 0.5)
            {
                sprite.alpha *= 0.6;
            }
        }
    }

    module.exports = LoaderSparkle;

});
define('com/sc/app/screens/LoaderScreen',['require','exports','module','PIXI','com/fido/system/Ticker','com/fido/utils/FrameWait','signals','libs/gameConfig/gameTracking','com/sc/games/shared/particles/LoaderParticles','com/sc/games/shared/particles/LoaderSparkle','com/fido/system/Device'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Ticker          = require('com/fido/system/Ticker');
    var Wait            = require("com/fido/utils/FrameWait");
    var Signal          = require("signals");
    var DisneyTracker   = require('libs/gameConfig/gameTracking');

    var ParticleManager  = require('com/sc/games/shared/particles/LoaderParticles');
    var LoaderSparkle          = require('com/sc/games/shared/particles/LoaderSparkle');
    var Device          = require('com/fido/system/Device');


    /**
     * Loader screen for Sheriff Callie
     * @param {Object} app [Instance of the main App]
     */
    var LoaderScreen = function(app)
    {
        PIXI.DisplayObjectContainer.call( this );
        
        this.app = app;

        this.vignette = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/vignette_halfsize.png");
        this.vignette.scale.set(2);
        this.addChild(this.vignette);
        
        this.particleManager = new ParticleManager(this);
        this.particleManager.registerParticle(LoaderSparkle, 0);

        this.d = 0;
        this.easeLoad = 0;
        this.targetLoad = 0;
        this.barWidth = 458;
        this.movePerFrame = 12;

        // Signals
        this.onReady = new Signal();
        this.onComplete = new Signal();
        
        // Start loading in assets
        this.scenery = [];

        this.loaderFrame = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/loader_frame.png");
        this.loaderFrame.anchor.set(0.5);

        this.callie = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/loader_callie.png");
        this.callie.anchor.set(0.5);

        this.sceneryA = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/loader_scenery_a.png");
        this.sceneryA.anchor.set(0.5);
        this.sceneryA.z = 0.9;

        this.sceneryB = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/loader_scenery_b.png");
        this.sceneryB.anchor.set(0.5);
        this.sceneryB.z = 0.8;

        this.sceneryC = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/loader_scenery_c.png");
        this.sceneryC.anchor.set(0.5);
        this.sceneryC.z = 0.7;
        this.sceneryC.y = 100;

        // Add to a scenery array for looping
        this.scenery.push(this.sceneryA);
        this.scenery.push(this.sceneryB);
        this.scenery.push(this.sceneryC);

        // Holder bar until assets are available
        this.barBg = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/loader_bg.png");
        this.barBg.anchor.set(0.5);

        this.bar = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/loader_fill.png");
        this.bar.anchor.set(0);


        // Add it all
        this.addChild(this.sceneryA);
        this.addChild(this.sceneryB);
        this.addChild(this.sceneryC);
        this.addChild(this.callie);
        this.addChild(this.barBg);
        this.addChild(this.bar);
        this.addChild(this.loaderFrame);

        // Set sail...
        this.initLoader();
    };

    LoaderScreen.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * Initialise the loading screen
     */
    LoaderScreen.prototype.initLoader = function()
    {
        Ticker.instance.add(this.update, this);

        this.resize(this.w, this.h);
        Wait.wait(this.showLoader.bind(this));
        
        DisneyTracker.trackAction("preloader", "main");
    };

    /** 
     * Show the loading screen
     */
    LoaderScreen.prototype.showLoader = function()
    {
        this.onReady.dispatch();
    };

    /**
     * Update loop
     * 
     */
    LoaderScreen.prototype.update = function()
    {   
        this.particleManager.update();

        // We will need these later...
        var halfWidth = this.w * 0.5;
        var halfBar = this.barWidth * 0.5;

        // Make callie bounce until she is an animation
        // Remove this.d once animation is available
        this.d++;
        this.callie.position.y += Math.sin(this.d * 0.2);

        for(var i = 0; i < this.scenery.length; i++)
        {
            var scenery = this.scenery[i];
                scenery.position.x -= this.movePerFrame * scenery.z;
                scenery.alpha = 0.5 - (Math.abs(scenery.position.x - halfWidth) / halfBar) + 0.2;

            if(scenery.position.x < (halfWidth - halfBar))
            {
                scenery.position.x = (this.w * 0.5) + (this.barWidth * 0.5); 
            }

            if(scenery.hasRotation === true)
            {
                scenery.rotation -= 0.1;
            }
        }

        this.easeLoad += (this.targetLoad - this.easeLoad) * 0.3;

        if(this.easeLoad > 0.99)
        {
            this.easeLoad = 1;
            Wait.wait(this.loadComplete.bind(this), 1400);
        }
        
        this.bar.scale.x = this.easeLoad;
    };

    /**
     * Event for when the load is finished
     */
    LoaderScreen.prototype.loadComplete = function()
    {
        this.onComplete.dispatch();
        Ticker.instance.remove(this.update, this);
    };

    /**
     * Update the progress of the loader
     * @param  {Number} percent [Percentage Loaded]
     */
    LoaderScreen.prototype.updateProgress = function(percent)
    {
        this.targetLoad = percent;

        if(!Device.instance.iPad || Device.instance.webGL)
        {
            this.particleManager.addParticle((this.w * 0.5 - 229) + (458 * percent), this.h * 0.5, 0);
        }
    };

    /**
     * Event for when hiding the loading screen
     * @return {[type]} [description]
     */
    LoaderScreen.prototype.onHide = function()
    {
        Ticker.instance.remove(this.update, this);
        TweenLite.to(this, 0.2, 
        {
            alpha : 0
        })
    };

    /**
     * Resize the screen
     * @param  {Number} w
     * @param  {Number} h
     */
    LoaderScreen.prototype.resize = function(w, h)
    {
        this.w = w;
        this.h = h;

        if(this.barBg)
        {
            this.barBg.position.x = (w * 0.5) - 10;
            this.barBg.position.y = (h * 0.5) + 15;

            this.bar.position.x = (w * 0.5) - 240;
            this.bar.position.y = (h * 0.5) -10;
        }

        this.callie.position.x = (w * 0.5);
        this.callie.position.y = (h * 0.5) - 100;

        this.sceneryA.position.x = (w * 0.5) - 230;
        this.sceneryA.position.y = (h * 0.5) - 70;

        this.sceneryB.position.x = (w * 0.5) + 230;
        this.sceneryB.position.y = (h * 0.5) - 40;

        this.sceneryC.position.x = (w * 0.5) - 180;
        this.sceneryC.position.y = (h * 0.5) - 50;

        this.loaderFrame.position.x = (w * 0.5);
        this.loaderFrame.position.y = (h * 0.5) + 25;
    };

    /**
     * Export...
     */
    module.exports = LoaderScreen;

});
define('com/fido/ui/buttons/Button',['require','exports','module','signals'],function (require, exports, module) {

var Signal = require('signals')

var Button = function( view )
{
    if(!view) throw("FIDO: Button view must not be undefined");

    this.view = view;

    this.onPress = new Signal();
    this.onDown = new Signal();
    this.onUp = new Signal();
    this.onHover = new Signal();
    this.onMouseOut = new Signal();
    
    this.view.interactive = true;
    this.view.buttonMode = true;
    // bind touch and mouse events to signals..
    this.view.mousedown = this.view.touchstart = this.onDown.dispatch.bind(this, this);
    this.view.mouseup = this.view.touchend = this.onUp.dispatch.bind(this, this);
    this.view.mouseover = this.onHover.dispatch.bind(this, this);
    this.view.click = this.view.tap = this.onPress.dispatch.bind(this, this);
    this.view.touchendoutside = this.view.mouseupoutside = this.view.mouseout = this.onMouseOut.dispatch.bind(this, this);
}

Button.constructor = Button;

module.exports = Button;

});

define('com/sc/app/buttons/SCButton',['require','exports','module','PIXI','com/fido/ui/buttons/Button','com/fido/sound/SoundManager','com/sc/games/shared/particles/ParticleBridge','com/fido/sound/SoundManager','com/fido/system/Device'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Button          = require('com/fido/ui/buttons/Button');
    var SoundManager    = require('com/fido/sound/SoundManager');
    var ParticleBridge  = require('com/sc/games/shared/particles/ParticleBridge');
    var SoundManager    = require('com/fido/sound/SoundManager');
    var Device          = require('com/fido/system/Device');

    /**
     * Simple button for all of Sheriff Callie
     * @param {PIXI.Texture} normalTexture [The base texture]
     * @param {PIXI.Texture} downTexture   [Texture for onClick]
     * @param {PIXI.Texture} hoverTexture  [Texture for onHover]
     * @param {PIXI.Texture} iconTexture   [Icon to overlay]
     */
    var SCButton = function(normalTexture, downTexture, hoverTexture, iconTexture)
    {
        var view = new PIXI.Sprite(normalTexture);
        view.anchor.set(0.5);

        Button.call( this, view );

        this.hoverGlint = new PIXI.Sprite.fromFrame("sparkle.png");
        this.hoverGlint.anchor.x = 0.5;
        this.hoverGlint.anchor.y = 0.5;
        this.hoverGlint.position.x = -35;
        this.hoverGlint.position.y = -45;
        this.hoverGlint.alpha = 0;

        if(Device.instance.webGL || Device.instance.desktop)
        {
            this.hoverGlint.blendMode = PIXI.blendModes.ADD;
        }

        this.scaleHoverEnabled = true;
        this.needsOffsetForFire = false; // temporary fix to fire particles in the right position (Difficulty Select)
        
        this.normalTexture = normalTexture;
        this.downTexture = downTexture;
        this.hoverTexture = hoverTexture;

        this.defaultScale = 1;

        if(iconTexture)
        {
            this.icon = new PIXI.Sprite(iconTexture);
            this.icon.anchor.set(0.5);
            view.addChild(this.icon);
        }

        view.addChild(this.hoverGlint);
        this.view.setTexture(this.normalTexture);

        this.onDown.add(this._onDown, this);
        this.onUp.add(this._onUp, this);
        this.onHover.add(this._onHover, this);
        this.onMouseOut.add(this._onMouseOut, this);
    };

    SCButton.prototype = Object.create( Button.prototype );

    /**
     * Set the icon of the button
     * @param {String} icon []
     */
    SCButton.prototype.setIcon = function(icon)
    {
        if(this.icon)
        {
            this.icon.setTexture(PIXI.Texture.fromFrame(icon));
        }
    };

    /*
     * FIRE PARTICLES
     */
    SCButton.prototype.fire = function(icon,newOptions)
    {      
        if (Device.instance.iPad && !Device.instance.webGL) return;

        var newX = this.view.position.x;

        if(this.needsOffsetForFire)
        {
            newX += this.view.width;
        }

        var options = 
        {
            x : newX,
            y : this.view.position.y,
            type : 0
        };

        ParticleBridge.instance.fire(options);
    };

    /**
     * Internal event for when the button is pressed
     */
    SCButton.prototype._onDown = function()
    {
        this.view.setTexture(this.downTexture);

        SoundManager.sfx.stop('hover');

        SoundManager.sfx.play('press');
        
        this.fire();

        if(this.icon)
        {
            TweenLite.to(this.icon.position, 0.1, 
            {
                y : this.icon.originalY + 5
            });
        }
    };

    /**
     * Internal event for the hover event
     * @return {[type]} [description]
     */
    SCButton.prototype._onHover = function()
    {
        TweenLite.killTweensOf(this.hoverGlint);   
        TweenLite.killTweensOf(this.hoverGlint.scale); 

        this.hoverGlint.rotation = 0;   

        this.view.setTexture(this.hoverTexture);

        SoundManager.sfx.play('hover');

        TweenLite.to(this.hoverGlint, 0.1, 
        {
            alpha : 1 
        });

        TweenLite.to(this.hoverGlint.scale, 0.3, 
        {
            x : 1,
            y : 1
        });

        TweenLite.to(this.hoverGlint.scale, 0.2, 
        {
            x : 0,
            y : 0,
            delay: 0.5
        });

        TweenLite.to(this.hoverGlint, 0.8, 
        {
            rotation : 2
        });

        TweenLite.to(this.hoverGlint, 0.3,
        {
            alpha : 0,
            delay: 0.4,
            onComplete : this.resetGlint.bind(this)
        });

        if(this.scaleHoverEnabled)
        {
            TweenLite.to(this.view.scale, 0.2, 
            {
                x : this.defaultScale * 1.1,
                y : this.defaultScale * 1.1,
                ease: Ease.easeOut
            });
        }
    };

    /**
     * Internal function for mouseout
     * @return {[type]} [description]
     */
    SCButton.prototype._onMouseOut = function()
    {
        this.view.setTexture(this.normalTexture); 

        if(this.scaleHoverEnabled)
        {
            TweenLite.to(this.view.scale, 0.2, 
            {
                x : this.defaultScale,
                y : this.defaultScale,
                ease: Ease.easeOut
            });
        }
    };

    /**
     * Internal function for when the click ends
     * @return {[type]} [description]
     */
    SCButton.prototype._onUp = function()
    {
        this.view.setTexture(this.normalTexture);
        if(this.icon)
        {
            TweenLite.to(this.icon.position, 0.1, 
            {
                y : this.icon.originalY
            });
        }
    };

    /**
     * Reset the glint
     */
    SCButton.prototype.resetGlint = function()
    {
        this.hoverGlint.alpha = 0;
        this.hoverGlint.rotation = 0;
    };

    /**
     * Make a button from frames
     * @param  {String} normalFrame
     * @param  {String} downFrame
     * @param  {String} hoverFrame
     * @param  {String} iconFrame
     * @return {SCButton}
     */
    SCButton.fromFrames = function(normalFrame, downFrame, hoverFrame, iconFrame)
    {
        return new SCButton(PIXI.Texture.fromFrame(normalFrame), PIXI.Texture.fromFrame(downFrame), PIXI.Texture.fromFrame(hoverFrame), iconFrame ? PIXI.Texture.fromFrame(iconFrame) : null);
    };

    /**
     * Make a big blue one!
     * @param  {String} iconFrame
     * @return {SCButton}
     */
    SCButton.bigBlue = function(iconFrame,reduced)
    {
        var button = new SCButton(PIXI.Texture.fromFrame("bigbutton_up.png"), PIXI.Texture.fromFrame("bigbutton_down.png"), PIXI.Texture.fromFrame("bigbutton_over.png"), iconFrame ? PIXI.Texture.fromFrame(iconFrame) : null);
        button.defaultScale = 1;
        button.view.scale.set(button.defaultScale);

        if(typeof reduced == 'undefined'){ reduced = true };
        if(Device.instance.desktop && reduced)
        {
            button.defaultScale *= 0.7;
            button.view.scale.set(button.defaultScale);
        }

        button.icon.position.y -= 25;
        button.icon.position.x += 10;

        button.icon.originalY = button.icon.position.y;
        button.icon.originalX = button.icon.position.x;
        
        return button;
    };

    /**
     * Make a middle blue one!
     * @param  {String} iconFrame
     * @return {SCButton}
     */
    SCButton.middleBlue = function(iconFrame,reduced)
    {
        var button = new SCButton(PIXI.Texture.fromFrame("bigbutton_up.png"), PIXI.Texture.fromFrame("bigbutton_down.png"), PIXI.Texture.fromFrame("bigbutton_over.png"), iconFrame ? PIXI.Texture.fromFrame(iconFrame) : null);
        button.defaultScale = .57;
        button.icon.scale.set(1.75);
        button.view.scale.set(button.defaultScale);

        if(typeof reduced == 'undefined'){ reduced = true };

        if(Device.instance.desktop && reduced)
        {
            button.defaultScale *= 0.7;
            button.view.scale.set(button.defaultScale);
        }

        button.icon.position.y -= 25;
        button.icon.position.x += 10;
        
        button.icon.originalY = button.icon.position.y;
        button.icon.originalX = button.icon.position.x;

        return button;
    };

    /**
     * Make a regular blue button
     * @param  {String} iconFrame
     * @return {SCButton}
     */
    SCButton.blueButton = function(iconFrame,reduced)
    {
        var button = new SCButton(PIXI.Texture.fromFrame("bigbutton_up.png"), PIXI.Texture.fromFrame("bigbutton_down.png"), PIXI.Texture.fromFrame("bigbutton_over.png"), iconFrame ? PIXI.Texture.fromFrame(iconFrame) : null);
        button.defaultScale = .5;
        button.icon.scale.set(2);
        button.view.scale.set(button.defaultScale);

        if(typeof reduced == 'undefined'){ reduced = true };
        if(Device.instance.desktop && reduced)
        {
            button.defaultScale *= 0.7;
            button.view.scale.set(button.defaultScale);
        }

        button.icon.position.y -= 25;
        button.icon.position.x += 10;
        
        button.icon.originalY = button.icon.position.y;
        button.icon.originalX = button.icon.position.x;

        return button;
    };

    /**
     * Make a red button
     * @param  {String} iconFrame
     * @return {Button}
     */
    SCButton.redButton = function(iconFrame,reduced)
    {
        var button = new SCButton(PIXI.Texture.fromFrame("redbutton_up.png"), PIXI.Texture.fromFrame("redbutton_down.png"), PIXI.Texture.fromFrame("redbutton_over.png"), iconFrame ? PIXI.Texture.fromFrame(iconFrame) : null);
        button.defaultScale = 1;
        button.icon.scale.set(1);
        button.view.scale.set(button.defaultScale);

        if(typeof reduced == 'undefined'){ reduced = true };
        if(Device.instance.desktop && reduced)
        {
            button.defaultScale *= 0.7;
            button.view.scale.set(button.defaultScale);
        }


        button.icon.position.y -= 10;
        // button.icon.position.x += 10;

        button.icon.originalY = button.icon.position.y;
        button.icon.originalX = button.icon.position.x;

        return button;
    };

    module.exports = SCButton;

});

 define('com/sc/app/buttons/PlayButton',['require','exports','module','PIXI','com/fido/ui/buttons/Button','com/sc/games/shared/particles/ParticleBridge','com/fido/system/Device'],function (require, exports, module) {

    var PIXI           = require("PIXI");
    var Button         = require('com/fido/ui/buttons/Button');
    var ParticleBridge = require('com/sc/games/shared/particles/ParticleBridge');
    var Device         = require('com/fido/system/Device');

    /**
     * Create a custom play-button
     */
    var PlayButton = function()
    {
        var view = new PIXI.DisplayObjectContainer();

        Button.call(this, view);

        this.rotates = true;

        this.button = new PIXI.Sprite.fromFrame("bigbutton_up.png");
        this.button.anchor.x = 0.5;
        this.button.anchor.y = 0.5;

        this.normal = PIXI.Texture.fromFrame("bigbutton_up.png");
        this.hover = PIXI.Texture.fromFrame("bigbutton_over.png");
        this.down = PIXI.Texture.fromFrame("bigbutton_down.png");

        this.icon = new PIXI.Sprite.fromFrame("icon_play.png");
        this.icon.anchor.x = 0.35;
        this.icon.anchor.y = 0.67;
        this.button.addChild(this.icon);

        this.hoverGlint = new PIXI.Sprite.fromFrame("sparkle.png");
        this.hoverGlint.anchor.x = 0.5;
        this.hoverGlint.anchor.y = 0.5;
        this.hoverGlint.position.x = -60;
        this.hoverGlint.position.y = -60;
        this.hoverGlint.alpha = 0;
        this.hoverGlint.blendMode = PIXI.blendModes.ADD;

        view.addChild(this.button);
        view.addChild(this.hoverGlint);

        this.onHover.add(this._onHover, this);
        this.onMouseOut.add(this._onMouseOut, this);
        this.onDown.add(this._onDown, this);

        view.count = 0;
        view.ratio = 3;

        view.updateTransform = function()
        {
            PIXI.DisplayObjectContainer.prototype.updateTransform.call( this );

            if(!this.rotates){ return; }

            this.count += 0.5;

            if(this.ratio > 0)
            {
                this.rotation = (Math.sin(this.count * 0.2) * 0.04 ) * this.ratio;
                this.scale.x = 1 + ( Math.sin(this.count * 0.2) * 0.02 ) * this.ratio;
                this.scale.y = 1 + ( Math.cos(this.count * 0.2) * 0.02 ) * this.ratio;
            }
        }
    };

    PlayButton.prototype = Object.create( Button.prototype );

    /**
     * When the button is hovered
     */
    PlayButton.prototype._onHover = function()
    {
        TweenLite.killTweensOf(this.hoverGlint);   
        TweenLite.killTweensOf(this.hoverGlint.scale); 

        this.hoverGlint.rotation = 0; 

        this.button.setTexture(this.hover);  

        TweenLite.to(this.hoverGlint, 0.1, 
        {
            alpha : 1 
        });

        TweenLite.to(this.hoverGlint.scale, 0.3, 
        {
            x : 1,
            y : 1
        });

        TweenLite.to(this.hoverGlint.scale, 0.2, 
        {
            x : 0,
            y : 0,
            delay: 0.5
        });

        TweenLite.to(this.hoverGlint, 0.8, 
        {
            rotation : 2
        });

        TweenLite.to(this.hoverGlint, 0.3,
        {
            alpha : 0,
            delay: 0.4,
            onComplete : this.resetGlint.bind(this)
        });
    };

    PlayButton.prototype.resetGlint = function()
    {
        this.hoverGlint.alpha = 0;
        this.hoverGlint.rotation = 0;
    };

    /**
     * When the button hover event ends
     */
    PlayButton.prototype._onMouseOut = function()
    {
        this.button.setTexture(this.normal);
    };

    /**
     * When the button is pressed
     * @return {[type]} [description]
     */
    PlayButton.prototype._onDown = function()
    {
        
        this.button.setTexture(this.down);
      /*  TweenLite.to(this.button.scale, 0.5, {
            x : 2,
            y : 2
        });

        TweenLite.to(this.button, 0.4, {
            alpha : 0
        }); */

        var options = 
        {
            x : this.view.position.x,
            y : this.view.position.y,
            type : 0
        }; 

        if ( !(Device.instance.iPad && !window.WEBGL) )
        {
            ParticleBridge.instance.fire(options);
        }
    };

    module.exports = PlayButton;

});
define('com/fido/app/DevicemotionManager',['require','exports','module','com/fido/system/Ticker'],function (require, exports, module) 
{
   	var Ticker = require('com/fido/system/Ticker')
    // var Signal = require('signals');

    DevicemotionManager = function()
    {        

        this.accelerationWithGravity = {
            x: 0,
            y: 0,
            z: 0
        };

        this.acceleration = {
            x: 0,
            y: 0,
            z: 0
        };

        this.rotation = {
            alpha: 0,
            beta: 0,
            gamma: 0
        };

        this.supportsMotion = "DeviceMotionEvent" in window;

        if(this.supportsMotion)
        {
            window.addEventListener("devicemotion", this.checkMotion.bind(this), true);
        }
        else
        {
            console.log("This device does'nt support motion")
        }
    }

    DevicemotionManager.prototype.checkMotion = function(event) {
        this.acceleration.x = event.acceleration.x;
        this.acceleration.y = event.acceleration.y;
        this.acceleration.z = event.acceleration.z;

        this.accelerationWithGravity.x = event.accelerationIncludingGravity.x;
        this.accelerationWithGravity.y = event.accelerationIncludingGravity.y;
        this.accelerationWithGravity.z = event.accelerationIncludingGravity.z;
        
        this.rotation.alpha = event.rotationRate.alpha;
        this.rotation.beta  = event.rotationRate.beta;
        this.rotation.gamma = event.rotationRate.gamma;
    };

    DevicemotionManager.constructor = DevicemotionManager;

    module.exports = DevicemotionManager;

});
define('com/sc/app/system/Rope',['require','exports','module'],function (require, exports, module) 
{

var Rope = function(app, options) 
{
	this.app = app;
	
	this.startX = options.startX || 0;
	this.startY = options.startY || 0;

	if(!options.texture)
	{
		console.log("ERROR :: Rope requires texture.");
		return;
	}

	if(!options.container)
	{
		console.log('WARNING : you might need a container to add this Rope to');
	}

	this.texture = options.texture;
	this.type = options.type || 'default';
	this.wind = options.wind || false;
	this.windVector = options.windVector || {
		x : 1.4,
		y : 0
	};
	this.windChance = options.windChance || 0.1;
	this.fallBackLineColor = options.fallBackLineColor || 0xFF0000;
	this.fallBackLineWidth = options.fallBackLineWidth || 5;

	this.fixed = false;

	this.container = options.container;

	this.usesTexture = PIXI.isWebGL;
	//this.usesTexture = true;

	switch(this.type)
	{
		case 'fixed' :
			this.fixed = true;
		break;

		default:

		break;

	}

	this.gravity = options.gravity || 3.4;

	this.linkLength = 0;
	
	this.endX = options.endX || 0;
	this.endY = options.endY || 0;

	this.joints = options.joints || 8;
	this.iterations = options.iterations || 1;
	this.hasAttachment = options.hasAttachment || false;

	// Project specific
	this.radius = options.radius || 150;
	this.friction = options.friction || 0.98;
	
	// Current positions
	this.pX = [];
	this.pY = [];

	// Old positions
	this.oX = [];
	this.oY = [];
	
	this.links = [];
	this.size = 0;

	this.clickOffsetX = 0;
    this.clickOffsetY = 0;
};

Rope.constructor = Rope;

Rope.prototype.build = function(size) 
{
	this.size = size;
	this.linkLength = this.size / this.joints;
	
	var offsetX = 0;
	var offsetY = -this.linkLength;
	
	for (var i = 0; i <= this.joints; i++) 
	{
		this.pX[i] = this.startX + (offsetX * i) + i;
		this.pY[i] = this.startY + (offsetY * i);
		
		this.oX[i] = this.startX + (offsetX * i);
		this.oY[i] = this.startY + (offsetY * i);
		
		this.links[i] = new PIXI.Point(i * 20, i * 20);
	}

	//console.log(this.links);
	if(this.usesTexture)
	{
		this.strip = new PIXI.Rope(PIXI.Texture.fromImage(this.texture), this.links);
		this.container.addChild(this.strip);
	}
	else
	{
		this.strip = new PIXI.Graphics();
		this.strip.moveTo(this.startX, this.startY);
		this.strip.lineStyle(5, this.fallBackLineColor);

		for(var j = 0; j < this.links.length; j++)
		{
			this.strip.lineTo(this.links[j].x, this.links[j].y);
		}

	}
	
	this.container.addChild(this.strip);

};

Rope.prototype.update = function(ball) 
{
	this.pX[0] = this.startX;
	this.pY[0] = this.startY;
	
	if(this.fixed)
	{
		this.pX[this.joints] = this.endX;
		this.pY[this.joints] = this.endY;
	}
	else if(this.dragging)
	{
		this.endX = this.app.mouse.x - this.clickOffsetX;
    	this.endY = this.app.mouse.y - this.clickOffsetY;

		this.pX[this.joints] = this.endX;
		this.pY[this.joints] = this.endY;

		this.pX[0] = this.startX;
		this.pY[0] = this.startY;
	}

	this.verlet();
	this.satisfyConstraints();
	
	if(ball) this.detect(ball);
	
	this.satisfyJoints();

	this.links[0].x = this.startX;
	this.links[0].y = this.startY;

	if(this.fixed)
	{
		this.links[this.links.length - 1].x = this.endX;
		this.links[this.links.length - 1].y = this.endY;
	}

	if(!this.usesTexture)
	{
		this.strip.clear();
		this.strip.moveTo(this.links[0].x, this.links[0].y);
		this.strip.lineStyle(this.fallBackLineWidth, this.fallBackLineColor);

		var len = this.links.length;

		if(this.hasAttachment === true)
		{
			len -= 1;	
		}

		for(var j = 1; j < len; j++)
		{
			this.strip.lineTo(this.links[j].x, this.links[j].y);
		}
	}
};

Rope.prototype.satisfyJoints = function()
{		
	for (var i = 0; i <= this.joints; i++) 
	{	
		this.links[i].x = this.pX[i];
		this.links[i].y = this.pY[i];
	}
};
	
Rope.prototype.detect = function(ball) 
{
	var link;
	var radius = 150;

	for (var i = 2; i < joints-1; i++) 
	{
		link = this.links[i];
		
		var dx = ball.x - this.pX[i];
		var dy = ball.y - this.pY[i];
		
		var dist = Math.sqrt(dx * dx + dy * dy);
		
		if(dist < radius)
		{
			var normalX = -dx / dist;
			var normalY = -dy / dist;
			
			this.pX[i] = this.oX[i] = ball.x + (normalX * radius);
			this.pY[i] = this.oY[i] = ball.y + (normalY * radius);
		}
	}
};
	
Rope.prototype.getAngle = function(x1, y1, x2, y2) 
{
	var dx = x1 - x2;
	var dy = y1 - y2;
	
	return Math.atan2(dy, dx);
};
	
Rope.prototype.verlet = function() 
{
	for (var i = 1; i <= this.joints; i++) 
	{
		var tempX = this.pX[i];
		var tempY = this.pY[i];
		
		this.pX[i] += 1 * (this.friction * this.pX[i] - this.friction * this.oX[i]);
		this.pY[i] += 1 * (this.friction * this.pY[i] - this.friction * this.oY[i]) + this.gravity;

		if(this.wind)
		{
			this.pX[i] *= 1 + (Math.random() * (Math.random() < this.windChance ? this.windVector.x : -this.windVector.x) / i);
			this.pY[i] *= 1 + (Math.random() * (Math.random() < this.windChance ? this.windVector.y : -this.windVector.y) / i);
		}

		this.oX[i] = tempX;
		this.oY[i] = tempY;
	}
};
	
Rope.prototype.satisfyConstraints = function() 
{
	var diff = 0;
	
	for (var j = 1; j <= this.iterations; j++) 
	{
		for (var i = 1; i <= this.joints; i++) 
		{
			if(i === this.joints && this.dragging)
			{
				this.pX[i] = this.endX;
				this.pY[i] = this.endY;
			}

			var dx = (this.pX[i] - this.pX[i - 1]);
			var dy = (this.pY[i] - this.pY[i - 1]);
			var dist = Math.sqrt((dx * dx) + (dy * dy));
			
			if(i === this.joints && this.hasAttachment === true)
			{
				diff = dist - this.radius;
			}
			else
			{
				diff = dist - this.linkLength;
			}
			
			
			var offsetX = (diff * dx / dist) / 2;
			var offsetY = (diff * dy / dist) / 2;
			
			this.pX[i] -= offsetX;
			this.pY[i] -= offsetY;
			this.pX[i - 1] += offsetX;
			this.pY[i - 1] += offsetY;		
		}
	}
};

Rope.prototype.updateStartX = function(newX)
{
	this.startX = newX;
};

Rope.prototype.updateStartY = function(newY)
{
	this.startY = newY;
};

Rope.prototype.updateRadius = function(newRadius)
{
	this.radius = newRadius;
};

Rope.prototype.updateEndX = function(newX)
{
	this.endX = newX;
};

Rope.prototype.updateEndY = function(newY)
{
	this.endY = newY;
};

Rope.prototype.addStartX = function(diff)
{
	this.startX += diff;
};

Rope.prototype.reset = function(left)
{
	this.linkLength = this.size / this.joints;
		
	var offsetX = left ? 20 : -20;
	var offsetY = -this.linkLength;

	for (var i = 0; i <= this.joints; i++) 
	{
		this.pX[i] = this.startX + (offsetX * i) + i;
		this.pY[i] = this.startY + (offsetY * i);
		
		this.oX[i] = this.startX + (offsetX * i);
		this.oY[i] = this.startY + (offsetY * i);
	}
};
	

Rope.prototype.destroy = function()
{
	this.container.removeChild(this.strip);
	this.pX = null;
	this.pY = null;

	this.oX = null;
	this.oY = null;

	this.links = null;
};

Rope.prototype.setLength = function(length, reset) 
{
	length *= 0.8;
	var distX = this.endX - this.startX;
	var distY = this.endY - this.startY;
	distX /= this.joints;
	distY /= this.joints;
	
	this.linkLength = length / this.joints;
	
	if(reset)
	{			
		for (var i = 0; i < this.joints; i++) 
		{
			this.pX[i] = this.oX[i] = this.startX + distX * i;	
			this.pY[i] = this.oY[i] = this.startY + distY * i;	
		}
	}
};

module.exports = Rope;

});
define('com/fido/sound/MusicManager',['require','exports','module','signals','com/fido/sound/SoundManager'],function (require, exports, module) {

    
var Signal          = require('signals');
var SoundManager    = require('com/fido/sound/SoundManager');

var MusicManager = function()
{
    this.disabled = SoundManager.music.disabled;

    //this.disabled = true;

    this.music = SoundManager.music;

    this.currentSound = null;

    this.newSound = null;

    this.onFade = new Signal();

    this.globalVolume = 0.5;

    this.fadeInDuration = 3.2;

    this.fadeOutDuration = 3.5;

    this.music.onMuteToggle.add(this.onMusicToggle,this);
}

MusicManager.prototype.play = function(id)
{

    if(this.disabled) return;

    // if there is no music playing
    if(this.currentSound === null)
    {
        this.currentSound = this.music.sounds[id];
        
        this.fadeIn(this.currentSound);
    }
    // the same sound is already playing
    else if(this.music.sounds[id] == this.currentSound)
    {
        return;
    }
    else{ // there is already a music playing, fade it out and play the new one

        this.newSound = this.music.sounds[id];

        this.fadeOut(this.currentSound);

        TweenLite.delayedCall(0.5,this.swapSounds,[],this);
    }
    
}

MusicManager.prototype.swapSounds = function () {

    // console.log('swap ?');
    this.currentSound = this.newSound;
    this.fadeIn(this.currentSound);
}

MusicManager.prototype.fadeIn = function (sound,callback,duration) {

    if (typeof duration === 'undefined') { duration = this.fadeInDuration; }

    this.setVolume(this.currentSound,0);

    this.currentSound.play();

    this.fadeTo(sound,1,duration,callback);

}

MusicManager.prototype.fadeOut = function (sound,callback) {

    this.fadeTo(sound,0,this.fadeOutDuration,callback);

}

MusicManager.prototype.fadeTo = function (sound,volume,duration,callback) {

    if (typeof duration === 'undefined') { duration = 2.5; }

    if (typeof callback === 'undefined') { callback = null; }

    if (typeof volume === 'undefined')
    {
        console.warn("fadeTo : No volume specified !!");
        return;
    }

    TweenLite.to(sound,duration, 
    { 
        _volume: volume,
        onComplete : this.fadeComplete,
        onCompleteParams : [sound,callback],
        onCompleteScope : this,
        onUpdate : this.actuallyChangeVolume.bind(this),
        onUpdateParams : ["{self}",sound]
    });

}

// there is no volume property in f*cking howler,  it's a function (contrary to what the docs say);
MusicManager.prototype.actuallyChangeVolume = function (tween,sound) {

    this.setVolume(sound,tween.target._volume);

};

MusicManager.prototype.fadeComplete = function (sound,callback) {

    this.onFade.dispatch();

    //console.log('hi1')

    if(callback != null)
    {
        callback();
    }

    if(sound.volume() < 0.01)
    {
        //console.log('hi2')
        sound.stop();
    }

};

MusicManager.prototype.onMusicToggle = function (muted) {
    
}

MusicManager.prototype.setVolume = function(sound, volume)
{
    if(this.disabled)return;

    sound.realVolume = volume;
    sound.volume(volume * this.globalVolume);
}

MusicManager.prototype.isPlaying = function(id)
{
    if(this.disabled)return;

    return !this.sounds[id]._audioNode[0].paused;
}


module.exports = new MusicManager();

});

define('com/sc/app/screens/TitleScreen',['require','exports','module','PIXI','com/sc/app/buttons/SCButton','com/sc/app/buttons/PlayButton','com/sc/games/shared/particles/ParticleBridge','com/fido/app/OrientationManager','com/fido/app/DevicemotionManager','com/fido/system/Device','com/sc/app/system/Rope','com/fido/sound/MusicManager','com/fido/system/Ticker','libs/gameConfig/gameTracking'],function (require, exports, module) 
{
    var PIXI                = require("PIXI");
    var SCButton            = require('com/sc/app/buttons/SCButton');
    var PlayButton          = require('com/sc/app/buttons/PlayButton');
    var ParticleBridge      = require('com/sc/games/shared/particles/ParticleBridge');
    var OrientationManager  = require('com/fido/app/OrientationManager');
    var DevicemotionManager = require('com/fido/app/DevicemotionManager');
    var Device              = require('com/fido/system/Device'); 
    var Rope                = require('com/sc/app/system/Rope');
    var MusicManager        = require('com/fido/sound/MusicManager');
    var Ticker              = require('com/fido/system/Ticker');
    var DisneyTracker       = require('libs/gameConfig/gameTracking');

    /**
     * Title screen for Sheriff Callie
     * @param {Object} app [Instance of main SCApp]
     */
    var TitleScreen = function(app)
    {
        this.app = app;
        PIXI.DisplayObjectContainer.call( this );
    };

    TitleScreen.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * Initialise the title screen
     */
    TitleScreen.prototype.init = function()
    {
        this.checkDevice = Device.instance;
        this.isMobile = this.checkDevice.isMobile || this.checkDevice.iPad;        
        
        this.devicemotionManager = new DevicemotionManager();
        this.isReadyToAnimate = false;
        this.buttonReadyToAnimate = false;
        this.directions = 
        { 
            right : 1, 
            left : -1, 
            none : 0 
        };
        
        this.orientationManager = new OrientationManager();
        this.deviceOrientation = (this.orientationManager.orientation >= 0) ? 1 : -1;


        this.cloudsContainer = new PIXI.DisplayObjectContainer();
        this.generateClouds();
        this.addChild(this.cloudsContainer);

        this.town = new PIXI.Sprite.fromFrame("town_bg.png");
        this.addChild(this.town);

        this.burstBG = new PIXI.Sprite.fromFrame("sunburst_fg.png");
        this.burstBG.anchor.x = 0.5;
        this.burstBG.anchor.y = 0.5;
        this.burstBG.scale.x = this.burstBG.scale.y = 3;
        this.addChild(this.burstBG);

        this.burstFG = new PIXI.Sprite.fromFrame("sunburst_fg.png");
        this.burstFG.anchor.x = 0.5;
        this.burstFG.anchor.y = 0.5;
        this.burstFG.scale.x = this.burstFG.scale.y = 3;
        this.addChild(this.burstFG);

        this.container = new PIXI.DisplayObjectContainer();
        this.addChild(this.container);

        this.ridge = new PIXI.Sprite.fromFrame("ridge_fg.png");
        this.addChild(this.ridge);

        this.callie = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/callie_title.png");
        this.ridge.addChild(this.callie);


        this.logo = new PIXI.Sprite.fromFrame(ASSET_URL + "img/localized/callie_logo.png");
        this.logo.anchor.set(0.5);

        this.containerLogo = new PIXI.DisplayObjectContainer();
        this.containerLogo.addChild(this.logo);

        this.addChild(this.containerLogo);

        this.cactus = new PIXI.Sprite.fromFrame("cactus_fg.png");
        this.cactus.anchor.set(0.5);
        this.addChild(this.cactus);

        this.deputyLogo = new PIXI.Sprite.fromFrame(ASSET_URL + "img/localized/deputy_logo.png");
        this.deputyLogo.anchor.set(0.5);

        this.percentage = .5;

        this.addChild(this.deputyLogo);

        this.vignette = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/vignette_halfsize.png");
        this.vignette.scale.set(2);
        this.addChild(this.vignette);

        this.homeButton = new SCButton.blueButton("icon_exit.png");
        this.homeButton.view.visible = false;
        this.addChild(this.homeButton.view);
        this.homeButton.onPress.add(this.onButtonPressed, this);

        this.playButton = new SCButton.bigBlue("icon_play.png",false);
        this.playButton.scaleHoverEnabled = false;
        this.addChild(this.playButton.view);

        if(this.app.config.FLIP_LANGUAGE === "true")
        {
            this.playButton.icon.scale.x *= -1;
            this.playButton.icon.x -= 19;
        }

        // maskyo sucks as name, feel free to change it
        this.maskYo = new PIXI.Graphics();
        this.maskYo.scale.set(1.4);
        this.maskYo.position.set(875 - this.playButton.view.width/2 + 35, 465 - this.playButton.view.height/2 + 32);
        this.maskYo.beginFill(0xFF3300);
        this.maskYo.moveTo(150,86);
        this.maskYo.bezierCurveTo(150,121,117,149,76,149);
        this.maskYo.bezierCurveTo(35,149,2,121,2,86);
        this.maskYo.bezierCurveTo(2,82,2,69,2,65);
        this.maskYo.bezierCurveTo(2,30,35,2,76,2);
        this.maskYo.bezierCurveTo(117,2,150,30,150,65);
        this.maskYo.bezierCurveTo(150,69,150,82,150,86);
        this.maskYo.endFill();
        
        this.addChild(this.maskYo);


        this.shineOne = new PIXI.Sprite.fromFrame("playButtonShine1.png");
        this.shineOne.anchor.set(.5);
        this.shineOne.alpha = .4;
        this.shineOne.scale.set(1);
        this.shineOne.mask = this.maskYo;

        this.shineTwo = new PIXI.Sprite.fromFrame("playButtonShine2.png");
        this.shineTwo.anchor.set(.5);
        this.shineTwo.alpha = .4;
        this.shineTwo.scale.set(1);
        this.shineTwo.mask = this.maskYo;

        this.addChild(this.shineOne);
        this.addChild(this.shineTwo);

        if(Device.instance.blendModeFriendly){
            this.burstBG.blendMode = PIXI.blendModes.ADD;
            this.burstFG.blendMode = PIXI.blendModes.ADD;   
            this.shineOne.blendMode = PIXI.blendModes.ADD;
            this.shineTwo.blendMode = PIXI.blendModes.ADD;
        }
        else
        {
            this.burstBG.alpha = .4;
            this.burstFG.alpha =  .4;
            this.shineOne.alpha = .4;
            this.shineTwo.alpha =  .4;
        }

        this.count = 0;
        this.countButton = 0;
    };


    /**
     * Event to fire on mouse-mouse
     */
    TitleScreen.prototype.onMouseMove = function(event) 
    {
        if(!this.isReadyToAnimate) return;

        var widthCanvas = event.target.width;

        if(event.target.tagName == "CANVAS" && widthCanvas)
        {
            var position = event.pageX - event.target.offsetLeft;
            var percentage = position/widthCanvas * 100;
            this.percentage = percentage;
            for (var i = 0; i < this.movableElements.length; i++) 
            {
                var element = this.movableElements[i];
                TweenLite.to(element[0].position, 0.2, 
                {
                    x : element[4] + (element[2] * 0.5) - (element[2]* 0.01) * percentage
                });
            };

            // this.animateLogoRotation(percentage);
        }
    };

    /**
     * Event for updating the motion of a device
     */
    TitleScreen.prototype.deviceMotionUpdate = function()
    {
        if (this.isMobile) // only for mobile, working on device rotation
        {
            if (this.checkDevice.iOS)
            {
                this.parallaxSpeed = Math.abs(this.devicemotionManager.rotation.alpha / 2);
            }
            else
            {
                if(this.checkDevice.chrome)
                {
                    this.parallaxSpeed = Math.abs(this.devicemotionManager.rotation.alpha * 10);
                }
                else
                {
                    this.parallaxSpeed = Math.abs(this.devicemotionManager.rotation.alpha / 2);
                }
            }

            
            if(this.parallaxSpeed < 1)
            {
                this.parallaxSpeed = 0;
            }

            if(this.devicemotionManager.rotation.alpha * this.deviceOrientation > 0)
            {
                this.direction = this.directions.right;
            }
            else 
            {
                this.direction = this.directions.left;
            }
        }
    };

    TitleScreen.prototype.animateLogoRotation = function(percentage)
    {
        TweenLite.to(this.logo, .1, {
            rotation: (percentage/100) * .1,
            ease: Ease.easeOut
        });
    };

    /**
     * Event for when orientation is changed
     * @param  {Number} rotation
     */
    TitleScreen.prototype._onRotationChanged = function(rotation)
    {
        this.deviceOrientation = (rotation >= 0) ? 1 : -1;
    };

    /**
     * Move elements about the screen
     */
    TitleScreen.prototype.moveElements = function()
    {
        // element, speed, amplitude, amplitude done, initial position
        for (var i = 0; i < this.movableElements.length; i++) 
        {
            var element = this.movableElements[i];
            if(element[3] + this.direction * this.parallaxSpeed * element[1] >= (element[2] * 0.5) || element[3] + this.direction * this.parallaxSpeed * element[1] <= -(element[2] * 0.5)) return;

            element[3] += this.direction * this.parallaxSpeed * element[1];
            element[0].position.x += this.direction * this.parallaxSpeed * element[1];
        }
    };

    /**
     * Move the clouds
     */
    TitleScreen.prototype.moveClouds = function()
    {
        for (var i = 0; i < this.clouds.length; ++i) 
        {
            var cloud = this.clouds[i];
            cloud.position.x -= cloud.speed;

            if(cloud.position.x <= -(cloud.width * 0.5))
            {
                cloud.position.x += 1136 + cloud.width;
                cloud.position.y = Math.random() * 300;
                cloud.speed = Math.random() * 0.3 + 0.2; 
            }
        }
    };

    /**
     * Generate some clouds
     */
    TitleScreen.prototype.generateClouds = function()
    {
        this.clouds = [];
        var clouds = ["cloud_a.png", "cloud_b.png", "cloud_b.png", "cloud_d.png", "cloud_e.png"];
        
        for (var i = 0; i < 5; ++i) 
        {
            var cloud = new PIXI.Sprite.fromFrame(clouds[i % clouds.length]);
                cloud.anchor = new PIXI.Point(0.5, 0);
                cloud.position = new PIXI.Point(Math.random()*1100, Math.random()*300);
                cloud.speed = Math.random() * 0.3 + 0.2;
                this.cloudsContainer.addChild(cloud);
                this.clouds.push(cloud);
        }
    };

    /**
     * Event for when onShow is complete
     */
    
    TitleScreen.prototype.onShown = function()
    {
        MusicManager.play('mainLoop');

        DisneyTracker.trackAction("title_screen", "main");

        // events
        this.orientationManager.onRotationChanged.add(this._onRotationChanged, this);
        this.playButton.onPress.add(this.onButtonPressed, this);

        if (!this.isMobile) // only for desktop
        {   
            window.addEventListener("mousemove", this.onMouseMove.bind(this));
        } 
        else
        {
            this.homeButton.view.visible = true;
        }
    };

    /**
     * When a button is pressed
     * @param  {Object} e [Event Information]
     */
    TitleScreen.prototype.onButtonPressed = function(e)
    {
        if(e === this.playButton)
        {
            if(this.checkDevice.android)
            {
                if (this.checkDevice.fullscreenKeyboard)
                {
                    document.body[this.checkDevice.requestFullscreen](Element.ALLOW_KEYBOARD_INPUT);
                }
                else
                {
                    document.body[this.checkDevice.requestFullscreen]();
                }
            }

            this.app.jumpToSegment(0);
        }
        else if(e === this.homeButton)
        {
            window.location = "http://www.disney.co.uk";
        }
    };

    /** 
     * Resize the title screen
     * @param  {Number} w [width]
     * @param  {Number} h [height]
     */
    TitleScreen.prototype.resize = function(w, h)
    {
        this.w = w;
        this.h = h;

        // this.logo.x = w * 0.5;
        // this.logo.y = h * 0.5;

        this.playButton.view.position.x = w * 0.77;
        this.playButton.view.position.y = h * 0.5 + 170;

        this.homeButton.view.position.set(85, 90/4 + 60);

        // this.bg.scale.set(w * 0.01, h * 0.01);

        this.burstBG.position.x = w * 0.5;
        this.burstBG.position.y = h * 0.3;

        this.burstFG.position.x = w * 0.5;
        this.burstFG.position.y = h * 0.3;
    };
    
    /**
     * Show the title screen
     */
    TitleScreen.prototype.onShow = function()
    {
        this.app.topMenu.titleMode();
        Ticker.instance.add(this.update, this);

        this.town.anchor.x = 0.5;
        this.town.anchor.y = 0.5;
        this.town.scale.set(.9);
        this.town.position.set(700, 700);
        this.burstBG.alpha = 0;
        this.burstFG.alpha = 0;
        this.ridge.anchor.x = .5;
        this.ridge.anchor.y = .5;
        this.ridge.position.set(this.ridge.width/2 + 100, 1100);
        this.ridge.scale.set(1.8);
        this.callie.position.set(46 - this.callie.width/2 - 58, -230 - this.callie.height/2 + 50);
        this.logo.scale.set(4);
        this.containerLogo.position.set(1136*1.5, 200);
        this.cactus.scale.set(2.1);
        this.cactus.position.set(865, 900);
        this.deputyLogo.position.set(1136 * 0.5, 720 * 0.5);
        this.deputyLogo.scale.set(0);
        this.playButton.view.scale.set(0);
        this.shineOne.position.set(600, 465);
        this.shineTwo.position.set(600, 465);

        this.rope = new Rope(this.app,{
            texture : ASSET_URL + "img/game/rope.png",
            startX : 350,
            startY : 400,
            endX : this.containerLogo.x + 80,
            endY : this.containerLogo.y,
            type : 'fixed',
            joints : 20,
            iterations : 8,
            gravity : 3.4,
            friction : 0.98,
            radius : 158,
            fallBackLineColor : 0xeed38b,
            fallBackLineWidth : 8,
            container : this.container
        });

        this.rope.build(100);

        this.movableElements = [];
        // for parallax, would be better in obj for readability
        // element, speed, amplitude, amplitude done, initial position
        this.movableElements.push([this.town, .05, 20, 0, this.town.position.x]);
        this.movableElements.push([this.cactus, .15, 50, 0, 940]);
        this.movableElements.push([this.ridge, .1, 18, 0, this.ridge.position.x - 108]);
        this.movableElements.push([this.container, .1, 18, 0, this.container.position.x]);

        this.animate();

        this.rope.strip.visible = true;
    };

    TitleScreen.prototype.onHide = function()
    {
        this.orientationManager.onRotationChanged.add(this._onRotationChanged, this);
        this.playButton.onPress.add(this.onButtonPressed, this);

        this.count = 0;
        this.countButton = 0;
        this.isReadyToAnimate = false;
        this.buttonReadyToAnimate = false;

        if (!this.isMobile) // only for desktop
        {   
            window.removeEventListener("mousemove", this.onMouseMove.bind(this));
            this.homeButton.view.visible = false;
        }

        // Have to do that because if we finish outro, and we come back, only the rope is not disappearing
        TweenLite.to(this.rope.strip, .4, {
            alpha:0,
            delay:.3
        });
        // TweenLite.delayedCall(.2, this.rope.destroy.bind(this));
        Ticker.instance.remove(this.update, this);
    };

    /**
     * Animate out elements
     */
    TitleScreen.prototype.animate = function()
    {
        // Rope
        TweenLite.to(this.rope, .6, 
        {
            startY : 190,
            ease : Ease.easeIn
        });

        TweenLite.to(this.rope, .5, 
        {
            startY : 235,
            delay : 1,
            ease : Ease.easeIn
        });

        TweenLite.to(this.rope, 1, 
        {
            startX : 215,
            delay : 0.2,
            ease : Ease.easeOut
        });


        // Ridge
        TweenLite.to(this.ridge.position, 1, 
        {
            y : 555,
            delay : 0,
            ease : Ease.easeIn
        });
        
        TweenLite.to(this.ridge.position, 1, 
        {
            x : "-=108",
            delay : 0.2,
            ease : Ease.easeOut
        });

        TweenLite.to(this.ridge.scale, 1.5, 
        {
            x : 1,
            y : 1,
            delay : 0.2,
            ease : Ease.easeOut
        });

        // Cactus        
        TweenLite.to(this.cactus.position, .8, 
        {
            y : 470,
            delay : 0,
            ease : Ease.easeIn
        });
        
        TweenLite.to(this.cactus.position, 1.2, 
        {
            x : 940,
            delay : 0.5,
            ease : Quad.easeOut
        });

        TweenLite.to(this.cactus.scale, 1.5, 
        {
            x : 1,
            y : 1,
            delay : 0.2,
            ease: Ease.easeOut
        });

        // Town
        TweenLite.to(this.town.position, 1.5, 
        {
            y : 640 - (this.town.height * 0.5),
            delay : 0.2,
            ease : Ease.easeOut
        });

        // Logo

        TweenLite.to(this.logo.scale, 1.3, 
        {
            x : 1.2,
            y : 1.2,
            delay : 0.5,
            ease : Quad.easeIn,
            onComplete : function()
            {
                TweenLite.to(this.logo.scale, 0.7, 
                {
                    x : 1,
                    y : 1,
                    ease: Quad.easeOut
                });
            }.bind(this)
        });

        TweenLite.to(this.containerLogo.position, 1, 
        {
            x : (1136 * 0.5) - 200,
            delay : 0.5,
            ease : Quad.easeOutIn,
            onStart : function ()
            {
                this.rope.gravity = 0.5;
            }.bind(this),
            onComplete : function()
            {
                TweenLite.to(this.containerLogo.position, .7, 
                {
                    x : 1136 * 0.5,
                    ease: Quad.easeInOut
                });

                // TWEEN the gravity ! PLEASE DON'T DELETE
                TweenLite.to(this.rope,1.0,{gravity : 3.4, delay : 0.2});
                // TweenLite.to(this.rope,1.0,{gravity : -1.5, delay : 0.2});
                

            }.bind(this)
        });

        

        TweenLite.to(this.containerLogo.position, 1, 
        {
            y : 400,
            delay : 0.5,
            ease : Quad.easeOutIn,
            onComplete : function()
            {
                TweenLite.to(this.containerLogo.position, 1, 
                {
                    y : 120,
                    ease : Quad.easeInOut,

                    onComplete : function () {

                        this.isReadyToAnimate = true;

                    }.bind(this)

                });

            }.bind(this)
        });

        // Deputy catch phrase
        TweenLite.to(this.deputyLogo.scale, 1.5, 
        {
            x : 1,
            y : 1,
            delay : 2.2,
            ease : Elastic.easeOut            
        });

        // Play button
        TweenLite.to(this.playButton.view.scale, .4, 
        {
            x: this.playButton.defaultScale,
            y: this.playButton.defaultScale,
            delay: 2.4,
            ease: Back.easeOut,
            onStart: function()
            {
                this.playButton.fire();
            }.bind(this),
            onComplete:function()
            {
                this.buttonReadyToAnimate = true;

            }.bind(this)
        });

        // Ray lights
        TweenLite.to([this.burstFG, this.burstBG], .5,
        {
            alpha : 0.75,
            delay : 2.2,
            ease : Back.easeOut,
            onComplete: function(){
                TweenLite.to([this.burstFG, this.burstBG], 2,
                {
                    alpha : 0.5,
                    delay: .4,
                    ease : Ease.easeOut
                });
            }.bind(this)
        });
    }; 

    TitleScreen.prototype.update = function()
    {
        this.burstBG.rotation += 0.0025;
        this.burstFG.rotation -= 0.0025;

        this.rope.updateEndX(this.containerLogo.x + 80);
        this.rope.updateEndY(this.containerLogo.y);

        this.count += 0.05;
        this.rope.update();

        if(this.isReadyToAnimate);
        {
            this.count *= 0.94;
            this.rope.gravity = 2 + Math.sin(this.count) * 1.4;
        }

        if(this.buttonReadyToAnimate)
        {
            this.countButton += .008;

            if ( Math.abs(Math.cos( Math.sin(this.countButton*3) + this.countButton*3  )) <=  Math.abs(Math.cos( Math.sin( (this.countButton- 0.002)*3) + (this.countButton-0.002)*3  )) )
            {
                this.shineOne.alpha = this.shineTwo.alpha = 0;
            }
            else {
                this.shineOne.alpha = this.shineTwo.alpha = .4;
            }

            this.shineOne.position.x = 680 + Math.abs(Math.cos( Math.sin(this.countButton*3) + this.countButton*3  )) * 450;
            this.shineTwo.position.x = 600 + Math.abs(Math.cos( Math.sin(this.countButton*3) + this.countButton*3  )) * 450;

            // this.shineOne.position.x = 680 + Math.abs(Math.sin( Math.pow(8, Math.sin(this.countButton))))* 450;
            // this.shineTwo.position.x = 600 + Math.abs(Math.sin( Math.pow(8, Math.sin(this.countButton))))* 450;
        }

        this.deviceMotionUpdate();

        this.moveClouds();

        if(this.isMobile && this.isReadyToAnimate)
        {
            this.moveElements();
        }
    };

    /**
     * Export...
     */
    module.exports = TitleScreen; 

});

define('com/fido/game/World',['require','exports','module','signals'],function (require, exports, module) {

var Signal = require('signals');

var World = function()
{
    this.elements = [];
    this.view = new PIXI.DisplayObjectContainer();
}

World.prototype.update = function()
{
    for (var i = this.elements.length - 1; i >= 0; i--) {
         this.elements[i].update();
    };
}

World.prototype.add = function(element)
{
    // Going to assume that there is only ever one world.. 
    // MAYBE - multiple worlds but I doubt it!
    if(element.world)return;

    element.world = this;

    this.elements.push(element);
    this.view.addChild(element.view);
}

World.prototype.remove = function(element)
{
    var index = this.elements.indexOf( element );
    if ( index !== -1 )
    {
        element.world = null;
        this.elements.splice( index, 1 );
        this.view.removeChild(element.view);
    }
    else
    {
        console.log(element)
        console.log("WARNING " + element + " being removed does not belong in the world");
    }
}

World.prototype.removeAll = function()
{

    for (var i = 0; i < this.elements.length; i++) {

        var element = this.elements[i];
        this.remove(element);
        
    }
}


module.exports = World;

});

define('com/fido/game/GameObject',['require','exports','module','signals'],function (require, exports, module) {

var Signal = require('signals');

var GameObject = function(view)
{
    this.view = view || createView();
    
    this.position = new PIXI.Point();
    this.speed = new PIXI.Point();

    // the size of the GameObject
    this.width = 32;
    this.height = 32;

    // a reference to the world the GameObject belongs to
    this.world = null;
}

GameObject.prototype.update = function()
{
    this.view.x = this.position.x;
    this.view.y = this.position.y;
}

// helper function to create a test GameObject view!
function createView(color)
{
    var graphics = new PIXI.Graphics().beginFill(color || 0xFF0000).drawRect(-32/2, -32/2, 32, 32).endFill();
    return graphics;
}

module.exports = GameObject;

});

define('com/sc/games/Game',['require','exports','module','PIXI','signals','com/fido/game/World','com/fido/system/Ticker','com/fido/game/GameObject','com/fido/sound/SoundManager'],function (require, exports, module) 
{
    var PIXI             = require("PIXI");
    var Signal           = require('signals');
    var World            = require('com/fido/game/World');
    var Ticker           = require('com/fido/system/Ticker');
    var GameObject       = require('com/fido/game/GameObject');
    var SoundManager     = require('com/fido/sound/SoundManager');

    PIXI.DisplayObject.prototype.depthOffset = 0;

    /**
     * Super!
     * @param {Object} app [Instance of SCApp]
     */
    var Game = function(app)
    {
        this.onGameover = new Signal();
        
        this.detail = {};

        this.config = {
            showTutorial : true
        };

        this.app = app || null;

        this.isGameover = false;
        this.paused = true;
        this.score = 0;
        this.dimensions = 
        {
            width: 1136,
            height: 640
        }

        this.gameTime = 0;

        this.view = new PIXI.DisplayObjectContainer();
        
        this.world = new World();
        this.view.addChild(this.world.view);
    }

    Game.constructor = Game;

    /**
     * Reset the game and update the config if needed
     * @param  {Object} config : The game config
     */
    Game.prototype.reset = function(config)
    {
        this.isGameover = false;

        this.config = config || this.config;
    };

    /**
     * Start her up!
     * @param  {Object} config : The game config
     */
    Game.prototype.start = function(config)
    {
        this.reset();
        this.resume();
    };

    /**
     * Pause the game, make stuff not interactive
     */
    Game.prototype.pause = function()
    {
        if(this.paused) return;

        this.paused = true;
        this.view.interactive = false;
        Ticker.instance.remove(this.update, this);
    };

    /**
     * Resume the game, make stuff interactive
     */
    Game.prototype.resume = function()
    {
        if(!this.paused) return;

        this.paused = false;
        this.view.interactive = true;
        Ticker.instance.add(this.update, this, 1);
    };

    /**
     * Update loop, make everything tick
     * 
     */
    Game.prototype.update = function()
    {
        this.gameTime += Ticker.instance.deltaTime;
        this.world.update();
    };

    /**
     * That's the end...
     */
    Game.prototype.gameover = function()
    {
        if(this.isGameover) return;

        this.detail.score = 1000;

        this.isGameover = true;
        this.pause();

        this.onGameover.dispatch();
    }

    /**
     * Export...
     */
    module.exports = Game;

});
define('com/fido/ui/buttons/LabelButton',['require','exports','module','./Button'],function (require, exports, module) {


var button = require('./Button');

var LabelButton = function(label)
{
    var view =  new PIXI.Graphics();
    view.beginFill(0x444444).drawRect(0,0, 100, 32).endFill();
    view.hitArea = new PIXI.Rectangle(0,0, 100, 32);

    this.text = new PIXI.Text(label, {fill:"white", font:"15px Arial"});
    this.text.x = 100/2;
    this.text.y = 7;

    this.text.anchor.x = 0.5;

    view.addChild(this.text)

    button.call( this, view );
    
    //console.log(this.signal)
}

LabelButton.prototype = Object.create( button.prototype );

Object.defineProperty(LabelButton.prototype, "label", {
    get: function() {
        // code
    },
    set: function(value){
        this.text.text = value;
    }
});

module.exports = LabelButton;

});

define('com/sc/app/Animations',['require','exports','module','PIXI','signals','com/sc/games/Game','com/fido/system/Ticker','com/fido/ui/buttons/LabelButton'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Signal          = require('signals');
    var Game            = require('com/sc/games/Game');
    var Ticker          = require('com/fido/system/Ticker');
    var LabelButton     = require("com/fido/ui/buttons/LabelButton");

    PIXI.DisplayObject.prototype.depthOffset = 0;

    var Animations = {};

    /**
     * Animation
     * 
     */

    Animations.game1Intro ={

    	spriteSheets:[
    		ASSET_URL + 'img/game/story_welcome.json'
    	],

    	data:
        {
    mc0:{view:'img/game/office_backdrop.jpg', isImage:true, depth:0, startFrame:0, endFrame:271, position:[0,0,0,0,0,-0.1,0,-0.2,0,-0.3,0,-0.5,0,-0.75,0,-1,0,-1.35,0,-1.7,0,-2.1,0,-2.6,0,-3.1,0,-3.65,0,-4.3,0,-4.95,0,-5.7,0,-6.5,0,-7.35,0,-8.25,0,-9.25,0,-10.25,0,-11.35,0,-12.55,0,-13.75,0,-15.05,0,-16.45,0,-17.9,0,-19.4,0,-21,0,-22.65,0,-24.4,0,-26.25,0,-28.1,0,-30.1,0,-32.15,0,-34.3,0,-36.5,0,-38.8,0,-41.15,0,-43.6,0,-46.1,0,-48.7,0,-51.35,0,-54.05,0,-56.85,0,-59.7,0,-62.6,0,-65.55,0,-68.55,0,-71.55,0,-74.6,0,-77.7,0,-80.75,0,-83.85,0,-86.95,0,-90.05,0,-93.15,0,-96.2,0,-99.2,0,-102.2,0,-105.1,0,-108,0,-110.8,0,-113.55,0,-116.25,0,-118.85,0,-121.4,0,-123.85,0,-126.25,0,-128.55,0,-130.75,0,-132.9,0,-134.9,0,-136.85,0,-138.7,0,-140.5,0,-142.15,0,-143.75,0,-145.3,0,-146.7,0,-148.05,0,-149.3,0,-150.5,0,-151.6,0,-152.6,0,-153.6,0,-154.45,0,-155.25,0,-156,0,-156.65,0,-157.25,0,-157.8,0,-158.3,0,-158.7,0,-159.05,0,-159.35,0,-159.6,0,-159.75,0,-159.9,0,-159.95,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160,0,-160], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc1:{view:'callieStressed.png', isImage:false, depth:1, startFrame:0, endFrame:161, position:[572,450.6,572,450.55,572,450.45,572,450.25,572,449.95,572,449.55,572,449.05,572,448.5,572,447.85,572,447.1,572,446.2,572,445.25,572,444.2,572,443,572,441.7,572,440.3,572,438.8,572,437.15,572,435.4,572,433.5,572,431.5,572,429.35,572,427.05,572,424.65,572,422.1,572,419.4,572,416.55,572,413.55,572,410.45,572,407.15,572,403.7,572,400.1,572,396.35,572,392.4,572,388.35,572,384.1,572,379.65,572,375.1,572,370.35,572,365.45,572,360.4,572,355.2,572,349.85,572,344.35,572,338.7,572,332.9,572,327,572,321,572,314.85,572,308.65,572,302.35,572,295.95,572,289.55,572,283.1,572,276.6,572,270.1,572,263.65,572,257.15,572,250.75,572,244.4,572,238.1,572,231.9,572,225.8,572,219.8,572,213.95,572,208.2,572,202.65,572,197.2,572,191.95,572,186.85,572,181.9,572,177.15,572,172.6,572,168.2,572,164,572,159.95,572,156.1,572,152.45,572,148.95,572,145.65,572,142.55,572,139.6,572,136.8,572,134.2,572,131.75,572,129.45,572,127.35,572,125.35,572,123.55,572,121.85,572,120.35,572,118.95,572,117.7,572,116.6,572,115.6,572,114.75,572,114,572,113.4,572,112.9,572,112.55,572,112.25,572,112.1,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05,572,112.05]}, 
    mc2:{view:'inviteHand.png', isImage:false, depth:2, startFrame:0, endFrame:271, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.998,0.998,0.999,0.999,0.999,0.999,0.999,0.999,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,1,1,1,1], rotation}, 
    mc3:{view:'callieHappy.png', isImage:false, depth:3, startFrame:0, endFrame:271, positionscale:[0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc4:{view:'desk.png', isImage:false, depth:4, startFrame:0, endFrame:271, position:[-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,743.5,-0.45,643.5,-0.45,640.4,-0.45,637,-0.45,633.4,-0.45,629.65,-0.45,625.75,-0.45,621.7,-0.45,617.65,-0.45,613.5,-0.45,609.35,-0.45,605.2,-0.45,601.05,-0.45,596.95,-0.45,592.85,-0.45,588.85,-0.45,584.9,-0.45,581.05,-0.45,577.25,-0.45,573.55,-0.45,569.95,-0.45,566.45,-0.45,563.1,-0.45,559.8,-0.45,556.65,-0.45,553.65,-0.45,550.75,-0.45,548,-0.45,545.35,-0.45,542.85,-0.45,540.5,-0.45,538.25,-0.45,536.15,-0.45,534.2,-0.45,532.4,-0.45,530.75,-0.45,529.25,-0.45,527.85,-0.45,526.65,-0.45,525.55,-0.45,524.6,-0.45,523.8,-0.45,523.15,-0.45,522.65,-0.45,522.3,-0.45,522.05,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522,-0.45,522], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc5:{view:'callieStressedArm.png', isImage:false, depth:5, startFrame:0, endFrame:194, position:[586.15,801.1,586.15,801.05,586.15,800.95,586.15,800.75,586.15,800.45,586.15,800.1,586.15,799.65,586.15,799.1,586.15,798.45,586.15,797.7,586.15,796.9,586.15,795.95,586.15,794.9,586.15,793.8,586.15,792.55,586.15,791.2,586.15,789.7,586.15,788.15,586.15,786.45,586.15,784.65,586.15,782.7,586.15,780.65,586.15,778.45,586.15,776.1,586.15,773.65,586.15,771.05,586.15,768.3,586.15,765.45,586.15,762.4,586.15,759.25,586.15,755.95,586.15,752.45,586.15,748.85,586.15,745.05,586.15,741.15,586.15,737.05,586.15,732.8,586.15,728.4,586.15,723.85,586.15,719.1,586.15,714.25,586.15,709.25,586.15,704.1,586.15,698.8,586.15,693.35,586.15,687.8,586.15,682.1,586.15,676.3,586.15,670.4,586.15,664.4,586.15,658.35,586.15,652.2,586.15,646,586.15,639.8,586.15,633.55,586.15,627.3,586.15,621.05,586.15,614.85,586.15,608.65,586.15,602.55,586.15,596.45,586.15,590.5,586.15,584.65,586.15,578.85,586.15,573.2,586.15,567.7,586.15,562.35,586.15,557.1,586.15,552.05,586.15,547.1,586.15,542.35,586.15,537.8,586.15,533.4,586.15,529.15,586.15,525.1,586.15,521.25,586.15,517.55,586.15,514,586.15,510.65,586.15,507.45,586.15,504.45,586.15,501.6,586.15,498.95,586.15,496.4,586.15,494.05,586.15,491.85,586.15,489.8,586.15,487.9,586.15,486.15,586.15,484.55,586.15,483.1,586.15,481.75,586.15,480.55,586.15,479.45,586.15,478.5,586.15,477.7,586.15,477,586.15,476.4,586.15,475.95,586.15,475.55,586.15,475.3,586.15,475.15,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1,586.15,475.1]}, 
    mc6:{view:'calliePoint.png', isImage:false, depth:6, startFrame:0, endFrame:271, positionscale}, 
    mc7:{view:'paperStack.png', isImage:false, depth:7, startFrame:0, endFrame:271, position:[137.05,555.05,137.05,555,137.05,554.9,137.05,554.65,137.05,554.35,137.05,553.95,137.05,553.45,137.05,552.85,137.05,552.1,137.05,551.3,137.05,550.4,137.05,549.35,137.05,548.2,137.05,546.95,137.05,545.55,137.05,544.05,137.05,542.4,137.05,540.65,137.05,538.75,137.05,536.7,137.05,534.55,137.05,532.2,137.05,529.75,137.05,527.15,137.05,524.35,137.05,521.4,137.05,518.35,137.05,515.1,137.05,511.65,137.05,508.05,137.05,504.3,137.05,500.4,137.05,496.3,137.05,492,137.05,487.55,137.05,482.95,137.05,478.2,137.05,473.25,137.05,468.15,137.05,462.9,137.05,457.5,137.05,451.95,137.05,446.3,137.05,440.5,137.05,434.6,137.05,428.65,137.05,422.6,137.05,416.5,137.05,410.35,137.05,404.2,137.05,398.05,137.05,391.9,137.05,385.75,137.05,379.7,137.05,373.7,137.05,367.8,137.05,362.05,137.05,356.35,137.05,350.85,137.05,345.45,137.05,340.2,137.05,335.15,137.05,330.25,137.05,325.55,137.05,321,137.05,316.65,137.05,312.5,137.05,308.55,137.05,304.8,137.05,301.2,137.05,297.85,137.05,294.65,137.05,291.6,137.05,288.8,137.05,286.15,137.05,283.7,137.05,281.4,137.05,279.25,137.05,277.3,137.05,275.5,137.05,273.9,137.05,272.4,137.05,271.05,137.05,269.85,137.05,268.8,137.05,267.9,137.05,267.15,137.05,266.5,137.05,265.95,137.05,265.55,137.05,265.3,137.05,265.1,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05,137.05,265.05]}, 
    mc8:{view:'paper1.png', isImage:false, depth:8, startFrame:0, endFrame:271, positionscale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1.999,1.999,1.999,1.999,1.999,1.999,1.999,1.999,1.998,1.998,1.998,1.998,2,2,1.997,1.997,1.991,1.991,1.981,1.981,1.966,1.966,1.945,1.945,1.918,1.918,1.886,1.886,1.851,1.851,1.815,1.815,1.781,1.781,1.753,1.753,1.731,1.731,1.715,1.715,1.705,1.705,1.699,1.699,1.699,1.699,1.696,1.696,1.694,1.694,1.691,1.691,1.685,1.685,1.678,1.678,1.668,1.668,1.656,1.656,1.642,1.642,1.626,1.626,1.609,1.609,1.59,1.59,1.572,1.572,1.555,1.555,1.541,1.541,1.528,1.528,1.518,1.518,1.51,1.51,1.504,1.504,1.5,1.5,1.498,1.498,1.499,1.499,1.496,1.496,1.493,1.493,1.485,1.485,1.473,1.473,1.453,1.453,1.422,1.422,1.373,1.373,1.305,1.305,1.237,1.237,1.184,1.184,1.144,1.144,1.114,1.114,1.091,1.091,1.072,1.072,1.057,1.057,1.044,1.044,1.034,1.034,1.025,1.025,1.019,1.019,1.013,1.013,1.009,1.009,1.005,1.005,1.003,1.003,1.001,1.001,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.5,-6.52,-9.04,-11.07,-12.8,-14.03,-14.77,-15,-14.78,-14.27,-13.27,-11.76,-9.55,-6.81,-3.76,-0.06,3.26,6.52,9.27,11.31,13.02,14.03,14.55,14.83,14.57,14.3,13.79,13.02,11.8,10.32,8.56,6.52,4.04,1.51,-1.05,-3.78,-6.27,-8.5,-10.28,-11.78,-12.82,-13.78,-14.3,-14.57,-14.83,-14.77,-14.56,-14.31,-14.03,-13.32,-12.53,-11.03,-9.03,-7.02,-5.31,-4.27,-3.29,-2.55,-2.04,-1.55,-1.27,-1,-0.75,-0.51,-0.29,-0.25,-0.04,-0.02,-0.01,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc9:{view:'paper2.png', isImage:false, depth:9, startFrame:0, endFrame:271, positionscale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1.989,1.989,1.979,1.979,1.969,1.969,1.959,1.959,1.95,1.95,1.94,1.94,1.93,1.93,1.92,1.92,1.911,1.911,1.901,1.901,1.891,1.891,1.881,1.881,1.872,1.872,1.862,1.862,1.852,1.852,1.843,1.843,1.833,1.833,1.823,1.823,1.814,1.814,1.804,1.804,1.797,1.797,1.779,1.779,1.765,1.765,1.75,1.75,1.735,1.735,1.72,1.72,1.706,1.706,1.691,1.691,1.676,1.676,1.662,1.662,1.647,1.647,1.632,1.632,1.617,1.617,1.603,1.603,1.588,1.588,1.573,1.573,1.558,1.558,1.543,1.543,1.528,1.528,1.513,1.513,1.499,1.499,1.459,1.459,1.421,1.421,1.386,1.386,1.351,1.351,1.319,1.319,1.288,1.288,1.258,1.258,1.23,1.23,1.204,1.204,1.179,1.179,1.156,1.156,1.135,1.135,1.115,1.115,1.096,1.096,1.08,1.08,1.065,1.065,1.051,1.051,1.039,1.039,1.029,1.029,1.02,1.02,1.013,1.013,1.007,1.007,1.003,1.003,1.001,1.001,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16.02,17.04,18.05,19.06,20.07,21.08,22.28,23.3,24.31,25.32,26.33,27.35,28.55,29.56,30.57,31.59,32.6,33.61,34.81,35.83,36.83,34.33,31.81,29.3,26.79,24.09,21.58,19.07,16.56,14.05,11.54,9.04,6.53,4.02,1.51,-0.8,-3.31,-6,-8.51,-11.02,-13.56,-12.32,-11.32,-10.51,-9.52,-8.55,-7.77,-7.01,-6.26,-5.52,-4.79,-4.25,-3.54,-3.03,-2.53,-2.04,-1.75,-1.28,-1.02,-0.76,-0.51,-0.27,-0.05,-0.02,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc10:{view:'picture_book.png', isImage:false, depth:10, startFrame:0, endFrame:271, positionscale:[0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc11:{view:'img/game/pens.png', isImage:true, depth:11, startFrame:0, endFrame:271, position:[498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,498.45,728.75,-83,644,-79.4,633.8,-75.9,623.85,-72.45,614.1,-69.1,604.6,-65.85,595.35,-62.65,586.3,-59.55,577.5,-56.55,568.95,-53.6,560.65,-50.75,552.55,-48,544.7,-45.3,537.05,-42.7,529.7,-40.2,522.55,-37.75,515.6,-35.4,508.95,-33.1,502.5,-30.95,496.25,-28.85,490.3,-26.8,484.55,-24.85,479.05,-23,473.75,-21.2,468.7,-19.55,463.9,-17.9,459.35,-16.4,455,-14.95,450.9,-13.6,447,-12.3,443.4,-11.1,440,-10,436.8,-8.95,433.9,-8,431.2,-7.15,428.7,-6.35,426.5,-5.65,424.5,-5.05,422.75,-4.5,421.2,-4.05,419.95,-3.65,418.9,-3.35,418.05,-3.15,417.45,-3.05,417.1,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417,-3,417], scale:[0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc12:{view:'img/loader/vignette_halfsize.png', isImage:true, depth:12, startFrame:0, endFrame:271, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}
}
    }

    /**
     * Animation
     * 
     */

    Animations.game2Intro ={

        spriteSheets:[
            ASSET_URL + 'img/game/story_game1.json'
        ],

        data:
        {
    mc0:{view:'img/game/intro_store_bg.jpg', isImage:true, depth:0, startFrame:0, endFrame:368, position:[0,0,-0.15,0,-0.4,0,-0.7,0,-1.1,0,-1.55,0,-2.1,0,-2.7,0,-3.4,0,-4.2,0,-5.05,0,-6,0,-7,0,-8.15,0,-9.35,0,-10.65,0,-12.05,0,-13.5,0,-15.1,0,-16.8,0,-18.6,0,-20.45,0,-22.45,0,-24.6,0,-26.8,0,-29.15,0,-31.55,0,-34.15,0,-36.8,0,-39.6,0,-42.5,0,-45.55,0,-48.75,0,-52.05,0,-55.45,0,-59,0,-62.7,0,-66.5,0,-70.45,0,-74.55,0,-78.75,0,-83.1,0,-87.6,0,-92.2,0,-96.9,0,-101.8,0,-106.75,0,-111.85,0,-117.05,0,-122.4,0,-127.8,0,-133.35,0,-138.95,0,-144.7,0,-150.45,0,-156.3,0,-162.2,0,-168.15,0,-174.15,0,-180.2,0,-186.25,0,-192.25,0,-198.3,0,-204.35,0,-210.3,0,-216.25,0,-222.15,0,-228,0,-233.75,0,-239.45,0,-245.05,0,-250.55,0,-255.9,0,-261.2,0,-266.35,0,-271.35,0,-276.25,0,-281,0,-285.6,0,-290.1,0,-294.4,0,-298.6,0,-302.65,0,-306.55,0,-310.25,0,-313.85,0,-317.3,0,-320.6,0,-323.75,0,-326.75,0,-329.6,0,-332.35,0,-334.95,0,-337.4,0,-339.7,0,-341.9,0,-343.95,0,-345.85,0,-347.65,0,-349.35,0,-350.9,0,-352.35,0,-353.65,0,-354.85,0,-355.95,0,-356.95,0,-357.85,0,-358.65,0,-359.35,0,-359.9,0,-360.4,0,-360.8,0,-361.1,0,-361.35,0,-361.45,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-361.5,0,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1,-266.1,-193.1], scale}, 
    mc1:{view:'banditSneak.png', isImage:false, depth:1, startFrame:0, endFrame:189, positionscale:[1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1.796,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc2:{view:'glance.png', isImage:false, depth:2, startFrame:0, endFrame:127, positionscale}, 
    mc3:{view:'throwApple.png', isImage:false, depth:3, startFrame:0, endFrame:368, positionscalerotation}, 
    mc4:{view:'throwApple.png', isImage:false, depth:4, startFrame:0, endFrame:368, positionscale}, 
    mc5:{view:'throwApple.png', isImage:false, depth:5, startFrame:0, endFrame:368, position:[713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,713.65,-40.2,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3,971.1,224.3], scale}, 
    mc6:{view:'throwApple.png', isImage:false, depth:6, startFrame:0, endFrame:368, position:[714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,714.6,-37.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95,987.85,264.95], scalerotation}, 
    mc7:{view:'throwApple.png', isImage:false, depth:7, startFrame:0, endFrame:368, position:[703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,703.5,-21.75,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557,787.3,557], scalerotation}, 
    mc8:{view:'throwApple.png', isImage:false, depth:8, startFrame:0, endFrame:368, position:[662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,662.6,-31.7,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15,48.4,377.15], scale}, 
    mc9:{view:'throwBottle.png', isImage:false, depth:9, startFrame:0, endFrame:368, positionscalerotation}, 
    mc10:{view:'throwBottle.png', isImage:false, depth:10, startFrame:0, endFrame:368, position:[681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,681.1,-28.35,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6,382.4,437.6], scalerotation}, 
    mc11:{view:'throwBottle.png', isImage:false, depth:11, startFrame:0, endFrame:368, position:[677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,677.85,-27.7,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6,324.25,449.6], scalerotation}, 
    mc12:{view:'throwBottle.png', isImage:false, depth:12, startFrame:0, endFrame:368, position:[683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,683.5,-15.95,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65,425.85,661.65], scalerotation}, 
    mc13:{view:'throwPot.png', isImage:false, depth:13, startFrame:0, endFrame:368, position:[702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,702.15,-30.5,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4,762.7,399.4], scale}, 
    mc14:{view:'throwPot.png', isImage:false, depth:14, startFrame:0, endFrame:368, position:[696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,696,-31.6,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379,651.8,379], scalerotation}, 
    mc15:{view:'throwPot.png', isImage:false, depth:15, startFrame:0, endFrame:368, position:[695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,695.45,-30.4,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2,642.2,401.2], scale}, 
    mc16:{view:'throwCorn.png', isImage:false, depth:16, startFrame:0, endFrame:368, position:[682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,682.6,-32.55,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65,409.85,361.65], scalerotation:[7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8]}, 
    mc17:{view:'throwCorn.png', isImage:false, depth:17, startFrame:0, endFrame:368, position:[685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,685.8,-35.6,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75,467.8,306.75], scalerotation}, 
    mc18:{view:'throwCorn.png', isImage:false, depth:18, startFrame:0, endFrame:368, position:[675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,675.8,-43.45,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55,287,165.55], scalerotation}, 
    mc19:{view:'shadowCloud.png', isImage:false, depth:19, startFrame:0, endFrame:274, positionscale}, 
    mc20:{view:'bigCloud.png', isImage:false, depth:20, startFrame:0, endFrame:275, positionscalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.99,0.98,0.98,0.97,0.96,0.96,0.95,0.95,0.95,0.95,0.96,0.96,0.97,0.98,0.99,1,1,1,1,1,1,1,1,0.99,0.98,0.96,0.96,0.95,0.95,0.95,0.95,0.96,0.96,0.96,0.97,0.98,0.98,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.79,-15.03,-21.34,-27.1,-32.11,-36.57,-40.09,-42.87,-45,-41.63,-37.35,-31.86,-25.55,-18.04,-9.52,0,0,0,0,0,0,-0.5,-2.26,-5.76,-10.81,-16.56,-21.03,-23.3,-24,-23.29,-22.09,-20.78,-18.82,-16.58,-14.05,-11.05,-7.77,-4.03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5,-2.26,-5.76,-10.81,-16.56,-21.03,-23.3,-24,-23.84,-24,-22.56,-20.08,-16.58,-12.06,-6.54,0,0,0,0]}, 
    mc21:{view:'throwApple.png', isImage:false, depth:21, startFrame:0, endFrame:216, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.089,1.089,1.175,1.175,1.254,1.254,1.328,1.328,1.399,1.399,1.461,1.461,1.519,1.519,1.573,1.573,1.62,1.62,1.66,1.66,1.697,1.697,1.728,1.728,1.755,1.755,1.776,1.776,1.791,1.791], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41.14,80.19,116.31,150.19,-178.47,-149.44,-123.06,-99.01,-77.48,-58.42,-41.84,-27.58,-15.82,-6.75,0]}, 
    mc22:{view:'bigCloud.png', isImage:false, depth:22, startFrame:0, endFrame:275, position:[1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,1153.3,-131.05,429.15,48.05,427.1,41.35,425.1,34.65,423.15,28.05,443.15,11.5,469.75,-5.85,504.15,-22.2,546.2,-34.65,595.5,-40.3,651.3,-35.55,709.85,-17.1,766.2,17.1,815.45,69.1,849.85,137,862.65,216.85,847.5,111.3,795,33.95,725.4,-10.15,655.95,-25.3,596.45,-20.7,551.65,-6.25,520.6,10.1,493.95,25.95,465.45,47.65,436.3,77.75,409.25,117.15,388.4,166.35,378.15,223.1,382.85,285.35,406.35,347.75,450.5,401.95,514.55,439.8,437.2,388.4,390.5,318.95,370.8,244.55,372.95,176.8,388.8,120.25,410.95,77.3,432.8,47.65,451.15,28.05,506.55,-11.7,580.85,-32.65,667.55,-23.3,751.3,24.6,813.5,113.4,429.15,48.05,427.1,41.35,425.1,34.65,423.15,28.05,424.5,28.2,426.2,28.4,428.2,28.65,430.5,28.95,433.1,29.25,436.05,29.6,439.25,30,442.75,30.45,446.55,30.95,450.7,31.45,455.15,32.05,467.85,26.65,480.4,21.75,491.35,18.2,501.15,15.05,509.15,12.9,515.3,11.65,520.6,10.1,514.75,12.05,508.8,13.55,500.85,15.95,492.35,18.45,483.1,21.15,472.1,24.95,460.55,28.85,448.5,33.2,434.7,38.8,421.15,44.05,428.9,39.85,435.55,36.3,441.15,33.3,445.55,30.95,448.9,29.2,451.15,28.05,444.95,33.6,437.6,40.25,429.15,48.05], scalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.99,0.99,0.98,0.98,0.97,0.97,0.96,0.96,0.95,0.96,0.97,0.98,0.98,0.99,1,1,1,1,0.99,0.98,0.98,0.98,0.97,0.96,0.96,0.95,0.96,0.97,0.98,0.98,0.99,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.02,13.31,22.07,32.09,43.39,56.15,70.17,85.25,101.77,119.58,138.79,112.03,88.44,67.67,49.89,35.11,23.55,15,8.06,0.01,-9.52,-20.54,-33.06,-46.88,-62.19,-78.96,-97,-116.56,-93.3,-72.93,-54.63,-38.82,-25.32,-14.32,-6.01,0,17.56,37.36,59.4,83.24,109.29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.06,6.03,8.54,10.76,12.52,13.81,15,14.07,13.27,12.06,10.81,9.51,7.8,6.05,4.26,2.06,0,0,0,0,0,0,0,0,0,0]}, 
    mc23:{view:'throwBottle.png', isImage:false, depth:23, startFrame:0, endFrame:220, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.078,1.078,1.153,1.153,1.225,1.225,1.292,1.292,1.355,1.355,1.415,1.415,1.47,1.47,1.521,1.521,1.569,1.569,1.612,1.612,1.651,1.651,1.686,1.686,1.717,1.717], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-30,-36.61,-42.9,-48.91,-54.65,-59.93,-64.93,-69.47,-73.73,-77.72,-81.44,-84.69,-87.48,-90]}, 
    mc24:{view:'smallCloud.png', isImage:false, depth:24, startFrame:0, endFrame:275, positionscale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1.997,1.997,1.997,1.997,1.997,1.997,1.998,1.998,2,2,1.999,1.999,2,2,1.997,1.997,1.997,1.997,1.997,1.997,2,2,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.998,1.998,1.998,1.999,1.999,1.999,1.999,2,2,2,2,1.998,1.998,1.997,1.997,2,2,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.998,1.998,1.998,1.998,1.999,1.999,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1.999,1.999,1.999,1.999,1.999,1.999,1.999,1.999,1.998,1.998,2,2,1.999,1.999,1.999,1.999,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,57.18,41.09,26.54,13.55,2.3,-7.03,-15,-30.56,-43.15,-53.13,-60,-57.44,-54.65,-51.39,-47.87,-43.87,-39.6,-34.87,-30.06,-24.59,-19.04,-13.02,-6.55,0,4.27,20.54,39.36,45,41.88,38.36,34.35,29.83,24.82,19.31,13.3,6.8,0,0,0,0,0,0,0,0,0,-2.81,-5.54,-8.03,-10.06,-12.03,-13.56,-15,-9.77,-5.52,-2.27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc25:{view:'smallCloud.png', isImage:false, depth:25, startFrame:0, endFrame:275, position:[-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,-287,297.1,337.15,103.05,344.5,93.35,371.55,67,425.65,38.2,508.15,33.45,595.35,85.85,626.25,150.2,626.5,215.9,602.45,270.7,564.1,308.1,519.2,328.9,475.6,334.65,437.25,329.55,405.85,318,382.1,303.75,333.75,266.05,305.05,221.2,293.4,176.85,294.6,138.2,303.95,106.5,317.15,83.05,341.65,63.35,369.4,48.75,398.15,39.85,427,35.95,455.1,36.55,481.1,41,505.5,48.5,527.2,58.2,546.25,69.55,562.35,81.6,575.7,93.85,587.6,106.65,597.15,118.6,580.1,96.5,552.95,71.45,511.3,48,457.4,35.9,394.7,44.9,337.15,83.05,337.1,85.6,337.1,88.9,337.1,92.9,337.1,97.6,337.15,103.05,337.15,103.05,338.2,104.5,341.6,109.1,347.2,116.7,355,127.3,365.15,141.05,367.05,131.65,368.8,123,370.45,115.1,371.95,107.9,373.3,101.45,374.45,95.75,375.5,90.8,376.35,86.5,377.15,83.05,363.85,83,351.9,83,341.25,83,331.9,83,323.85,83,317.15,83.05,319.65,83,322.1,83,324.35,83,326.45,83,328.4,83,330.25,83,331.9,83,333.45,83,334.8,83,336.05,83,337.15,83.05,337.1,83,337.1,83,337.1,83,337.1,83,337.1,83,337.15,83.05,337.1,87.7,337.1,94.4,337.15,103.05], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1.998,1.998,1.997,1.997,1.998,1.998,2,2,1.997,1.997,1.997,1.997,2,2,1.998,1.998,1.997,1.997,1.997,1.997,1.997,1.997,1.998,1.998,2,2,1.998,1.998,1.997,1.997,1.997,1.997,1.998,1.998,1.999,1.999,2,2,1.999,1.999,1.998,1.998,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.997,1.998,1.998,1.998,1.998,1.999,1.999,2,2,1.999,1.999,1.999,1.999,2,2,1.999,1.999,1.999,1.999,1.998,1.998,1.997,1.997,1.997,1.997,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], alpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.99,0.98,0.97,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.96,0.97,0.98,0.99,1,1,1,0.99,0.98,0.98,0.98,0.97,0.97,0.96,0.96,0.96,0.95,0.95,0.95,0.95,0.96,0.97,0.98,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.05,16.78,37.83,67.21,105,130.88,154.93,176.94,-163.45,-145.44,-129.62,-115.81,-104.03,-94.31,-73.48,-54.67,-37.87,-23.29,-10.54,0,11.3,22.29,32.58,42.37,51.63,60.19,68.42,75.94,82.94,89.23,94.81,100.26,105,96.03,83.94,67.97,48.86,26.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc26:{view:'throwPot.png', isImage:false, depth:26, startFrame:0, endFrame:229, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.164,1.164,1.325,1.325,1.477,1.477,1.624,1.624,1.764,1.764,1.896,1.896,2.024,2.024,2.144,2.144,2.256,2.256,2.365,2.365,2.467,2.467,2.559,2.559,2.646,2.646,2.731,2.731], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41.64,81.96,120.31,157.19,-167.73,-134.13,-102.26,-72.17,-43.38,-16.31,8.79,32.57,54.65,75]}, 
    mc27:{view:'bandit_arm.png', isImage:false, depth:27, startFrame:0, endFrame:265, position:[1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,1164.95,111,624,264,605.35,276.5,587.85,291.1,571.75,307.5,557.55,325.35,545.4,344.4,535.65,364.15,528.1,384.05,530.95,375.25,533.95,366.5,537.4,357.9,541.1,349.35,545.2,340.85,549.7,332.25,554.25,324,563.75,312.05,574.25,300.7,585.6,290,597.7,280.35,610.65,271.65,624,264,607.5,276.2,591.1,289.35,575.35,303.2,560.05,317.8,545.25,333.05,547.4,330.65,549.55,328.35,551.85,326.15,554.25,324,556.6,325.6,559.2,327.35,562.15,329.2,565.45,331.1,569,333.25,572.85,335.3,565.2,334.15,558.6,333.2,553.15,332.75,548.7,332.65,545.25,333.05,547.4,330.65,549.55,328.35,551.85,326.15,554.25,324,563.75,312.05,574.25,300.7,585.6,290,597.7,280.35,610.65,271.65,624,264,611.95,272.7,600.25,281.8,588.75,291.35,577.45,301.25,566.45,311.5,555.9,322.1,545.25,333.05,546.5,331.65,547.6,330.4,548.9,328.95,550.1,327.85,551.55,326.4,552.8,325.3,554.25,324,563.75,312.05,574.25,300.7,585.6,290,597.7,280.35,610.65,271.65,624,264,624,264,624,264,624,264,624,264,624,264], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.999,0.999,1,1,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,1,1,0.998,0.998,0.999,0.999,0.999,0.999,0.999,0.999,1,1,1,1,1,1,0.999,0.999,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.998,0.998,0.998,0.998,1,1,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,1,1,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,1,1,0.999,0.999,0.998,0.998,0.998,0.998,1,1,0.998,0.998,0.999,0.999,0.999,0.999,0.999,0.999,1,1,1,1,1,1,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,1,1,0.998,0.998,0.999,0.999,0.999,0.999,0.999,0.999,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.56,-19.32,-29.08,-38.85,-48.62,-58.39,-67.99,-64.2,-60.43,-56.66,-52.89,-49.12,-45.16,-41.46,-34.57,-27.58,-20.58,-13.78,-6.79,0,-5.82,-11.82,-17.83,-23.84,-30,-32.83,-35.62,-38.6,-41.46,-45.15,-48.91,-52.68,-56.44,-60.2,-64,-57.18,-50.4,-43.61,-36.83,-30,-32.83,-35.62,-38.6,-41.46,-34.57,-27.58,-20.58,-13.78,-6.79,0,-4.26,-8.52,-12.79,-17.05,-21.32,-25.59,-30,-31.59,-33.31,-34.85,-36.58,-38.12,-39.85,-41.46,-34.57,-27.58,-20.58,-13.78,-6.79,0,0,0,0,0,0]}, 
    mc28:{view:'bigCloud.png', isImage:false, depth:28, startFrame:0, endFrame:275, positionscalerotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,87.21,69.22,51.38,33.35,15.53,-2.28,-20.23,16.52,49.62,78.96,104.31,126.32,144.41,158.79,139.39,121.06,103.79,87.95,72.95,59.15,46.37,34.82,24.3,15,22.33,31.82,43.11,56.39,71.45,88.42,81.23,72.67,62.42,50.86,37.62,23.07,7.19,5.56,4.01,2,-0.27,-2.79,-5.76,-8.98,0,-2.78,-5.76,-8.55,-11.52,-14.31,-17.29,-20.23,-16.03,-12.28,-9.01,-6.04,-3.55,-1.53,0,2.01,3.8,5.56,7.29,8.81,10.29,11.57,12.81,14.02,15,15.56,16.52,17.54,18.78,20.06,21.72,21.72,19.56,17.07,14.32,11.3,7.82,4.25,0.04,-4.06,-8.98]}, 
    mc29:{view:'throwCorn.png', isImage:false, depth:29, startFrame:0, endFrame:234, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.121,1.121,1.238,1.238,1.343,1.343,1.444,1.444,1.534,1.534,1.62,1.62,1.694,1.694,1.765,1.765,1.824,1.824,1.876,1.876,1.923,1.923,1.962,1.962], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,-31.3,-88.73,-142.17,168.22,122.32,80.47,42.36,8.04,-22.08,-48.65,-71.42,-90]}, 
    mc30:{view:'bigCloud.png', isImage:false, depth:30, startFrame:0, endFrame:275, positionscalerotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.75,4.02,6.8,10.28,14.31,18.8,23.46,48.16,71.18,91.8,110.82,127.87,143.14,156.22,167.49,176.8,-170.74,-155.68,-137.87,-117.31,-94.05,-68.44,-39.86,-8.74,-14.57,-36.37,-77.71,-123.86,-151.9,-159.53,-144.12,-125.33,-103.52,-78.71,-50.62,-19.29,15,11.55,8.56,6.05,4.01,2.26,0.8,0,0,1.81,4.29,7.26,10.54,14.31,18.58,23.46,9.77,-2.56,-14.26,-24.58,-34.08,-42.37,-49.65,-55.9,-60.97,-72.47,-86.46,-102.57,-121.57,-142.89,-166.7,167.23,138.54,132.38,110.29,68.45,21.08,-7.03,-15,-15,-9.81,-3.26,5.01,15,10.3,6.54,3.54,1.3,0]}, 
    mc31:{view:'dudesFlight.png', isImage:false, depth:31, startFrame:0, endFrame:368, position:[376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,376.15,-216.85,121.3,146.7,120.2,146.7,119.15,146.7,118.15,146.7,117.15,146.7,116.2,146.7,115.3,146.7,114.45,146.7,113.6,146.7,112.75,146.7,112,146.7,111.25,146.7,110.55,146.7,109.9,146.7,109.25,146.7,108.65,146.7,108.05,146.7,107.55,146.7,107.05,146.7,106.55,146.7,106.15,146.7,105.75,146.7,105.4,146.7,105.05,146.7,106.4,146.7,107.8,146.7,109.3,146.7,110.95,146.7,112.65,146.7,114.45,146.7,116.35,146.7,118.35,146.7,120.45,146.7,122.65,146.7,124.95,146.7,127.3,146.7,129.8,146.7,132.35,146.7,135.05,146.7,137.8,146.7,140.65,146.7,143.6,146.7,146.65,146.7,149.8,146.7,153.05,146.7,149.45,146.7,146.05,146.7,142.8,146.7,139.7,146.7,136.8,146.7,134.1,146.7,131.5,146.7,129.15,146.7,126.9,146.7,124.85,146.7,123,146.7,121.3,146.7,122,146.7,122.8,146.7,123.7,146.7,124.7,146.7,125.8,146.7,126.95,146.7,128.2,146.7,129.6,146.7,131.05,146.7,132.55,146.7,134.2,146.7,135.95,146.7,137.75,146.7,139.65,146.7,141.65,146.7,143.75,146.7,145.95,146.7,148.2,146.7,150.6,146.7,153.05,146.7,145.05,146.7,137.5,146.7,130.35,146.7,123.65,146.7,117.4,146.7,111.55,146.7,106.15,146.7,101.2,146.7,96.65,146.7,92.55,146.7,88.9,146.7,85.65,146.7,82.85,146.7,80.45,146.7,78.5,146.7,77,146.7,75.9,146.7], scale}, 
    mc32:{view:'bigStar.png', isImage:false, depth:32, startFrame:0, endFrame:293, position:[-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,-25.5,-146.5,564.6,296.05,330.4,53.75,113.45,-170.5,-86.05,-376.9,-268.2,-565.35,-433.15,-735.8,-580.55,-888.3,-710.65,-1022.9,-823.45,-1139.55,-918.9,-1238.25,-997,-1318.95,-1057.7,-1381.8,-1101.1,-1426.65,-1127.15,-1453.6,-1135.75,-1462.35,-1130.25,-1456.8,-1114.55,-1440.45,-1088.3,-1413.35,-1051.55,-1375.4,-1004.35,-1326.55,-946.6,-1266.8,-878.4,-1196.3,-799.75,-1114.9,-710.5,-1022.65,-610.8,-919.55,-500.6,-805.6,-379.9,-680.7,-248.7,-545.1,-107.05,-398.55,45.1,-241.15,207.8,-72.95,380.95,106.1,564.6,296.05], scale:[0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.166,0.157,0.157,1.297,1.297,2.353,2.353,3.325,3.325,4.212,4.212,5.015,5.015,5.733,5.733,6.366,6.366,6.916,6.916,7.38,7.38,7.76,7.76,8.056,8.056,8.267,8.267,8.394,8.394,8.436,8.436,8.41,8.41,8.334,8.334,8.206,8.206,8.027,8.027,7.797,7.797,7.516,7.516,7.184,7.184,6.801,6.801,6.366,6.366,5.881,5.881,5.344,5.344,4.756,4.756,4.117,4.117,3.427,3.427,2.686,2.686,1.894,1.894,1.051,1.051,0.157,0.157]}, 
    mc33:{view:'whiteFlash.png', isImage:false, depth:33, startFrame:0, endFrame:368, position:[-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,-116.2,0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0.33,0.67,1,0.75,0.5,0.25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc34:{view:'img/loader/vignette_halfsize.png', isImage:true, depth:34, startFrame:0, endFrame:368, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc35:{view:'glance.png', isImage:false, depth:2, startFrame:137, endFrame:145, position:[771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469]}, 
    mc36:{view:'glance.png', isImage:false, depth:2, startFrame:155, endFrame:189, position:[771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469,771,469]}, 
    mc37:{view:'throwApple.png', isImage:false, depth:19, startFrame:231, endFrame:247, position:[659.2,358.6,710.9,277.35,767.4,231.05,807.25,214,820.15,210.85,807.35,204.95,777.8,185.3,743.55,149,713.7,99.1,694.05,41.75,685.8,-16.45,687.2,-70.15,695.35,-116.6,706.9,-153.85,718.7,-181.75,728.8,-201.4], scale:[1,1,1.089,1.089,1.175,1.175,1.254,1.254,1.328,1.328,1.399,1.399,1.461,1.461,1.519,1.519,1.573,1.573,1.62,1.62,1.66,1.66,1.697,1.697,1.728,1.728,1.755,1.755,1.776,1.776,1.791,1.791], rotation:[0,41.14,80.19,116.31,150.19,-178.47,-149.44,-123.06,-99.01,-77.48,-58.42,-41.84,-27.58,-15.82,-6.75,0]}, 
    mc38:{view:'throwPot.png', isImage:false, depth:23, startFrame:243, endFrame:258, position:[546.7,318.6,502.1,319.7,510.45,313.35,537.85,256.35,530.05,157.65,466.65,65.95,374.45,24.75,302.15,37.85,280.85,74.2,307.9,91.55,356.25,66.3,392.1,-0.1,394.85,-88.85,360.95,-174.4,301,-237.85], scale:[1,1,1.165,1.165,1.324,1.324,1.479,1.479,1.623,1.623,1.764,1.764,1.896,1.896,2.023,2.023,2.144,2.144,2.258,2.258,2.364,2.364,2.467,2.467,2.558,2.558,2.648,2.648,2.731,2.731], rotation:[0,-61.93,-121.33,-178.47,127.07,74.95,25.07,-22.07,-67.16,-109.32,-149.43,173.19,137.89,105.07,75]}, 
    mc39:{view:'throwBottle.png', isImage:false, depth:20, startFrame:256, endFrame:268, position:[554.35,310.9,475.9,324.55,469.7,329.95,498.1,280.45,507.25,176.3,466.95,53.9,380.85,-47.05,275.6,-104.4,179,-118.7,107.5,-103.4,66.05,-76.35,49.9,-50.1], scale:[1,1,1.093,1.093,1.18,1.18,1.263,1.263,1.338,1.338,1.411,1.411,1.474,1.474,1.535,1.535,1.588,1.588,1.635,1.635,1.678,1.678,1.717,1.717], rotation:[-30,-84.96,-136.38,175.49,130.61,89.21,50.91,16.03,-15.31,-43.62,-68.47,-90]}, 
    mc40:{view:'throwCorn.png', isImage:false, depth:25, startFrame:262, endFrame:273, position:[495,346.05,411.55,306.85,359.45,293.6,342.45,286.6,354.1,271,381.45,238.6,413.75,189.95,441.7,129.95,460.9,65.95,471.8,3.85,475.3,-50.1], scale:[1,1,1.146,1.146,1.28,1.28,1.404,1.404,1.518,1.518,1.619,1.619,1.709,1.709,1.788,1.788,1.857,1.857,1.916,1.916,1.962,1.962], rotation:[30,-2.54,-32.82,-60.45,-85.72,-108.29,-128.58,-146.38,-161.48,-174.24,175.52]}
}
    }


    /**
     * Animation
     * 
     */

    Animations.game3Intro ={

        spriteSheets:[
            ASSET_URL + 'img/game/story_game2.json',
            ASSET_URL + 'img/game/smoothie_game.json'
        ],

        data:
     {
    mc0:{view:'img/game/desert_bg.jpg', isImage:true, depth:0, startFrame:0, endFrame:401, position:[0,0,0,-0.05,0,-0.2,0,-0.5,0,-0.9,0,-1.45,0,-2.1,0,-2.9,0,-3.8,0,-4.85,0,-6.1,0,-7.45,0,-8.95,0,-10.6,0,-12.4,0,-14.4,0,-16.6,0,-18.9,0,-21.4,0,-24.1,0,-27,0,-30.1,0,-33.4,0,-36.9,0,-40.6,0,-44.55,0,-48.7,0,-53.05,0,-57.7,0,-62.5,0,-67.6,0,-72.95,0,-78.5,0,-84.3,0,-90.35,0,-96.6,0,-103.15,0,-109.9,0,-116.9,0,-124.1,0,-131.5,0,-139.1,0,-146.85,0,-154.8,0,-162.85,0,-171.05,0,-179.3,0,-187.65,0,-196.05,0,-204.45,0,-212.85,0,-221.2,0,-229.45,0,-237.65,0,-245.7,0,-253.6,0,-261.35,0,-268.95,0,-276.3,0,-283.45,0,-290.4,0,-297.1,0,-303.55,0,-309.75,0,-315.7,0,-321.4,0,-326.85,0,-332,0,-336.95,0,-341.65,0,-346.1,0,-350.3,0,-354.25,0,-358,0,-361.5,0,-364.75,0,-367.8,0,-370.65,0,-373.3,0,-375.75,0,-378,0,-380.05,0,-381.95,0,-383.65,0,-385.15,0,-386.5,0,-387.7,0,-388.75,0,-389.65,0,-390.35,0,-390.95,0,-391.45,0,-391.75,0,-391.95,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392,0,-392], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc1:{view:'puddle.png', isImage:false, depth:1, startFrame:0, endFrame:401, position:[269,1001.5,269,1001.45,269,1001.25,269,1000.9,269,1000.4,269,999.8,269,999,269,998.1,269,997,269,995.75,269,994.3,269,992.7,269,990.95,269,989,269,986.85,269,984.5,269,981.95,269,979.2,269,976.2,269,973,269,969.6,269,965.95,269,962.05,269,957.95,269,953.55,269,948.9,269,944,269,938.85,269,933.4,269,927.7,269,921.7,269,915.4,269,908.8,269,901.95,269,894.85,269,887.4,269,879.7,269,871.7,269,863.5,269,855,269,846.25,269,837.3,269,828.1,269,818.75,269,809.2,269,799.55,269,789.75,269,779.9,269,770,269,760.1,269,750.2,269,740.35,269,730.6,269,720.9,269,711.4,269,702.05,269,692.9,269,683.95,269,675.25,269,666.8,269,658.65,269,650.75,269,643.1,269,635.8,269,628.75,269,622,269,615.6,269,609.45,269,603.65,269,598.1,269,592.85,269,587.9,269,583.2,269,578.8,269,574.7,269,570.85,269,567.2,269,563.85,269,560.75,269,557.85,269,555.2,269,552.75,269,550.55,269,548.55,269,546.75,269,545.15,269,543.7,269,542.5,269,541.45,269,540.55,269,539.85,269,539.35,269,538.95,269,538.75,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65,269,538.65]}, 
    mc2:{view:'drip.png', isImage:false, depth:2, startFrame:0, endFrame:172, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.588,0.588,0.659,0.659,0.723,0.723,0.78,0.78,0.83,0.83,0.874,0.874,0.912,0.912,0.943,0.943,0.967,0.967,0.985,0.985,0.996,0.996,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.997,1,0.989,1,0.972,1,0.946,1,0.912,1,0.875,1,0.846,1,0.828,1,0.818,1,0.815,1,0.835,1,0.907,1,1.049,1,1.24,1,1.396,1,1.478,1,1.5,1,1.5,1,1.458,1,1.333,1,1.125,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.833,1,0.389]}, 
    mc3:{view:'drip.png', isImage:false, depth:3, startFrame:0, endFrame:179, positionscalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.88,0.75,0.63,0.5,0.38,0.25,0.13,0], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145.05,141.62,137.92,134.4,130.88,127.36,123.84,120.32,116.83]}, 
    mc4:{view:'drip.png', isImage:false, depth:4, startFrame:0, endFrame:179, positionscalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.88,0.75,0.63,0.5,0.38,0.25,0.13,0], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-138.75,-135.36,-131.86,-128.36,-124.86,-121.55,-118.06,-114.56,-111.15]}, 
    mc5:{view:'drip.png', isImage:false, depth:5, startFrame:0, endFrame:179, positionscalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.88,0.75,0.63,0.5,0.38,0.25,0.13,0], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171.54,172.49,173.48,174.46,175.45,176.25,177.23,178.22,179.06]}, 
    mc6:{view:'bandit.png', isImage:false, depth:6, startFrame:0, endFrame:401, position:[691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,691.15,1114.4,727.4,475.9,708.4,476,702.25,476.15,698.45,476.25,695.7,476.3,693.75,476.35,692.35,476.5,691.55,476.5,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,473.4,691.15,473.4,691.15,473.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,473.4,691.15,473.4,691.15,473.4,691.15,476.4,691.15,476.4,691.15,476.4,691.15,474.4,691.15,474.4,691.15,474.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4,691.15,477.4], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.48,1,0.752,1,0.839,1,0.896,1,0.936,1,0.964,1,0.984,1,0.996,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.71,2.06,1.3,0.8,0.52,0.27,0.04,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc7:{view:'banditEyes.png', isImage:false, depth:7, startFrame:0, endFrame:138, position:[1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,1172.95,647.95,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505,691,505], alpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1]}, 
    mc8:{view:'tower.png', isImage:false, depth:8, startFrame:0, endFrame:401, position:[566.5,696,566.5,695.9,566.5,695.6,566.5,695.1,566.5,694.4,566.5,693.45,566.5,692.3,566.5,690.9,566.5,689.3,566.5,687.4,566.5,685.3,566.5,682.9,566.5,680.25,566.5,677.35,566.5,674.15,566.5,670.65,566.5,666.8,566.5,662.7,566.5,658.3,566.5,653.55,566.5,648.45,566.5,643,566.5,637.2,566.5,631.05,566.5,624.5,566.5,617.6,566.5,610.3,566.5,602.6,566.5,594.45,566.5,585.95,566.5,577,566.5,567.65,566.5,557.85,566.5,547.65,566.5,537,566.5,525.9,566.5,514.45,566.5,502.55,566.5,490.25,566.5,477.6,566.5,464.55,566.5,451.2,566.5,437.5,566.5,423.55,566.5,409.35,566.5,394.95,566.5,380.35,566.5,365.7,566.5,350.9,566.5,336.15,566.5,321.35,566.5,306.7,566.5,292.1,566.5,277.7,566.5,263.55,566.5,249.6,566.5,235.95,566.5,222.65,566.5,209.65,566.5,197.05,566.5,184.85,566.5,173.1,566.5,161.7,566.5,150.8,566.5,140.3,566.5,130.3,566.5,120.7,566.5,111.55,566.5,102.9,566.5,94.65,566.5,86.8,566.5,79.4,566.5,72.45,566.5,65.9,566.5,59.75,566.5,53.95,566.5,48.6,566.5,43.55,566.5,38.9,566.5,34.6,566.5,30.65,566.5,27.05,566.5,23.75,566.5,20.75,566.5,18.05,566.5,15.65,566.5,13.55,566.5,11.75,566.5,10.15,566.5,8.85,566.5,7.8,566.5,7,566.5,6.45,566.5,6.1,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6,566.5,6]}, 
    mc9:{view:'needle.png', isImage:false, depth:9, startFrame:0, endFrame:401, position:[833,801.8,833,801.7,833,801.4,833,800.9,833,800.2,833,799.25,833,798.1,833,796.75,833,795.1,833,793.25,833,791.1,833,788.75,833,786.1,833,783.15,833,779.95,833,776.45,833,772.7,833,768.6,833,764.15,833,759.4,833,754.35,833,748.9,833,743.1,833,736.95,833,730.45,833,723.55,833,716.25,833,708.55,833,700.45,833,691.95,833,683,833,673.65,833,663.9,833,653.7,833,643.05,833,632,833,620.55,833,608.7,833,596.4,833,583.75,833,570.75,833,557.4,833,543.75,833,529.8,833,515.65,833,501.25,833,486.7,833,472.05,833,457.3,833,442.55,833,427.8,833,413.15,833,398.65,833,384.25,833,370.1,833,356.2,833,342.55,833,329.25,833,316.3,833,303.75,833,291.55,833,279.8,833,268.45,833,257.55,833,247.1,833,237.05,833,227.5,833,218.4,833,209.7,833,201.5,833,193.65,833,186.3,833,179.35,833,172.8,833,166.65,833,160.9,833,155.5,833,150.5,833,145.85,833,141.55,833,137.6,833,134,833,130.7,833,127.7,833,125.05,833,122.65,833,120.55,833,118.7,833,117.15,833,115.85,833,114.8,833,114,833,113.45,833,113.1,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,833,113,830.6,113.6,823.55,117.05,821.3,118.8,823.25,117.2,830.25,113.7,833,113,831.9,113.3,828.05,114.6,826.75,115.15,829.05,114.15,836.7,112.55,839.55,112.55,837,112.55,829.35,114.05,826.75,115.15,829.05,114.15,836.75,112.6,839.55,112.55,837.9,112.5,836.4,112.55,835.05,112.7,833.95,112.8,833,113,832.3,113.15,831.8,113.3,831.35,113.45,831.05,113.4,831,113.45,831,113.45,831,113.45,831,113.45,831,113.45,829.95,113.8,826.55,115.25,821.5,118.65,816.15,125.15,812.9,135.6,815.25,148.5,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85,825.9,159.85], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.999,0.999,1,1,0.999,0.999,1,1,1,1,1,1,0.999,0.999,1,1,0.999,0.999,1,1,1,1,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.999,0.999,1,1,0.999,0.999,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.999,0.999,0.999,0.999,0.998,0.998,0.999,0.999,0.999,0.999,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.56,-23.54,-30,-24.29,-6.3,0,-2.78,-11.77,-15,-9.26,8.52,15,9.26,-8.52,-15,-9.26,8.52,15,11.26,7.79,4.8,2.28,0.05,-1.52,-2.8,-3.79,-4.51,-4.72,-4.72,-4.72,-4.72,-4.72,-7.31,-15.57,-29.55,-48.87,-73.7,-103.8,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72,-139.72]}, 
    mc10:{view:'sun.png', isImage:false, depth:10, startFrame:0, endFrame:401, position:[405,144,405,143.95,405,143.85,405,143.65,405,143.35,405,143,405,142.55,405,142,405,141.4,405,140.65,405,139.85,405,138.9,405,137.85,405,136.75,405,135.5,405,134.15,405,132.65,405,131.05,405,129.35,405,127.5,405,125.55,405,123.45,405,121.2,405,118.85,405,116.35,405,113.7,405,110.85,405,107.9,405,104.8,405,101.5,405,98.1,405,94.5,405,90.7,405,86.8,405,82.7,405,78.45,405,74,405,69.4,405,64.65,405,59.75,405,54.65,405,49.45,405,44.05,405,38.55,405,32.95,405,27.2,405,21.35,405,15.45,405,9.45,405,3.4,405,-2.65,405,-8.75,405,-14.85,405,-20.95,405,-27,405,-33,405,-38.95,405,-44.75,405,-50.5,405,-56.15,405,-61.65,405,-67,405,-72.2,405,-77.3,405,-82.2,405,-86.9,405,-91.5,405,-95.85,405,-100.1,405,-104.15,405,-108,405,-111.7,405,-115.2,405,-118.55,405,-121.75,405,-124.75,405,-127.6,405,-130.25,405,-132.8,405,-135.15,405,-137.4,405,-139.45,405,-141.4,405,-143.2,405,-144.9,405,-146.4,405,-147.8,405,-149.1,405,-150.25,405,-151.3,405,-152.25,405,-153.05,405,-153.75,405,-154.35,405,-154.9,405,-155.3,405,-155.6,405,-155.85,405,-155.95,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156,405,-156], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc11:{view:'smallCloud.png', isImage:false, depth:11, startFrame:0, endFrame:401, position:[276,251,276,250.95,275.95,250.8,275.85,250.55,275.75,250.2,275.6,249.75,275.4,249.15,275.2,248.5,274.95,247.7,274.65,246.75,274.35,245.7,273.95,244.55,273.55,243.25,273.1,241.8,272.6,240.2,272.05,238.5,271.45,236.65,270.85,234.6,270.15,232.45,269.4,230.15,268.6,227.65,267.8,225,266.9,222.15,265.95,219.15,264.95,215.95,263.85,212.6,262.75,209.05,261.55,205.3,260.3,201.35,259,197.2,257.65,192.85,256.2,188.3,254.7,183.5,253.1,178.55,251.5,173.35,249.75,167.95,248,162.35,246.15,156.5,244.25,150.5,242.3,144.25,240.25,137.85,238.15,131.2,236.05,124.4,233.85,117.45,231.6,110.35,229.3,103.05,226.95,95.65,224.6,88.2,222.2,80.6,219.75,72.95,217.35,65.25,214.9,57.5,212.45,49.75,210,42.05,207.6,34.4,205.2,26.8,202.85,19.3,200.5,11.9,198.2,4.6,195.95,-2.5,193.75,-9.45,191.6,-16.25,189.5,-22.85,187.5,-29.3,185.55,-35.5,183.65,-41.5,181.8,-47.3,180.05,-52.85,178.35,-58.2,176.75,-63.3,175.2,-68.2,173.7,-72.85,172.3,-77.35,171,-81.55,169.7,-85.6,168.5,-89.4,167.35,-93,166.3,-96.4,165.3,-99.6,164.35,-102.6,163.45,-105.45,162.6,-108.05,161.85,-110.5,161.1,-112.8,160.45,-114.9,159.85,-116.85,159.25,-118.65,158.75,-120.25,158.3,-121.7,157.9,-123.05,157.5,-124.25,157.2,-125.25,156.9,-126.15,156.65,-126.95,156.45,-127.6,156.3,-128.1,156.15,-128.5,156.05,-128.8,156,-128.95,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129,156,-129], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], alpha:[1,1,1,1,1,1,1,0.99,0.99,0.99,0.98,0.98,0.98,0.98,0.97,0.97,0.96,0.96,0.95,0.95,0.94,0.93,0.93,0.92,0.91,0.9,0.89,0.88,0.87,0.86,0.85,0.84,0.82,0.81,0.8,0.78,0.77,0.75,0.73,0.72,0.7,0.68,0.67,0.65,0.63,0.61,0.59,0.57,0.55,0.53,0.51,0.49,0.47,0.45,0.43,0.41,0.39,0.37,0.35,0.33,0.32,0.3,0.28,0.26,0.25,0.23,0.21,0.2,0.19,0.17,0.16,0.15,0.14,0.13,0.11,0.11,0.09,0.09,0.08,0.07,0.06,0.05,0.05,0.04,0.04,0.03,0.03,0.02,0.02,0.02,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc12:{view:'bigCloud.png', isImage:false, depth:12, startFrame:0, endFrame:401, position:[582,106,582,105.95,582.05,105.8,582.15,105.55,582.25,105.2,582.4,104.75,582.6,104.15,582.8,103.5,583.05,102.7,583.35,101.75,583.65,100.7,584.05,99.55,584.45,98.25,584.9,96.8,585.4,95.2,585.95,93.5,586.55,91.65,587.15,89.6,587.85,87.45,588.6,85.15,589.4,82.65,590.2,80,591.1,77.15,592.05,74.15,593.05,70.95,594.15,67.6,595.25,64.05,596.45,60.3,597.7,56.35,599,52.2,600.35,47.85,601.8,43.3,603.3,38.5,604.9,33.55,606.5,28.35,608.25,22.95,610,17.35,611.85,11.5,613.75,5.5,615.7,-0.75,617.75,-7.15,619.85,-13.8,621.95,-20.6,624.15,-27.55,626.4,-34.7,628.7,-41.95,631.05,-49.35,633.4,-56.85,635.8,-64.4,638.25,-72.05,640.65,-79.8,643.1,-87.5,645.55,-95.25,648,-102.95,650.4,-110.6,652.8,-118.2,655.15,-125.7,657.5,-133.1,659.8,-140.4,662.05,-147.5,664.25,-154.5,666.4,-161.3,668.5,-167.9,670.5,-174.3,672.45,-180.5,674.35,-186.5,676.2,-192.3,677.95,-197.85,679.65,-203.2,681.25,-208.3,682.8,-213.2,684.25,-217.9,685.7,-222.35,687,-226.6,688.3,-230.6,689.5,-234.4,690.65,-238,691.7,-241.4,692.7,-244.6,693.65,-247.65,694.55,-250.45,695.4,-253.1,696.15,-255.55,696.9,-257.8,697.55,-259.95,698.15,-261.85,698.7,-263.65,699.25,-265.25,699.7,-266.75,700.1,-268.05,700.5,-269.25,700.8,-270.3,701.1,-271.2,701.35,-271.95,701.55,-272.6,701.65,-273.1,701.8,-273.5,701.9,-273.8,701.95,-273.95,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274,702,-274], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], alpha:[1,1,1,1,1,1,1,0.99,0.99,0.99,0.98,0.98,0.98,0.98,0.97,0.97,0.96,0.96,0.95,0.95,0.94,0.93,0.92,0.91,0.91,0.9,0.89,0.88,0.87,0.86,0.85,0.84,0.82,0.81,0.79,0.78,0.77,0.75,0.73,0.72,0.7,0.68,0.66,0.65,0.63,0.61,0.59,0.57,0.55,0.53,0.51,0.49,0.47,0.45,0.43,0.41,0.39,0.37,0.35,0.33,0.31,0.29,0.28,0.26,0.24,0.23,0.21,0.2,0.18,0.17,0.16,0.14,0.13,0.12,0.11,0.1,0.09,0.08,0.07,0.07,0.06,0.05,0.05,0.04,0.04,0.03,0.02,0.02,0.02,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc13:{view:'img/game/store_front.jpg', isImage:true, depth:13, startFrame:0, endFrame:307, position:[-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,-5.55,-86,0.75,0.7,-0.55,-0.05,-1.9,-0.75,-3.2,-1.5,-4.45,-2.2,-5.75,-2.95,-7.05,-3.65,-8.35,-4.35,-9.7,-5.1,-11,-5.85,-12.3,-6.55,-13.55,-7.3,-14.85,-8.05,-16.15,-8.75,-17.5,-9.5,-18.8,-10.25,-20.1,-10.9,-21.35,-11.65,-22.6,-12.3,-23.9,-13.05,-25.2,-13.8,-26.55,-14.5,-27.85,-15.25,-29.15,-16,-30.45,-16.7,-31.7,-17.45,-33,-18.2,-34.35,-18.85,-35.65,-19.6,-36.95,-20.3,-38.25,-21.05,-39.55,-21.8,-40.8,-22.5,-42.15,-23.25,-43.45,-24,-44.75,-24.7,-46.05,-25.45,-47.35,-26.15,-48.65,-26.85,-49.95,-27.6,-51.25,-28.35,-52.55,-29.05,-54.25,-29.3,-54.25,-29.3], scale:[0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.087,1,1,1.002,1.002,1.004,1.004,1.006,1.006,1.008,1.008,1.01,1.01,1.012,1.012,1.014,1.014,1.016,1.016,1.018,1.018,1.02,1.02,1.022,1.022,1.024,1.024,1.026,1.026,1.028,1.028,1.03,1.03,1.032,1.032,1.034,1.034,1.036,1.036,1.038,1.038,1.04,1.04,1.042,1.042,1.044,1.044,1.046,1.046,1.048,1.048,1.05,1.05,1.052,1.052,1.054,1.054,1.056,1.056,1.058,1.058,1.06,1.06,1.062,1.062,1.064,1.064,1.066,1.066,1.068,1.068,1.07,1.07,1.072,1.072,1.074,1.074,1.076,1.076,1.078,1.078,1.08,1.08,1.082,1.082,1.084,1.084,1.084,1.084]}, 
    mc14:{view:'img/game/intro_saloon_bg.jpg', isImage:true, depth:14, startFrame:0, endFrame:401, positionscale}, 
    mc15:{view:'maybelle.png', isImage:false, depth:15, startFrame:0, endFrame:401, position:[244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,244.5,-69.15,456.25,109.85,456.25,104.7,456.25,99.65,456.25,94.75,456.25,89.95,456.25,85.25,456.25,80.7,456.25,76.25,456.25,71.9,456.25,67.7,456.25,63.6,456.25,59.65,456.25,55.8,456.25,52.05,456.25,48.45,456.25,44.95,456.25,41.55,456.25,38.3,456.25,35.15,456.25,32.1,456.25,29.2,456.25,26.4,456.25,23.75,456.25,21.2,456.25,18.8,456.25,16.45,456.25,14.25,456.25,12.2,456.25,10.25,456.25,8.4,456.25,6.65,456.25,5.05,456.25,3.6,456.25,2.25,456.25,1,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15,456.25,-0.15], scale}, 
    mc16:{view:'eyeLeft.png', isImage:false, depth:16, startFrame:0, endFrame:360, position:[194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,194.7,-74.25,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85], scale}, 
    mc17:{view:'saloonBar.png', isImage:false, depth:17, startFrame:0, endFrame:401, positionscale:[0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc18:{view:'machine_body.png', isImage:false, depth:18, startFrame:0, endFrame:401, positionscale:[0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc19:{view:'machine_glass.png', isImage:false, depth:19, startFrame:0, endFrame:401, position:[53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,137.15,53.4,127.15,53.4,122.95,53.4,118.8,53.4,114.8,53.4,110.85,53.4,107,53.4,103.3,53.4,99.65,53.4,96.1,53.4,92.65,53.4,89.3,53.4,86.05,53.4,82.9,53.4,79.85,53.4,76.9,53.4,74.05,53.4,71.25,53.4,68.6,53.4,66.05,53.4,63.55,53.4,61.15,53.4,58.9,53.4,56.7,53.4,54.6,53.4,52.65,53.4,50.75,53.4,48.95,53.4,47.25,53.4,45.65,53.4,44.15,53.4,42.75,53.4,41.4,53.4,40.2,53.4,39.1,53.4,38.05,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15,53.4,37.15], scale:[0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704,0.704], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc20:{view:'machine_button.png', isImage:false, depth:20, startFrame:0, endFrame:401, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc21:{view:'char1.png', isImage:false, depth:21, startFrame:0, endFrame:401, position:[-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-25,715.95,-85,359,-83.4,354.75,-81.85,350.5,-80.3,346.3,-78.8,342.15,-77.25,338.1,-75.8,334.05,-74.3,330.05,-72.85,326.1,-71.4,322.2,-69.9,318.3,-68.55,314.5,-67.15,310.65,-65.75,306.95,-64.35,303.25,-63,299.55,-61.7,296,-60.35,292.4,-59.05,288.9,-57.8,285.4,-56.5,281.95,-55.25,278.55,-54,275.25,-52.8,271.9,-51.6,268.6,-50.35,265.4,-49.15,262.25,-48.1,259.1,-46.95,256,-45.75,252.95,-44.7,249.95,-43.6,246.95,-42.5,244.1,-41.45,241.2,-40.35,238.4,-39.35,235.65,-38.35,232.85,-37.35,230.15,-36.35,227.5,-35.4,224.9,-34.5,222.35,-33.55,219.85,-32.6,217.35,-31.7,214.9,-30.85,212.55,-29.95,210.15,-29.1,207.85,-28.25,205.6,-27.45,203.4,-26.65,201.2,-25.85,199.1,-25.05,197,-24.35,194.95,-23.6,192.95,-22.85,191.05,-22.15,189.1,-21.4,187.2,-20.85,185.35,-20.15,183.6,-19.5,181.85,-18.85,180.15,-18.25,178.5,-17.65,176.95,-17.1,175.4,-16.55,173.85,-15.95,172.4,-15.4,170.95,-14.95,169.55,-14.45,168.2,-13.95,166.85,-13.5,165.65,-13.05,164.45,-12.6,163.25,-12.15,162.15,-11.8,161,-11.4,160,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159,-11.05,159], scale}, 
    mc22:{view:'char3.png', isImage:false, depth:22, startFrame:0, endFrame:401, positionscale}, 
    mc23:{view:'char2.png', isImage:false, depth:23, startFrame:0, endFrame:401, position:[-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,-15.25,717.7,54.1,414.05,54.75,409.75,55.35,405.6,56,401.45,56.6,397.35,57.25,393.3,57.85,389.35,58.45,385.35,59,381.4,59.6,377.55,60.25,373.7,60.75,369.9,61.35,366.15,61.9,362.45,62.45,358.8,63.05,355.15,63.55,351.6,64.1,348.05,64.6,344.55,65.15,341.05,65.65,337.7,66.2,334.35,66.65,331.05,67.2,327.75,67.65,324.55,68.15,321.35,68.65,318.2,69.1,315.05,69.55,312,70,309,70.45,306,70.95,303.1,71.4,300.2,71.8,297.35,72.2,294.55,72.6,291.85,73,289.1,73.4,286.4,73.85,283.8,74.25,281.25,74.6,278.65,75,276.15,75.35,273.75,75.7,271.3,76.1,268.95,76.45,266.6,76.8,264.35,77.1,262.05,77.45,259.9,77.8,257.75,78.1,255.65,78.45,253.55,78.7,251.55,79.05,249.6,79.3,247.6,79.6,245.75,79.85,243.85,80.15,242.1,80.4,240.3,80.7,238.6,80.95,236.95,81.15,235.3,81.45,233.7,81.65,232.15,81.9,230.7,82.1,229.2,82.3,227.75,82.5,226.4,82.7,225.05,82.95,223.8,83.1,222.5,83.3,221.35,83.45,220.2,83.65,219.05,83.8,218,83.95,217,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05,84.1,216.05], scale}, 
    mc24:{view:'char5.png', isImage:false, depth:24, startFrame:0, endFrame:401, positionscale}, 
    mc25:{view:'char4.png', isImage:false, depth:25, startFrame:0, endFrame:401, positionscale}, 
    mc26:{view:'img/loader/vignette_halfsize.png', isImage:true, depth:26, startFrame:0, endFrame:401, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc27:{view:'eyeLeft.png', isImage:false, depth:10, startFrame:370, endFrame:384, position:[503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85]}, 
    mc28:{view:'eyeLeft.png', isImage:false, depth:10, startFrame:391, endFrame:401, position:[503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85,503.75,79.85]}
}
    }

    /**
     * Animation
     * 
     */

    Animations.game4Intro ={

        spriteSheets:[
            ASSET_URL + 'img/game/story_game3.json'
        ],

        data:
        {
    mc0:{view:'img/game/groundBG.jpg', isImage:true, depth:0, startFrame:0, endFrame:337, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc1:{view:'bandit.png', isImage:false, depth:1, startFrame:0, endFrame:111, position:[280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,280,-64,221.25,-64,45,-64,-248.75,-64,-660,-64], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc2:{view:'banditArm.png', isImage:false, depth:2, startFrame:0, endFrame:111, position:[301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,303.2,113.4,305.7,111.75,308.1,110.35,310.75,109.1,313.35,108,316.1,107,318.8,106.1,316.5,106.95,314.2,107.65,312.05,108.5,309.9,109.45,307.8,110.55,305.85,111.65,303.8,112.95,301.9,114.35,300.2,115.65,298.5,117.2,296.75,118.7,295.2,120.45,293.7,122.2,292.2,124.05,294.15,121.55,296.15,119.35,298.3,117.3,300.65,115.2,302.95,113.5,305.45,111.85,304.45,112.55,303.55,113.1,302.7,113.7,301.85,114.35,301,115,299.2,116.55,297.3,118.2,295.55,120.1,293.9,122,292.2,124.05,295,120.6,297.9,117.6,301.1,114.9,304.35,112.55,308,110.4,311.9,108.55,310.2,109.35,308.45,110.25,307,111,305.3,112,303.85,112.9,302.3,114,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,301,115,242.25,115,66,115,-227.75,115,-639,115], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1.999,1.999,1.999,1.999,1.998,1.998,1.998,1.998,1.998,1.998,2,2,1.998,1.998,1.998,1.998,1.998,1.998,1.999,1.999,1.999,1.999,2,2,1.999,1.999,2,2,2,2,1.999,1.999,1.999,1.999,1.999,1.999,1.999,1.999,2,2,1.999,1.999,1.999,1.999,1.999,1.999,2,2,2,2,2,2,1.999,1.999,2,2,2,2,2,2,2,2,2,2,1.999,1.999,1.999,1.999,1.999,1.999,2,2,1.999,1.999,1.999,1.999,2,2,1.999,1.999,1.999,1.999,2,2,1.999,1.999,1.999,1.999,1.999,1.999,1.999,1.999,1.999,1.999,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.29,6.76,10.05,13.53,16.82,20.3,23.75,20.82,18.06,15.29,12.52,9.76,6.96,4.06,1.31,-1.26,-4,-6.76,-9.51,-12.26,-15,-11.3,-7.78,-4.26,-0.55,2.78,6.44,5.04,3.78,2.52,1.26,0,-2.81,-5.82,-8.82,-11.82,-15,-9.82,-4.81,0,4.81,9.82,15,12.79,10.56,8.52,6.3,4.26,2.04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc3:{view:'banditBlur.png', isImage:false, depth:3, startFrame:0, endFrame:111, positionscale}, 
    mc4:{view:'fence.png', isImage:false, depth:4, startFrame:0, endFrame:337, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc5:{view:'padlockShadow.png', isImage:false, depth:5, startFrame:0, endFrame:337, position:[140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,140.5,-206,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1,350.1,418.1], scale:[0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], alpha}, 
    mc6:{view:'padlock.png', isImage:false, depth:6, startFrame:0, endFrame:337, positionscale:[0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,0.647,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc7:{view:'cow1.png', isImage:false, depth:7, startFrame:0, endFrame:229, position:[857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,857.15,-572.45,846.8,-572.55,836.05,-571.95,824.95,-570.6,813.6,-568.35,802,-565.2,790.3,-561,778.6,-555.85,766.95,-549.6,755.45,-542.35,744.15,-534.2,733.1,-525.05,722.3,-515.05,711.85,-504.25,698.65,-500.9,682.95,-502.25,666.65,-502.35,650.05,-501.1,633.1,-498.35,616.05,-494.05,599.05,-488.15,582.25,-480.75,565.7,-471.85,549.55,-461.6,533.85,-450.05,518.6,-437.35,503.8,-423.55,489.5,-408.85,473.45,-398.25,452.3,-398.1,430.65,-396.3,408.85,-392.65,386.9,-387.15,365.1,-379.65,343.65,-370.25,322.6,-358.95,302.2,-345.95,282.5,-331.25,263.45,-315.1,245.25,-297.65,227.75,-278.9,208.3,-268.15,182.6,-273.5,155.55,-274.55,128.25,-271.05,101.4,-263.3,75.5,-251.95,50.75,-237.65,27.2,-221,4.8,-202.45,-16.65,-182.35,-37.1,-160.65,-56.3,-137.35,-81.3,-133.45,-111.85,-138.5,-143.5,-138.45,-175.3,-132.9,-206.3,-122.25,-235.8,-107.4,-263.65,-89.1,-289.9,-68.15,-314.6,-45.05,-337.7,-20.05,-358.95,7.1,-387,8.8,-421.5,1.1,-457.65,0,-494,5.55,-529.3,17,-563.05,33.1,-595.1,52.8,-625.55,75.25,-654.05,100.3,-680.2,128.35,-707.05,127.3,-741.85,109.2,-781.75,102.65,-822.55,106.7,-861.95,118.2,-899.7,134.65,-935.95,154.2,-971.3,176,-1004.8,200.9,-1035.2,230.1,-1061.65,263.65,-1083.35,300.9], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc8:{view:'cow1.png', isImage:false, depth:8, startFrame:0, endFrame:208, position:[597.15,-262.5,597.1,-262.45,597,-262.3,596.85,-262.05,595.6,-259.95,594.2,-257.75,592.8,-255.25,591.35,-252.8,589.9,-250.25,587.35,-245.85,586,-243.35,584.65,-241,584.4,-240.55,583.3,-238.5,583.2,-238.3,582.3,-236.85,583.15,-238.35,583.25,-238.5,584.4,-240.7,585.75,-243,587.1,-245.55,588.65,-248.15,591.35,-252.85,594.2,-257.6,597.1,-262.55,600.2,-267.5,604.4,-274.1,607.5,-278.95,610.55,-283.5,613.55,-287.95,615.25,-290.35,616.8,-292.65,618.25,-294.75,618.4,-295,619.4,-296.45,618.45,-295,618.3,-294.8,616.9,-292.8,615.4,-290.6,613.75,-288.25,612,-285.7,609.05,-281.3,606,-276.6,602.95,-271.85,598.8,-265.25,596.85,-262.2,594.05,-257.45,591.4,-252.9,589.95,-250.35,588.55,-247.95,587.25,-245.75,587.15,-245.55,586.2,-243.85,587.15,-245.45,587.15,-245.5,587.25,-245.65,587.4,-245.85,588.6,-247.95,589.85,-250.15,590.15,-250.65,591.5,-253.05,594,-257.25,595.45,-259.75,596.95,-262.25,597.4,-263.05,600.1,-267.25,601.6,-269.7,603.1,-272.1,604.6,-274.35,606,-276.5,606.2,-276.9,607.55,-278.85,607.65,-279.1,607.7,-279.15,608.85,-280.8,607.85,-279.2,607.85,-279.05,607.7,-278.9,606.3,-276.9,606.05,-276.5,604.6,-274.25,603.1,-271.9,600.5,-267.7,598.85,-265.15,597.25,-262.55,595.6,-259.8,593,-255.45,591.5,-252.85,590.1,-250.35,588.65,-248,587.4,-245.7,586.2,-243.55,586.1,-243.35,585.95,-243.2,585.05,-241.75,585.8,-243.15,585.55,-243.4,585.05,-243.7,584.4,-244.2,584.25,-246.85,582.95,-247.75,582.45,-250.65,581.7,-253.65,580.6,-256.85,579.6,-259.85,578.6,-262.8,576.8,-263.85,576.35,-266.5,576.15,-268.9,575.15,-269.4,574.65,-269.75,574.25,-269.9,574.05,-269.95,558.5,-272.5,542.6,-272.8,526.55,-270.55,510.85,-265.75,495.9,-258.65,481.95,-249.55,469.05,-238.85,454.6,-244.35,439.15,-250.95,423,-256.2,406.15,-259.75,388.75,-261.35,371.05,-260.65,353.35,-257.65,336.05,-252.3,319.35,-244.85,303.5,-235.55,288.45,-224.75,274.25,-212.75,258.1,-213.9,240.45,-219.75,222.25,-224.2,203.45,-227.05,184.2,-227.95,164.75,-226.8,145.3,-223.35,126.25,-217.65,107.75,-209.8,90.05,-199.95,73.3,-188.5,57.45,-175.55,42.5,-161.5,25.8,-172.35,7.85,-182.2,-11.55,-189.75,-32.15,-194.4,-53.5,-195.65,-75,-193.4,-96.05,-187.9,-116.3,-179.6,-135.55,-169.1,-153.8,-156.85,-171.15,-142.9,-187.25,-127.4,-202.6,-115.05,-220.9,-127.6,-240.55,-138.35,-261.6,-146.8,-283.95,-152.25,-307.15,-154.15,-330.7,-152.1,-353.75,-146.3,-375.9,-137.15,-396.8,-125.4,-416.45,-111.5,-434.75,-95.75,-451.5,-78.15,-467.8,-69.95,-486.95,-84.65,-507.75,-97.35,-530.25,-107.6,-554.25,-114.6,-579.4,-117.9,-604.95,-117.2,-630.35,-112.7,-655,-104.85,-678.75,-94.25,-701.25,-81.3,-722.1,-65.6,-740.95,-47.3,-756.5,-62.6,-774.25,-81.9,-795.1,-98.45,-818.85,-111.15,-844.85,-119.35,-872.1,-122.85,-899.7,-122.1,-927,-117.85,-953.8,-111,-980.2,-102.3,-1005.7,-91.25,-1029.5,-76.35,-1050.7,-57.65,-1068.8,-35.55,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95,-1083.45,-10.95], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], rotation:[0,0,-0.02,-0.04,-0.27,-0.51,-0.76,-1.03,-1.3,-1.76,-2.02,-2.27,-2.31,-2.53,-2.55,-2.7,-2.55,-2.52,-2.3,-2.06,-1.8,-1.51,-1.03,-0.52,0.01,0.54,1.25,1.78,2.28,2.76,3.04,3.29,3.52,3.54,3.71,3.55,3.53,3.3,3.06,2.8,2.52,2.03,1.52,1,0.29,-0.03,-0.54,-1.02,-1.29,-1.54,-1.77,-1.8,-1.98,-1.8,-1.8,-1.78,-1.75,-1.53,-1.3,-1.25,-1,-0.56,-0.29,-0.03,0.06,0.52,0.78,1.03,1.28,1.52,1.56,1.77,1.79,1.8,1.98,1.8,1.79,1.77,1.55,1.51,1.26,1.01,0.56,0.28,0,-0.29,-0.75,-1.03,-1.29,-1.54,-1.78,-2,-2.03,-2.04,-2.19,-2.05,-2.04,-2.02,-2,-1.79,-1.75,-1.52,-1.28,-1.04,-0.79,-0.56,-0.51,-0.28,-0.05,-0.03,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc9:{view:'cow1.png', isImage:false, depth:9, startFrame:0, endFrame:214, position:[1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1163.4,-317.05,1142.7,-294.6,1130.4,-284.45,1117.2,-274.65,1103.6,-265.2,1089.7,-256.1,1075.5,-247.15,1061.2,-238.15,1045.45,-243.15,1029.1,-248.55,1012.25,-253.15,994.85,-256.85,977,-259.5,958.7,-261,940.1,-261.25,921.15,-260.15,902.1,-257.55,883.05,-253.5,864.1,-247.9,845.4,-240.85,827,-232.4,809,-222.6,791.45,-211.7,772.1,-213.45,751.9,-218.5,731.15,-222.6,709.9,-225.6,688.2,-227.45,666.15,-227.9,643.8,-226.9,621.25,-224.35,598.75,-220.1,576.25,-214.15,554.1,-206.45,532.3,-197.05,511,-186.05,490.3,-173.5,470.05,-162.1,448.15,-173,425.15,-182.05,401.05,-189,375.95,-193.6,350.3,-195.55,324.3,-194.85,298.15,-191.45,272.25,-185.5,246.8,-177.2,222,-166.9,197.85,-154.8,174.35,-140.8,151.9,-124.8,129.45,-117.45,104.35,-129.5,78.05,-139.5,50.65,-147.2,22.15,-152.15,-7,-154.05,-36.55,-152.75,-66.05,-148.2,-95.15,-140.55,-123.55,-130.1,-151.2,-117.05,-177.6,-101.8,-202.7,-83.95,-226.4,-66.15,-253.3,-81.75,-281.9,-95.05,-311.9,-105.6,-343.25,-113.1,-375.55,-117.25,-408.4,-117.9,-441.45,-115.1,-474.3,-109.1,-506.65,-100.15,-538.35,-88.6,-568.9,-74.2,-597.9,-56.25,-623.55,-55.15,-649.9,-77.6,-679.85,-96,-712.75,-109.6,-747.6,-118.3,-783.5,-122.45,-819.8,-122.55,-856.05,-119.35,-892,-113.4,-927.75,-105.5,-963.2,-95.65,-997.4,-82,-1029.65,-63.55,-1058.7,-39.75,-1083.25,-10.95], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc10:{view:'gate.png', isImage:false, depth:10, startFrame:0, endFrame:337, position:[524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,524,-150,533.25,-138.95,541.9,-127.95,549.9,-107.5,557.5,-96.75,564.5,-86.05,571,-75.45,576.9,-65,582.25,-54.55,587.05,-44.25,591.1,-43.6,594.65,-33.45,597.55,-33,599.9,-23.1,601.45,-22.85,602.4,-22.75,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9,602.4,-15.9], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.28,-0.56,-1.02,-1.28,-1.55,-1.8,-2.04,-2.28,-2.52,-2.56,-2.78,-2.81,-3.02,-3.03,-3.04,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18,-3.18]}, 
    mc11:{view:'padlockShadow.png', isImage:false, depth:11, startFrame:0, endFrame:80, positionscalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0.02,0.04,0.06,0.09,0.13,0.18,0.24,0.3,0.37,0.45,0.48,0.52,0.55], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,-0.27,-0.56,-1.26,-2,-2.79,-3.8,-5.04,-6.51,-8.01,-9.73,-6.31,-3.06,0]}, 
    mc12:{view:'padlock.png', isImage:false, depth:12, startFrame:0, endFrame:80, positionscalerotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59.95,59.44,57.94,55.44,52.12,47.62,42.11,35.61,28.1,19.79,10.29,0,-7.3,-14.83,0]}, 
    mc13:{view:'img/game/siege.jpg', isImage:true, depth:13, startFrame:0, endFrame:337, position:[-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,-463.5,-386,1,-180.5,-3,-179.5,-7,-178.5,-11.05,-177.5,-15.05,-176.5,-19.05,-175.5,-23.05,-174.5,-27.05,-173.5,-31.05,-172.5,-35.1,-171.5,-39.1,-170.5,-43.1,-169.5,-47.1,-168.5,-51.1,-167.5,-55.15,-166.5,-59.15,-165.5,-63.15,-164.5,-70.05,-162.5,-76.95,-160.5,-83.75,-158.5,-90.55,-156.55,-97.3,-154.6,-104,-152.65,-110.65,-150.7,-117.25,-148.8,-123.85,-146.9,-130.35,-145,-136.85,-143.1,-143.3,-141.2,-149.7,-139.35,-156.05,-137.5,-162.4,-135.7,-168.65,-133.85,-174.9,-132.05,-181.1,-130.25,-187.25,-128.45,-193.35,-126.7,-199.4,-124.95,-205.4,-123.2,-211.4,-121.45,-217.35,-119.75,-223.25,-118,-229.1,-116.3,-234.9,-114.65,-240.65,-112.95,-246.35,-111.3,-252.05,-109.65,-257.7,-108,-263.3,-106.4,-268.85,-104.75,-274.35,-103.15,-279.8,-101.6,-285.25,-100,-290.65,-98.45,-295.95,-96.9,-301.25,-95.35,-306.5,-93.85,-311.75,-92.3,-316.9,-90.8,-322.05,-89.3,-327.1,-87.85,-332.15,-86.4,-337.15,-84.95,-342.1,-83.5,-347,-82.05,-351.9,-80.65,-356.75,-79.25,-361.55,-77.85,-366.3,-76.45,-370.95,-75.1,-375.65,-73.75,-380.25,-72.4,-384.8,-71.1,-389.35,-69.75,-393.85,-68.45,-398.3,-67.15,-402.7,-65.9,-407.05,-64.6,-411.4,-63.35,-415.65,-62.15,-419.9,-60.9,-424.1,-59.7,-428.25,-58.5,-432.35,-57.3,-436.4,-56.1,-440.45,-54.95,-444.4,-53.8,-448.35,-52.65,-452.25,-51.5,-456.1,-50.4,-459.9,-49.3,-463.7,-48.2,-467.4,-47.1,-471.1,-46.05,-474.75,-45,-478.3,-43.95,-481.9,-42.9,-485.4,-41.9,-488.85,-40.85,-492.3,-39.9,-495.7,-38.9,-499,-37.9,-502.3,-36.95,-505.6,-36,-508.8,-35.1,-511.95,-34.15,-515.1,-33.25,-518.2,-32.35,-521.25,-31.45,-524.25,-30.6,-527.2,-29.75,-530.1,-28.9,-533,-28.05,-535.8,-27.25,-538.6,-26.45,-541.35,-25.65,-544.05,-24.85,-546.7,-24.05,-549.35,-23.3,-551.9,-22.55,-554.45,-21.85,-556.95,-21.1,-559.4,-20.4,-561.8,-19.7,-564.15,-19,-566.5,-18.35,-568.75,-17.65,-571,-17,-573.2,-16.4,-575.35,-15.75,-577.45,-15.15,-579.55,-14.55,-581.55,-13.95,-583.55,-13.4,-585.5,-12.8,-587.4,-12.25,-589.25,-11.7,-591.05,-11.2,-592.8,-10.7,-594.55,-10.2,-596.2,-9.7,-597.85,-9.2,-599.45,-8.75,-601.05,-8.3,-602.55,-7.85,-604,-7.45,-605.45,-7,-606.85,-6.6,-608.2,-6.2,-609.5,-5.85,-610.75,-5.5,-611.95,-5.15,-613.15,-4.8,-614.25,-4.45,-615.35,-4.15,-616.4,-3.85,-617.4,-3.55,-618.4,-3.25,-619.3,-3], scalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0.06,0.13,0.19,0.25,0.31,0.38,0.44,0.5,0.56,0.63,0.69,0.75,0.81,0.88,0.94,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc14:{view:'img/loader/vignette_halfsize.png', isImage:true, depth:14, startFrame:0, endFrame:337, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}
}
    }

    /**
     * Animation
     * 
     */

    Animations.game4Outro1 ={

        spriteSheets:[
            ASSET_URL + 'img/game/story_outro.json'
        ],

        data:
        {
    mc0:{view:'img/game/crime_wall.jpg', isImage:true, depth:0, startFrame:0, endFrame:205, position:[-114.9,-86.2,-110,-82.55,-105.2,-78.9,-100.45,-75.4,-95.9,-71.95,-91.45,-68.6,-87,-65.3,-82.75,-62.1,-78.6,-58.95,-74.6,-55.95,-70.6,-53,-66.8,-50.1,-63.05,-47.3,-59.4,-44.55,-55.85,-42,-52.5,-39.4,-49.15,-36.95,-45.95,-34.5,-42.9,-32.2,-39.95,-29.95,-37.05,-27.8,-34.25,-25.7,-31.6,-23.75,-29.05,-21.8,-26.6,-20,-24.25,-18.2,-22,-16.55,-19.85,-14.9,-17.9,-13.4,-15.9,-12,-14.15,-10.6,-12.4,-9.35,-10.8,-8.15,-9.3,-7.05,-7.95,-6,-6.7,-5,-5.5,-4.15,-4.45,-3.4,-3.5,-2.65,-2.65,-2,-1.85,-1.45,-1.25,-1,-0.75,-0.6,-0.3,-0.25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[1.2,1.2,1.191,1.191,1.183,1.183,1.175,1.175,1.167,1.167,1.159,1.159,1.152,1.152,1.144,1.144,1.137,1.137,1.13,1.13,1.123,1.123,1.116,1.116,1.11,1.11,1.103,1.103,1.097,1.097,1.091,1.091,1.086,1.086,1.08,1.08,1.075,1.075,1.069,1.069,1.064,1.064,1.06,1.06,1.055,1.055,1.051,1.051,1.046,1.046,1.042,1.042,1.038,1.038,1.035,1.035,1.031,1.031,1.028,1.028,1.025,1.025,1.022,1.022,1.019,1.019,1.016,1.016,1.014,1.014,1.012,1.012,1.01,1.01,1.008,1.008,1.006,1.006,1.005,1.005,1.003,1.003,1.002,1.002,1.001,1.001,1.001,1.001,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc1:{view:'circle1.png', isImage:false, depth:1, startFrame:0, endFrame:1, position:[-12.5,-113.8]}, 
    mc2:{view:'callieThink.png', isImage:false, depth:2, startFrame:0, endFrame:123, position:[-266.75,226.25,-257.9,226.8,-249.15,227.35,-240.65,227.9,-232.4,228.4,-224.3,228.9,-216.4,229.4,-208.7,229.9,-201.3,230.35,-194,230.8,-186.9,231.25,-180.05,231.65,-173.4,232.1,-166.95,232.55,-160.75,232.85,-154.7,233.3,-148.85,233.65,-143.25,234,-137.8,234.35,-132.55,234.7,-127.55,235,-122.75,235.3,-118.15,235.6,-113.75,235.85,-109.55,236.15,-105.5,236.35,-101.8,236.55,-98.2,236.8,-94.8,237.05,-91.65,237.25,-88.65,237.45,-85.9,237.65,-83.35,237.8,-81,237.9,-78.8,238.05,-76.85,238.2,-75.15,238.3,-73.6,238.4,-72.25,238.5,-71.15,238.55,-70.3,238.6,-69.55,238.6,-68.95,238.65,-68.75,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7,-68.65,238.7], scale:[1.441,1.441,1.421,1.421,1.402,1.402,1.383,1.383,1.364,1.364,1.346,1.346,1.329,1.329,1.312,1.312,1.295,1.295,1.279,1.279,1.263,1.263,1.248,1.248,1.233,1.233,1.219,1.219,1.205,1.205,1.191,1.191,1.178,1.178,1.166,1.166,1.154,1.154,1.142,1.142,1.131,1.131,1.12,1.12,1.11,1.11,1.1,1.1,1.091,1.091,1.082,1.082,1.074,1.074,1.066,1.066,1.058,1.058,1.051,1.051,1.045,1.045,1.038,1.038,1.033,1.033,1.028,1.028,1.023,1.023,1.018,1.018,1.015,1.015,1.011,1.011,1.008,1.008,1.006,1.006,1.004,1.004,1.002,1.002,1.001,1.001,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc3:{view:'callieKnows.png', isImage:false, depth:3, startFrame:0, endFrame:260, position:[-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,-50.35,-278.9,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8,13.1,205.8], scale}, 
    mc4:{view:'banditPic.png', isImage:false, depth:4, startFrame:0, endFrame:260, positionscale:[0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0.07,0.14,0.21,0.29,0.36,0.43,0.5,0.57,0.64,0.71,0.79,0.86,0.93,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc5:{view:'img/game/town_bg.jpg', isImage:true, depth:5, startFrame:0, endFrame:260, position:[-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-2,-131.7,-4,0,-13.7,0,-23.2,0,-32.45,0,-41.5,0,-50.3,0,-58.9,0,-67.25,0,-75.4,0,-83.3,0,-91.05,0,-98.5,0,-105.75,0,-112.8,0,-119.6,0,-126.15,0,-132.55,0,-138.65,0,-144.6,0,-150.25,0,-155.75,0,-161,0,-166,0,-170.8,0,-175.35,0,-179.7,0,-183.85,0,-187.75,0,-191.45,0,-194.9,0,-198.15,0,-201.15,0,-203.95,0,-206.5,0,-208.85,0,-210.95,0,-212.85,0,-214.55,0,-216,0,-217.2,0,-218.2,0,-219,0,-219.55,0,-219.9,0,-220,0,-220,0,-220,0,-220,0,-220,0,-220,0,-220,0,-220,0,-220,0,-220,0,-220,0], scale}, 
    mc6:{view:'banditRun.png', isImage:false, depth:6, startFrame:0, endFrame:260, position:[239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,239.45,-304.85,157.45,137.5,160.55,136.4,163.65,135.25,166.65,134.15,169.6,133.1,172.45,132.1,175.2,131.05,177.9,130.1,180.5,129.15,183.1,128.15,185.6,127.25,188,126.4,190.35,125.55,192.6,124.7,194.8,123.9,196.9,123.15,199,122.4,200.95,121.7,202.9,120.95,204.75,120.35,206.5,119.65,208.2,119.05,209.8,118.5,211.4,117.9,212.85,117.35,214.25,116.8,215.6,116.35,216.85,115.95,218.05,115.45,219.15,115.05,220.2,114.65,221.15,114.35,222.05,114,222.9,113.7,223.7,113.4,224.35,113.2,224.95,113,225.55,112.75,226,112.6,226.3,112.45,226.65,112.35,226.95,112.2,227.15,112.2,227.2,112.1,227.25,112.15,227.25,112.15,227.25,112.15,227.25,112.15,227.25,112.15,227.25,112.15,227.25,112.15,227.25,112.15,227.25,112.15,227.25,112.15,227.25,112.15], scale}, 
    mc7:{view:'callieRun.png', isImage:false, depth:7, startFrame:0, endFrame:260, position:[299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,299.3,-341.2,-26.8,298,-23.45,296.7,-20.15,295.4,-16.95,294.2,-13.8,293.05,-10.75,291.8,-7.75,290.7,-4.85,289.55,-2.05,288.45,0.7,287.4,3.35,286.35,5.95,285.35,8.45,284.35,10.95,283.45,13.2,282.5,15.5,281.65,17.75,280.85,19.85,280,21.9,279.2,23.85,278.4,25.8,277.7,27.6,277,29.3,276.35,31,275.7,32.6,275.05,34.1,274.45,35.5,273.95,36.9,273.45,38.2,272.95,39.35,272.45,40.45,272,41.55,271.6,42.45,271.25,43.35,270.95,44.15,270.6,44.95,270.3,45.55,270.05,46.15,269.8,46.65,269.65,47.1,269.5,47.4,269.35,47.7,269.25,47.9,269.2,48,269.1,48.05,269.1,48.05,269.1,48.05,269.1,48.05,269.1,48.05,269.1,48.05,269.1,48.05,269.1,48.05,269.1,48.05,269.1,48.05,269.1,48.05,269.1], scale}, 
    mc8:{view:'barrelStood.png', isImage:false, depth:8, startFrame:0, endFrame:260, position:[172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,172.8,-273.75,1054.1,363.1,1039.95,362.15,1026.1,361.25,1012.55,360.35,999.4,359.5,986.55,358.6,974,357.75,961.8,357,949.95,356.2,938.3,355.45,927.1,354.7,916.2,354,905.7,353.35,895.4,352.65,885.5,351.95,875.85,351.35,866.6,350.7,857.65,350.15,849,349.55,840.7,349,832.7,348.5,825.1,348,817.8,347.5,810.75,347.05,804.05,346.6,797.7,346.15,791.7,345.8,786,345.45,780.65,345.1,775.55,344.75,770.85,344.45,766.45,344.1,762.35,343.85,758.65,343.65,755.25,343.4,752.1,343.2,749.4,343.05,746.95,342.8,744.8,342.7,743.05,342.6,741.6,342.5,740.45,342.45,739.65,342.4,739.15,342.35,739,342.35,739,342.35,739,342.35,739,342.35,739,342.35,739,342.35,739,342.35,739,342.35,739,342.35,739,342.35,739,342.35], scale}, 
    mc9:{view:'barrelApples.png', isImage:false, depth:9, startFrame:0, endFrame:260, positionscale}, 
    mc10:{view:'alert.png', isImage:false, depth:10, startFrame:0, endFrame:260, position:[-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,-164.6,-178.5,247.5,268.25,232.9,231.05,219.8,197.7,208.25,168.25,198.15,142.55,189.6,120.8,182.55,102.85,177,88.75,173,78.5,170.45,72.15,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6,169.5,69.6], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.352,0.352,0.473,0.473,0.582,0.582,0.678,0.678,0.762,0.762,0.833,0.833,0.892,0.892,0.938,0.938,0.971,0.971,0.992,0.992,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.89,0.78,0.67,0.55,0.45,0.33,0.22,0.11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc11:{view:'img/loader/vignette_halfsize.png', isImage:true, depth:11, startFrame:0, endFrame:260, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], alpha:[0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7]}, 
    mc12:{view:'circle2.png', isImage:false, depth:1, startFrame:1, endFrame:2, position:[-12.5,-113.8]}, 
    mc13:{view:'circle3.png', isImage:false, depth:1, startFrame:2, endFrame:3, position:[-12.5,-113.8]}, 
    mc14:{view:'circle4.png', isImage:false, depth:1, startFrame:3, endFrame:4, position:[-12.5,-113.8]}, 
    mc15:{view:'circle5.png', isImage:false, depth:1, startFrame:4, endFrame:5, position:[-12.5,-113.8]}, 
    mc16:{view:'circle6.png', isImage:false, depth:1, startFrame:5, endFrame:6, position:[-12.5,-113.8]}, 
    mc17:{view:'circle7.png', isImage:false, depth:1, startFrame:6, endFrame:7, position:[-12.5,-113.8]}, 
    mc18:{view:'circle8.png', isImage:false, depth:1, startFrame:7, endFrame:44, position:[-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85,-0.5,-177.85], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc19:{view:'circle1.png', isImage:false, depth:1, startFrame:44, endFrame:45, position:[335.55,128.2], scale:[2,2]}, 
    mc20:{view:'circle2.png', isImage:false, depth:1, startFrame:45, endFrame:46, position:[335.55,128.2], scale:[2,2]}, 
    mc21:{view:'circle3.png', isImage:false, depth:1, startFrame:46, endFrame:47, position:[335.55,128.2], scale:[2,2]}, 
    mc22:{view:'circle4.png', isImage:false, depth:1, startFrame:47, endFrame:48, position:[335.55,128.2], scale:[2,2]}, 
    mc23:{view:'circle5.png', isImage:false, depth:1, startFrame:48, endFrame:49, position:[335.55,128.2], scale:[2,2]}, 
    mc24:{view:'circle6.png', isImage:false, depth:1, startFrame:49, endFrame:50, position:[335.55,128.2], scale:[2,2]}, 
    mc25:{view:'circle7.png', isImage:false, depth:1, startFrame:50, endFrame:51, position:[335.55,128.2], scale:[2,2]}, 
    mc26:{view:'circle8.png', isImage:false, depth:1, startFrame:51, endFrame:205, positionscale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc27:{view:'circle1.png', isImage:false, depth:2, startFrame:73, endFrame:74, position:[757.65,174.25], scale:[2,2]}, 
    mc28:{view:'circle2.png', isImage:false, depth:2, startFrame:74, endFrame:75, position:[757.65,174.25], scale:[2,2]}, 
    mc29:{view:'circle3.png', isImage:false, depth:2, startFrame:75, endFrame:76, position:[757.65,174.25], scale:[2,2]}, 
    mc30:{view:'circle4.png', isImage:false, depth:2, startFrame:76, endFrame:77, position:[757.65,174.25], scale:[2,2]}, 
    mc31:{view:'circle5.png', isImage:false, depth:2, startFrame:77, endFrame:78, position:[757.65,174.25], scale:[2,2]}, 
    mc32:{view:'circle6.png', isImage:false, depth:2, startFrame:78, endFrame:79, position:[757.65,174.25], scale:[2,2]}, 
    mc33:{view:'circle7.png', isImage:false, depth:2, startFrame:79, endFrame:80, position:[757.65,174.25], scale:[2,2]}, 
    mc34:{view:'circle8.png', isImage:false, depth:2, startFrame:80, endFrame:205, positionscale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc35:{view:'circle1.png', isImage:false, depth:3, startFrame:100, endFrame:101, position:[685.6,356.25], scale:[2,2]}, 
    mc36:{view:'circle2.png', isImage:false, depth:3, startFrame:101, endFrame:102, position:[685.6,356.25], scale:[2,2]}, 
    mc37:{view:'circle3.png', isImage:false, depth:3, startFrame:102, endFrame:103, position:[685.6,356.25], scale:[2,2]}, 
    mc38:{view:'circle4.png', isImage:false, depth:3, startFrame:103, endFrame:104, position:[685.6,356.25], scale:[2,2]}, 
    mc39:{view:'circle5.png', isImage:false, depth:3, startFrame:104, endFrame:105, position:[685.6,356.25], scale:[2,2]}, 
    mc40:{view:'circle6.png', isImage:false, depth:3, startFrame:105, endFrame:106, position:[685.6,356.25], scale:[2,2]}, 
    mc41:{view:'circle7.png', isImage:false, depth:3, startFrame:106, endFrame:107, position:[685.6,356.25], scale:[2,2]}, 
    mc42:{view:'circle8.png', isImage:false, depth:3, startFrame:107, endFrame:205, positionscale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}
}
    }

    /**
     * Animation
     * 
     */

    Animations.game4Outro2 ={

        spriteSheets:[
            ASSET_URL + 'img/game/story_outro.json'
        ],

        data:
        {
    mc0:{view:'img/game/town_bg_blur.jpg', isImage:true, depth:0, startFrame:0, endFrame:74, position:[0,-119,0,-119,0,-119,0,-112.65,0,-106.5,0,-100.55,0,-94.75,0,-89.1,0,-83.7,0,-78.4,0,-73.35,0,-68.45,0,-63.7,0,-59.15,0,-54.8,0,-50.6,0,-46.55,0,-42.75,0,-39.1,0,-35.6,0,-32.3,0,-29.2,0,-26.25,0,-23.45,0,-20.9,0,-18.45,0,-16.25,0,-14.2,0,-12.3,0,-10.6,0,-9.1,0,-7.75,0,-6.6,0,-5.65,0,-4.85,0,-4.2,0,-3.75,0,-3.5,0,-3.4,0,-3.5,0,-3.8,0,-4.25,0,-4.9,0,-5.75,0,-6.8,0,-8,0,-9.45,0,-11.05,0,-12.85,0,-14.8,0,-17,0,-19.35,0,-21.9,0,-24.65,0,-27.55,0,-30.65,0,-33.95,0,-37.45,0,-41.15,0,-45,0,-49.05,0,-53.3,0,-57.75,0,-62.4,0,-67.2,0,-72.2,0,-77.4,0,-82.75,0,-88.35,0,-94.1,0,-100.05,0,-106.15,0,-112.5,0,-119], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc1:{view:'barrelStood.png', isImage:false, depth:1, startFrame:0, endFrame:74, position:[849.95,660.8,793.45,689.9,760.2,730.7,751.05,774.9,764.2,813.9,795.15,842.05,839.8,855.9,891.2,853.1,944.45,833.8,994.75,799.45,1038.35,752.2,1071.45,696.2,1094.3,633.6,1106.05,568.05,1106.85,503.35,1097.95,441.1,1080.9,383.35,1057.5,331.85,1029.25,286.8,998.25,249,965.05,217.35,932,192.35,899.55,173.1,868.4,158.75,840,148.85,813.95,142.4,790.35,138.75,770.1,137.15,752.45,137.05,737.3,138.1,724.55,139.85,714.65,141.55,706.85,143.3,701.55,144.5,697.6,145.85,696.5,145.85,696.2,146.35,693.85,149.4,689.95,154.35,684.6,161.5,677.85,170.9,670.05,182.6,661.2,197,651.7,214,641.9,234.05,632.2,257,622.95,283.15,614.75,312.6,608.25,345,604.15,380.5,603.05,418.55,605.6,459,612.5,500.9,624.35,543.4,641.05,585.05,663.4,625.05,691.55,662.6,724.8,695.5,762.3,722.3,802.7,741.5,844.15,752.05,884.25,752.95,919.5,745.05,949.05,726.8,968.95,700.6,976.5,668.65,969.45,634.25,946.5,601.45,908.45,576.05,854.9,560.65,789.65,561.15,717.55,581.25,644.75,623.15,585.75,665.2], scale:[1,1,0.999,0.999,0.998,0.998,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.998,0.998,0.998,0.998,0.999,0.999,1,1,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,1,1,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.999,0.999,0.998,0.998,0.999,0.999,0.999,0.999,1,1,0.999,0.999,0.998,0.998,0.998,0.998,0.999,0.999,1,1], rotation:[0,-20.04,-39.6,-58.64,-76.95,-94.53,-111.8,-128.37,-144.43,-159.97,-174.96,170.95,157.18,143.91,131.35,119.31,107.8,97.01,86.74,77.18,67.94,59.41,51.39,43.89,37.1,30.83,25.08,20.04,15.53,11.53,8.06,5.3,3.05,1.52,0.31,0,-0.06,-0.81,-2.06,-3.81,-6.06,-8.81,-12.06,-15.82,-20.07,-24.83,-30.09,-35.85,-42.12,-48.89,-56.15,-63.92,-72.18,-80.94,-90,-99.56,-109.82,-120.59,-131.87,-143.65,-155.92,-168.69,178.44,164.68,150.41,135.63,120.34,104.56,88.69,71.93,54.65,36.85,18.57,0]}, 
    mc2:{view:'apple.png', isImage:false, depth:2, startFrame:0, endFrame:69, position:[584.5,640.8,620.95,589.55,658.8,556.1,690.6,538.05,710.55,529.5,717.25,525.2,711.65,518.9,697.8,506.4,679.25,485.6,660.25,456.1,644.25,418.65,634.05,376.05,630.8,330.25,634.65,284.2,645.25,240.25,661.25,200.35,681.05,165.65,704.1,136.7,728.2,113.65,752.1,96.15,774.6,83.6,795.55,75.3,815.05,70.8,832.4,69.1,847.8,70,861.15,72.6,872.3,76.15,881.75,80.5,889.95,86.75,896.9,94.5,902.35,103.35,906.2,112.5,909,120.9,910.45,129.05,911.05,136.7,910.95,143.7,910.25,150.1,909.35,156,907.75,161.4,906.15,166.25,904.2,170.55,902.2,174.5,900.2,178,898.15,181.1,896.2,183.8,894.5,186.1,893.25,188.2,892.05,190,891.25,191.65,890.75,193,890.65,194.15,890.95,195,891.9,195.8,893.8,196.65,896.7,197.35,901,197.95,907.1,199.45,915.65,201.3,927.15,205.1,942.4,211.4,961.85,222.65,986.4,241.1,1015.45,271.15,1045.75,318,1070.45,387.15,1076.4,480.6,1046.55,585.2,983.8,660.85,993.9,703.95], scalerotation:[0,29.1,57.44,84.95,111.06,136.62,161.19,-175.44,-152.65,-130.6,-109.32,-89.22,-69.7,-50.9,-32.83,-15.54,0.8,16.79,32.06,46.61,60.44,73.72,86.46,98.3,109.82,120.83,131.34,141.17,150.68,159.68,168.19,176.21,-176.45,-169.2,-162.22,-155.7,-149.44,-143.64,-137.9,-132.6,-127.35,-122.33,-117.55,-112.79,-108.05,-103.31,-98.77,-94.02,-89.24,-84.23,-78.96,-73.23,-67.2,-60.65,-53.38,-45.16,-36.32,-26.07,-14.54,-1.29,13.78,31.58,52.62,77.48,107.58,145.39,-166.48,-100.78,0]}, 
    mc3:{view:'apple.png', isImage:false, depth:3, startFrame:0, endFrame:64, position:[497.25,711.85,528.85,695.05,567.55,648.2,589.5,577.85,585.75,500.7,560.8,433.6,523.15,385.15,483.75,356.9,451.3,344.5,430.3,341.65,421.3,342.05,422.45,340.75,430.7,334.45,442.6,322.2,455.2,304.35,465.5,281.85,472.6,256.2,475.55,228.95,474.65,201.15,469.45,174.35,460.2,149.85,447.8,127.9,432.9,108.8,416.65,93.15,399,80.05,381.05,69.75,363.05,62.25,344.75,57.6,326.9,55.8,309.6,56.35,293.35,58.95,277.7,63.45,263.3,69.25,249.9,76.25,237.35,84.15,225.7,93.25,215.15,103.4,205.5,114.65,197.15,126.8,189.85,140.05,184,154.5,179.75,169.55,177.25,185.55,176.6,202.15,177.25,218.6,179.75,235.15,183.8,251.15,189.2,266.1,195.9,279.55,202.95,290.9,210.35,299.8,216.35,306.05,219.7,309.5,218.6,311.3,210.55,313.15,194.1,318.5,168.85,331.8,136.9,358.7,104.65,404.15,81.95,468.95,79.15,546.95,102.55,621.15,144.05,671.05,166.75,690], scale:[0.999,0.999,0.992,0.992,0.987,0.987,0.982,0.982,0.977,0.977,0.974,0.974,0.969,0.969,0.966,0.966,0.963,0.963,0.959,0.959,0.955,0.955,0.954,0.954,0.951,0.951,0.947,0.947,0.945,0.945,0.943,0.943,0.942,0.942,0.939,0.939,0.937,0.937,0.935,0.935,0.933,0.933,0.932,0.932,0.931,0.931,0.93,0.93,0.929,0.929,0.927,0.927,0.925,0.925,0.924,0.924,0.923,0.923,0.922,0.922,0.921,0.921,0.921,0.921,0.92,0.92,0.92,0.92,0.918,0.918,0.917,0.917,0.916,0.916,0.915,0.915,0.913,0.913,0.912,0.912,0.912,0.912,0.911,0.911,0.91,0.91,0.909,0.909,0.908,0.908,0.906,0.906,0.905,0.905,0.903,0.903,0.901,0.901,0.9,0.9,0.898,0.898,0.897,0.897,0.893,0.893,0.891,0.891,0.888,0.888,0.887,0.887,0.882,0.882,0.878,0.878,0.876,0.876,0.87,0.87,0.866,0.866,0.86,0.86,0.854,0.854,0.848,0.848], rotation:[-74.99,-120.81,-163.48,156.7,119.34,84.72,52.16,21.58,-6.76,-33.36,-58.44,-81.97,-103.78,-124.35,-143.87,-161.95,-178.98,165.2,150.16,135.89,122.59,110.05,98.07,87.2,76.48,66.44,56.9,47.64,38.86,30.35,22.29,14.29,6.53,-1.01,-8.53,-16.05,-23.59,-31.34,-39.13,-47.16,-55.63,-64.19,-73.21,-82.73,-92.56,-103.3,-114.81,-127.09,-140.36,-154.46,-169.96,173.48,155.21,135.38,113.57,89.96,63.68,34.61,2.55,-32.84,-72.7,-117.09,-167.7,135]}, 
    mc4:{view:'banditHat.png', isImage:false, depth:4, startFrame:0, endFrame:72, position:[330.55,702.2,278.95,761.35,283.9,829.25,338.25,875.45,422.1,879.9,509.6,836.7,576.55,753.55,608.55,645.35,600.4,533.1,556.3,434.2,487.35,362.55,407.5,323.45,330.85,316.3,269.5,334.95,229.65,371.65,214.2,415.35,221.7,457.75,248.55,491.5,288.45,511.1,336.55,515.8,386.05,505.15,433,481,474,446.1,506.3,403.55,528.9,357.55,543.15,309.4,549.4,262.05,548.7,217.6,542.6,176.75,532.45,140.5,519.95,109.25,506.35,83.3,492.35,61.6,479.25,44.35,467.25,30.6,456.75,20.05,448.2,12.2,442.25,6.95,441.2,7.15,436.65,6.75,429.55,6.4,419.1,6.4,405.3,7.15,387.85,9.4,367.4,13.9,343.35,21.6,316.05,33.75,286.75,51.25,255.3,75.65,224.4,107.6,196,147.2,171.2,196.4,153.6,253.25,145.75,316.6,150.15,383.75,168.35,450.25,200.65,511.3,246.65,562.2,302.1,597.25,360.55,612.2,414.25,605.35,453.45,578.45,469.75,536.65,456.35,489.35,411.1,451.05,338.8,436.2,248.7,455.6,159.6,516.3,91.55,615.45,61.6,741.05,80.05,869.5,143.95,975.1], scale:[1,1,0.998,0.998,0.999,0.999,1,1,0.998,0.998,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,1,1,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.999,0.998,0.998,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.998,0.999,0.999], rotation:[0,-32.83,-64.93,-96.01,-126.33,-155.91,175.73,147.93,121.07,95.02,69.96,45.62,22.07,-0.29,-22.06,-42.9,-62.96,-82.22,-100.3,-117.82,-134.39,-150.18,-165.18,-179.19,167.95,155.67,144.16,133.6,123.83,114.84,106.82,99.78,93.51,88.22,83.7,79.95,76.99,74.99,74.68,73.2,70.93,67.66,63.42,58.18,52.14,45.12,37.1,28.3,18.32,7.56,-3.8,-16.53,-30.08,-44.62,-60.14,-76.46,-93.54,-111.8,-131.08,-151.17,-172.21,165.97,143.13,119.09,94.3,68.91,42.12,14.53,-13.8,-43.36,-73.73,-105.01]}, 
    mc5:{view:'banditFlip.png', isImage:false, depth:5, startFrame:0, endFrame:74, position:[539.95,887.45,616.85,795.25,702.85,730,790.4,692.1,870.45,679.1,940.35,688.35,993.2,713.7,1027.8,751.45,1043.3,796.4,1039.55,842.35,1018.15,886.2,980.85,924.2,931.75,951.55,873,968.5,808.35,973.1,739.95,966.1,670.55,947.65,603.5,918.35,539.85,879.6,482.05,833.3,431.2,781.05,386.7,724.15,349.95,664.8,320.15,603.35,297.5,542.45,280.95,482,270.2,422.85,264.65,368.1,263.5,314.85,265.9,265.8,271.15,221.2,278.7,179.95,287.65,143.15,297.25,110.85,308.15,80.85,318.15,55.9,328.1,33.95,337.9,14.85,346.25,-0.8,354.05,-13.95,360.2,-23.8,364.3,-30.8,367.45,-35.6,368.6,-37.55,370,-37.9,376.15,-40.15,386.25,-43.4,400.6,-47.35,420.55,-51.9,444.45,-55,474.85,-56.85,510.75,-55.45,552.2,-49.4,600.2,-36.9,651.55,-16.05,707.4,15.3,764.55,58.85,820.25,116.05,871.35,187.85,913.4,274.35,942.75,375.1,954.25,486.3,944.15,603.25,909.3,720.6,849.7,828.3,767,918.75,665.6,983.75,555.4,1015.85,448.8,1011.05,359.85,970.05,303.65,897.65,292.75,808.2,334.4,720.35,427.65,656], scalerotation:[0,16.3,32.34,48.11,63.21,78.21,92.52,106.56,120.34,133.65,146.68,159.42,171.48,-176.75,-165.44,-154.41,-143.65,-133.36,-123.35,-113.82,-104.77,-96.01,-87.73,-79.73,-72.19,-64.93,-57.95,-51.62,-45.39,-39.64,-34.35,-29.36,-24.83,-20.78,-16.82,-13.52,-10.51,-7.79,-5.53,-3.56,-2.06,-1.02,-0.28,0,0.29,1.53,3.53,6.29,10.01,14.3,19.55,25.56,32.34,40.08,48.39,57.66,67.69,78.47,90,102.3,115.56,129.6,144.41,160.17,176.47,-166.46,-148.42,-129.6,-110.02,-89.71,-68.45,-46.39,-23.56,0]}, 
    mc6:{view:'apple.png', isImage:false, depth:6, startFrame:0, endFrame:68, position:[775.55,728.65,754.7,722.05,727.85,704.05,701,673.75,680,633.55,668.15,586.65,667.1,537.85,676.1,492.15,693.05,452.95,714.95,422.2,738.1,400.65,759.65,387.9,776.85,382.1,787.95,381,792.8,382.7,791.35,384.7,784.5,385.3,773.45,383.05,759.75,377.15,744.6,367.65,729.1,354.6,714.9,338.5,702.25,320.05,691.95,299.9,684.05,278.85,678.65,257.85,675.35,237.05,674.2,217.15,674.7,198.7,676.55,181.6,679.35,166.3,682.85,152.55,686.85,140.55,690.85,130.3,694.75,121.5,698.35,114.35,701.65,108.4,704.4,103.75,706.6,100.15,708.2,97.75,709.25,96.25,709.15,95.9,710,96.35,712.6,97.65,716.9,100.15,723.15,104,731.4,109.75,741.5,117.8,753.55,129.05,767.2,144.3,781.3,164.15,794.95,189.1,806.8,220,814.95,255.95,817.45,296.05,812.95,337.7,800.9,378,782.15,413.2,759.45,439.9,737.9,455.95,724.1,462.2,723.4,462.25,739.85,463.8,772.05,476.95,813.1,509.75,851.3,565.6,872.7,640.1,868.85,720.2], scalerotation:[165.17,-167.46,-140.63,-114.34,-89.2,-64.42,-40.14,-16.79,5.78,27.83,49.17,69.96,89.98,109.08,127.86,145.91,163.21,179.75,-164.44,-149.15,-134.4,-120.57,-107.3,-94.77,-82.99,-71.92,-61.4,-51.41,-42.34,-33.82,-26.04,-18.8,-12.31,-6.55,-1.52,2.76,6.51,9.53,11.81,13.55,14.56,15.01,15.77,18.03,21.79,27.06,33.84,42.13,51.93,63.42,76.21,90.31,106.29,123.6,142.63,162.97,-175.23,-151.9,-126.85,-100.31,-72.68,-43.12,-12.05,20.28,54.18,89.74,126.61,165.17]}, 
    mc7:{view:'img/game/town_speed_blur.jpg', isImage:true, depth:7, startFrame:0, endFrame:168, position:[-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,-132.8,-139.25,0,0,-51.1,0,-102.2,0,-153.4,0,-204.45,0,-255.6,0,-306.7,0,-357.8,0,-408.85,0,-460,0,-511.15,0,-562.25,0,-613.3,0,-664.4,0,-715.5,0,-766.65,0,-817.8,0,-868.9,0,-920,0,-971.1,0,-1022.25,0,-1073.35,0,-1124.45,0,-1175.55,0,-1226.65,0,-1277.75,0,-1328.9,0,-1380,0,-1431.1,0,-1482.2,0,-1533.3,0,-1584.45,0,-1635.6,0,-1686.7,0,-1737.75,0,-1788.85,0,-1839.95,0,-1891.15,0,-1942.25,0,-1993.35,0,-2044.45,0,-2095.55,0,-2146.65,0,-2197.8,0,-2248.9,0,-2300,0,-2351.1,0,-2402.2,0,-2453.35,0,-2504.45,0,-2555.55,0,-2606.65,0,-2657.75,0,-2708.85,0,-2760,0,-2811.1,0,-2862.2,0,-2913.35,0,-2964.4,0,-3015.5,0,-3066.7,0,-3117.8,0,-3168.9,0,-3220,0,-3271.1,0,-3322.25,0,-3373.35,0,-3424.45,0,-3475.55,0,-3526.65,0,-3577.75,0,-3628.9,0,-3680,0,-3731.1,0,-3782.2,0,-3833.3,0,-3884.5,0,-3935.6,0,-3986.65,0,-4037.75,0,-4088.9,0,-4140,0,-4191.15,0,-4242.25,0,-4293.35,0,-4344.45,0,-4395.55,0,-4446.65,0,-4497.8,0,-4548.9,0,-4600,0,-4600,0,-4600,0,-4600,0,-4600,0], scale}, 
    mc8:{view:'img/game/town_speed_blur.jpg', isImage:true, depth:8, startFrame:0, endFrame:168, positionscale:[0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,0.521,0.187,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2,12.472,2]}, 
    mc9:{view:'img/game/prison_bg.jpg', isImage:true, depth:9, startFrame:0, endFrame:168, positionscale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]}, 
    mc10:{view:'floor_shadow.png', isImage:false, depth:10, startFrame:0, endFrame:151, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5.732,1.96,5.59,1.96,5.448,1.96,5.306,1.96,5.163,1.96,5.021,1.96,4.879,1.96,4.737,1.96,4.594,1.96,4.452,1.96,4.31,1.96,4.168,1.96,4.025,1.96,3.883,1.96,4.068,1.96,4.253,1.96,4.438,1.96,4.623,1.96,4.808,1.96,4.993,1.96,5.178,1.96,5.363,1.96,5.548,1.96,5.733,1.96,5.592,1.96,5.451,1.96,5.31,1.96,5.169,1.96,5.029,1.96,4.888,1.96,4.747,1.96,4.606,1.96,4.466,1.96,4.325,1.96,4.184,1.96,4.378,1.96,4.571,1.96,4.765,1.96,4.958,1.96,5.152,1.96,5.345,1.96,5.539,1.96,5.732,1.96,5.619,1.96,5.506,1.96,5.393,1.96,5.279,1.96,5.166,1.96,5.053,1.96,4.94,1.96,4.827,1.96,4.714,1.96,4.6,1.96,4.487,1.96,4.643,1.96,4.798,1.96,4.954,1.96,5.11,1.96,5.265,1.96,5.421,1.96,5.577,1.96,5.732,1.96,5.618,2.019,5.504,2.078,5.389,2.136,5.275,2.195,5.161,2.254,5.047,2.313,4.932,2.372,4.818,2.43,4.704,2.489,4.589,2.548,4.475,2.607,4.361,2.666,4.246,2.724,4.132,2.783,4.018,2.842,4.385,2.653], alpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.74,0.72,0.71,0.7,0.68,0.67,0.65,0.64,0.62,0.61,0.59,0.58,0.57,0.55,0.57,0.59,0.61,0.63,0.64,0.66,0.68,0.7,0.72,0.74,0.71,0.69,0.67,0.64,0.62,0.6,0.57,0.55,0.53,0.5,0.48,0.51,0.55,0.58,0.61,0.64,0.68,0.71,0.74,0.71,0.69,0.66,0.64,0.62,0.59,0.57,0.54,0.52,0.49,0.47,0.5,0.54,0.57,0.61,0.64,0.67,0.7,0.74,0.72,0.71,0.69,0.68,0.66,0.65,0.63,0.62,0.6,0.59,0.57,0.56,0.54,0.53,0.51,0]}, 
    mc11:{view:'barrelRoll.png', isImage:false, depth:11, startFrame:0, endFrame:168, positionscalerotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17.57,35.35,53.15,70.93,88.69,106.07,123.86,141.65,159.44,177.2,-165.24,-147.65,-129.85,-112.06,-94.3,-76.73,-59.14,-41.35,-23.56,-5.79,11.77,29.55,47.15,64.95,82.71,100.27,118.05,135.66,153.45,171.22,-171.22,-153.45,-135.66,-118.05,-100.27,-82.71,-64.95,-47.15,-29.55,-11.77,5.79,23.56,41.35,59.14,76.73,94.3,112.06,129.85,147.65,165.24,-177.2,-159.44,-141.65,-123.86,-106.07,-88.69,-70.93,-53.15,-35.35,-17.57,0,31.33,62.71,94.02,125.36,156.92,-171.95,-140.41,-109.04,-77.74,-46.38,-15.01,16.29,47.66,79.2,110.32,141.88,173.23,-155.46,-124.09,-111.57,-99.26,-86.97,-74.47,-62.16,-49.64,-37.13,-24.8,-12.3,0,0,0,0,0]}, 
    mc12:{view:'doorJam.png', isImage:false, depth:12, startFrame:0, endFrame:168, positionscale}, 
    mc13:{view:'blackSquare.png', isImage:false, depth:13, startFrame:0, endFrame:168, positionscalealpha:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0.17,0.33,0.5,0.67,0.83,1,1,1,1,1]}, 
    mc14:{view:'img/loader/vignette_halfsize.png', isImage:true, depth:14, startFrame:0, endFrame:168, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], alpha:[0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7]}
}
    }


    /**
     * Animation
     * 
     */

    Animations.gameInstructStore ={

        spriteSheets:[
            ASSET_URL + 'img/game/instructions.json'
           
        ],

        data:
    {
    mc0:{view:'priscilla_tut.png', isImage:false, depth:0, startFrame:0, endFrame:153, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17,0.33,0.5,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18]}, 
    mc1:{view:'char_priscilla_head_happy.png', isImage:false, depth:1, startFrame:0, endFrame:134, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305,0.306,0.305], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc2:{view:'stinky.png', isImage:false, depth:2, startFrame:0, endFrame:153, positionalpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17,0.33,0.5,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18]}, 
    mc3:{view:'levelCowsHappy.png', isImage:false, depth:3, startFrame:0, endFrame:138, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576,0.576], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc4:{view:'request_bubble.png', isImage:false, depth:4, startFrame:0, endFrame:73, position:[131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,69,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,131,35,130.95,43.6,131,52.15,130.95,60.65,131,69.25,131,77.8], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.8,0.6,0.4,0.2,0]}, 
    mc5:{view:'request_bubble.png', isImage:false, depth:5, startFrame:0, endFrame:107, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.398,0.397,0.361,0.361,0.325,0.325,0.289,0.289,0.253,0.253,0.217,0.217], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.8,0.6,0.4,0.2,0]}, 
    mc6:{view:'item_perfume.png', isImage:false, depth:6, startFrame:0, endFrame:73, position:[188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,88.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,188.5,55.15,186.7,66.75,184.85,78.35,183,89.95,181.2,101.5,179.35,113.15], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.8,0.6,0.4,0.2,0]}, 
    mc7:{view:'item_perfume.png', isImage:false, depth:7, startFrame:0, endFrame:107, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.8,0.6,0.4,0.2,0]}, 
    mc8:{view:'item_hat.png', isImage:false, depth:8, startFrame:0, endFrame:153, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18]}, 
    mc9:{view:'fruit_shadow.png', isImage:false, depth:9, startFrame:0, endFrame:153, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18]}, 
    mc10:{view:'item_suitcase.png', isImage:false, depth:10, startFrame:0, endFrame:153, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18]}, 
    mc11:{view:'fruit_shadow.png', isImage:false, depth:11, startFrame:0, endFrame:153, position:[173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,301,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,173,291,169.35,291,165.7,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291,162,291], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.67,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc12:{view:'fruit_shadow.png', isImage:false, depth:12, startFrame:0, endFrame:153, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.67,0.33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc13:{view:'item_perfume.png', isImage:false, depth:13, startFrame:0, endFrame:153, position:[186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,250,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,186,240,175.1,227.25,164.2,214.55,153.3,201.8,142.4,189.1,131.5,176.35,120.55,163.65,109.65,150.9,98.75,138.2,87.85,125.45,76.95,112.75,66,100,66,100,66,100,66,100,66,100,68.6,102.9,71.25,105.75,73.8,108.65,76.4,111.55,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5,78.95,114.5], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.8,0.6,0.4,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc14:{view:'item_perfume.png', isImage:false, depth:14, startFrame:0, endFrame:153, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.8,0.6,0.4,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc15:{view:'pointer.png', isImage:false, depth:15, startFrame:0, endFrame:112, position:[192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,192,287,195.2,290.85,195.2,290.85,195.2,290.85,195.2,290.85,195.2,290.85,195.2,290.85,184.3,278.1,173.4,265.4,162.45,252.65,151.55,239.95,140.65,227.2,129.75,214.5,118.85,201.75,107.95,189.05,97,176.3,86.1,163.6,75.2,150.85,75.2,150.85,75.2,150.85,75.2,150.85,72,147,72,147,72,147,72,147,72,147,72,147,107.3,160.9,142.6,174.8,177.9,188.7,213.2,202.6,248.5,216.45,283.8,230.35,319.1,244.25,354.4,258.15,389.7,272.05,425,285.95,425,285.95,425,285.95,425,285.95,428.2,289.8,418.2,278.9,408.2,268,398.2,257.05,388.2,246.15,378.2,235.25,368.2,224.35,358.2,213.45,348.2,202.55,338.2,191.6,328.2,180.7,318.2,169.8,318.2,169.8,318.2,169.8,318.2,169.8,315,165.95,315,165.95,315,165.95,315,165.95,315,165.95,315,165.95,317.3,168.7,319.6,171.45,321.85,174.2,324.15,177,326.45,179.75,328.75,182.45,331.05,185.25,333.35,188], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1,1,1,1,1,1,1,1,0.928,0.928,0.857,0.857,0.785,0.785,0.714,0.714,0.642,0.642,0.57,0.57,0.499,0.499,0.427,0.427], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.04,0.09,0.16,0.25,0.36,0.49,0.64,0.81,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.88,0.75,0.63,0.5,0.38,0.25,0.13,0]}, 
    mc16:{view:'tick_slot.png', isImage:false, depth:16, startFrame:0, endFrame:122, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17,0.33,0.5,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc17:{view:'tick_fill.png', isImage:false, depth:17, startFrame:0, endFrame:153, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,64.4,128.95,63.9,125.7,62.3,120.35,59.6,112.8,55.95,103.15,51.15,91.35,45.25,77.35,38.3,61.25,30.3,43,21.3,22.55,11.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2.462,2.462,2.449,2.449,2.413,2.413,2.353,2.353,2.268,2.268,2.16,2.16,2.027,2.027,1.87,1.87,1.688,1.688,1.483,1.483,1.254,1.254,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.03,0.07,0.13,0.21,0.3,0.41,0.53,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18]}
}
    }

    /**
     * Animation
     * 
     */

    Animations.gameInstructSmoothie ={

        spriteSheets:[
            ASSET_URL + 'img/game/instructions.json'
        ],

        data:
   {
    mc0:{view:'priscilla_tut.png', isImage:false, depth:0, startFrame:0, endFrame:363, position:[38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51,38,51], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc1:{view:'char_priscilla_head_happy.png', isImage:false, depth:1, startFrame:0, endFrame:343, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371,0.372,0.371], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc2:{view:'counterInstruct.png', isImage:false, depth:2, startFrame:0, endFrame:363, positionalpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc3:{view:'shadow.png', isImage:false, depth:3, startFrame:0, endFrame:363, position:[28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,38,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,28,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245,48,245], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc4:{view:'shadow.png', isImage:false, depth:4, startFrame:0, endFrame:363, positionalpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc5:{view:'shadow.png', isImage:false, depth:5, startFrame:0, endFrame:363, positionalpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc6:{view:'request_bubble.png', isImage:false, depth:6, startFrame:0, endFrame:363, position:[181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,181.35,70,151,30,151,29.95,151,29.95,151.05,29.9,151.05,29.95,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,150.95,38.2,151,46.5,151,54.7,151,63,151,71.2,151,79.5,151,87.7,151,96,151,104.25,150.95,112.5,151.05,120.75,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,129,151,117.95,151,107,150.95,95.95,151,84.9,151,73.95,151,62.95,150.95,51.95,150.95,40.9,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30,151,30], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.22,0.33,0.45,0.55,0.67,0.78,0.89,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc7:{view:'glass_empty.png', isImage:false, depth:7, startFrame:0, endFrame:363, position:[255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,198,54,198,54.05,198,54,197.95,54,197.95,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,196.15,61.7,194.3,69.4,192.45,77.15,190.65,84.85,188.8,92.55,186.95,100.25,185.15,107.95,183.3,115.7,181.45,123.4,179.65,131.05,177.85,138.8,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146.5,176,146,178.45,135.75,180.95,125.5,183.4,115.25,185.85,105.05,188.4,94.7,190.85,84.5,193.3,74.25,195.75,64,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54,198,54], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.22,0.33,0.45,0.55,0.67,0.78,0.89,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc8:{view:'glassGreen.png', isImage:false, depth:8, startFrame:0, endFrame:147, position:[255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,225.75,47.85,225.6,47.9,225.45,47.9,225.3,47.95,225.15,47.95,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,221.45,56.25,217.95,64.5,214.5,72.8,211,81.05,207.5,89.25,204,97.55,200.45,105.75,197,114,193.5,122.25,190,130.55,186.5,138.8,183,147], scale:[0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.654,0.654,0.607,0.607,0.561,0.561,0.514,0.514,0.468,0.468,0.421,0.421,0.375,0.375,0.328,0.328,0.282,0.282,0.235,0.235,0.189,0.189,0.142,0.142], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc9:{view:'glassOrange.png', isImage:false, depth:9, startFrame:0, endFrame:363, position:[255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,255.75,87.85,183,147,187.65,136,192.35,125,197,114,201.65,103,206.35,92,211,81,215.65,70,220.3,59,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48,225,48], scale:[0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.124,0.124,0.188,0.188,0.252,0.252,0.316,0.316,0.38,0.38,0.444,0.444,0.508,0.508,0.572,0.572,0.636,0.636,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.22,0.33,0.45,0.55,0.67,0.78,0.89,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc10:{view:'icon_normal.png', isImage:false, depth:10, startFrame:0, endFrame:153, position:[465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,218.1,68.05,269.95,55.8,315.7,45.1,355.3,35.8,388.85,27.85,416.25,21.4,437.6,16.35,452.9,12.8,462,10.65,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465,10,465.05,9.95,464.95,10,465,10,465,10.05,464.95,10,465,10], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.667,1.666,1.47,1.47,1.296,1.296,1.146,1.146,1.019,1.018,0.914,0.914,0.833,0.833,0.775,0.775,0.741,0.741,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.729,0.774,0.774,0.819,0.819,0.865,0.864,0.91,0.91,0.955,0.955,1,1], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.21,0.39,0.55,0.69,0.8,0.89,0.95,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.83,0.67,0.5,0.33,0.17,0]}, 
    mc11:{view:'icon_hard.png', isImage:false, depth:11, startFrame:0, endFrame:363, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.19,0.36,0.51,0.64,0.75,0.84,0.91,0.96,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc12:{view:'item_green_apple.png', isImage:false, depth:12, startFrame:0, endFrame:118, position:[39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,210,39,197,39,197,39,197,39,197.05,39,197.05,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,75.9,182.75,111.25,169.15,145,156.1,177.2,143.7,207.8,131.9,236.85,120.7,264.35,110.1,290.25,100.1,314.6,90.7,337.35,81.9,358.55,73.75,378.2,66.2,396.25,59.2,412.75,52.85,427.65,47.1,441,42,441,42,441,42,441,42,441,42,441,42,442.2,52.5,443.75,66,445.55,82.5,447.75,102,450.25,124.45,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,453.15,150,459.1,150.6,465.1,151.9,470.85,153.9,476.15,156.5,481.05,159.45], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11.82,23.84,35.87,47.92,59.99]}, 
    mc13:{view:'item_red_strawberry.png', isImage:false, depth:13, startFrame:0, endFrame:292, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.545,0.542,0.542,0.536,0.535,0.524,0.524,0.508,0.508,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.488,0.487,0.47,0.469,0.451,0.451,0.433,0.433,0.415,0.415,0.397,0.397,0.379,0.379], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.81,-9.82,-14.82,-19.83,-24.84,-29.96]}, 
    mc14:{view:'item_yellow_lemon.png', isImage:false, depth:14, startFrame:0, endFrame:292, position:[288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,288,218,291.85,213.95,304.7,200.5,328.35,175.75,362.55,140,401.15,99.6,433.3,65.9,452.3,46.05,458,40,458,40,458,40,458,40,457.7,44.85,456.85,59.15,455.4,83,453.5,116.35,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,158.95,451.7,159.05,455.1,157.15,458.7,155.75,462.4,154.8,466.3,154.2,470.2,154.1,474.1,154.5], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.52,-2.29,-5.29,-9.53,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-14.99,-7.31,0,7.51,15,22.34,29.99]}, 
    mc15:{view:'machine_body.png', isImage:false, depth:15, startFrame:0, endFrame:363, position:[382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,382,111,385,190,385,190,385,190,384.95,189.95,384.95,189.95,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190,385,190], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc16:{view:'machine_glass.png', isImage:false, depth:16, startFrame:0, endFrame:363, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc17:{view:'blenderOrange.png', isImage:false, depth:17, startFrame:0, endFrame:363, positionalpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15,0.3,0.45,0.6,0.75,0.9,0.9,0.9,0.72,0.54,0.36,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc18:{view:'blenderGreen.png', isImage:false, depth:18, startFrame:0, endFrame:126, positionalpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.36,0.54,0.72,0.9,0.9,0.9,0.9,0.72,0.54,0.36,0.18,0]}, 
    mc19:{view:'machine_button.png', isImage:false, depth:19, startFrame:0, endFrame:363, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc20:{view:'glass_empty.png', isImage:false, depth:20, startFrame:0, endFrame:363, position:[453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,453.3,239.15,431.5,265,431.45,265,431.45,265.1,431.4,265.05,431.4,265.15,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265,431.5,265.05,431.45,265.05,431.45,265.05,431.45,265.05,431.45,265.05,431.45,265.05,431.5,265], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc21:{view:'glass_top.png', isImage:false, depth:21, startFrame:0, endFrame:363, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc22:{view:'glassGreen.png', isImage:false, depth:22, startFrame:0, endFrame:363, positionscalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.8,0.6,0.4,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc23:{view:'glassOrange.png', isImage:false, depth:23, startFrame:0, endFrame:363, positionscale:[0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784,0.784], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc24:{view:'pointer.png', isImage:false, depth:24, startFrame:0, endFrame:363, position:[191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,191,287,46,237,46,237,46,237,46,237,46,237,46,237,46,237,46,237,46,237,46,237,50.2,240.85,50.2,240.85,50.2,240.85,50.2,240.85,50.2,240.85,50.2,240.85,87.25,224.9,122.75,209.6,156.65,195,189,181.1,219.75,167.85,248.95,155.3,276.55,143.4,302.55,132.2,327,121.65,349.9,111.8,371.2,102.65,390.9,94.15,409.05,86.35,425.6,79.2,440.6,72.75,454,67,454,67,454,67,454,67,454,67,450.8,63.15,450.8,63.15,450.8,63.15,450.8,63.15,450.8,63.15,450.8,63.15,450.8,63.15,450.8,63.15,450.8,63.15,450.8,63.15,450.8,63.15,460.3,85.3,469.8,107.5,479.3,129.65,488.8,151.8,498.3,174,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,511,200,511,200,511,200,511,200,511,200,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,507.8,196.15,504.5,196.55,493.9,197.85,474.75,200.15,446,203.65,407.35,208.35,360.2,214.05,308.9,220.3,260.1,226.2,220,231.05,191.85,234.45,175.95,236.4,171,237,171,237,171,237,171,237,171,237,171,237,171,237,174.2,240.85,174.2,240.85,174.2,240.85,174.2,240.85,174.2,240.85,174.2,240.85,177.35,238.6,187.5,231.35,205.95,218.2,233.7,198.45,270.5,172.2,313.85,141.35,357.75,110,395.4,83.2,422.25,64.05,437.5,53.2,442.2,49.85,442.2,49.85,442.2,49.85,442.2,49.85,439,46,439,46,439,46,439,46,396.85,103.75,362.35,150.95,335.5,187.7,316.35,213.95,304.85,229.7,301,234.95,301,234.95,304.2,238.8,308.05,234.75,320.9,221.3,344.55,196.55,378.7,160.8,417.3,120.4,449.45,86.7,468.45,66.85,474.2,60.8,474.2,60.8,474.2,60.8,471,56.95,471,56.95,471,56.95,471,56.95,471,56.95,471,56.95,471,56.95,471,56.95,478.8,86.75,486.6,116.55,494.4,146.35,502.2,176.15,510,205.95,510,205.95,510,205.95,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8,513.2,206.8], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc25:{view:'tick_slot.png', isImage:false, depth:25, startFrame:0, endFrame:363, positionalpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc26:{view:'tick_fill.png', isImage:false, depth:26, startFrame:0, endFrame:363, positionscale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2.462,2.462,2.456,2.456,2.441,2.441,2.416,2.416,2.381,2.381,2.335,2.335,2.279,2.279,2.214,2.214,2.138,2.138,2.052,2.052,1.956,1.956,1.85,1.85,1.733,1.733,1.607,1.607,1.47,1.47,1.324,1.324,1.167,1.167,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2.462,2.462,2.449,2.449,2.413,2.413,2.353,2.353,2.268,2.268,2.16,2.16,2.027,2.027,1.87,1.87,1.688,1.688,1.483,1.483,1.254,1.254,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.03,0.05,0.09,0.13,0.17,0.22,0.28,0.35,0.42,0.5,0.59,0.68,0.78,0.89,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.83,0.67,0.5,0.33,0.17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.03,0.07,0.13,0.21,0.3,0.41,0.53,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
    mc27:{view:'item_green_apple.png', isImage:false, depth:10, startFrame:167, endFrame:363, position:[49,216,47,212.15,45.1,208.2,43.1,204.3,41.15,200.45,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,197,39,196.95,39,196.95,39,196.95,39,196.95,39,196.95,39,197], scale:[0.395,0.395,0.429,0.428,0.462,0.462,0.496,0.496,0.529,0.529,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563,0.563], alpha:[0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}
}
    }

/**
     * Animation
     * 
     */

    Animations.gameInstructCows ={

        spriteSheets:[
           ASSET_URL + 'img/game/instructions.json'
            
        ], 

        data:
      {
    mc0:{view:'cow_white.png', isImage:false, depth:0, startFrame:0, endFrame:143, position:[337,168,337,168,337,168,337,168,337,168,337,168,337,168,337,168,337,168,337,168,337,168,337,168,337,168,337,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,247,168,246.95,168,246.85,168,246.65,168,246.4,168,246,168,245.55,168,244.95,168,244.25,168,243.5,168,242.6,168,241.7,168,240.8,168,239.9,168,239.15,168,238.45,168,237.9,168,237.5,168,237.2,168,237.05,168,237,168,237.05,168,237.2,168,237.45,168,237.8,168,238.25,168,238.85,168,239.6,168,240.5,168,241.5,168,242.65,168,243.95,168,245.35,168,246.75,168,248.2,168,249.65,168,250.95,168,252.2,168,253.25,168,254.1,168,254.8,168,255.35,168,255.7,168,255.95,168,256,168,255.95,168,255.85,168,255.6,168,255.3,168,254.85,168,254.3,168,253.6,168,252.8,168,251.85,168,250.8,168,249.6,168,248.35,168,246.95,168,245.55,168,244.2,168,242.85,168,241.6,168,240.5,168,239.5,168,238.7,168,238.05,168,237.6,168,237.25,168,237.05,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168,237,168], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17,0.33,0.5,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc1:{view:'cowGlow.png', isImage:false, depth:1, startFrame:0, endFrame:172, positionalpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0.94,0.88,0.82,0.77,0.71,0.65,0.59,0.53,0.47,0.41,0.35,0.29,0.23,0.18,0.12,0.06,0]}, 
    mc2:{view:'building.png', isImage:false, depth:2, startFrame:0, endFrame:195, position:[116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,116,15.95,115.9,15.95,115.55,15.95,115,15.95,114.15,15.95,113.05,15.95,111.6,15.95,109.9,15.95,107.8,15.95,105.45,15.95,102.85,15.95,100.1,15.95,97.35,15.95,94.75,15.95,92.4,15.95,90.35,15.95,88.75,15.95,87.5,15.95,86.65,15.95,86.15,15.95,86,15.95,86.05,15.95,86.2,15.95,86.45,15.95,86.85,15.95,87.35,15.95,87.95,15.95,88.75,15.95,89.65,15.95,90.75,15.95,91.95,15.95,93.3,15.95,94.75,15.95,96.3,15.95,97.8,15.95,99.3,15.95,100.7,15.95,102,15.95,103.1,15.95,104,15.95,104.75,15.95,105.3,15.95,105.7,15.95,105.95,15.95,106,15.95,105.9,15.95,105.55,15.95,104.95,15.95,104.1,15.95,102.95,15.95,101.5,15.95,99.7,15.95,97.6,15.95,95.15,15.95,92.35,15.95,89.25,15.95,85.85,15.95,82.3,15.95,78.6,15.95,74.95,15.95,71.45,15.95,68.15,15.95,65.25,15.95,62.7,15.95,60.55,15.95,58.85,15.95,57.55,15.95,56.65,15.95,56.15,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.95,56,15.85,56,15.8,56,15.7,56,15.6,56,15.5,56,15.45,56,15.35,56,15.25,56,15.15,56,15.1,56,15], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17,0.33,0.5,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18,0.09,0]}, 
    mc3:{view:'cactus.png', isImage:false, depth:3, startFrame:0, endFrame:195, position:[381,114,381,114,381,114,381,114,381,114,381,114,381,114,381,114,381,114,381,114,381,114,381,114,381,114,381,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,41,114,40.85,114,40.3,114,39.35,114,37.95,114,36.1,114,33.75,114,30.85,114,27.4,113.95,23.5,113.95,19.1,114,14.55,114,9.95,114,5.6,114,1.65,114,-1.75,114,-4.5,114,-6.55,114,-8,114,-8.8,114,-9,114,-8.95,114,-8.7,114,-8.3,114,-7.75,114,-7,114,-6.05,114,-4.9,114,-3.5,114,-1.85,114,-0.05,114,2,114,4.15,114,6.45,114,8.75,114,11,114,13.1,114,15,114,16.7,114,18.05,114,19.2,114,20.05,114,20.6,114,20.95,114,21,114,20.85,114,20.45,114,19.75,114,18.75,114,17.4,114,15.7,114,13.6,114,11.1,114,8.2,114,4.9,114,1.2,114,-2.75,114,-7,114,-11.3,114,-15.65,114,-19.8,114,-23.65,114,-27.1,114,-30.1,114,-32.65,114,-34.65,114,-36.15,114,-37.2,114,-37.8,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114,-38,114], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17,0.33,0.5,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18,0.09,0]}, 
    mc4:{view:'viewport.png', isImage:false, depth:4, startFrame:0, endFrame:195, position:[4,11,4,11,4,11,4,11,4,11,4,11,4,11,4,11,4,11,-5,11,-4.95,11.1,-4.9,11.2,-4.85,11.25,-4.8,11.35,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,11,-5,10.95,-5,10.95,-5,10.95,-5,10.95,-5,10.95,-5,10.95,-5,10.9,-5,10.9,-5,11], scalealpha:[0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18,0.09,0]}, 
    mc5:{view:'pointer.png', isImage:false, depth:5, startFrame:0, endFrame:195, position:[211,147,211,147,211,147,211,147,211,147,211,147,211,147,211,147,211,147,211,147,211,147,211,147,211,147,211,147,211,147,221,147,231,147,241,147,251,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,261,147,264.2,150.85,264.05,150.85,263.65,150.85,262.9,150.85,261.75,150.85,260.25,150.85,258.35,150.85,256.05,150.85,253.3,150.85,250.15,150.85,246.65,150.85,243.05,150.85,239.35,150.85,235.9,150.85,232.7,150.85,230,150.85,227.85,150.85,226.2,150.85,225.05,150.85,224.4,150.85,224.2,150.85,224.25,150.85,224.5,150.85,224.9,150.85,225.45,150.85,226.2,150.85,227.15,150.85,228.3,150.85,229.7,150.85,231.3,150.85,233.15,150.85,235.15,150.85,237.35,150.85,239.6,150.85,241.9,150.85,244.15,150.85,246.25,150.85,248.15,150.85,249.85,150.85,251.25,150.85,252.35,150.85,253.2,150.85,253.75,150.85,254.1,150.85,254.2,150.85,254.05,150.85,253.65,150.85,252.95,150.85,251.9,150.85,250.55,150.85,248.8,150.85,246.65,150.85,244.15,150.85,241.15,150.85,237.8,150.85,234.1,150.85,230,150.85,225.75,150.85,221.35,150.85,216.95,150.85,212.75,150.85,208.8,150.85,205.25,150.85,202.2,150.85,199.65,150.85,197.6,150.85,196.05,150.85,195,150.85,194.4,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,194.2,150.85,191,147.05,191,147.05,191,147.05,191,147.05,191,147.05,191,147.05,191,147.05,191,147.05,191,147.05,211.15,162.75,228.65,176.35,243.4,187.9,255.5,197.3,264.9,204.65,271.65,209.85,275.65,213,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,280.2,217.9,280.2,217.9,280.2,217.9,280.2,217.9,280.2,217.9,280.2,217.9,280.2,217.9,280.2,217.9,280.2,217.9,280.2,217.9,280.2,217.9,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,277,214.05,276.5,214.05,276,214.05,275.5,214.05,275,214.05,274.5,214.05,274,214.05,273.5,214.05,273,214.05,272.5,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05,272,214.05], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}, 
    mc6:{view:'tick_slot.png', isImage:false, depth:6, startFrame:0, endFrame:164, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17,0.33,0.5,0.67,0.83,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
    mc7:{view:'tick_fill.png', isImage:false, depth:7, startFrame:0, endFrame:195, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,126.4,201.6,125.45,197,122.6,188.7,117.5,176.45,109.8,159.7,99.45,138.7,86.3,114.05,71,87.55,54.5,61.75,38.4,39.1,24.3,21.4,13.25,9.1,5.7,2.2,1.35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2.462,2.462,2.451,2.451,2.418,2.418,2.358,2.358,2.27,2.27,2.15,2.15,1.998,1.998,1.821,1.821,1.63,1.63,1.444,1.444,1.281,1.281,1.154,1.154,1.066,1.066,1.016,1.016,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.3,0.3,0.32,0.35,0.39,0.45,0.52,0.61,0.7,0.79,0.87,0.93,0.97,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.91,0.82,0.73,0.64,0.55,0.45,0.36,0.27,0.18,0.09,0]}
}
    }


/**
     * Animation
     * 
     */

    Animations.gameInstructCowsChase ={

        spriteSheets:[
            ASSET_URL + 'img/game/instructions.json'
            
        ],

        data:
        {
            mc0:{view:'intHighlight.png', custom:true, isImage:false, depth:0, startFrame:0, endFrame:124, position:[175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45,175,224.45], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0.83,0.67,0.5,0.33,0.17,0,0,1,0.83,0.67,0.5,0.33,0.17,0,0,1,0.83,0.67,0.5,0.33,0.17,0,0,1,0.83,0.67,0.5,0.33,0.17,0,0,1,0.83,0.67,0.5,0.33,0.17,0,0,1,0.83,0.67,0.5,0.33,0.17,0,0,1,0.83,0.67,0.5,0.33,0.17,0,0,1,0.83,0.67,0.5,0.33,0.17,0]}, 
            mc1:{view:'platforms.png', isImage:false, depth:1, startFrame:0, endFrame:173, position:[148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,148,189,118,189,122.75,189,127,189,130.75,189,134,189,136.75,189,139,189,140.75,189,142,189,142.75,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189,143,189], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.19,0.36,0.51,0.64,0.75,0.84,0.91,0.96,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
            mc2:{view:'cow_run10.png', isImage:false, depth:2, startFrame:0, endFrame:166, position:[307,140,307,140,307,140,307,140,307,140,307,140,307,140,307,140,307,140,307,140,307,140,307,140,307,140,312,72,312,72,312,72,312,72,312,71.95,312,71.95,312.05,71.95,312.05,71.95,312.05,71.95,312.05,71.95,312.05,71.9,312.05,71.9,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72,312,72], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.08,0.17,0.25,0.33,0.42,0.5,0.58,0.67,0.75,0.83,0.92,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
            mc3:{view:'clementine_run09.png', isImage:false, depth:3, startFrame:0, endFrame:170, position:[218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,218,79.45,15,35,27.8,35,39.45,35,50,35,59.45,35,67.8,35,75,35,81.1,35,86.1,35,90,35,92.8,35,94.45,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95,35,95.4,35,96.65,35,98.8,35,102,35,106.3,35,111.75,35,118.5,35,126.4,35,135.45,35,145.4,35,155.9,35,166.4,35,176.45,35,185.5,35,193.25,35,199.55,35,204.3,35,207.55,35,209.4,35,210,35,209.65,35,208.6,35,206.65,35,203.75,35,199.85,35,195.1,35,189.9,35,185,35,180.95,35,178.1,35,176.5,35,176,35,176.35,35,177.35,35,179.15,35,181.75,35,185.25,35,189.65,35,195.05,35,201.5,35,209,35,217.45,35,226.85,35,236.9,35,247.45,35,258.1,35,268.45,35,278.25,35,287.05,35,294.75,35,301.25,35,306.4,35,310.3,35,312.95,35,314.5,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35,315,35], scalealpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.16,0.3,0.44,0.55,0.66,0.75,0.83,0.89,0.94,0.97,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}, 
            mc4:{view:'pointer.png', custom2:true,isImage:false, depth:4, startFrame:0, endFrame:139, position:[164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,164,134,256.85,274.05,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.9,265.35,256.9,259.1,256.9,255.35,256.85,254.05,256.9,255.35,256.9,259.1,256.9,265.35,256.85,274.05,256.9,265.35,256.9,259.1,256.9,255.35,256.85,254.05,256.9,255.35,256.9,259.1,256.9,265.35,256.85,274.05,256.9,265.35,256.9,259.1,256.9,255.35,256.85,254.05,256.9,255.35,256.9,259.1,256.9,265.35,256.85,274.05,256.9,265.35,256.9,259.1,256.9,255.35,256.85,254.05,256.9,255.35,256.9,259.1,256.9,265.35,256.85,274.05,256.9,265.35,256.9,259.1,256.9,255.35,256.85,254.05,256.9,255.35,256.9,259.1,256.9,265.35,256.85,274.05,256.9,265.35,256.9,259.1,256.9,255.35,256.85,254.05,256.9,255.35,256.9,259.1,256.9,265.35,256.85,274.05,256.9,265.35,256.9,259.1,256.9,255.35,256.85,254.05,256.9,255.35,256.9,259.1,256.9,265.35,256.85,274.05,256.9,265.35,256.9,259.1,256.9,255.35,256.85,254.05,256.9,255.35,256.9,259.1,256.9,265.35,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.85,274.05,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.9,274.1,256.85,274.05], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.09,0.18,0.27,0.36,0.45,0.55,0.64,0.73,0.82,0.91,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135]}, 
            mc5:{view:'pointer.png', custom2:true,isImage:false, depth:5, startFrame:0, endFrame:139, position:[310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,310,109,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,240.3,407.85,234.05,407.85,230.3,407.85,229.05,407.85,230.3,407.85,234.05,407.85,240.3,407.85,249.05,407.85,240.3,407.85,234.05,407.85,230.3,407.85,229.05,407.85,230.3,407.85,234.05,407.85,240.3,407.85,249.05,407.85,240.3,407.85,234.05,407.85,230.3,407.85,229.05,407.85,230.3,407.85,234.05,407.85,240.3,407.85,249.05,407.85,240.3,407.85,234.05,407.85,230.3,407.85,229.05,407.85,230.3,407.85,234.05,407.85,240.3,407.85,249.05,407.85,240.3,407.85,234.05,407.85,230.3,407.85,229.05,407.85,230.3,407.85,234.05,407.85,240.3,407.85,249.05,407.85,240.3,407.85,234.05,407.85,230.3,407.85,229.05,407.85,230.3,407.85,234.05,407.85,240.3,407.85,249.05,407.85,240.3,407.85,234.05,407.85,230.3,407.85,229.05,407.85,230.3,407.85,234.05,407.85,240.3,407.85,249.05,407.85,240.3,407.85,234.05,407.85,230.3,407.85,229.05,407.85,230.3,407.85,234.05,407.85,240.3,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05,407.85,249.05], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.09,0.18,0.27,0.36,0.45,0.55,0.64,0.73,0.82,0.91,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0], rotation:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135]}, 
            mc6:{view:'tick_slot.png', isImage:false, depth:6, startFrame:0, endFrame:131, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.08,0.17,0.25,0.33,0.42,0.5,0.58,0.67,0.75,0.83,0.92,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}, 
            mc7:{view:'tick_fill.png', isImage:false, depth:7, startFrame:0, endFrame:173, position:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,302,62.4,299.8,61.95,292.95,60.5,280.7,58,262.35,54.2,237.55,49.05,206.25,42.6,169.6,35.05,130.2,26.95,91.75,18.95,58.1,12.05,31.75,6.55,13.55,2.8,3.2,0.7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], scale:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2.462,2.462,2.451,2.451,2.418,2.418,2.358,2.358,2.27,2.27,2.15,2.15,1.998,1.998,1.821,1.821,1.63,1.63,1.444,1.444,1.281,1.281,1.154,1.154,1.066,1.066,1.016,1.016,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], alpha:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.3,0.3,0.32,0.35,0.39,0.45,0.52,0.61,0.7,0.79,0.87,0.93,0.97,0.99,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.92,0.83,0.75,0.67,0.58,0.5,0.42,0.33,0.25,0.17,0.08,0]}
        }
    }


    module.exports = Animations;

});

define('com/fido/swfy/Swfy',['require','exports','module','PIXI','signals'],function (require, exports, module) {

	var PIXI = require("PIXI");
	var Signal = require('signals');

	Swfy = function()
	{
			      
		PIXI.DisplayObjectContainer.call(this);//
		
		this.sprites = [];

		this.currentFrame = 0;
		this.onComplete = new Signal();
		this.finished = true;
	}

	// constructor
	Swfy.constructor = Swfy;
	Swfy.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

	Swfy.prototype.setAnimation = function(animation)
	{
		if(animation === this.currentAnimation)return;

		if(this.currentAnimation)
		{	
			for (var i in this.currentAnimation) 
			{
				var data = this.currentAnimation[i];

				this.removeChild(data.sprite);
			}
		}

		// todo clean up!
		this.currentAnimation = animation;
		this.totalFrames = 0;

		for (var i in animation) 
		{
			var data = animation[i];

			if(!data.sprite) // loaded first time
			{
				var sprite = data.isImage ? PIXI.Sprite.fromImage(ASSET_URL + data.view) :  PIXI.Sprite.fromFrame(data.view);
				data.sprite = sprite;
				if(data.custom)
				{
					sprite.pivot.x = 10;
				}
				else if(data.custom2)
				{
					sprite.pivot.x = -10;
					sprite.pivot.y = -20;
				}
			}

			console.log(data.view);

			data.sprite.visible = false;
			this.addChild(data.sprite);

			this.totalFrames = Math.max(this.totalFrames, data.endFrame);
		};
		
		// cheeck off!
		this.totalFrames -= 2
	}

	Swfy.prototype.reset = function()
	{
		this.currentFrame = 0;
		this.finished = false;
	}

	Swfy.prototype.updateTransform = function()
	{
		if(this.finished)
		{
			PIXI.DisplayObjectContainer.prototype.updateTransform.call(this)
			return;
		}

		this.currentFrame += 0.5 * 1// * 0.3//GAME.time.DELTA_TIME;

	//	this.currentFrame %= 45;
		if(this.currentFrame >= this.totalFrames)
		{
			this.currentFrame = this.totalFrames;
//			alert("!")
	//		this.currentFrame = 0;
	//		this.parent.removeChild(this);
	//		return;

			this.finished = true;
			this.onComplete.dispatch();
		}
		
		var position = this.currentFrame//(stage.interactionManager.mouse.global.x / GAME.width) * 45/// //this.currentFrame;
		
		position = Math.round(position);
		
		for(var i in this.currentAnimation)
		{
			var data = this.currentAnimation[i];
		
			
			if(position >= data.startFrame && position < data.endFrame)
			{
				//trace(">>")
				data.sprite.visible = true;
				//data.sprite.alpha  =0.5;
				var frameindex = position-data.startFrame;
				var lowIndex = Math.floor(frameindex);
				var highIndex = Math.round(frameindex);
				
				var ratio = frameindex - lowIndex;
				
				// x pos
				var positionX1 =  data.position[lowIndex * 2];
				var positionX2 =  data.position[highIndex * 2];
				
				var interX = positionX1 + (positionX2 - positionX1) * ratio;
				
				// y pos
				
				var positionY1 =  data.position[lowIndex * 2 + 1];
				var positionY2 =  data.position[highIndex * 2 + 1];
				
				var interY = positionY1 + (positionY2 - positionY1) * ratio;
				
				data.sprite.position.x = positionX1// interX
				data.sprite.position.y = positionY1//interY
				
				var interScaleX = 1;
				var interScaleY = 1;
				
				if(data.scale)
				{
					var scaleX1 =  data.scale[lowIndex * 2];
					var scaleX2 =  data.scale[highIndex * 2];
					
					interScaleX = scaleX1 + (scaleX2 - scaleX1) * ratio;
					
					var scaleY1 =  data.scale[lowIndex * 2 + 1];
					var scaleY2 =  data.scale[highIndex * 2 + 1];
					
					interScaleY = scaleY1 + (scaleY2 - scaleY1) * ratio;
				}
				
				data.sprite.scale.x = interScaleX;
				data.sprite.scale.y = interScaleY;
				
				
				var interAlpha = 1;
				
				if(data.alpha)
				{
					var alpha1 =  data.alpha[lowIndex];
					var alpha2 =  data.alpha[highIndex];
					
					
					interAlpha = alpha1 + (alpha2 - alpha1) * ratio;
					
				}
				
				data.sprite.alpha = interAlpha
				
				if(data.rotation)
				{
					
					var rotation1 =  data.rotation[lowIndex];
					var rotation2 =  data.rotation[highIndex];
					
					interRotation = rotation1 + (rotation2 - rotation1) * ratio;
					data.sprite.rotation = interRotation * (Math.PI / 180)
				}
			

			}
			else
			{
				data.sprite.visible = false;
				
			}
		}

		
		PIXI.DisplayObjectContainer.prototype.updateTransform.call(this)
	}


	module.exports = Swfy;

});


define('com/fido/app/transitions/StarTransition',['require','exports','module','com/fido/sound/SoundManager'],function (require, exports, module) {

    var SoundManager        = require('com/fido/sound/SoundManager');

StarTransition = function()
{
    this.shape = new PIXI.Graphics();

    var shapeWidth = 238;
    var shapeHeight = 232;

    this.pink = new PIXI.Graphics();

    this.pink.beginFill(0xf38898);

    this.pink.drawRect(0,0,2048,1024);

    this.pink.endFill();

    this.pauseForLoad = true;

    this.shape.pivot.set(shapeWidth/2,  shapeHeight/2);

    this.shape.beginFill(0xFF000);
    this.shape.moveTo(210,110);
    this.shape.bezierCurveTo(209,110,207,110,206,109);
    this.shape.lineTo(175,141);
    this.shape.lineTo(180,183);
    this.shape.bezierCurveTo(188,186,193,193,193,201);
    this.shape.bezierCurveTo(192,212,184,220,174,220);
    this.shape.bezierCurveTo(164,219,156,211,155,202);
    this.shape.lineTo(116,184);
    this.shape.lineTo(76,203);
    this.shape.bezierCurveTo(75,212,67,219,57,219);
    this.shape.bezierCurveTo(47,219,38,210,39,200);
    this.shape.bezierCurveTo(39,192,45,185,52,182);
    this.shape.lineTo(57,141);
    this.shape.lineTo(26,108);
    this.shape.bezierCurveTo(24,108,22,109,21,109);
    this.shape.bezierCurveTo(10,108,2,100,3,90);
    this.shape.bezierCurveTo(3,79,11,71,22,71);
    this.shape.bezierCurveTo(28,72,33,75,37,79);
    this.shape.lineTo(80,73);
    this.shape.lineTo(101,31);
    this.shape.bezierCurveTo(99,28,98,25,98,21);
    this.shape.bezierCurveTo(98,10,107,2,117,3);
    this.shape.bezierCurveTo(127,3,135,11,135,22);
    this.shape.bezierCurveTo(135,25,134,29,132,32);
    this.shape.lineTo(153,74);
    this.shape.lineTo(196,80);
    this.shape.bezierCurveTo(200,75,205,73,211,73);
    this.shape.bezierCurveTo(221,73,229,82,229,92);
    this.shape.bezierCurveTo(229,102,221,110,210,110);
    this.shape.endFill();

}

StarTransition.constructor = StarTransition;

StarTransition.prototype.begin = function(screenManager, currentScreen, nextScreen)
{
    this.screenManager = screenManager;

    this.currentScreen = currentScreen;
    this.nextScreen = nextScreen;

   // this.nextScreen.visible = false;
    screenManager.container.parent.addChildAt(this.pink,0)
    screenManager.container.addChild(this.shape);
    screenManager.container.mask = this.shape;

    this.shape.scale.set(this.targetScale);

    SoundManager.sfx.play('transition');

    if(this.currentScreen)
    {
        if(this.currentScreen.onHide)this.currentScreen.onHide();
        TweenLite.to(this.shape.scale, 1, {x:0.001, y:0.001, ease:Sine.easeOut, onComplete:this.onFadeout.bind(this)
            });
        // ,onUpdate : this.update.bind(this)
        TweenLite.to(this.shape, 1, {rotation : 2 * Math.PI, ease:Sine.easeOut});

    }
    else
    {
        this.onFadeout();
    }
}

StarTransition.prototype.onFadeout = function()
{
    if(this.pauseForLoad)
    {
        if( this.onHidden )
        {
            this.onHidden();
        }
    }
    else
    {
        this.fadeIn();
    }
}

StarTransition.prototype.fadeIn = function()
{
    

    if(this.currentScreen)
    {
        if(this.currentScreen.onHidden)this.currentScreen.onHidden();
        this.screenManager.container.removeChild(this.currentScreen);
    }
    
    //this.nextScreen.alpha = 0;

    if(this.nextScreen.onShow)this.nextScreen.onShow();
    if(this.nextScreen.resize)this.nextScreen.resize(this.screenManager.w, this.screenManager.h);

    this.screenManager.container.addChild(this.nextScreen);

    TweenLite.to(this.shape.scale, 1.2, 
    {
        delay:0.2,
        x:this.targetScale,
        y:this.targetScale,
        ease:Cubic.easeIn,
        onComplete:this.onFadein.bind(this),
        onUpdate : this.update.bind(this)
    });

    TweenLite.to(this.shape, 1.2, {delay:0.2, rotation : 0, ease:Sine.easeOut});

}

StarTransition.prototype.onFadein = function()
{   
    if(this.nextScreen.onShown)this.nextScreen.onShown();

    this.screenManager.container.parent.removeChild(this.pink);
    this.screenManager.container.removeChild(this.shape);
    this.screenManager.container.mask = null;
    this.screenManager.onTransitionComplete();
}

StarTransition.prototype.onResize = function(w, h)
{
    this.w = w;
    this.h = h;
  //  console.log(this.targetScale, w)
    this.targetScale = (w/100) * 1.2;
    this.shape.x = w/2;
    this.shape.y = h/2;


}

StarTransition.prototype.update = function()
{

    this.shape.rotation += 0.03;
}

module.exports = StarTransition;


});

define('com/sc/app/screens/AnimationScreen',['require','exports','module','PIXI','com/sc/app/Animations','com/fido/swfy/Swfy','com/fido/app/AssetManager','com/sc/app/buttons/SCButton','com/fido/app/transitions/StarTransition','libs/gameConfig/gameTracking'],function (require, exports, module) 
{
    var PIXI              = require("PIXI");
    var Animations        = require("com/sc/app/Animations");
    var Swfy              = require("com/fido/swfy/Swfy");
    var AssetManager      = require("com/fido/app/AssetManager");
    var SCButton          = require("com/sc/app/buttons/SCButton");
    var StarTransition    = require("com/fido/app/transitions/StarTransition");
    var DisneyTracker     = require('libs/gameConfig/gameTracking');

    /**
     * Animation screen type, including skip button
     * @param {[Object]} app [Instance of SCApp]
     */
    var AnimationScreen = function(app)
    {
        PIXI.DisplayObjectContainer.call( this );
        this.app = app;

        this.animationId = '';
        this.animationData = null;
        this.swfy = null;

        this.skipButton = null;

        this.transition = new StarTransition();

    };

    AnimationScreen.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * Initialise the animation details
     */
    AnimationScreen.prototype.init = function()
    {
        if(this.swfy)return;
        
        this.swfy = new Swfy();
        this.addChild(this.swfy);

        this.swfy.onComplete.add(this.onAnimationComplete, this);

        this.skipButton = new SCButton.middleBlue("icon_skip.png");
        this.skipButton.view.scale.set(0);
        this.skipButton.icon.scale.set(2);
        this.skipButton.view.position.set(this.app.safeSize.width - 90, this.app.safeSize.height - 110);

        if(this.app.config.FLIP_LANGUAGE === "true")
        {
            this.skipButton.icon.scale.x *= -1;
            this.skipButton.icon.x -= 16;
            this.skipButton.view.position.x = 110;
        }
        
        this.skipButton.onPress.add(this.skipAnimation, this);
        this.skipButton.onMouseOut.add(this.onButtonOut, this);

        this.addChild(this.skipButton.view);
    };

    /**
     * When the mouse leaves the button
     * @param  {Object} button : The pressed button
     */
    AnimationScreen.prototype.onButtonOut = function(button)
    {
        TweenLite.to(button.view.scale, 0.4, 
        {
            x: button.defaultScale,
            y: button.defaultScale,
            ease: Elastic.easeOut
        });
    };

    /**
     * When the mouse is over a button
     * @param  {[type]} button : The pressed button
     */
    AnimationScreen.prototype.onButtonOver = function(button)
    {
        TweenLite.to(button.view.scale, .4, 
        {
            x: button.defaultScale+.2,
            y: button.defaultScale+.2,
            ease: Elastic.easeOut
        });
    };

    /**
     * Skip the animation
     */
    AnimationScreen.prototype.skipAnimation = function()
    {
        if(this.isTouched) return;

        DisneyTracker.trackAction("cut_scene_skip", this.animationId);
        this.onAnimationComplete();
        this.alreadySkipped = true;
        this.isTouched = true;
    };

    /**
     * Event for showing the screen
     */
    AnimationScreen.prototype.onShow = function()
    {
        this.skipButton.view.interactive = true;

        
        if(this.app.currentSegmentId == 0) // if there is an id, so we are on an animation before game
        {
            this.backBehaviour = "title";
        }
        else
        {
            this.backBehaviour = "map";
        }

        this.alreadySkipped = false;
        this.isTouched = false;
        this.swfy.reset()
        this.app.overlayManager.onShow.add(this.onOverlayShow, this);
        this.app.overlayManager.onHide.add(this.onOverlayHide, this);

        if(!this.app.currentSegmentId == 0)
        {
            this.app.topMenu.normalMode();
        }

        TweenLite.to(this.skipButton.view.scale, 1,
        {
            x : this.skipButton.defaultScale,
            y : this.skipButton.defaultScale,
            delay : 0.2,
            ease : Elastic.easeOut
        });

        
        this.swfy.setAnimation(this.animationData.data);
        this.swfy.reset();
    };

    /** 
     * Set the animation that we want to play
     * @param {[String]} id : ID of the animation
     */
    AnimationScreen.prototype.setAnimationById = function(id)
    {
        var animationData = Animations[id];
        this.animationData = animationData;
        this.animationId = id;

        if(!AssetManager.doesGroupExist(id))
        {
            var assetsRequired = this.getAssetsForAnimation(animationData);
            AssetManager.registerGroup(id, assetsRequired);
        }

        this.requiredAssets = [id]
        this._firstRun = true
      //  AssetManager.onAssetsLoaded.addOnce(this.onAssetsLoaded, this);
 //       AssetManager.activateGroups([id]);
    };

    /**
     * Get the assets for the currently loaded animation
     * @param  {[Object]} animation : The animation itself
     */
    AnimationScreen.prototype.getAssetsForAnimation = function(animation)
    {
        var assets = animation.spriteSheets.slice();

        for(var i in animation.data)
        {
            var mc = animation.data[i];
            if(mc.isImage)
            {
                assets.push(ASSET_URL + mc.view);
            }
        }    

        return assets;
    };

    /**
     * Event for then the assets have finished loading
     */
    AnimationScreen.prototype.onAssetsLoaded = function()
    {
        this.swfy.setAnimation(this.animationData.data);
        this.swfy.reset();
    };

    /** 
     * Event for then the animation is complete
     * 
     */
    AnimationScreen.prototype.onAnimationComplete = function()
    {
        this.skipButton.view.interactive = false;
        if(!this.alreadySkipped)
        {
            this.app.nextSegment();
        }
    };

    /**
     * Callback for when show() is complete
     */
    AnimationScreen.prototype.onShown = function()
    {
        
    };

    /**
     * Event for hiding the animation
     */
    AnimationScreen.prototype.onHide = function()
    {
        this.skipButton.view.interactive = false;
        this.app.overlayManager.onShow.remove(this.onOverlayShow, this);
        this.app.overlayManager.onHide.remove(this.onOverlayHide, this);
    };

    /**
     * Event for when onHide is finished.
     */
    AnimationScreen.prototype.onHidden = function()
    {
        
    };

    /**
     * Event for when showing overlay
     */
    AnimationScreen.prototype.onOverlayShow = function()
    {

    };

    /**
     * Event for hiding the overlay
     */
    AnimationScreen.prototype.onOverlayHide = function()
    {
        
    };

    /**
     * Resize the animation screen
     * @param  w {Number} Width
     * @param  h {Number} Height
     */
    AnimationScreen.prototype.resize = function(w, h)
    {          
    }

    /**
     * Export...
     */
    module.exports = AnimationScreen;
  
});
define('com/fido/system/LocalStorage',['require','exports','module'],function (require, exports, module) {

var LocalStorage = function(bundleId)
{
    this.id = bundleId;

    this.canSave = false;

    try
    {
        localStorage.setItem(this.id + '.access', true);
        localStorage.removeItem(this.id + '.access', true);

        this.canSave = true;
    }
    catch(e)
    {

    }
}


// store string values..
LocalStorage.prototype.store = function(key, value) 
{
    if(!this.canSave)return;

    localStorage.setItem(this.id + '.' + key, value);
}

// retrieve string values
LocalStorage.prototype.get = function(key) 
{
    return localStorage.getItem(this.id + '.' + key) || 0;
}

LocalStorage.prototype.storeObject = function(key, value) 
{
    if(!this.canSave)return;
    
    localStorage.setItem(this.id + '.' + key, JSON.stringify( value ));
}

LocalStorage.prototype.getObject = function(key) 
{
    return JSON.parse(localStorage.getItem(this.id + '.' + key) || 0);
}

LocalStorage.prototype.remove = function(key)
{
    localStorage.removeItem(this.id + '.' + key);
}

LocalStorage.prototype.reset = function() 
{
    for(var i in localStorage) 
    {
        if(i.indexOf(this.id + '.') !== -1) localStorage.removeItem(i);
    }
}

module.exports = LocalStorage;
});

define('com/sc/app/system/GameSaveManager',['require','exports','module','signals','com/fido/system/LocalStorage'],function (require, exports, module) 
{    
    var Signal       = require("signals");
    var LocalStorage = require("com/fido/system/LocalStorage");
    
    /**
     * The Game Save Manager, we store game state information and any persistent user-information
     */
    var GameSaveManager = function()
    {
        this.onLoaded = new Signal();
        this.onSavedComplete = new Signal();
        this.onTutorialSet = new Signal();
        this.onReset = new Signal();
        this.localStorage = new LocalStorage("com.sheriffcallie.goodboy");
        this.save = null;
    };

    /**
     * Load the game
     */
    GameSaveManager.prototype.loadGame = function()
    {
        this.loadGameFromLocalStorage();
    };

    /**
     * Load the game from the users localStorage, make a new save if needed
     */
    GameSaveManager.prototype.loadGameFromLocalStorage = function()
    {
        var save = this.localStorage.getObject("save");

        if(!save)
        {
            save = new GameSave();
            this.localStorage.storeObject("save", save);
        }

        this.save = save;
        this.onLoaded.dispatch();
    };

    /**
     * Set a level as complete and save it
     * @param {Number} levelId : The level's id in the array
     * @returns {boolean} : always false
     */
    GameSaveManager.prototype.setComplete = function(levelId)
    {
        // checks that the index is not out of bounds
        // if(levelId < this.save.levelStates.length)
        // {
            console.log(levelId);
            this.save.levelStates[levelId] = GameSaveManager.LEVEL_STATES.Complete;
            this.saveToStorage();

            this.onSavedComplete.dispatch();
        // }

        // return false;
    };

    /**
     * Clears the current data
     */
    GameSaveManager.prototype.clear = function()
    {
        this.localStorage.remove();

        this.save = new GameSave();
        this.localStorage.storeObject("save", this.save);
    };

    /**
     * Set the tutorial which is needed to be displayed
     * @param {Number} id : the id of the tutorial (0 : Store, 1 : Smoothie, 2 : Cattle, 3: Chase(in CattleGame))
     * @returns {boolean} : always false
     */
    GameSaveManager.prototype.setTutorial = function(id)
    {
        this.save.currentTutorialDisplayed = GameSaveManager.TUTORIAL_ID[id];
        this.saveToStorage();
        this.onTutorialSet.dispatch();

        // return false;
    };

    /**
     * Set the level we are playing
     * @param {Number} id : the id the difficulty (0:easy, 1:hard)
     * @returns {boolean} : always false
     */
    GameSaveManager.prototype.setDifficulty = function(id)
    {
        this.save.difficulty = GameSaveManager.DIFFICULTY[id];
        this.saveToStorage();

        return false;
    };

    /**
     * Save the current game state to storage
     */
    GameSaveManager.prototype.saveToStorage = function()
    {
        this.localStorage.storeObject("save", this.save);
    };

    /**
     * A way of checking if you completed the three games
     */
    GameSaveManager.prototype.numLevelsCompleted = function()
    {
        var count = 0;

        for (var i = 0; i < this.save.levelStates.length; i++) 
        {
            if(this.save.levelStates[i] === GameSaveManager.LEVEL_STATES.Complete)
            {
                count++;
            }
        }

        return count;
    };

    /**
     * A way of checking if you completed the three games
     */
    GameSaveManager.prototype.isComplete = function()
    {
        return (this.numLevelsCompleted() === this.numLevels);
    };

    /**
     * Reset the current game state
     */
    GameSaveManager.prototype.reset = function()
    {
        var save = new GameSave();
        this.localStorage.storeObject("save", save);
        this.save = save;

        this.onReset.dispatch();
    };

    /**
     * Fresh game state
     */
    var GameSave = function()
    {
        // [0 : Store, 1 : Smoothie, 2 : Cattle, 3 : Outro ]
        this.levelStates = [0, 0, 0, 0];
        this.numLevels = 4;

        // 0 : Store, 1 : Smoothie, 2 : Cattle, 3: Chase(in CattleGame)
        this.currentTutorialDisplayed = 0;
        this.difficulty = 0;
    };

    /**
     * Collection of possible level states
     * @type {Object}
     */
    GameSaveManager.LEVEL_STATES = 
    {
        Unlocked : 0,
        Complete : 1
    };

    /**
     * Collection of possible tutorials id
     * @type {Object}
     */
    GameSaveManager.TUTORIAL_ID = 
    [
        "store",
        "smoothie",
        "roundup",
        "chase",
        "outro"
    ];

    /**
     * Collection of difficulty
     * @type {Object}
     */
    GameSaveManager.DIFFICULTY = 
    [
        "easy",
        "hard"
    ];

    /**
     * Run this as a singleton
     * @type {GameSaveManager}
     */
    GameSaveManager.instance = new GameSaveManager();

    /**
     * Export...
     */
    module.exports = GameSaveManager;
    
});
define('com/sc/app/screens/GameScreen',['require','exports','module','PIXI','com/sc/app/system/GameSaveManager','com/fido/app/transitions/StarTransition'],function (require, exports, module) 
{
    var PIXI            = require("PIXI"); 
    var GameSaveManager = require("com/sc/app/system/GameSaveManager");
    var StarTransition  = require("com/fido/app/transitions/StarTransition");

    /** 
     * The base Game Screen
     * @param {[type]} app       : Instance of SCApp
     * @param {[type]} gameClass : Actual game class
     */
    var GameScreen = function(app, gameClass, requiredAssets)
    {
        PIXI.DisplayObjectContainer.call( this );
        
        this.requiredAssets = requiredAssets;
        this.app = app;
        this.gameClass = gameClass;
        this.transition = new StarTransition();
    };

    GameScreen.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /** 
     * Init the game screen
     */
    GameScreen.prototype.init = function()
    {
      this.game = new this.gameClass(this.app);
      this.game.onGameover.add(this.onGameover, this);
      this.addChild(this.game.view);
    };

    /**
     * Event for showing the Game Screen
     */
    GameScreen.prototype.onShow = function()
    {
        this.app.currentGameScreen = this;
        this.app.overlayManager.onShow.add(this.onOverlayShow, this);
        this.app.overlayManager.onHide.add(this.onOverlayHide, this);
        this.app.topMenu.gameMode();

        this.game.start();
    };

    /**
     * Event for calling GameOver
     */
    GameScreen.prototype.onGameover = function()
    {
      this.app.overlayManager.show("gameover");
    };

    /**
     * Event for when the game-screen gets shown
     * @return {[type]} [description]
     */
    GameScreen.prototype.onShown = function()
    {
        if(this.game.onShown)
        {
            this.game.onShown();
        }
    };

    /**
     * Event to hide the game-screen
     */
    GameScreen.prototype.onHide = function()
    {
        this.app.hud.visible = false;
        this.app.overlayManager.onShow.remove(this.onOverlayShow, this);
        this.app.overlayManager.onHide.remove(this.onOverlayHide, this);
    };

    /**
     * Event for when the game-screen is hidden
     */
    GameScreen.prototype.onHidden = function()
    {
        this.game.pause();
    };

    /**
     * Event for when she shows an overlay
     */
    GameScreen.prototype.onOverlayShow = function()
    {           
        this.game.pause();  
    };

    /**
     * Event for when the overlay is hidden
     */
    GameScreen.prototype.onOverlayHide = function()
    {
        if(this.game.isGameover)
        {
          this.game.reset();
          this.game.resume();
        }
        else
        {
          this.game.resume();
        }
    };

    /**
     * Resize the game screen
     * @param  {[Number]} w Width
     * @param  {[Number]} h Height
     */
    GameScreen.prototype.resize = function(w, h)
    {
        if(this.game && this.game.resize)
        {
            this.game.resize(w, h);
        }
    }

    /**
     * Export...
     */
    module.exports = GameScreen;

  
});
define('com/sc/games/shared/Models',['require','exports','module'],function (require,exports,module) {

var Models = {

	Priscilla : {

		name : 'Priscilla',

		images : {

			head : "char_priscilla_head.png",
			happy : "char_priscilla_head_happy.png",
			unHappy : "char_priscilla_head_sad.png",
			blink : "char_priscilla_head_blink.png",
			body : "char_priscilla_body.png",
			whites : "char_priscilla_eye_whites.png",
			eyes : "char_priscilla_eye.png",
			
		},

		head : {
			x : 82, y : 136
		},

		whites : {
			x : -90, y : -180
		},

		eyes : {
			x : -65, y : -134
		},

		body : {
			x : 109, y : 400
		}

	},

	Stinky : {

		name : 'Sticky',

		images : {

			head : "char_stinky_head.png",
			happy : "char_stinky_head_happy.png",
			unHappy : "char_stinky_head_sad.png",
			blink : "char_stinky_head_blink.png",
			body : "char_stinky_body.png",
			whites : "char_stinky_eye_whites.png",
			eyes : "char_stinky_eye.png",
			
		},

		head : {
			x : 109, y : 151
		},

		whites : {
			x : -105, y : -180
		},

		eyes : {
			x : -85, y : -138
		},

		body : {
			x : 109, y : 400
		}

	},

	Dan : {

		name : 'Dan',

		images : {

			head : "char_dan_head.png",
			happy : "char_dan_head_happy.png",
			unHappy : "char_dan_head_sad.png",
			blink : "char_dan_head_blink.png",
			body : "char_dan_body.png",
			whites : "char_dan_eye_whites.png",
			eyes : "char_dan_eye.png",
			
		},

		head : {
			x : 109, y : 130
		},

		whites : {
			x : -100, y : -200
		},

		eyes : {
			x : -77, y : -170
		},

		body : {
			x : 109, y : 400
		}

	},

	Dusty : {

		name : 'Dusty',

		images : {

			head : "char_dusty_head.png",
			happy : "char_dusty_head_happy.png",
			unHappy : "char_dusty_head_sad.png",
			blink : "char_dusty_head_blink.png",
			body : "char_dusty_body.png",
			whites : "char_dusty_eye_whites.png",
			eyes : "char_dusty_eye.png",
			
		},

		head : {
			x : 109, y : 120
		},

		whites : {
			x : -96, y : -200
		},

		eyes : {
			x : -77, y : -170
		},

		body : {
			x : 109, y : 405
		}

	},

	Bun : {

		name : 'Bun',

		images : {

			head : "char_bun_head.png",
			happy : "char_bun_head_happy.png",
			unHappy : "char_bun_head_sad.png",
			blink : "char_bun_head_blink.png",
			body : "char_bun_body.png",
			whites : "char_bun_eye_whites.png",
			eyes : "char_bun_eye.png",
			
		},

		head : {
			x : 109, y : 137
		},

		whites : {
			x : -100, y : -156
		},

		eyes : {
			x : -82, y : -119
		},

		body : {
			x : 109, y : 405
		}

	},


	Ella : {

		name : 'Ella',

		images : {

			head : "char_ella_head.png",
			happy : "char_ella_head_happy.png",
			unHappy : "char_ella_head_sad.png",
			blink : "char_ella_head_blink.png",
			body : "char_ella_body.png",
			whites : "char_ella_eye_whites.png",
			eyes : "char_ella_eye.png",
			
		},

		head : {
			x : 109, y : 82
		},

		whites : {
			x : -100, y : -200
		},

		eyes : {
			x : -77, y : -167
		},

		body : {
			x : 109, y : 405
		}

	},

	Quackers : {

		name : 'Quackers',

		images : {

			head : "char_quackers_head.png",
			happy : "char_quackers_head_happy.png",
			unHappy : "char_quackers_head_sad.png",
			blink : "char_quackers_head_blink.png",
			body : "char_quackers_body.png",
			whites : "char_quackers_eye_whites.png",
			eyes : "char_quackers_eye.png",
			
		},

		head : {
			x : 86, y : 142
		},

		whites : {
			x : -88, y : -186
		},

		eyes : {
			x : -75, y : -167
		},

		body : {
			x : 109, y : 405
		}

	},

	Tio : {

		name : 'Tio',

		images : {

			head : "char_tio_head.png",
			happy : "char_tio_head_happy.png",
			unHappy : "char_tio_head_sad.png",
			blink : "char_tio_head_blink.png",
			body : "char_tio_body.png",
			whites : "char_tio_eye_whites.png",
			eyes : "char_tio_eye.png",
			
		},

		head : {
			x : 84, y : 177
		},

		whites : {
			x : -105, y : -181
		},

		eyes : {
			x : -78, y : -146
		},

		body : {
			x : 109, y : 405
		}

	}

}

	module.exports = Models;
});

define('com/sc/games/shared/CustomerView',['require','exports','module','PIXI','com/fido/system/Ticker','com/fido/utils/Math2','./Models'],function (require,exports,module) {

var PIXI                = require("PIXI");
var Ticker      	    = require('com/fido/system/Ticker');
var Math2       	    = require('com/fido/utils/Math2');
var Models       	    = require('./Models');

var CustomerView = function () {

	PIXI.DisplayObjectContainer.call( this );

	this.body;

	this.happyTexture;

	this.unHappyTexture;

	this.blinkTexture;

	this.idleTexture;

	this.head;

	this.eyesOriginal = new PIXI.Point();

	this.headOriginal = new PIXI.Point();

	this.blinkCount = 0;

	// she blinks every two seconds (so 60fps *2)
	this.blinkTime = 120;

	this.looking = false;

	this.shakes = false;

	this.target = new PIXI.Point();

	this.count = Math.floor(Math.random() * 120 - 60);

	this.blinkCount = 0;

	this.canBlink = true;

	this.models = [Models.Priscilla,Models.Stinky,Models.Dan];

	this.headContainer = new PIXI.DisplayObjectContainer();

	this.body = new PIXI.Sprite();

	this.head = new PIXI.Sprite();

	this.eyes = new PIXI.Sprite();

	this.whites = new PIXI.Sprite();

	this.speed = 0.05;

	this.squashMax = 0.001;

	this.canBeIdle = true;

	return this;

}


CustomerView.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

CustomerView.prototype.constructor = CustomerView;

CustomerView.prototype.reset = function () {

	this.shakes = false;

	this.count = Math.floor(Math.random() * 120 - 60);

	this.looking = false;

	this.speed = 0.05;

	this.squashMax = 0.001;

	this.canBeIdle = true;

}

CustomerView.prototype.startLookingAt = function (x,y) {

	this.target.set(x,y);

	this.looking = true;
}

CustomerView.prototype.stopLooking = function () {

	this.eyes.position.set(this.eyesOriginal.x,this.eyesOriginal.y);

	this.looking = false;
}

CustomerView.prototype.beHappy = function () {

	this.stopLooking();

	this.canBlink = false;

	this.blinkCount = 0;

	this.canBeIdle = false;

	this.head.setTexture(this.happyTexture);
}

CustomerView.prototype.briefSmile = function () {

	this.blinkCount = 0;

	this.canBlink = false;

	this.stopLooking();

	this.head.setTexture(this.happyTexture);

	TweenLite.delayedCall(0.8,this.beIdle,[],this);
}

CustomerView.prototype.beIdle = function () {

	//console.log('not blink');

	if(!this.canBeIdle){ return;}

	this.head.setTexture(this.idleTexture);
	this.canBlink = true;
}

CustomerView.prototype.beSad = function () {

	this.canBlink = false;

	this.blinkCount = 0;

	this.head.setTexture(this.unHappyTexture);
}

CustomerView.prototype.loadModel = function (model) {

	this.headContainer.removeChildren();

	if(model)
	{
		var config = model;
	}
	else{
		var models = this.models;

		var config = models[Math.floor(Math.random() * models.length)];
	}

	this.config = config;

	var bodyTexture = PIXI.Texture.fromFrame(this.config.images.body);

	this.body = new PIXI.Sprite(bodyTexture);

	this.happyTexture = PIXI.Texture.fromFrame(this.config.images.happy);

	this.unHappyTexture = PIXI.Texture.fromFrame(this.config.images.unHappy);

	this.blinkTexture = PIXI.Texture.fromFrame(this.config.images.blink);

	this.idleTexture = PIXI.Texture.fromFrame(this.config.images.head);

	this.head.setTexture(this.idleTexture);

	this.eyes.setTexture( PIXI.Texture.fromFrame(this.config.images.eyes) );

	this.whites.setTexture( PIXI.Texture.fromFrame(this.config.images.whites));

	this.workOutPositions();

}

CustomerView.prototype.workOutPositions = function () {

	this.body.anchor.set(0.5,1);

	this.body.position.set(this.config.body.x,this.config.body.y);

	this.addChild(this.body);

	this.whites.position.set(this.config.whites.x,this.config.whites.y);

	this.headContainer.addChild(this.whites);

	this.head.anchor.set(0.5,1);

	this.headContainer.position.set(this.config.head.x,this.config.head.y);

	this.headOriginal = this.headContainer.position.clone();

	this.addChild(this.headContainer);

	this.eyesOriginal.set(this.config.eyes.x,this.config.eyes.y);

	this.eyes.position.set(this.eyesOriginal.x,this.eyesOriginal.y);

	this.headContainer.addChild(this.eyes);

	this.headContainer.addChild(this.head);

	this.canBlink = true;
}


CustomerView.prototype.clamp = function (x, min, max) {
    return ( x < min ) ? min : ( ( x > max ) ? max : x );
}

CustomerView.prototype.wiggle = function () {

	this.stopLooking();

	this.speed = 0.3;
	this.squashMax = 0.0055;
}

CustomerView.prototype.update = function () {

	this.count += this.speed * Ticker.instance.deltaTime;

	if(this.canBlink)
	{
		this.blinkCount += 1 * Ticker.instance.deltaTime;
	}

	if((this.blinkCount > this.blinkTime) && this.canBlink)
	{
		this.blinkTime = 120 + Math2.randomInt(-30,30);
		this.blinkCount = 0;

		this.head.setTexture(this.blinkTexture);

		this.canBlink = false;

		//console.log('blink');

		TweenLite.delayedCall(0.2,this.beIdle,[],this);
	}

	var scaleIncrease = Math.sin(this.count) * this.squashMax;

	// squash and strech !!!
	// http://artworkevolution.com/blog/2013/7cartoon-squash-and-stretch-animation-using-ios-and-cocos2d
	this.body.scale.x += Math.sin(this.count) * this.squashMax;

    this.body.scale.y = (1 / this.body.scale.x);

    this.headContainer.rotation = Math.sin(this.count / 2) * 0.0349; //  = 2deg * (Math.PI/180)

    // make it move up and down a bit
    this.headContainer.position.y += scaleIncrease * 200;

	if(this.looking)
	{

		var dx = this.target.x - this.eyes.worldTransform.tx;
  		var dy = this.target.y - this.eyes.worldTransform.ty;

  		var angle = Math.atan2(dy,dx);

	    this.eyes.position.x += Math.cos(angle) * 2;
	    this.eyes.position.y += Math.sin(angle) * 3;

	    this.eyes.position.x = this.clamp(this.eyes.position.x,this.eyesOriginal.x-5,this.eyesOriginal.x+5);
	    this.eyes.position.y = this.clamp(this.eyes.position.y,this.eyesOriginal.y-20,this.eyesOriginal.y);

	}
}

module.exports = CustomerView;

});

define('com/sc/app/screens/MapScreen',['require','exports','module','PIXI','com/sc/games/Game','com/sc/app/buttons/SCButton','com/sc/app/system/GameSaveManager','com/fido/system/Ticker','com/fido/loader/Cache','com/fido/sound/SoundManager','com/fido/sound/MusicManager','com/sc/games/shared/particles/ParticleBridge','com/sc/Consts','libs/gameConfig/gameTracking','com/fido/system/Device','../../games/shared/CustomerView','../../games/shared/Models'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Game            = require('com/sc/games/Game');
    var SCButton        = require('com/sc/app/buttons/SCButton');
    var GameSaveManager = require('com/sc/app/system/GameSaveManager');
    var Ticker          = require('com/fido/system/Ticker');
    var Cache           = require('com/fido/loader/Cache');
    var SoundManager    = require('com/fido/sound/SoundManager');
    var MusicManager    = require('com/fido/sound/MusicManager');
    var ParticleBridge  = require('com/sc/games/shared/particles/ParticleBridge');
    var Consts          = require("com/sc/Consts");
    var DisneyTracker   = require('libs/gameConfig/gameTracking');
    var Device          = require('com/fido/system/Device');
    var CustomerView    = require('../../games/shared/CustomerView');
    var Models          = require('../../games/shared/Models');

    PIXI.DisplayObject.prototype.depthOffset = 0;

    var MapScreen = function(app)
    {
        PIXI.DisplayObjectContainer.call( this );        

        this.app = app;
        this.container = new PIXI.DisplayObjectContainer();
        this.backBehaviour = "title";
        this.buttonsClickable = false;
        this.counter = 0;

        this.dataGames = GameSaveManager.instance.save;
        this.translations = Cache.getJson('translation');

        this.dimensions = 
        {
            width: 1136,
            height: 635
        };

        // background
        var bg = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/desert_bg.jpg");
        bg.anchor.y = 1;
        bg.scale.set(2);
        bg.position.y = this.dimensions.height + 10;
        this.container.addChild(bg);

        this.games = [];
        this.characters = [];
        this.ticks = [];

        this.widthElement = 0;

        var daFont = '32px '+Fonts.MainFont;

        var style = {
            font : daFont,
            fill : '#efb647',
            stroke : '#482219',
            dropShadow : true,
            dropShadowColor : '#482219',
            dropShadowAngle : -0.2,
            dropShadowDistance : 7,
            wordWrap : true,
            wordWrapWidth : 190,
            align : "center",
            strokeThickness: 4,
            lineHeight: 40
        };

        var backgroundTexture = PIXI.Texture.fromFrame("levelSelectBG.png");
        var checkTexture = PIXI.Texture.fromFrame("levelSelectBG.png");
        // store
        this.store = new PIXI.Sprite(backgroundTexture);
        this.store.position.set( this.dimensions.width / 2 - this.store.width - 60, this.dimensions.height/2 +50);

        this.store.click = this.store.tap = this.goToStoreGame.bind(this);
        this.store.mouseover = this._onmouseoverstore.bind(this);

        var backgroundInsideStore = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/level_store_bg.jpg");
        backgroundInsideStore.anchor.set(.5, .47);

        this.store.addChild(backgroundInsideStore);

        
        this.characterStore = new CustomerView();
        this.characterStore.loadModel(Models.Bun);


        var newScale = ( 120 / this.characterStore.body.width);
        newScale = Math.min(1,newScale);

        this.characterStore.scale.set(newScale);

        this.characterStore.position.x = -53;
        this.store.addChild(this.characterStore);
        this.characters.push(this.characterStore);

        var storeText = new PIXI.Text(this.translations.strings.STR_NAME_STORE, style);
        storeText.position.y = -200;
        storeText.anchor.x = 0.5;

        var maxWidth = 275;

        var goodScale = maxWidth / storeText.width;

        goodScale = Math.min(1,goodScale);

        storeText.scale.set(goodScale);

        this.store.addChild(storeText);

        // smoothie
        this.smoothie = new PIXI.Sprite(backgroundTexture);
        this.smoothie.position.set( this.dimensions.width / 2, this.dimensions.height/2 +50);

        this.smoothie.click = this.smoothie.tap = this.goToSmoothieGame.bind(this);
        this.smoothie.mouseover = this._onmouseoversmoothie.bind(this);

        var backgroundInsideSmoothie = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/level_smoothie_bg.jpg");
        backgroundInsideSmoothie.anchor.set(.5, .47);

        this.smoothie.addChild(backgroundInsideSmoothie);

        this.characterSmoothie = new CustomerView();
        this.characterSmoothie.loadModel(Models.Ella);

        var newScale = ( 135 / this.characterSmoothie.body.width);
        newScale = Math.min(1,newScale);

        this.characterSmoothie.scale.set(newScale)
        this.characterSmoothie.position.set(-50,0);

        this.smoothie.addChild(this.characterSmoothie);
        this.characters.push(this.characterSmoothie);

        var smoothieText = new PIXI.Text(this.translations.strings.STR_NAME_SMOOTHIE, style);
        smoothieText.position.y = -200;
        smoothieText.anchor.x = 0.5;

        smoothieText.scale.set(goodScale);

        this.smoothie.addChild(smoothieText);

        // cattle
        this.cattle = new PIXI.Sprite(backgroundTexture);
        this.cattle.position.set( this.dimensions.width / 2 + this.cattle.width + 60, this.dimensions.height/2 +50);

        this.cattle.click = this.cattle.tap = this.goToCattleGame.bind(this);
        this.cattle.mouseover = this._onmouseovercattle.bind(this);

        var backgroundInsideCows = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/level_cows_bg.jpg");
        backgroundInsideCows.anchor.set(.5, .47);
        this.cattle.addChild(backgroundInsideCows);

        this.characterCows = new CustomerView();
        this.characterCows.loadModel(Models.Stinky);

        var newScale = ( 150 / this.characterCows.body.width);
        newScale = Math.min(1,newScale);

        this.characterCows.scale.set(newScale)
        this.characterCows.position.set(-45,0);

        this.cattle.addChild(this.characterCows);
        this.characters.push(this.characterCows);

        var cattleText = new PIXI.Text(this.translations.strings.STR_NAME_COWS, style);
        cattleText.position.y = -200;
        cattleText.anchor.x = 0.5;

        cattleText.scale.set(goodScale);

        this.cattle.addChild(cattleText);

        this.widthElement = this.cattle.width;

        this.games.push(this.store);
        this.games.push(this.smoothie);
        this.games.push(this.cattle);

        var urls = [

            "badge_piece_01.png",
            "badge_piece_03.png",
            "badge_piece_02.png"
            
        ];

        var slots = [
            "level_store_slot.png",
            "level_cattle_slot.png",
            "level_smoothie_slot.png"
            
        ]

        var starPiecePositions = [
            new PIXI.Point(-9,-9),
            new PIXI.Point(-9,-28),
            new PIXI.Point(1,-9),
        ];

        // add tick
        for (var i = 0; i < this.games.length; i++) 
        {
            var slot = new PIXI.Sprite.fromFrame(slots[i]);
            var starPiece = new PIXI.Sprite.fromFrame(urls[i]);

            slot.addChild(starPiece);
            slot.position.set(-this.games[i].width / 2 + 26, this.games[i].height /2 - 100);

            starPiece.position.set(starPiecePositions[i].x,starPiecePositions[i].y);

            if(i === 1)
            {
                slot.y += 25;
                starPiece.y += 30;
            }

            if(i === 2)
            {
                slot.x += 8;
            }
            starPiece.scale.set(0.30);

            this.games[i].addChild(slot);
            this.ticks.push(starPiece);
        }

        this.cloudsContainer = new PIXI.DisplayObjectContainer();

        this.container.addChild(this.cloudsContainer);
        this.container.addChild(this.store);
        this.container.addChild(this.smoothie);
        this.container.addChild(this.cattle);
        this.addChild(this.container);

        this.generateClouds();

        this.vignette = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/vignette_halfsize.png");
        this.vignette.scale.set(2);
        this.addChild(this.vignette);

    };

    MapScreen.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    MapScreen.prototype.onHide = function() 
    {
        Ticker.instance.remove(this.update, this);
    }


    MapScreen.prototype.onShow = function() 
    {    

        for (var i = 0; i < this.characters.length; i++) {
            this.characters[i].reset();
        };

        this.dataGames = GameSaveManager.instance.save;

        //console.log("MapScreen : ", this.dataGames)
        
        this.app.topMenu.normalMode();

        MusicManager.play('mainLoop');

        for (var i = 0; i < this.games.length; i++) {

            this.games[i].buttonMode = true;
            this.games[i].anchor.set(.5);
            this.games[i].scale.set(0);
            this.games[i].alpha = 0;

            this.games[i].mouseout = this._onmouseout.bind(this);

            TweenLite.to(this.games[i].scale, 1, 
            {
                x: 1,
                y: 1,
                ease: Elastic.easeOut,
                delay: i * 0.2
            });

            TweenLite.to(this.games[i], .5, 
            {
                alpha: 1,
                ease: Ease.easeOut,
                delay: i * 0.2 + 0.2,
                onComplete: function()
                {
                    this.buttonsClickable = true;
                }.bind(this)
            });

            this.games[i].interactive = true;

            if(this.dataGames.levelStates[i])
            {
                this.ticks[i].visible = true;

                // store
                if (i == 0)
                {
                    this.characters[0].beHappy();
                    this.characters[0].wiggle();
                }
                else if (i == 1)
                {
                    this.characters[1].beHappy();
                    this.characters[1].wiggle();
                }
                else if (i == 2)
                {
                    this.characters[2].beHappy();
                    this.characters[2].wiggle();
                }
            }
            else
            {
                this.ticks[i].visible = false;

                // store
                if (i == 0) this.characters[0].beSad();
                else if (i == 1) this.characters[1].beSad();
                else if (i == 2) this.characters[2].beSad();
            }
        };

        Ticker.instance.add(this.update, this);
    }

    /**
     * Move the clouds
     */
    MapScreen.prototype.moveClouds = function()
    {
        for (var i = 0; i < this.clouds.length; ++i) 
        {
            var cloud = this.clouds[i];
            cloud.position.x -= cloud.speed;

            if(cloud.position.x <= -(cloud.width * 0.5))
            {
                cloud.position.x += 1136 + cloud.width;
                cloud.position.y = Math.random() * 100;
                cloud.speed = Math.random() * 0.3 + 0.2; 
            }
        }
    };


    /**
     * Generate some clouds
     */
    MapScreen.prototype.generateClouds = function()
    {
        this.clouds = [];
        var clouds = ["cloud_a.png", "cloud_b.png", "cloud_b.png", "cloud_d.png", "cloud_e.png"];
        
        for (var i = 0; i < 5; ++i) 
        {
            var cloud = new PIXI.Sprite.fromFrame(clouds[i % clouds.length]);
                cloud.anchor.set(0.5, 0);
                cloud.position.set(Math.random()*1100, Math.random()*100);
                cloud.speed = Math.random() * 0.3 + 0.2;
                this.cloudsContainer.addChild(cloud);
                this.clouds.push(cloud);
        }
    };


    MapScreen.prototype.scaleNormal = function(data)
    {

        TweenLite.to([this.store.scale, this.smoothie.scale, this.cattle.scale], .2,
        {
            x: 1,
            y: 1,
            ease: Expo.easeOut
        });
    }

    MapScreen.prototype._onmouseovercattle = function(data) 
    {
        if(!this.buttonsClickable) return;

        SoundManager.sfx.play('levelHover');

        TweenLite.killTweensOf(this.cattle.scale);
        TweenLite.to(this.cattle.scale, .5,
        {
            x: 1.1,
            y: 1.1,
            ease: Elastic.easeOut
        });

        TweenLite.to(this.cattle, .1,
        {
            rotation: Math.random() > .5 ? .1 : -.1,
            ease: Expo.easeOut
        });

        TweenLite.to([this.store.scale, this.smoothie.scale], .3,
        {
            x: .85,
            y: .85,
            ease: Expo.easeOut
        });

        TweenLite.to(this.store.position, .2,
        {
            x: this.dimensions.width / 2 - this.widthElement - 60 - 50,
            ease: Expo.easeOut
        });

        TweenLite.to(this.smoothie.position, .2,
        {
            x: this.dimensions.width / 2 - 50,
            ease: Expo.easeOut
        });
    }

    MapScreen.prototype._onmouseoversmoothie = function(data) 
    {
        if(!this.buttonsClickable) return;

        SoundManager.sfx.play('levelHover');

        TweenLite.killTweensOf(this.smoothie.scale);
        TweenLite.to(this.smoothie.scale, .5,
        {
            x: 1.1,
            y: 1.1,
            ease: Elastic.easeOut
        });

        TweenLite.to(this.smoothie, .1,
        {
            rotation: Math.random() > .5 ? .1 : -.1,
            ease: Expo.easeOut
        });

        TweenLite.to([this.cattle.scale, this.store.scale], .2,
        {
            x: .85,
            y: .85,
            ease: Expo.easeOut
        });

        TweenLite.to(this.store.position, .2,
        {
            x: this.dimensions.width / 2 - this.widthElement - 60 - 50,
            ease: Expo.easeOut
        });

        TweenLite.to(this.cattle.position, .2,
        {
            x: this.dimensions.width / 2 + this.widthElement + 60 + 50,
            ease: Expo.easeOut
        });
    }

    MapScreen.prototype._onmouseoverstore = function(data) 
    {
        if(!this.buttonsClickable) return;

        SoundManager.sfx.play('levelHover');

        TweenLite.killTweensOf(this.store.scale);

        TweenLite.to(this.store.scale, .5,
        {
            x: 1.1,
            y: 1.1,
            ease: Elastic.easeOut
        });

        TweenLite.to(this.store, .1,
        {
            rotation: Math.random() > .5 ? .1 : -.1,
            ease: Expo.easeOut
        });

        TweenLite.to([this.cattle.scale, this.smoothie.scale], .2,
        {
            x: .85,
            y: .85,
            ease: Expo.easeOut
        });

        TweenLite.to(this.smoothie.position, .2,
        {
            x: this.dimensions.width / 2 + 50,
            ease: Expo.easeOut
        });

        TweenLite.to(this.cattle.position, .2,
        {
            x: this.dimensions.width / 2 + this.widthElement + 60 + 50,
            ease: Expo.easeOut
        });
    }

    MapScreen.prototype._onmouseout = function(data) 
    {
        this.scaleNormal();

        TweenLite.to(data.target, .1,
        {
            rotation: 0,
            ease: Ease.easeOut
        });

        TweenLite.to(this.store.position, .2,
        {
            x: this.dimensions.width / 2 - this.widthElement - 60,
            ease: Expo.easeOut
        });

        TweenLite.to(this.cattle.position, .2,
        {
            x: this.dimensions.width / 2 + this.widthElement + 60,
            ease: Expo.easeOut
        });
 
        TweenLite.to(this.smoothie.position, .2,
        {
            x: this.dimensions.width / 2,
            ease: Expo.easeOut
        });
    }

    MapScreen.prototype.removeScale = function() 
    {
        for (var i = 0; i < this.games.length; i++) {
            this.games[i].interactive = false;
            TweenLite.to(this.games[i].scale, .5, 
            {
                x: 0,
                y: 0,
                ease: Expo.easeOut,
                delay: i*.1
            });

            TweenLite.to(this.games[i], .4, 
            {
                alpha: 0,
                ease: Ease.easeOut,
                delay: i*.1 + 1
            });
        };
    }
    
    MapScreen.prototype._mouseDown = function(data) 
    {
        //console.log(data)
        var options = 
        {
            x : data.target.x,
            y : data.target.y,
            type : 0
        };

        
        if( !(Device.instance.iPad && !window.WEBGL) ){
            ParticleBridge.instance.fire(options);
        }
    }

    MapScreen.prototype.goToStoreGame = function(data) 
    {  
        this._mouseDown(data);
        DisneyTracker.trackAction("level_start", "store");

        MusicManager.play('storeLoop');
        SoundManager.sfx.play('levelSelect');

        this.app.jumpToSegment(2);
        this.removeScale();

    }

    MapScreen.prototype.goToSmoothieGame = function(data) 
    {   
        this._mouseDown(data);
        DisneyTracker.trackAction("level_start", "smoothie");

        MusicManager.play('smoothieLoop');
        SoundManager.sfx.play('levelSelect');

        this.app.jumpToSegment(4);
        this.removeScale();
    }

    MapScreen.prototype.goToCattleGame = function(data) 
    {
        this._mouseDown(data);
        DisneyTracker.trackAction("level_start", "cattle");

        MusicManager.play('cattleLoop');
        SoundManager.sfx.play('levelSelect');
        
        this.app.jumpToSegment(6);
        this.removeScale();
    }

    MapScreen.prototype.update = function() 
    {
        this.moveClouds();

        if(this.buttonsClickable)
        {
            this.counter += .05 * Ticker.instance.deltaTime;

            for (var i = 0; i < this.characters.length; i++) {
                this.characters[i].update();
            }
        }
    };

    PIXI.Text.prototype.updateText = function()
    {
        this.texture.baseTexture.resolution = this.resolution;

        this.context.font = this.style.font;

        var outputText = this.text;

        // word wrap
        // preserve original text
        if(this.style.wordWrap)outputText = this.wordWrap(this.text);

        //split text into lines
        var lines = outputText.split(/(?:\r\n|\r|\n)/);

        //calculate text width
        var lineWidths = [];
        var maxLineWidth = 0;
        var fontProperties = this.determineFontProperties(this.style.font);
        for (var i = 0; i < lines.length; i++)
        {
            var lineWidth = this.context.measureText(lines[i]).width;
            lineWidths[i] = lineWidth;
            maxLineWidth = Math.max(maxLineWidth, lineWidth);
        }

        var width = maxLineWidth + this.style.strokeThickness;
        if(this.style.dropShadow)width += this.style.dropShadowDistance;

        this.canvas.width = ( width + this.context.lineWidth ) * this.resolution;
        
        //calculate text height
       
        var lineHeight = this.style.lineHeight || fontProperties.fontSize* + this.style.strokeThickness;
     
        var height = lineHeight * lines.length;
        if(this.style.dropShadow)height += this.style.dropShadowDistance;

        this.canvas.height = height * this.resolution;

        this.context.scale( this.resolution, this.resolution);

        if(navigator.isCocoonJS) this.context.clearRect(0,0,this.canvas.width,this.canvas.height);
        
        // used for debugging..
        //this.context.fillStyle ="#FF0000"
        //this.context.fillRect(0, 0, this.canvas.width,this.canvas.height);

        this.context.font = this.style.font;
        this.context.strokeStyle = this.style.stroke;
        this.context.lineWidth = this.style.strokeThickness;
        this.context.textBaseline = 'alphabetic';
        //this.context.lineJoin = 'round';

        var linePositionX;
        var linePositionY;

        if(this.style.dropShadow)
        {
            this.context.fillStyle = this.style.dropShadowColor;

            var xShadowOffset = Math.sin(this.style.dropShadowAngle) * this.style.dropShadowDistance;
            var yShadowOffset = Math.cos(this.style.dropShadowAngle) * this.style.dropShadowDistance;

            for (i = 0; i < lines.length; i++)
            {
                linePositionX = this.style.strokeThickness / 2;
                linePositionY = (this.style.strokeThickness / 2 + i * lineHeight) + fontProperties.ascent;

                if(this.style.align === 'right')
                {
                    linePositionX += maxLineWidth - lineWidths[i];
                }
                else if(this.style.align === 'center')
                {
                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;
                }

                if(this.style.fill)
                {
                    this.context.fillText(lines[i], linePositionX + xShadowOffset, linePositionY + yShadowOffset);
                }

              //  if(dropShadow)
            }
        }

        //set canvas text styles
        this.context.fillStyle = this.style.fill;
        
        //draw lines line by line
        for (i = 0; i < lines.length; i++)
        {
            linePositionX = this.style.strokeThickness / 2;
            linePositionY = (this.style.strokeThickness / 2 + i * lineHeight) + fontProperties.ascent;

            if(this.style.align === 'right')
            {
                linePositionX += maxLineWidth - lineWidths[i];
            }
            else if(this.style.align === 'center')
            {
                linePositionX += (maxLineWidth - lineWidths[i]) / 2;
            }

            if(this.style.stroke && this.style.strokeThickness)
            {
                this.context.strokeText(lines[i], linePositionX, linePositionY);
            }

            if(this.style.fill)
            {
                this.context.fillText(lines[i], linePositionX, linePositionY);
            }

          //  if(dropShadow)
        }

        this.updateTexture();
    };
    module.exports = MapScreen;

});
define('com/fido/physics/Spring',['require','exports','module'],function (require, exports, module) {

/**
 * @author matgroves
 */

var Spring = function(){
	
	this.x				 = 0;
	this.ax				 = 0;
	this.dx				 = 0;
	this.tx				 = 0;

	this.max			 = 160;
	
	this.damp			 = 0.8//0.6;
	this.springiness	 = 0.3
	
};

//max = 130;
//damp = 0.9;
//springiness = 0.9;
/*
max = 36
damp = 0.72
springiness = 0.401

max = 13
damp = 0.63
springiness = 0.369
*/
	// C O N S T R U C T O R S ---------------------------------------//
		
	// P U B L I C ---------------------------------------------------//
	
Spring.prototype.update = function()
{
	//var damp = this.damp;
	
//	var springiness = this.springiness;
//	var max = this.max;
	
	this.ax=(this.tx-this.x)*this.springiness;
	
	this.dx += this.ax;
	this.dx *= this.damp; 
	
	if(this.dx < -this.max)this.dx = -this.max;
	else if(this.dx > this.max)this.dx = this.max;
	
	//Math2.cap(dx, -max, max);
	
	this.x+=this.dx; 
}

Spring.prototype.reset = function() 
{
	this.x = 0;
	this.ax = 0;
	this.dx = 0;
	this.tx = 0;
}

module.exports = Spring

});

define('com/fido/ui/PixiScrollbar',['require','exports','module','../physics/Spring','com/fido/system/Ticker','./PixiTrackpad'],function (require, exports, module) 
{
	var Spring = require("../physics/Spring")
    var Ticker = require('com/fido/system/Ticker');
    var Trackpad = require('./PixiTrackpad');

	PixiScrollBar = function(parameters)
	{
		this.topMargin = 15;
		this.bottomMargin = 15;
		this.yTouchOffset = 0;

		this.dragging = false;
		this.trackpad = parameters.trackpad;
		this.targetPosition = {
			x: 0,
			y: 0
		}

		this.container = parameters.target;

		this.guideLine = new PIXI.Sprite.fromFrame("scrollTrack.png");
		this.guideLine.anchor.set(1, 0);
		this.guideLine.position.x = 630;
		this.guideLine.position.y = 1;
		this.guideLine.height = 229;
		this.guideLine.hitArea = new PIXI.Rectangle(-10, 0, 40, 300);
		this.guideLine.interactive = true;
		this.guideLine.buttonMode = true;

		this.guideButton = new PIXI.Sprite.fromFrame("scroller.png");
		this.guideButton.anchor.set(1, 0.5);
		this.guideButton.position.x = 642;
		this.guideButton.position.y = this.topMargin + (this.guideButton.height * 0.5);
		//this.guideButton.interactive = true;
		this.guideButton.buttonMode = true;

		this.container.addChild(this.guideLine);
		this.container.addChild(this.guideButton);

		// this.guideButton.touchstart = this.guideButton.mousedown = this.onDown.bind(this);
		// this.guideButton.touchend = this.guideButton.touchendoutside = this.guideButton.mouseup = this.guideButton.mouseupoutside = this.onUp.bind(this);
		// this.guideButton.mousemove = this.guideButton.touchmove = this.onMove.bind(this);

		this.guideLine.touchstart = this.guideLine.mousedown = this.onDown.bind(this);
		this.guideLine.touchend = this.guideLine.touchendoutside = this.guideLine.mouseup = this.guideLine.mouseupoutside = this.onUp.bind(this);
		this.guideLine.mousemove = this.guideLine.touchmove = this.onMove.bind(this);

		Ticker.instance.add(this.update, this);
	}

	PixiScrollBar.prototype.onDown = function(data)
	{
		this.dragging = true;
		this.yTouchOffset = data.getLocalPosition(this.guideButton).y;
		this.onMove(data);
	}

	PixiScrollBar.prototype.onUp = function()
	{
		this.dragging = false;
		this.yTouchOffset = 0;
	}

	PixiScrollBar.prototype.onMove = function(data)
	{
		this.panelHeight = this.container.viewHeight;
		this.scrollHeight = this.container.scrollHeight - this.panelHeight;

		this.scrollBarPercentage = 0;
		this.scrollableDistance = (this.panelHeight - this.topMargin - this.bottomMargin) - this.guideButton.height;
		this.scrollBarRatio = this.scrollHeight / this.scrollableDistance;

		if(this.dragging === true)
		{
			this.targetPosition = data.getLocalPosition(this.container);

			if(this.targetPosition.y < this.topMargin + (this.guideButton.height * 0.5)) this.targetPosition.y = this.topMargin + (this.guideButton.height * 0.5);
			if(this.targetPosition.y > this.scrollableDistance + this.topMargin + (this.guideButton.height * 0.5)) this.targetPosition.y = this.scrollableDistance + this.topMargin + (this.guideButton.height * 0.5);	
		}
	}

	PixiScrollBar.prototype.update = function()
	{
		if(this.dragging)
		{
			var newY = -((this.guideButton.position.y - this.topMargin - (this.guideButton.height * 0.5)) * this.scrollBarRatio);
			this.trackpad.easeToPosition(0, newY);
			this.guideButton.position.y = this.targetPosition.y;
		}
		else
		{

			this.guideButton.position.y = ((this.trackpad.valueY*-1 / this.scrollBarRatio) + this.topMargin + (this.guideButton.height * 0.5));
		}
	}

	module.exports = PixiScrollBar;

});
define('com/fido/ui/PixiTrackpad',['require','exports','module','../physics/Spring','./PixiScrollbar','com/fido/system/Device','signals'],function (require, exports, module) 
{
	var Spring = require("../physics/Spring")
	var ScrollBar = require("./PixiScrollbar");
	var Device = require("com/fido/system/Device");
	var Signal = require('signals');

	PixiTrackpad = function(parameters)
	{
		this.spring = new Spring();
		this.onScrollUpdate = new Signal();
		this.onClick = new Signal();
		this.onDeclick = new Signal();

		this.target = parameters.target;
		this.value = 0;
		this.easingValue = 0;
		this.dragOffset = 0;
		this.dragging;
		this.speed= 0;
		this.size = 1024;
		this.maxSlots = 1;
		this.capMovement = true;
		this.prevPosition = 0;
		this.valueY = 0;
		this.easingValueY = 0;
		this.dragOffsetY = 0;
		this.speedY= 0;
		this.prevPositionY = 0;
		this.didMove = false;
		this.didMoveY = false;
		this.target.interactive = true;
		this.scrollMin = -Infinity//-600
		this.scrollMax = 0//-330//Infinity;
	    this.scrollMinY = -Infinity;
	    this.scrollMaxY = 0;
	    this.snapTo = false;

	    if(typeof parameters.scrollbar !== 'undefined' && Device.mobile === false && Device.iPad === false)
	    {
	    	this.scrollBar = new ScrollBar(
	    	{
	    		target : parameters.scrollTarget, 
	    		trackpad : this
	    	}); 	
	    }

	    this.target.touchstart = this.target.mousedown = this.onDown.bind(this);
	}

	PixiTrackpad.constructor = PixiTrackpad;

	PixiTrackpad.prototype.unlock = function()
	{
		this.locked = false;
		this.speed = 0;
		this.easingValue = this.value;
		this.easingValueY = this.valueY;
		this.speedY = 0;
		this.speedX = 0;
		window.onmousewheel = this.onMouseWheel.bind(this);
	}

	PixiTrackpad.prototype.lock = function()
	{
		this.locked = true;
		window.onmousewheel = null;

	}

	PixiTrackpad.prototype.update = function()
	{
		this.value += (this.easingValue - this.value) * 0.3;
		this.valueY += (this.easingValueY - this.valueY) * 0.3;

		if(this.locked) return;

		if(this.dragging)
		{
			var newSpeed = this.easingValue - this.prevPosition;
			newSpeed *= 0.7;
			
			this.speed += (newSpeed - this.speed) * 0.5;
			this.prevPosition = this.easingValue;
			
			var newSpeedY = this.easingValueY - this.prevPositionY;
			newSpeedY *= 0.7;
			
			this.speedY += (newSpeedY - this.speedY) *0.5;
			this.prevPositionY = this.easingValueY;
		}
		else
		{
			if(this.snapTo)
			{
				this.spring.update();
				this.easingValue = this.spring.x;
				this.easingValueY = this.spring.y;

				if(this.capMovement)
				{	
					if(this.easingValue > this.scrollMax)
				    {
				        this.easingValue += (this.scrollMax - this.easingValue) * 0.3;//6666;
				    }
				    else if(this.easingValue < this.scrollMin)
				    {
				        this.easingValue += (this.scrollMin - this.easingValue) * 0.3;//6666;
				    }

	                if(this.easingValueY > this.scrollMaxY)
	                {
	                    this.easingValueY += (this.scrollMaxY - this.easingValueY) * 0.3;//6666;
	                }
	                else if(this.easingValueY < this.scrollMinY)
	                {
	                    this.easingValueY += (this.scrollMinY - this.easingValueY) * 0.3;//6666;
	                }
				}	

			}
			else
			{
				
				this.speed *= 0.95;
				this.easingValue +=  this.speed;
				
	            this.speedY *= 0.95;
	            this.easingValueY +=  this.speedY;

				if(this.capMovement)
				{	
					if(this.easingValue > this.scrollMax)
				    {
				        this.easingValue += (this.scrollMax - this.easingValue) * 0.3;//6666;
				    }
				    else if(this.easingValue < this.scrollMin)
				    {
				        this.easingValue += (this.scrollMin - this.easingValue) * 0.3;//6666;
				    }

	                if(this.easingValueY > this.scrollMaxY)
	                {
	                    this.easingValueY += (this.scrollMaxY - this.easingValueY) * 0.3;//6666;
	                }
	                else if(this.easingValueY < this.scrollMinY)
	                {
	                    this.easingValueY += (this.scrollMinY - this.easingValueY) * 0.3;//6666;
	                }
				}	
			}
		}
	}

	PixiTrackpad.prototype.stop = function()
	{
		this.speed = 0;
		this.speedY = 0;
		
		this.value  = this.prevPosition = this.easingValue;
		this.valueY = this.prevPositionY = this.easingValueY;
	}

	PixiTrackpad.prototype.setPosition = function(value, valueY)
	{
		this.value = this.easingValue = value;
		this.valueY = this.easingValueY = valueY;
	}

	PixiTrackpad.prototype.easeToPosition = function(value, valueY)
	{
		this.easingValue = value;
		this.easingValueY = valueY;
	}

	PixiTrackpad.prototype.onDown = function(data)
	{
		if(this.locked) return;
		
		this.onClick.dispatch();

		this.didMove = false;
		this.didMoveY = false;
		this.checkX = data.global.x;
		this.checkY = data.global.y;
		
		this.prevPosition = this.easingValue;
		this.dragging = true;
		this.dragOffset = data.global.x - this.value;	
		this.dragOffsetY = data.global.y - this.valueY;	
		
		this.target.touchend = this.target.touchendoutside = this.target.mouseup = this.target.mouseupoutside = this.onUp.bind(this);
		this.target.touchmove = this.target.mousemove = this.onMove.bind(this);
	}

	PixiTrackpad.prototype.onMouseWheel = function(event)
	{

		//console.log(event);
		event.preventDefault ? event.preventDefault() : event.returnValue = false;
		
		if(this.locked)return;
		this.speed = event.wheelDeltaX * 0.15;
		this.speedY = event.wheelDeltaY * 0.15;
	}

	PixiTrackpad.prototype.onUp = function(data)
	{
		if(this.locked) return;

		this.onDeclick.dispatch();
		
		this.dragging = false;
		
		if(this.snapTo)
	    {
	    	if(this.didMove)
	    	{
	    		this.spring.dx = this.speed;

	    		if(this.speed < 0)
	    		{
	    			var target = Math.floor(this.easingValue / this.size);
	    		}
	    		else
	    		{
	    			var target = Math.ceil(this.easingValue / this.size);
	    		}

	    		if(this.capMovement)
	    		{

	           		if(target > 0) target = 0;
	           		else if(target < -this.maxSlots) target = -this.maxSlots;
	       		}
	           	
	           	this.spring.tx = target * this.size;

	           	/// do y!
	           	this.spring.dy = this.speedY;

	    		if(this.speedY < 0)
	    		{
	    			var target = Math.floor(this.easingValueY / this.size);
	    		}
	    		else
	    		{
	    			var target = Math.ceil(this.easingValueY / this.size);
	    		}

	    		if(this.capMovement)
	    		{
		           if(target > 0) target = 0;
		           else if(target < -this.maxSlots) target = -this.maxSlots;
	    		}

	           this.spring.ty = target * this.size;
	    	}

	    	this.spring.x = this.easingValue;
	    	this.spring.y = this.easingValueY;
	    }
		
		this.cap()
		//this.didMove = false;
			
		this.target.mouseup = null;
		this.target.mousemove = null;	
	}

	PixiTrackpad.prototype.cap = function()
	{
		if(!this.capMovement)return;

		//console.log(this.spring.tx, this.scrollMin)
		if(this.snapTo)
		{
			if(this.spring.tx > this.scrollMax)
			{
				this.spring.tx = this.scrollMax;
			}
			else if(this.spring.tx < this.scrollMin)
			{
				this.spring.tx = this.scrollMin;
			}

		}

		if(this.snapTo)
		{
			if(this.spring.ty > this.scrollMaxY)
			{
				this.spring.ty = this.scrollMaxY;
			}
			else if(this.spring.ty < this.scrollMinY)
			{
				this.spring.ty = this.scrollMinY;
			}

		}

//		if(this.spring.tx < -(this.maxSlots * this.size)) this.spring.tx = -(this.maxSlots * this.size);
	}

	PixiTrackpad.prototype.setSlot = function(index)
	{
		this.spring.tx = index * -this.size;
		this.cap()
//		if(this.spring.tx < -(this.maxSlots * this.size)) this.spring.tx = -(this.maxSlots * this.size);
	}

	PixiTrackpad.prototype.nextSlot = function()
	{
	//	this.currentSlot++;
		this.spring.tx -= this.size;
		if(this.spring.tx < -(this.maxSlots * this.size)) this.spring.tx = -(this.maxSlots * this.size);

		this.cap()
	}

	PixiTrackpad.prototype.nextSlotY = function()
	{
	//	this.currentSlot++;
		this.spring.ty -= this.size;
		if(this.spring.ty < -(this.maxSlots * this.size)) this.spring.ty = -(this.maxSlots * this.size);

		this.cap()
	}

	PixiTrackpad.prototype.previousSlot = function()
	{
	//	this.currentSlot--;
		this.spring.tx += this.size;
		//if(this.spring.tx > 0) this.spring.tx = 0;
		this.cap()
	}

	PixiTrackpad.prototype.previousSlotY = function()
	{
	//	this.currentSlot--;
		this.spring.ty += this.size;
		//if(this.spring.ty > 0) this.spring.ty = 0;
		this.cap()
	}

	PixiTrackpad.prototype.setSize = function(size)
	{
		this.size = size;
		if(this.scrollbar) this.scrollBar.setSize(size);
	}

	PixiTrackpad.prototype.setSlots = function(slots)
	{
		this.maxSlots = slots-1;
	}

	PixiTrackpad.prototype.onMove = function(data)
	{
		if(this.locked) return;

		var dist = Math.abs(this.checkX - data.global.x);
		if(dist > 10) this.didMove = true;
		
		var dist = Math.abs(this.checkY - data.global.y);
		if(dist > 10) this.didMove = true;

		this.easingValue = (data.global.x - this.dragOffset);
		this.easingValueY = (data.global.y - this.dragOffsetY);

	    if(this.capMovement)
	    {
	    	if(this.easingValue > this.scrollMax)
		    {
		        this.easingValue = this.scrollMax + (this.easingValue - this.scrollMax) * 0.3
		    }
	        else if(this.easingValue < this.scrollMin)
		    {
		        this.easingValue  = this.scrollMin + (this.easingValue - this.scrollMin) * 0.3;//6666;
		    }

	        if(this.easingValueY > this.scrollMaxY)
	        {
	            this.easingValueY = this.scrollMaxY + (this.easingValueY - this.scrollMaxY) * 0.3
	        }
	        else if(this.easingValueY < this.scrollMinY)
	        {
	            this.easingValueY  = this.scrollMinY + (this.easingValueY - this.scrollMinY) * 0.3;//6666;
	        }
	    }
	}

	module.exports = PixiTrackpad;
});
define('com/sc/app/screens/letters/Letter_Bouncing',['require','exports','module','PIXI'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");

    var Letter_Bouncing = function(letter, style, height)
    {       
        PIXI.DisplayObjectContainer.call( this ); 

        var text = new PIXI.Text(letter, style);
        var texture = new PIXI.Texture(text.texture, new PIXI.Rectangle(0,0, text.width, height));
        this.widthText = text.width;

        this.letter = new PIXI.Sprite(texture)

        this.letter.anchor.x = .5;
        this.letter.anchor.y = .5;

        this.letter.alpha = 0;
        this.letter.position.y = -100;

        this.delay = 0;
            
        this.widthText = this.letter.width;
        this.addChild(this.letter)
    };

    Letter_Bouncing.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    Letter_Bouncing.prototype.animate = function()
    {
        TweenLite.to(this.letter, .2,
        {
            alpha: 1,
            delay: this.delay,
            ease: Expo.easeOut
        });

        TweenLite.to(this.letter.position, .8,
        {
            y: 0,
            delay: this.delay,
            ease: Bounce.easeOut
        });
    };

    module.exports = Letter_Bouncing;

});
define('com/sc/app/screens/letters/Letter_Rotating',['require','exports','module','PIXI'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");

    var Letter_Rotating = function(letter, style, height)
    {       
        PIXI.DisplayObjectContainer.call( this ); 

        var text = new PIXI.Text(letter, style);
        var texture = new PIXI.Texture(text.texture, new PIXI.Rectangle(0,0, text.width, height));

        this.widthText = text.width;
        this.letter = new PIXI.Sprite(texture)

        this.letter.anchor.x = 0;
        this.letter.anchor.y = .5;

        this.letter.scale.x = 0;
        this.letter.scale.y = 0;

        this.letter.alpha = 0;
        this.letter.rotation = -12;


        this.delay = 0;
            
        this.addChild(this.letter)
    };

    Letter_Rotating.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    Letter_Rotating.prototype.animate = function()
    {
        TweenLite.to(this.letter, .4,
        {
            alpha: 1,
            delay: this.delay,
            ease: Quad.easeOut
        });

        TweenLite.to(this.letter, .8,
        {
            rotation: 0,
            delay: this.delay,
            ease: Quad.easeOut
        });

        TweenLite.to(this.letter.scale, 1.4,
        {
            x: 1,
            y: 1,
            delay: this.delay,
            ease: Elastic.easeOut
        });
    };

    module.exports = Letter_Rotating;

});
define('com/sc/app/screens/letters/Letter_Scaling',['require','exports','module','PIXI'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");

    var Letter_Scaling = function(letter, style, height)
    {       
        PIXI.DisplayObjectContainer.call( this ); 

        var text = new PIXI.Text(letter, style);
        var texture2 = new PIXI.Texture(text.texture, new PIXI.Rectangle(0,0, text.width, height));
        this.widthText = text.width;

        this.letter = new PIXI.Sprite(texture2)
        this.letter.anchor.x = 0;
        this.letter.anchor.y = .5;

        this.letter.scale.x = 0;
        this.letter.scale.y = 0;

        this.letter.alpha = 1;


        this.delay = 0;
            
        
        this.addChild(this.letter)
    };

    Letter_Scaling.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    Letter_Scaling.prototype.animate = function()
    {
        TweenLite.to(this.letter, .2,
        {
            alpha: 1,
            delay: this.delay,
            ease: Quad.easeOut
        });

        TweenLite.to(this.letter.scale, 1.2,
        {
            x: 1,
            y: 1,
            delay: this.delay,
            ease: Elastic.easeOut.config(1.75, 0.3)
        });
    };

    module.exports = Letter_Scaling;

});
define('com/sc/app/screens/letters/Letter_TranslationLeft',['require','exports','module','PIXI'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");

    var Letter_TranslationLeft = function(letter, style, height)
    {       
        PIXI.DisplayObjectContainer.call( this ); 

        var text = new PIXI.Text(letter, style);
        this.widthText = text.width;

        var texture = new PIXI.Texture(text.texture, new PIXI.Rectangle(0,0, text.width, height));
        this.letter = new PIXI.Sprite(texture)
        
        this.letter.anchor.x = 0;
        this.letter.anchor.y = .5;

        this.letter.position.x -= 100;
        this.letter.alpha = 0;

        this.delay = 0;
            
        
        this.addChild(this.letter)
    };

    Letter_TranslationLeft.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    Letter_TranslationLeft.prototype.animate = function()
    {
        TweenLite.to(this.letter, .3,
        {
            alpha: 1,
            delay: this.delay,
            ease: Expo.easeOut
        });

        TweenLite.to(this.letter.position, .8,
        {
            x: 0,
            delay: this.delay,
            ease: Elastic.easeOut
        });
    };

    module.exports = Letter_TranslationLeft;

});
define('com/sc/app/screens/letters/Letter_Pile',['require','exports','module','PIXI'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");

    var Letter_Pile = function(letter, style)
    {       
        PIXI.DisplayObjectContainer.call( this ); 

        var text = new PIXI.Text(letter, style);
        var texture = new PIXI.Texture(text.texture, new PIXI.Rectangle(0,0, text.width, 75));
        this.widthText = text.width;

        this.letter = new PIXI.Sprite(texture)

        this.letter.anchor.x = .5;
        this.letter.anchor.y = .5;

        this.letter.alpha = 1;

        this.delay = 0;

        this.maskContainer = new PIXI.DisplayObjectContainer();

        this.mask1 = new PIXI.Graphics().beginFill(0xffffff).drawRect(-text.width, 10 - 100, text.width*2, 30);
        this.mask2 = new PIXI.Graphics().beginFill(0xffffff).drawRect(-text.width, -10 - 100, text.width*2, 20);
        this.mask3 = new PIXI.Graphics().beginFill(0xffffff).drawRect(-text.width, -30 - 100, text.width*2, 20);

        this.maskContainer.addChild(this.mask1);
        this.maskContainer.addChild(this.mask2);
        this.maskContainer.addChild(this.mask3);
            
        this.widthText = this.letter.width;
    
        this.addChild(this.letter);
        this.addChild(this.maskContainer);
    };

    Letter_Pile.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    Letter_Pile.prototype.animate = function()
    {
        TweenLite.to(this.letter, .2,
        {
            alpha: 1,
            delay: this.delay,
            ease: Expo.easeOut
        });

        TweenLite.to(this.mask1.position, .2,
        {
            y: 100,
            delay: this.delay,
            ease: Quad.easeOut
        });

        TweenLite.to(this.mask2.position, .2,
        {
            y: 100,
            delay: this.delay+.05,
            ease: Quad.easeOut
        });

        TweenLite.to(this.mask3.position, .2,
        {
            y: 100,
            delay: this.delay+.1,
            ease: Quad.easeOut
        });

        TweenLite.to(this.letter.position, .8,
        {
            y: 0,
            delay: this.delay,
            ease: Bounce.easeOut
        });
    };

    module.exports = Letter_Pile;

});
define('com/sc/app/screens/letters/Letter_Glitch',['require','exports','module','PIXI','com/fido/system/Ticker'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Ticker              = require('com/fido/system/Ticker');

    var Letter_Glitch = function(letter, style)
    {       
        PIXI.DisplayObjectContainer.call( this ); 

        this.counter = 0;
        this.numberToAdd = 1;

        var text = new PIXI.Text(letter, style);
        var texture = new PIXI.Texture(text.texture, new PIXI.Rectangle(0,0, text.width, 90));
        this.widthText = text.width;

        this.letter = new PIXI.Sprite(texture)

        this.letter.anchor.x = .5;
        this.letter.anchor.y = .5;

        this.letter.alpha = 1;

        this.delay = 0;

        this.maskContainer = new PIXI.DisplayObjectContainer();

        this.mask1 = new PIXI.Graphics().beginFill(0xffffff).drawRect(0, 0, text.width*2, 2);
        this.mask1.position.x = -text.width;
        this.mask1.position.y = -70;
                    
        this.widthText = this.letter.width;
        this.addChild(this.mask1);
        this.letter.mask = this.mask1;
        this.addChild(this.letter);
        this.addChild(this.maskContainer);
    };

    Letter_Glitch.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    Letter_Glitch.prototype.update = function()
    {
        if(this.counter < 100){
            if(this.numberToAdd < 1)
            {
                this.numberToAdd *= 1.1;
            }

            this.counter += this.numberToAdd;
            this.mask1.scale.y *=1.1;
            this.mask1.position.y = Math.cos(this.counter)*35 - this.counter*1;
        }
        else
        {
            Ticker.instance.remove(this.update, this);
        }
    };

    Letter_Glitch.prototype.launchTicker = function()
    {
        Ticker.instance.add(this.update, this);
    }

    Letter_Glitch.prototype.animate = function()
    {
        TweenLite.delayedCall(this.delay, this.launchTicker.bind(this),this);
        

        TweenLite.to(this.letter, .2,
        {
            alpha: 1,
            delay: this.delay,
            ease: Expo.easeOut
        });
    };

    module.exports = Letter_Glitch;

});
define('com/sc/app/screens/OutroScreen',['require','exports','module','PIXI','com/sc/games/Game','com/sc/app/buttons/SCButton','com/sc/app/system/GameSaveManager','com/fido/swfy/Swfy','com/fido/app/AssetManager','com/sc/app/Animations','com/fido/ui/PixiTrackpad','com/sc/app/system/GameSaveManager','com/fido/sound/SoundManager','com/fido/system/Ticker','com/sc/Consts','com/sc/app/screens/letters/Letter_Bouncing','com/sc/app/screens/letters/Letter_Rotating','com/sc/app/screens/letters/Letter_Scaling','com/sc/app/screens/letters/Letter_TranslationLeft','com/sc/app/screens/letters/Letter_Pile','com/sc/app/screens/letters/Letter_Glitch','libs/gameConfig/gameTracking','com/fido/loader/Cache','com/fido/app/transitions/StarTransition'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Game            = require('com/sc/games/Game');
    var SCButton        = require('com/sc/app/buttons/SCButton');
    var GameSaveManager = require('com/sc/app/system/GameSaveManager');
    var Swfy            = require('com/fido/swfy/Swfy');
    var AssetManager    = require('com/fido/app/AssetManager');
    var Animations      = require("com/sc/app/Animations");
    var Trackpad        = require('com/fido/ui/PixiTrackpad');
    var GameSaveManager = require('com/sc/app/system/GameSaveManager');
    var SoundManager    = require('com/fido/sound/SoundManager');
    var Ticker          = require('com/fido/system/Ticker');
    var Consts          = require('com/sc/Consts');
    var LetterBouncing  = require('com/sc/app/screens/letters/Letter_Bouncing');
    var LetterRotating  = require('com/sc/app/screens/letters/Letter_Rotating');
    var LetterScaling   = require('com/sc/app/screens/letters/Letter_Scaling');
    var LetterTranslationLeft   = require('com/sc/app/screens/letters/Letter_TranslationLeft');
    var LetterPile          = require('com/sc/app/screens/letters/Letter_Pile');
    var LetterGlitch        = require('com/sc/app/screens/letters/Letter_Glitch');
    var DisneyTracker       = require('libs/gameConfig/gameTracking');
    var Cache               = require('com/fido/loader/Cache');
    var StarTransition      = require("com/fido/app/transitions/StarTransition");

    var Outro = function(app)
    {       
        PIXI.DisplayObjectContainer.call( this ); 

        this.requiredAssets = ['outroAssets'];
        this.transition = new StarTransition();

    }

    Outro.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    Outro.prototype.init = function() 
    {
        GameSaveManager.instance.setTutorial(4);
        this.app = app;

        var json = Cache.getJson("config");
        this.animationEnabled = json.config.ANIMATE_OUTRO_LETTERS === "true";

        this.dimensions = 
        {
            width: 1136,
            height: 640
        }

        this.skipButtonEnable = false;
        this.swipeEnable = false;
        this.animationFirst = "game4Outro1";
        this.animationSecond = "game4Outro2";

        this.firstAnimationData = Animations["game4Outro1"];//this.loadAnimation(this.animationFirst);
        this.secondAnimationData = Animations["game4Outro2"];

        this.counter = 0;
        this.firstAreaEnable = false; // for animation
        this.secondAreaEnable = false; // for animation
        this.lastScreenEnable = false; // for animation
        this.mousedown = false;

        this.burstBG = new PIXI.Sprite.fromFrame("sunburst_fg.png");
        this.burstBG.position.set(this.dimensions.width/2, this.dimensions.height/2);
        this.burstBG.anchor.x = 0.5;
        this.burstBG.anchor.y = 0.5;
        this.burstBG.scale.x = this.burstBG.scale.y = 3;
        this.burstBG.alpha = 0;

        this.burstFG = new PIXI.Sprite.fromFrame("sunburst_fg.png");
        this.burstFG.position.set(this.dimensions.width/2, this.dimensions.height/2);
        this.burstFG.anchor.x = 0.5;
        this.burstFG.anchor.y = 0.5;
        this.burstFG.alpha = 0;
        this.burstFG.scale.x = this.burstFG.scale.y = 3;

        if(Device.instance.blendModeFriendly)
        {
            this.burstBG.blendMode = PIXI.blendModes.ADD;
            this.burstFG.blendMode = PIXI.blendModes.ADD;
        }
        else
        {
            this.burstBG.alpha = .3;
            this.burstFG.alpha = .3;
        }

        this.touchX = 0;

        this.swfy = new Swfy();
        this.addChild(this.swfy);

        this.swfy2 = new Swfy();
        this.addChild(this.swfy2);

        this.swfy.visible = false;
        this.swfy2.visible = false;

        this.swfy.onComplete.add(this.onFirstAnimationComplete, this);

        // barrel area
        this.containerFirstArea = new PIXI.DisplayObjectContainer();
        this.containerFirstArea.hitArea = new PIXI.Rectangle(this.dimensions.width - this.dimensions.width/3 - 50, this.dimensions.height/2, 400, 500);
        this.containerFirstArea.interactive = false;

        this.containerSecondArea = new PIXI.DisplayObjectContainer();
        this.containerSecondArea.interactive = false;
        this.containerSecondArea.visible = false;
        this.containerSecondArea.hitArea = new PIXI.Rectangle(0,0, this.dimensions.width, this.dimensions.height);


        this.trackpadLayer = new PIXI.DisplayObjectContainer();
        this.trackpadLayer.interactive = true;
        this.trackpadLayer.buttonMode = true;
        this.trackpadLayer.hitArea = new PIXI.Rectangle(0,0, this.dimensions.width, this.dimensions.height);

        this.containerSecondArea.addChild( this.trackpadLayer);

        this.trackpad = new PixiTrackpad({ target: this.trackpadLayer });


        this.barrel = new PIXI.Sprite.fromFrame( "interactive1_barrelFrame.png");
        this.barrel.position.set(this.dimensions.width - this.dimensions.width/3 - 35, this.dimensions.height/2 - 20);
        this.barrel.alpha = 0;

        this.hand = new PIXI.Sprite.fromFrame("interactivePointerHand.png");
        this.hand.scale.set(.7);
        this.hand.alpha = 0;
        this.hand.position.set(this.dimensions.width - this.dimensions.width/3 + 60, this.dimensions.height/2 - 150);

        this.backgroundJail = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/interactive2_prison_bg.jpg");

        this.backgroundJail.alpha = 0;

        this.door = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/interactive2_prison_door.png");
        this.door.position.set(this.dimensions.width - 200, 0);
        this.door.alpha = 0;

        this.happyTown = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/end_screen.jpg");
        this.happyTown.scale.set(1);
        this.happyTown.alpha = 0;

        // badge complete
        this.badge = new PIXI.Sprite.fromFrame("badge_complete.png");
        this.badge.position.set(this.dimensions.width / 2, this.dimensions.height / 2 - 30);
        this.badge.anchor.set(.5, .5);
        this.badge.scale.set(4);
        this.badge.alpha = 0;


        this.addChild(this.backgroundJail);
        this.addChild(this.door);
        this.addChild(this.happyTown);
        this.addChild(this.barrel);
        this.addChild(this.hand);
        this.addChild(this.burstBG);
        this.addChild(this.burstFG);
        this.addChild(this.badge);
        // this.addChild(this.wellDone);
        // this.addChild(this.deputyText);
     

        this.addChild(this.containerFirstArea);
        this.addChild(this.containerSecondArea);


        this.containerFirstArea.mousedown = this.containerFirstArea.touchstart = this._onMouseDown.bind(this); 
        this.containerFirstArea.mouseupoutside = this.containerFirstArea.mouseup = this.containerFirstArea.touchendoutside = this.containerFirstArea.touchend = this._onMouseUp.bind(this); 

        this.containerSecondArea.mousedown = this.containerSecondArea.touchstart = this._onMouseDown.bind(this); 
        this.containerSecondArea.mouseupoutside = this.containerSecondArea.touchendoutside = this.containerSecondArea.mouseup = this.containerSecondArea.touchend = this._onMouseUp.bind(this); 

        this.homeButton = new SCButton.blueButton("icon_home.png");
        this.homeButton.view.interactive = false;
        this.homeButton.view.position.set(this.dimensions.width - 100, this.dimensions.height-85);
        this.homeButton.view.scale.set(0);
        this.homeButton.onPress.add(this.onButtonPressed, this);        
        this.addChild(this.homeButton.view);

        // this.trackpad.onClick.add(this._onMouseDown.bind(this));
        // this.trackpad.onDeclick.add(this._onMouseUp.bind(this));
    }

    Outro.prototype.createTexts = function() 
    {
         // texts on complete
        var style = {
            font : '50px '+ Fonts.MainFont,
            fill : '#efb647',
            stroke : '#482219',
            strokeThickness : 6,
            dropShadow : true,
            dropShadowColor : '#482219',
            dropShadowAngle : -0.2,
            dropShadowDistance : 7
        };

        var style2 = {
            font : '100px '+ Fonts.MainFont,
            fill : '#efb647',
            stroke : '#482219',
            strokeThickness : 6,
            dropShadow : true,
            dropShadowColor : '#482219',
            dropShadowAngle : -0.2,
            dropShadowDistance : 7
        };

        this.containerWellDoneText = new PIXI.DisplayObjectContainer();
        // this.containerWellDoneText.anchor.x = .5;
        // 

        var translations = Cache.getJson('translation');
        
        var textWellDone = translations.strings.STR_OUTRO_PHRASE1;
        var widthWellDone = 0;

        if(this.animationEnabled){
            this.lettersWellDone = [];

            for (var i = 0; i < textWellDone.length; i++) {
                var letter = new LetterTranslationLeft(textWellDone[i], style, 70);
                letter.position.x = widthWellDone;

                // if(i != textWellDone.length - 1)
                // {
                    
                widthWellDone +=  letter.widthText*.85;
                    // }
                // }

                this.lettersWellDone.push(letter);            
                this.containerWellDoneText.addChild(letter);
            };
        }
        else // not animate the letter
        {
            this.text1 = new PIXI.Text(textWellDone, style);
            this.text1.position.y = - 30;     
            this.text1.scale.y = 0;       
            widthWellDone = this.text1.width;
            this.containerWellDoneText.addChild(this.text1);
        }

        var scaleTarget = 960 / (widthWellDone)// / this.refill.scale.x);
        if(scaleTarget > 1) scaleTarget = 1;
        this.containerWellDoneText.scale.set(scaleTarget);

        this.containerWellDoneText.position.x = this.dimensions.width / 2 - widthWellDone / 2;
        this.containerWellDoneText.position.y = 70;

        
       ///////

        this.containerDeputyText = new PIXI.DisplayObjectContainer();
        
        var textDeputy = translations.strings.STR_OUTRO_PHRASE2;
        var widthDeputy = 0;
        this.text2;

        if(this.animationEnabled){
            this.lettersDeputy = [];

            for (var i = 0; i < textDeputy.length; i++) {

                var letter = new LetterScaling(textDeputy[i], style2, 130);

                letter.position.x = widthDeputy;

                widthDeputy +=  letter.widthText*.9;

                this.lettersDeputy.push(letter);  
                this.containerDeputyText.addChild(letter);
            };
        }
        else
        {
            this.text2 = new PIXI.Text(textDeputy, style2);
            this.text2.position.y = - 60;
            widthDeputy = this.text2.width;
            this.containerDeputyText.addChild(this.text2);
            this.text2.scale.y = 0;
        }

        var scaleTarget = 960 / (widthDeputy)// / this.refill.scale.x);
        if(scaleTarget > 1) scaleTarget = 1;

        this.containerDeputyText.scale.set(scaleTarget);

        this.containerDeputyText.position.x = this.dimensions.width / 2 - widthDeputy / 2;
        this.containerDeputyText.position.y = this.dimensions.height - 100;



        this.addChild(this.containerWellDoneText);
        this.addChild(this.containerDeputyText);
    }

    Outro.prototype.onShow = function() 
    {
        this.app.screenManager.onSegmentChange.add(this.onHide, this);
        this.app.topMenu.titleMode();
        Ticker.instance.add(this.update, this);

        this.onAssetsLoaded();
        this.createTexts();
    }

    Outro.prototype.loadAnimation = function(id)
    {
        var animationData = Animations[id];

        if(!AssetManager.doesGroupExist(id))
        {
            var assetsRequired = this.getAssetsForAnimation(animationData);
            AssetManager.registerGroup(id, assetsRequired);
        }

        AssetManager.onAssetsLoaded.add(this.onAssetsLoaded, this);
        AssetManager.activateGroups([id]);

        return animationData;
    }

    Outro.prototype.onAssetsLoaded = function()
    {
        this.swfy.visible = true;
        this.swfy.setAnimation(this.firstAnimationData.data);
        this.swfy.reset();
    }

    Outro.prototype.getAssetsForAnimation = function(animation)
    {
        var assets = animation.spriteSheets.slice();

        for(var i in animation.data)
        {
            var mc = animation.data[i];
            if(mc.isImage)
            {
                assets.push(ASSET_URL + mc.view);
            }
        }    

        return assets;
    }

    Outro.prototype.reset = function() 
    {
       Game.prototype.reset.call(this);
    };

    Outro.prototype.onFirstAnimationComplete = function()
    {
        this.skipButtonEnable = true;

        // just to be sure, I set visible = false for the second interaction
        this.containerSecondArea.visible = false;
        this.containerSecondArea.interactive = false;
        // and visible = true for the first interaction
        this.containerFirstArea.visible = true;
        this.containerFirstArea.interactive = true;

        this.firstAreaEnable = true;
        this.hand.alpha = 1;
    };

    Outro.prototype.onButtonPressed = function(data)
    {
        this.homeButton.view.interactive = false;
        this.app.screenManager.gotoScreenByID("title");
        GameSaveManager.instance.reset();
    }

    Outro.prototype._onMouseDown = function(data)
    {
        this.mousedown = true;

        if(this.skipButtonEnable && !this.swipeEnable)
        {
            this.swfy.visible = false;
            this.swfy2.visible = true;
            this.swfy2.onComplete.addOnce(this.onSecondAnimationComplete, this);
            this.swfy2.setAnimation(this.secondAnimationData.data);
            this.swfy2.reset();
            this.skipButtonEnable = false;
            this.containerFirstArea.interactive = false;
            this.firstAreaEnable = false;

            SoundManager.sfx.play('banditSlip');

            DisneyTracker.trackAction("beat_the_bandit", "outro");

            TweenLite.to([this.barrel, this.hand], .2,
            {
                alpha: 0
            });
        }
    };

    Outro.prototype._onMouseUp = function(data)
    {
        this.mousedown = false;
        if(this.swipeEnable)
        {
            if(this.door.position.x <= this.dimensions.width/3*2)
            {   
                this.swipeEnable = false;
                this.containerSecondArea.interactive = false;
                this.hand.alpha = 0;

                TweenLite.delayedCall(.5, function()
                {
                    SoundManager.sfx.play('jailDoor');
                }.bind(this));

                TweenLite.to(this.door.position, 1,
                {
                    x:0,
                    ease: Bounce.easeOut,
                    onComplete: function()
                    {
                        TweenLite.to([this.backgroundJail, this.door], .2,
                        {
                            alpha: 0,
                            delay: 1,
                            onComplete: this.lastScreenAnimation()
                        });
                    }.bind(this)
                });
            }
            else
            {
                TweenLite.to(this.door.position, .5,
                {
                    x:this.dimensions.width - 200,
                    ease: Ease.easeOut
                });
            }
        }
    };

    Outro.prototype.animateTexts = function()
    {
        if(!this.animationEnabled)
        {
            TweenLite.to(this.text1.scale, 1,
            {
                x:1,
                y:1,
                ease: Elastic.easeOut
            });

            TweenLite.to(this.text2.scale, 1,
            {
                x:1,
                y:1,
                delay: .6,
                ease: Elastic.easeOut
            });
        }
        else
        {
            for (var i = 0; i < this.lettersWellDone.length; i++) {
                this.lettersWellDone[i].delay = i * .05;
                this.lettersWellDone[i].animate();
            };

            for (var i = 0; i < this.lettersDeputy.length; i++) {
                this.lettersDeputy[i].delay = i * .05 + 1;
                this.lettersDeputy[i].animate();
            };
        }
    }

    Outro.prototype.lastScreenAnimation = function()
    {        
        this.createTexts();
        this.lastScreenEnable = true;
        TweenLite.to(this.happyTown, 1,
        {
            alpha:1,
            delay:1,
            ease: Ease.easeOut,
            onComplete: function(){
                SoundManager.music.stopAll();
                
                SoundManager.sfx.play('outro');
                this.homeButton.view.visible = true;
                this.homeButton.view.interactive = true;
                TweenLite.to(this.homeButton.view.scale, 1, {
                    x: this.homeButton.defaultScale,
                    y: this.homeButton.defaultScale,
                    ease: Elastic.easeOut.config(2.5, 0.5)
                });

                TweenLite.to(this.badge, .6,
                {
                    alpha: 1,
                    delay: .2,
                    ease: Ease.easeOut
                });

                TweenLite.to(this.badge.scale, .8,
                {
                    x: 1,
                    y: 1,
                    ease: Bounce.easeOut,
                    onComplete: function()
                    {
                        TweenLite.to([this.burstFG, this.burstBG], .5,
                        {
                            alpha : 0.75,
                            ease : Back.easeOut,
                            onComplete: function(){
                                this.animateTexts();
                                TweenLite.to([this.burstFG, this.burstBG], 2,
                                {
                                    alpha : 0.6,
                                    delay: .4,
                                    ease : Ease.easeOut
                                });
                            }.bind(this)
                        });

                    }.bind(this)
                });

                GameSaveManager.instance.setComplete(3);

            }.bind(this)
        });

        GameSaveManager.instance.clear();
    };
    
    Outro.prototype.onSecondAnimationComplete = function()
    {

        this.containerFirstArea.visible = false;
        this.containerFirstArea.interactive = false;

        this.containerSecondArea.visible = true;
        this.containerSecondArea.interactive = true;

        this.swipeEnable = true;

        this.hand.position = new PIXI.Point(this.dimensions.width/3*2, this.dimensions.height/2 - 50);
        this.secondAreaEnable = true;

        TweenLite.to([this.backgroundJail, this.door, this.hand], .2,
        {
            alpha: 1
        });
    };

    Outro.prototype.update = function() 
    {
        this.counter += 0.05;
        if(this.firstAreaEnable) {
            this.barrel.alpha = Math.abs(Math.cos(this.counter));
            this.hand.position.y += Math.cos(this.counter) * 2;
        }
        if(this.secondAreaEnable) {
            this.hand.position.x = this.dimensions.width/3*2 + Math.abs(Math.cos(this.counter)) * 200;

            this.trackpad.update();
            // console.log(this.trackpad.speed)
            if(this.mousedown)
            {
              
               
                this.door.position.x += this.trackpad.speed;
            }
        }

        if(this.lastScreenEnable)
        {
            this.burstBG.rotation += 0.0025;
            this.burstFG.rotation -= 0.0025;
        }
    };

    Outro.prototype.onHide = function() 
    {

        // remove listener : 
        SoundManager.sfx.fadeTo('outro', 0, .4);

        Ticker.instance.remove(this.update, this);
        this.app.screenManager.onSegmentChange.remove(this.onHide, this);
        this.homeButton.view.scale.set(0);
        this.homeButton.view.visible = false;

        this.swfy.visible = false;
        this.swfy2.visible = false;

        this.skipButtonEnable = false;
        this.swipeEnable = false;
        this.firstAreaEnable = false; // for animation
        this.secondAreaEnable = false; // for animation
        this.lastScreenEnable = false; // for animation
        this.mousedown = false;
        this.burstBG.alpha = 0;
        this.burstFG.alpha = 0;
        this.containerFirstArea.interactive = false;
        this.containerSecondArea.interactive = true;
        this.barrel.alpha = 0;
        this.hand.alpha = 0;
        this.hand.position = new PIXI.Point(this.dimensions.width - this.dimensions.width/3 + 60, this.dimensions.height/2 - 150);
        this.backgroundJail.alpha = 0;
        this.door.position = new PIXI.Point(this.dimensions.width - 200, 0);
        this.door.alpha = 0;
        this.happyTown.alpha = 0;
        this.badge.scale.set(4);
        this.badge.alpha = 0;

        this.removeChild(this.containerWellDoneText);
        this.removeChild(this.containerDeputyText);
        // this.wellDone.alpha = 0;
        // this.wellDone.scale.set(3);
        // this.deputyText.anchor.x = 0.5;
        // this.deputyText.alpha = 0;
        // this.deputyText.scale.set(3);

    }


    module.exports = Outro;

});
define('com/sc/app/TopMenu',['require','exports','module','PIXI','com/sc/app/buttons/SCButton','com/fido/sound/SoundManager','com/fido/system/Device','libs/gameConfig/gameTracking'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var SCButton        = require("com/sc/app/buttons/SCButton");
    var SoundManager    = require("com/fido/sound/SoundManager");
    var Device          = require('com/fido/system/Device');
    var DisneyTracker   = require('libs/gameConfig/gameTracking');

    /**
     * The TopMenu area of our app. This is fast becoming a HUD layer though...
     * @param {Object} app : Instance of SCApp
     * @extends PIXI.DisplayObjectContainer
     */
    var TopMenu = function(app)
    {
        PIXI.DisplayObjectContainer.call( this );

        this.app = app;

        this.modes = {
            game_mode:0,
            normal_mode:1,
            title_mode:2
        };

        this.mode = null;

        this.muteButton = new SCButton.blueButton("icon_sound.png");
        this.muteButton.onPress.add(this.onButtonPressed, this);
        this.addChild(this.muteButton.view);

        this.pauseButton = new SCButton.blueButton("icon_help.png");
        this.pauseButton.onPress.add(this.onButtonPressed, this);
        this.pauseButton.view.visible = false;
        this.addChild(this.pauseButton.view);

        this.backButton = new SCButton.blueButton("icon_back.png");
        this.backButton.icon.x -= 10;
        this.backButton.onPress.add(this.onButtonPressed, this);
        this.addChild(this.backButton.view);

        if(this.app.config.FLIP_LANGUAGE === "true")
        {
            this.backButton.icon.scale.x *= -1;
        }

        SoundManager.sfx.onMuteToggle.add(this.onMuteToggle, this);
        SoundManager.music.onMuteToggle.add(this.onMuteToggle, this);

        this.isMobile = app.isMobile;

        this.backButton.view.visible = false;
    };

    TopMenu.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    TopMenu.prototype.fadeButton = function(button, alpha)
    {
        if(alpha) // if alpha = 1, make it visible before the button appears in fadeIn
        {
            button.visible = true;
        }
        button.interactive = false;
        TweenLite.to(button, .5, 
        {
            alpha: alpha,
            ease: Ease.easeOut,
            onComplete: function()
            {
                button.visible = alpha > 0 ? true : false;
                button.interactive = alpha > 0 ? true : false;
            }.bind(this)
        });
    }

    /*
     * Hide or show buttons (called when overlay is displayed)
     */
    TopMenu.prototype.hideButtons = function()
    {
        this.fadeButton(this.muteButton.view, 0);
        this.fadeButton(this.pauseButton.view, 0);
        this.fadeButton(this.backButton.view, 0);
    }

    TopMenu.prototype.showButtons = function()
    {
        if(this.mode == this.modes.game_mode)
        {
            this.gameMode();
        }
        else if(this.mode == this.modes.normal_mode)
        {
            this.normalMode();
        }
        else if(this.mode == this.modes.title_mode)
        {
            this.titleMode();
        }
    }

    /**
     * Set us to Game Mode
     */
    TopMenu.prototype.gameMode = function()
    {

        this.mode = this.modes.game_mode;
        if(!this.isMobile) // desktop
        {

            this.fadeButton(this.muteButton.view, 1);
            this.fadeButton(this.pauseButton.view, 1);
            this.fadeButton(this.backButton.view, 0);
        }
        else
        {
            this.fadeButton(this.muteButton.view, 1);
            this.fadeButton(this.pauseButton.view, 1);
            this.fadeButton(this.backButton.view, 0);
        }
    };

    /**
     * Set normal mode
     */
    TopMenu.prototype.normalMode = function()
    {
        this.mode = this.modes.normal_mode;
        if(!this.isMobile)
        {
            this.fadeButton(this.muteButton.view, 1);
            this.fadeButton(this.pauseButton.view, 0);
            this.fadeButton(this.backButton.view, 1);
        }
        else
        {
            this.fadeButton(this.muteButton.view, 1);
            this.fadeButton(this.pauseButton.view, 0);
            this.fadeButton(this.backButton.view, 1);
        }
    };

    /**
     * Set title mode
     */
    TopMenu.prototype.titleMode = function()
    {
        this.mode = this.modes.title_mode;
        if(!this.isMobile)
        {
            this.fadeButton(this.muteButton.view, 1);
            this.fadeButton(this.pauseButton.view, 0);
            this.fadeButton(this.backButton.view, 0);
        }
        else
        {
            this.fadeButton(this.muteButton.view, 1);
            this.fadeButton(this.pauseButton.view, 0);
            this.fadeButton(this.backButton.view, 0);
        }
    };

    /**
     * Event for a button press
     * @param  {Object} bt : The button that was pressed
     */
    TopMenu.prototype.onButtonPressed = function(bt)
    {
        if(bt === this.muteButton)
        {   
            if(SoundManager.sfx.isMuted && SoundManager.music.isMuted)
            {

                SoundManager.music.unmute();
                SoundManager.sfx.unmute();
                DisneyTracker.trackAction("audio_on", "main");
            }
            else
            {
                SoundManager.music.mute();
                SoundManager.sfx.mute();
                DisneyTracker.trackAction("audio_off", "main");
            }
        }
        else if(bt === this.pauseButton)
        {
            this.app.overlayManager.tutorialScreen.setPauseMode();
            this.app.overlayManager.show("tutorial");
        }
        else if(bt === this.backButton)
        {               
            if(this.app.screenManager.currentScreen.backBehaviour === "title")
            {
                this.app.screenManager.gotoScreenByID("title");
            }
            if(this.app.screenManager.currentScreen.backBehaviour === "map")
            {
                this.app.screenManager.gotoScreenByID("map")
            }
                
        }
    };

    /**
     * Toggle the mute button on and off
     */
    TopMenu.prototype.onMuteToggle = function()
    {
        if(SoundManager.sfx.isMuted && SoundManager.music.isMuted)
        {
            this.muteButton.setIcon("icon_mute.png");
        } 
        else
        {
           this.muteButton.setIcon("icon_sound.png");
        } 
    };

    /**
     * Event for when the menu is shown
     */
    TopMenu.prototype.onShown = function()
    {
        this.game.start();
    };

    /**
     * Resize the Top Menu
     * @param  {Number} w : Width
     * @param  {Number} h : Height
     */
    TopMenu.prototype.resize = function(w, h)
    { 
        var width = 190 * 0.5;
        var paddingLeft = 0;

        this.muteButton.view.position.set( w - width + 10, 90/4 + 60);

        if(Device.instance.isMobile || Device.instance.iPad)
        {
            this.pauseButton.view.position.set( w - width * 2.35 + 10, 23 + 60);
        }
        else
        {
            this.pauseButton.view.position.set( w - width * 2.35 + 40, 23 + 60);   
        }

        this.backButton.view.position.set( width * 0.5 + 40 , 23 + 60);

        if(this.app.config.FLIP_LANGUAGE === "true")
        {
            this.backButton.view.position.set( w - width - 90 , 23 + 60);
        }
    };

    /**
     * Export...
     */
    module.exports = TopMenu;

});
define('com/sc/games/shared/particles/GameOverStars',['require','exports','module','PIXI','com/fido/utils/Math2'],function (require, exports, module) 
{
    var PIXI  = require("PIXI");
    var Math2 = require("com/fido/utils/Math2");

    /**
     * Sparkley particles, because who doesn't love a bit of sparkle?
     */
    var GameOverStars = function()
    {
        PIXI.DisplayObjectContainer.call(this);

        this.particles = [];
        this.total = 40;

        for (var i = 0; i < this.total; i++) {
            
            var sprite = PIXI.Sprite.fromFrame("sparkle.png");
            sprite.anchor.set(0.5);

            sprite.speed = new PIXI.Point();
            sprite.pos = new PIXI.Point();
            
            this.addChild(sprite);
            
            this.particles.push(sprite);
        };

        this.ratio = 0;

        this._particleId = 0;

        this.count = 0;
    }

    GameOverStars.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * Standard function to activate this particle system
     * @param  {Number} x [X Position]
     * @param  {Number} y [Y position]
     * @return {null}
     */
    GameOverStars.prototype.activate = function(x, y)
    {
        this.position.x = x;
        this.position.y = y;
        this.isDead = false;
        this.life = 2;
        this.ratio = 0;

        for (var i = 0; i < this.total; i++) 
        {        
            var sprite = this.particles[i]
                sprite.pos = new PIXI.Point();
            
            var dir = ((Math.PI * 2) / this.total) * i;
            var speed = 4 + Math.random() * 8;
                sprite.speed.x = Math.sin(dir) * speed;
                sprite.speed.y = Math.cos(dir) * speed;
                sprite.visible = true;

                if(window.WEBGL)
                {
                    sprite.blendMode = PIXI.blendModes.ADD;
                }
                sprite.position.x = Math2.random(-50, 50);
                sprite.position.y = 0;
                sprite.rotation =  Math.PI * 2;
                sprite.alpha = 0.1;
                sprite.scale.x = sprite.scale.y = (0.01 + Math.random() * 0.1) * (Math.random() > .5 ? 1: -1);
                // console.log((.random() > .5 ? 1: -1)
                sprite.offset = Math.random() * 100;
                sprite.rotationSpeed = .02 + Math.random()*.1;
                sprite.maxScale = 1.5;
                sprite.coefScale = 1 + Math.random()*.05;
        }
    }

    /**
     * Update loop
     * @return {null}
     */
    GameOverStars.prototype.update = function()
    {
        this.life -= 0.03;
        
        if(this.life < 0)
        {
            this.isDead = true;
        } 

       for (var i = 0; i < this.total; i++) {

            var sprite = this.particles[i];
                sprite.speed.y *= .95;
                sprite.position.x += sprite.speed.x;
                sprite.position.y += sprite.speed.y;
                sprite.rotation += sprite.rotationSpeed;
                sprite.speed.x *= 0.95;

            if(this.life < .8)
            {
                sprite.scale.x *= 0.98;
                sprite.scale.y *= 0.98;
            }
            else if(sprite.scale.x <= 1)
            {
                sprite.scale.x *= sprite.coefScale;
                sprite.scale.y *= sprite.coefScale;
            }

            if(sprite.alpha < 0.9 && this.life >= .8)
            {
                sprite.alpha += .05;
            }
            else if (this.life >= .8)
            {
                sprite.alpha = .9;
            }
                
            if(this.life < 0.8)
            {
                sprite.alpha *= 0.95;
            }


        }
    }

    module.exports = GameOverStars;

});
define('com/sc/app/overlay/screens/GameoverScreen',['require','exports','module','PIXI','com/sc/app/buttons/SCButton','com/fido/sound/SoundManager','com/fido/sound/MusicManager','com/fido/utils/Utils','com/sc/app/system/GameSaveManager','com/sc/games/shared/particles/LoaderParticles','com/sc/games/shared/particles/GameOverStars','com/fido/system/Ticker','com/fido/loader/Cache','com/sc/Consts','com/fido/system/Device'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var SCButton        = require("com/sc/app/buttons/SCButton");
    var SoundManager    = require("com/fido/sound/SoundManager");
    var MusicManager    = require("com/fido/sound/MusicManager");
    var Utils           = require("com/fido/utils/Utils");
    var GameSaveManager = require("com/sc/app/system/GameSaveManager");
    var LoaderParticles = require('com/sc/games/shared/particles/LoaderParticles');
    var GameOverStars   = require('com/sc/games/shared/particles/GameOverStars');
    var Ticker          = require('com/fido/system/Ticker');
    var Cache           = require('com/fido/loader/Cache');
    var Consts          = require('com/sc/Consts');
    var Device          = require('com/fido/system/Device');
    
    
    var GameoverScreen = function(app)
    {
        PIXI.DisplayObjectContainer.call(this);

        this.app = app;

        this.completeFrame = 0;
        this.completeStarTimeOut = 40;
        this.alpha = 0;
        this.stars = [];

        this.starCount = 0;
        this.levelCompletes = [0, 0, 0];
        this.finished = false;

        this.sunburstBg = new PIXI.Sprite.fromFrame("sunburst_fg.png");
        this.sunburstBg.anchor.set(0.5);
        this.sunburstBg.scale.set(3);
        this.sunburstBg.visible = false;
        this.addChild(this.sunburstBg);

        this.bg = new PIXI.Sprite.fromFrame("box_overlay.png");
        this.bg.position.set(-this.bg.width * 0.5, -this.bg.height * 0.5);
        this.addChild(this.bg);
        
        this.restartButton = new SCButton.middleBlue("icon_replay.png");
        this.restartButton.view.rotates = false;
        this.restartButton.icon.scale.set(1.7);
        this.restartButton.view.x = this.bg.width/2 - 200;
        this.restartButton.view.y = this.bg.height/2 + 100;
        this.restartButton.needsOffsetForFire = true;
        this.bg.addChild(this.restartButton.view);

        this.nextButton = new SCButton.middleBlue("icon_play_small.png");
        this.nextButton.view.rotates = false;
        this.nextButton.view.anchor.set(.5, .5)
        this.nextButton.icon.scale.set(2);
        this.nextButton.icon.x += 10;
        this.nextButton.view.x = this.bg.width/2 + 200;
        this.nextButton.view.y = this.bg.height/2+100;
        this.nextButton.needsOffsetForFire = true;
        this.bg.addChild(this.nextButton.view);

        if(this.app.config.FLIP_LANGUAGE === "true")
        {
            this.nextButton.view.x = this.bg.width/2 - 200;
            this.nextButton.icon.scale.x *= -1;
            this.nextButton.icon.x -= 21;

            this.restartButton.view.x = this.bg.width/2 + 200;
        }


        this.callie = PIXI.Sprite.fromFrame('callie_hud.png');
        this.callie.anchor.x = .5;
        this.callie.position.x = -660 + this.callie.width/2;
        this.callie.position.y = 330;
        this.callie.visible = false;
        this.addChild(this.callie);

        this.peck = PIXI.Sprite.fromImage(ASSET_URL + "img/game/peck_hud.png");
        this.peck.x = 320;
        this.peck.y = 330;
        this.peck.visible = false;
        this.addChild(this.peck);

        this.translations = Cache.getJson('translation');

        var wellDoneString = this.translations.strings.STR_GAMEOVER_WELL_DONE;

        var style = {
            font : '45px '+ Fonts.MainFont,
            fill : '#efb647',
            stroke : '#482219',
            strokeThickness : 6,
            dropShadow : true,
            dropShadowColor : '#482219',
            dropShadowAngle : -0.2,
            dropShadowDistance : 7
        };

        this.wellDoneText = new PIXI.Text(wellDoneString,style);
        this.wellDoneText.anchor.set(0.5);
        this.wellDoneText.position.set(0,405);
        this.wellDoneText.visible = false;
        this.addChild(this.wellDoneText);

        // badge stuff
        this.badge = new PIXI.DisplayObjectContainer();
        this.badge.x = -160;
        this.badge.y = -195;
        this.addChild(this.badge);

        this.starSlot = new PIXI.Sprite.fromFrame("badge_slot.png");
        this.badge.addChild(this.starSlot);

        this.particleLayer = new PIXI.DisplayObjectContainer();
        this.particleLayer.x = Math.abs(this.badge.x);
        this.particleLayer.y = Math.abs(this.badge.y);
        this.badge.addChild(this.particleLayer);

        this.particleManager = new LoaderParticles(this.particleLayer);
        this.particleManager.registerParticle(GameOverStars, 0);

        this.sunburstFg = new PIXI.Sprite.fromFrame("sunburst_fg.png");
        this.sunburstFg.anchor.set(0.5);
        this.sunburstFg.scale.set(3);
        this.sunburstFg.position.x = this.starSlot.width/2;
        this.sunburstFg.position.y = this.starSlot.height/2;
        this.sunburstFg.visible = false;
        this.badge.addChild(this.sunburstFg);

        if(Device.instance.blendModeFriendly)
        {
            this.sunburstBg.blendMode = PIXI.blendModes.ADD;
            this.sunburstFg.blendMode = PIXI.blendModes.ADD;
        }

        var urls = [

            "badge_piece_01.png",
            "badge_piece_03.png",
            "badge_piece_02.png",
        ];

        for (var i = 0; i < 3; i++)
        {
            var star = new PIXI.Sprite.fromFrame(urls[i]);
                star.alpha = 0;

            this.badge.addChild(star);
            this.stars.push(star);
        };

        GameSaveManager.instance.onReset.add(this.resetResults, this);

        this.stars[0].x = -36;
        this.stars[0].y = -35;

        this.stars[1].x = 15;
        this.stars[1].y = 175;

        this.stars[2].x = 164;
        this.stars[2].y = -35;

    };

    GameoverScreen.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * Event for when the screen is shown
     */
    GameoverScreen.prototype.onShow = function()
    {
        var gameDetail = this.app.currentGameScreen.game;

        this.restartButton.onPress.add(this.onPress, this);
        this.nextButton.onPress.add(this.onPress, this);

        SoundManager.sfx.play('gameover');
    };

    GameoverScreen.prototype.onShown = function()
    {
        this.starCount = 0;
        this.bringStarsIn();
    };

    GameoverScreen.prototype.tweenCallieAndPeck = function()
    {
        this.callie.visible = true;


        // callie tween !
        this.callie.position.x = this.finished ? -470 : -410;
        this.callie.position.y = 0;


        // Sonic One tween ! 
        TweenLite.to(this.callie.position,0.3,
        {
            y : this.finished ? -30 : -60,
            onComplete : function () {

                TweenLite.to(this.callie.position,0.5,
                {   
                    y : this.finished ? -20 : -50
                });
            }.bind(this)

        });

        TweenLite.to(this.callie.position,0.8,
        {   
            x : this.finished ? -440 : -490,
            ease : Quart.easeOut
        });


        this.peck.visible = true;

        // Peck tween !
        this.peck.position.x -= 250;
        this.peck.position.y += 50;

        // Sonic One tween ! 
        TweenLite.to(this.peck.position,0.3,
        {
            y : -60,
            onComplete : function () {

                TweenLite.to(this.peck.position,0.5,
                {   
                    y : -50
                });
            }.bind(this)

        });

        TweenLite.to(this.peck.position,0.8,
        {   
            x : '+=250',
            ease : Quart.easeOut
        });
        

    };

    /**
     * Bring in the stars
     */
    GameoverScreen.prototype.bringStarsIn = function () 
    {


        var save = GameSaveManager.instance.save;

        this.app.flash.flash(0.1, 1.5);

        this.sunburstBg.visible = true;

        // regarder s'il y a des diférences pour savoir la nouvelle étoile à mettre
        var star = null;

        if(this.levelCompletes[0] != save.levelStates[0])
        {
            star = this.stars[0];
        }
        else if(this.levelCompletes[1] != save.levelStates[1])
        {
            star = this.stars[1];
        }
        else if(this.levelCompletes[2] != save.levelStates[2])
        {
            star = this.stars[2];
        }

        // updates local array
        this.levelCompletes[0] = save.levelStates[0];
        this.levelCompletes[1] = save.levelStates[1];
        this.levelCompletes[2] = save.levelStates[2];
        this.levelCompletes[3] = save.levelStates[3];
        
        if(this.levelCompletes[0] && this.levelCompletes[1] && this.levelCompletes[2])
        {
            // this.callie.position.set(-360, 50);

            var callieHappy = PIXI.Texture.fromFrame("callieGameComplete.png");
            this.callie.setTexture(callieHappy);
            this.callie.scale.x = -1;

            TweenLite.delayedCall(0.15,this.wellDone,[],this);
            this.finished = true;
        }
        
        if(star && !this.levelCompletes[3])
        {
            star.scale.set(3);
            star.rotation = (Math.random() - 0.5);

            var delay = 0.4;

            TweenLite.to(star.scale, 0.4, 
            {
                x : 1, 
                y : 1, 
                ease : Bounce.easeOut, 
                delay : delay,
                onComplete : function () {
                    SoundManager.sfx.play('starPiece');

                    if(!(Device.instance.iPad && !window.WEBGL))
                    {
                        this.particleManager.addParticle(0 ,0 , 0);
                    }
                }.bind(this)
            });

            TweenLite.to(star, 0.8, 
            {
                rotation : 0, 
                ease : Bounce.easeOut, 
                delay : delay
            });

            TweenLite.to(star, 0.1, 
            {
                alpha : 1, 
                ease : Sine.easeOut, 
                delay : delay
            });

            TweenLite.delayedCall( 0.4 + 0.15, this.pushDown.bind(this));
        }

        this.tweenCallieAndPeck();

    };
    
    GameoverScreen.prototype.resetResults = function()
    {
        this.finished = false;
        this.callie.position.set(-680, 360);
        this.sunburstFg.visible = false;
        this.wellDoneText.visible = false;
        
        var callieNormal = PIXI.Texture.fromFrame("callie_hud.png");
        this.callie.setTexture(callieNormal);
        this.callie.scale.x = 1;

        this.levelCompletes = [0, 0, 0];

        for (var i = 0; i < this.stars.length; i++) {
            this.stars[i].scale.set(3);
            this.stars[i].alpha = 0;
        };
    }

    /**
     * Push down modifier
     */
    GameoverScreen.prototype.pushDown = function()
    {
        this.scale.x -= 0.1;
        this.rotation += 0.01;
    };

    /**
     * Do a full-screen flash and show the animation
     * @return {[type]} [description]
     */
    GameoverScreen.prototype.wellDone = function () 
    {    
        this.app.flash.flash(0.1, 1.4);
        this.showBadgeCompleteAnim();   
    };

    /**
     * When the badge is complete
     * 
     */
    GameoverScreen.prototype.showBadgeCompleteAnim = function () 
    {
        this.sunburstFg.visible = true;

        if(!(Device.instance.iPad && !window.WEBGL))
        {
            this.particleManager.addParticle(0 ,0 , 0);
        }

        this.wellDoneText.visible = true;
    };

    /**
     * Update loop for animations etc.
     */
    GameoverScreen.prototype.updateTransform = function()
    {
        if(!this.visible) return;

        this.scale.x += ( 1 - this.scale.x ) * 0.4;
        this.rotation += ( 0 - this.rotation ) * 0.4;
        this.scale.y = this.scale.x;

        this.sunburstBg.rotation += 0.005;
        this.sunburstFg.rotation -= 0.005;

        if(this.isComplete())
        {
            this.completeFrame += 1 * Ticker.instance.deltaTime;

            if(this.completeFrame > this.completeStarTimeOut)
            {

                this.particleManager.addParticle(0 ,0 , 0);

                this.completeFrame = 0;
            }
        }
        this.particleManager.update();

        PIXI.DisplayObjectContainer.prototype.updateTransform.call(this);
    };

    /**
     * Check whether whole story is complete
     * @return {Boolean}
     */
    GameoverScreen.prototype.isComplete = function()
    {
        return this.levelCompletes[0] && this.levelCompletes[1] && this.levelCompletes[2];
    };

    /**
     * Callback function for when a button is pressed
     * @param  {object} bt : The pressed button
     */
    GameoverScreen.prototype.onPress = function(bt)
    {
        if(bt === this.restartButton)
        {
            // Restart!
            this.callie.visible = false;
            this.peck.visible = false;
            this.app.overlayManager.dropAndRestart();
            this.app.screenManager.gotoScreen(this.app.currentGameScreen,false,true);
        }
        else if(bt === this.nextButton)
        {
            var nextLevel = this.app.nextIncompleteLevel();

            if(!nextLevel)
            {
                // this.app.nextSegment();
                this.app.jumpToSegment(8);
            }
            else
            {
                this.app.jumpToSegment(1);
                // var nextMusic = this.app.gameSegments[nextLevel].music;
                // MusicManager.play(nextMusic);
                // this.app.jumpToSegment(nextLevel);   
            }

            // go to next segment !
            this.callie.visible = false;
            this.peck.visible = false;
            this.app.overlayManager.dropAndHideBlack();
        }
        
        this.restartButton.onPress.remove(this.onPress, this);
        this.nextButton.onPress.remove(this.onPress, this);
    };

    /** 
     * Resize this screen
     * @param  {Number} w : Width
     * @param  {Number} h : Height
     */
    GameoverScreen.prototype.resize = function(w, h)
    {
        this.w = w;
        this.h = h;

        this.x = w * 0.5;
        this.y = h * 0.5;
    };

    /**
     * Export...
     */
    module.exports = GameoverScreen;
    
});
define('com/sc/app/overlay/screens/DifficultySelect',['require','exports','module','PIXI','signals','com/fido/sound/SoundManager','com/fido/utils/Utils','com/sc/app/buttons/SCButton','com/sc/Consts','com/sc/app/system/GameSaveManager','com/fido/loader/Cache','libs/gameConfig/gameTracking'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Signal          = require("signals");
    var SoundManager    = require("com/fido/sound/SoundManager");
    var Utils           = require("com/fido/utils/Utils")
    var SCButton        = require("com/sc/app/buttons/SCButton");
    var Consts          = require('com/sc/Consts');
    var GameSaveManager = require('com/sc/app/system/GameSaveManager');
    var Cache           = require('com/fido/loader/Cache');
    var DisneyTracker   = require('libs/gameConfig/gameTracking');

    /** 
     * Difficulty select screen.
     * @param {object} app [SCApp]
     */
    var DifficultySelect = function(app)
    {
        PIXI.DisplayObjectContainer.call(this);

        this.app = app;

        this.alpha = 0;
        this.hasClose = false;

        this.onSelectDifficulty = new Signal();
        this.onSelect = new Signal();

        this.frame = new PIXI.Sprite.fromFrame("box_overlay.png");
        this.frame.position.set(-this.frame.width * 0.5, -this.frame.height * 0.5);


        this.easyButton = new SCButton.middleBlue("icon_normal.png",false);
        this.easyButton.view.position.set(this.frame.width * 0.35, this.frame.height * 0.45);
        this.easyButton.onPress.add(this.onPress,this);
        this.easyButton.needsOffsetForFire = true;

        this.hardButton = new SCButton.middleBlue("icon_hard.png",false);
        this.hardButton.view.position.set(this.frame.width * 0.65, this.frame.height * 0.45);
        this.hardButton.onPress.add(this.onPress,this);
        this.hardButton.needsOffsetForFire = true;

        this.translations = Cache.getJson('translation');


        var easySting = this.translations.strings.STR_DIFFICULTY_EASY;
        var hardString = this.translations.strings.STR_DIFFICULTY_HARD;

        // size: 32px
        // col: #efb647
        // outer stroke: 4px stroke col: #482219
        // Dropshadow: #482219 100% alpha 7px distance down

        var style = {
            font : '32px '+ Fonts.MainFont,
            fill : '#efb647',
            stroke : '#482219',
            strokeThickness : 6,
            dropShadow : true,
            dropShadowColor : '#482219',
            dropShadowAngle : -0.2,
            dropShadowDistance : 7
        };


        var maxWidth = 250; // maxWidth is the max space available

        this.easyText = new PIXI.Text(easySting,style);
        this.easyText.position.x = this.easyButton.view.position.x + 5;
        this.easyText.position.y = this.easyButton.view.position.y + 70;
        this.easyText.anchor.x = 0.5;

        var goodScale = (maxWidth/this.easyText.width);

        goodScale = Math.min(1,goodScale);

        this.easyText.scale.set(goodScale);

        this.hardText = new PIXI.Text(hardString,style);
        this.hardText.position.x = this.hardButton.view.position.x + 10;
        this.hardText.position.y = this.hardButton.view.position.y + 70;
        this.hardText.anchor.x = 0.5;

        this.hardText.scale.set(goodScale);
        

        this.addChild(this.frame);
        this.frame.addChild(this.easyButton.view);
        this.frame.addChild(this.hardButton.view);
        this.frame.addChild(this.easyText);
        this.frame.addChild(this.hardText);


    };

    DifficultySelect.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * Show the difficulty select
     */
    DifficultySelect.prototype.onShow = function()
    {
        this.easyButton.view.scale.set(0);
        this.hardButton.view.scale.set(0);

        TweenLite.to(this.easyButton.view.scale, 0.2, 
        {
            x : this.easyButton.defaultScale,
            y : this.easyButton.defaultScale,
            ease : Elastic.easeOut
        });

        TweenLite.to(this.hardButton.view.scale, 0.2, 
        {
            x : this.hardButton.defaultScale,
            y : this.hardButton.defaultScale,
            ease : Elastic.easeOut,
            onComplete : this.showText,
            onCompleteScope : this
        });


    };

    /** 
     * Resize this screen
     * @param  {[Number]} w : Width
     * @param  {[Number]} h : Height
     */
    DifficultySelect.prototype.showText = function()
    {
        this.easyText.visible = true;
        this.hardText.visible = true;
    };

    /**
     * Callback function for when a button is pressed
     * @param  {object} bt : The pressed button
     */
    DifficultySelect.prototype.onPress = function(bt)
    {

        if(bt === this.easyButton)
        {
            GameSaveManager.instance.setDifficulty(0);
            if(this.app.currentGameScreen.game.changeMode)
            {
                this.app.currentGameScreen.game.changeMode(Modes.Easy);
            }

            DisneyTracker.trackAction("difficulty_chosen", Modes.Easy);
        }

        else if(bt === this.hardButton)
        {
            GameSaveManager.instance.setDifficulty(1);
            if(this.app.currentGameScreen.game.changeMode)
            {
                this.app.currentGameScreen.game.changeMode(Modes.Hard);
            }

            DisneyTracker.trackAction("difficulty_chosen", Modes.Hard); 
        }
        
        this.onSelectDifficulty.dispatch();
    };

    /** 
     * Resize this screen
     * @param  {Number} w : Width
     * @param  {Number} h : Height
     */
    DifficultySelect.prototype.resize = function(w, h)
    {
        this.position.x = w * 0.5;
        this.position.y = h * 0.5;
    };

    /**
     * Export...
     */
    module.exports = DifficultySelect;

});
define('com/fido/physics/SimpleBouncer',['require','exports','module'],function (require, exports, module) {

	/**
	 * @author josetorrado
	 */
	 
	var SimpleBouncer =  function()
	{
		this.x = -50;
		this.dx = 0;
	
		this.floor = 0;
		this.bounce = 1 ;
		this.gravity = 1;
		
		this.max = 30;
	}


		// P U B L I C ---------------------------------------------------//
		
	SimpleBouncer.prototype.update = function()
	{
		this.dx+=this.gravity;
		
		if(this.dx < -this.max)this.dx = -this.max;
		if(this.dx > this.max)this.dx = this.max;

		this.x+=this.dx; 
		
		if(this.x > this.floor)
		{
			this.x = this.floor;
			this.dx *= -this.bounce;
			return true;
		}

		return false;
	}

	SimpleBouncer.prototype.reset = function() 
	{
		this.x = 0;
		this.dx = -10;
		this.floor = 0;
	}


	module.exports = SimpleBouncer;

});


define('com/fido/app/transitions/DropInTransition',['require','exports','module','com/fido/physics/SimpleBouncer','com/fido/system/Ticker','com/fido/sound/SoundManager'],function (require, exports, module) {

    var SimpleBouncer       = require("com/fido/physics/SimpleBouncer");
    var Ticker              = require("com/fido/system/Ticker");
    var SoundManager        = require('com/fido/sound/SoundManager');

    var DropInTransition = function()
    {
        this.bouncer = new SimpleBouncer();
        this.bouncer.bounce = 0.6;
        this.bouncer.gravity = 3;
        this.bounceCount = 0;
    }

    DropInTransition.constructor = DropInTransition;

    DropInTransition.prototype.begin = function(screenManager, currentScreen, nextScreen)
    {
        this.screenManager = screenManager;

        this.currentScreen = currentScreen;
        this.nextScreen = nextScreen;

        if(this.currentScreen)
        {
            if(this.currentScreen.onHide) this.currentScreen.onHide();

            var delay= .4;
            TweenLite.to( this.screenManager.container, .4 * delay, 
            {
                rotation : -10 * PIXI.DEG_TO_RAD,
                ease: Ease.easeOut
            });
            
            TweenLite.to( this.screenManager.container, 1 * delay, 
            {
                rotation : 5 * PIXI.DEG_TO_RAD,
                delay:.4 * delay,
                ease: Sine.easeIn
            });

            TweenLite.to( this.screenManager.container.position, 0.5 * delay, 
            {
                y: this.screenManager.container.position.y + 10,
                ease: Sine.easeOut
            });    

            TweenLite.to( this.screenManager.container.position, 1 * delay, 
            {
                y: 1000,
                delay: 0.4 * delay,
                ease: Quart.easeIn,
                onComplete: this.onFadeout.bind(this)
            });
        }
        else
        {
            this.onFadeout();
        }

        Ticker.instance.add(this.update, this);
    }   

    DropInTransition.prototype.onFadeout = function()
    {
        //console.log("begin")
        this.screenManager.container.position.y = 0;
        this.screenManager.container.rotation = 0;
        
        if(this.currentScreen)
        {
            if(this.currentScreen.onHidden)this.currentScreen.onHidden();
            this.screenManager.container.removeChild(this.currentScreen);
            this.currentScreen.alpha = 1;
        }
        
        this.nextScreen.alpha = 1;
        this.nextScreen.rotation = 0.05;

        if(this.nextScreen.onShow)this.nextScreen.onShow();
        if(this.nextScreen.resize)this.nextScreen.resize(this.screenManager.w, this.screenManager.h);

    //    TweenLite.to(this.nextScreen, 0.4, {alpha:1, onComplete:this.onFadein.bind(this)});
        this.bouncer.bounce = 0.6;
        this.bouncer.x = -600;
        this.nextScreen.pivot.y = -this.bouncer.x;
        this.bounceCount = 0;

    //    this.nextScreen.pivot.y = this.bouncer.x;

       // TweenLite.to(this.nextScreen.pivot, 1.0, {y:0, ease:Elastic.easeOut, onComplete:this.onFadein.bind(this)})

        this.screenManager.container.addChild(this.nextScreen);
    }

    DropInTransition.prototype.onFadein = function()
    {   
        if(this.nextScreen.onShown)this.nextScreen.onShown();
        this.screenManager.onTransitionComplete();
    }

    DropInTransition.prototype.update = function()
    {
        var hit = this.bouncer.update();

        this.nextScreen.pivot.y = -this.bouncer.x;

        if(hit)
        {
            this.bounceCount++;
            this.nextScreen.rotation *= -0.6;//(Math.random() - 0.5) * 0.1;

            if(this.played){

            }

            if(this.bounceCount === 3)
            {
                this.bouncer.bounce = 0;
                this.nextScreen.rotation = 0;

                Ticker.instance.remove(this.update, this);
                this.nextScreen.pivot.y = 0;
                this.nextScreen.rotation = 0;

                this.onFadein();
            }

        }
        

        
    }


    DropInTransition.prototype.resize = function(w, h)
    {
        this.w = w;
        this.h = h;
    }

    module.exports = DropInTransition;


});

define('com/sc/app/overlay/screens/TutorialScreen',['require','exports','module','PIXI','com/fido/loader/Cache','com/sc/app/buttons/SCButton','com/fido/system/Ticker','signals','com/sc/app/system/GameSaveManager','com/fido/system/Device','com/fido/swfy/Swfy','com/fido/app/AssetManager','com/sc/app/Animations','com/fido/sound/SoundManager','com/fido/sound/MusicManager','libs/gameConfig/gameTracking'],function (require, exports, module) 
{
    var PIXI                = require("PIXI");
    var Cache               = require('com/fido/loader/Cache');
    var SCButton            = require('com/sc/app/buttons/SCButton');
    var Ticker              = require('com/fido/system/Ticker');
    var Signal              = require('signals');
    var GameSaveManager     = require('com/sc/app/system/GameSaveManager');
    var Device              = require('com/fido/system/Device');
    var Swfy                = require('com/fido/swfy/Swfy');
    var AssetManager        = require('com/fido/app/AssetManager');
    var Animations          = require("com/sc/app/Animations");
    var SoundManager        = require('com/fido/sound/SoundManager');
    var MusicManager        = require('com/fido/sound/MusicManager');
    var DisneyTracker       = require('libs/gameConfig/gameTracking');
    /**
     * The tutorial screen for SC
     * @param {[Object]} app : Instance of SCApp
     */
    var TutorialScreen = function(app)
    {
        PIXI.DisplayObjectContainer.call(this);

        this.storeInstruction = "gameInstructStore";
        this.smoothieInstruction = "gameInstructSmoothie";
        this.cowInstruction = "gameInstructCows";
        this.chaseInstruction = "gameInstructCowsChase";

        
        // this.smoothieInstructionData = this.loadAnimation(this.smoothieInstruction);
        // this.cowInstructionData = this.loadAnimation(this.cowInstruction);

        this.checkDevice = new Device();
        this.isMobile = this.checkDevice.isMobile || this.checkDevice.iPad;
        this.app = app;
        this.hasClose = true;
        this.isAnimating = false;
        this.currentIndex = 0;
        this.counter = 0;
        this.stopBouncing = false;
        this.modes = 
        { 
            normal : 0, 
            pause : 1
        };

        this.dimensions = 
        {
            width : 1156,
            height : 640
        };

        this.images = [];
        this.onTutorialFinished = new Signal();

        this.dataGames = GameSaveManager.instance.save;

        this.container = new PIXI.DisplayObjectContainer();
        this.container.position.set(this.dimensions.width * 0.5, this.dimensions.height * 0.5);

        this.frame = new PIXI.Sprite.fromFrame("box_overlay.png");
        this.frame.position.set(-this.frame.width * 0.5, -this.frame.height * 0.5);

        this.buttonResume = new SCButton.blueButton("icon_play_small.png");
        this.buttonResume.view.position.set(this.frame.width - (this.buttonResume.view.width * 0.5) - 110 , this.frame.height - (this.buttonResume.view.height * 0.5) - 15);
        this.buttonResume.onPress.add(this.onPress, this);
        this.buttonResume.onHover.add(this.onButtonOver, this);
        this.buttonResume.onMouseOut.add(this.onButtonOut, this);
        this.buttonResume.needsOffsetForFire = true;



        this.buttonRestart = new SCButton.blueButton("icon_replay.png");
        this.buttonRestart.view.position.set(this.buttonRestart.view.width/2 + 110, this.frame.height - this.buttonRestart.view.height/2- 15);
        this.buttonRestart.onPress.add(this.onPress, this);
        this.buttonRestart.onHover.add(this.onButtonOver, this);
        this.buttonRestart.onMouseOut.add(this.onButtonOut, this);
        this.buttonRestart.needsOffsetForFire = true;

        this.buttonMap = new SCButton.blueButton("icon_home.png");
        this.buttonMap.view.anchor.set(.5, .5);
        this.buttonMap.view.position.set(this.frame.width/2, this.frame.height - this.buttonMap.view.height/2- 15);
        this.buttonMap.onPress.add(this.onPress, this);
        this.buttonMap.onHover.add(this.onButtonOver, this);
        this.buttonMap.onMouseOut.add(this.onButtonOut, this);
        this.buttonMap.needsOffsetForFire = true;

        if(this.app.config.FLIP_LANGUAGE === "true")
        {

            this.buttonRestart.view.position.set(this.frame.width - (this.buttonResume.view.width * 0.5) - 110 , this.frame.height - (this.buttonResume.view.height * 0.5) - 15);

            this.buttonResume.icon.scale.x *= -1;
            this.buttonResume.icon.x -= 21;
            this.buttonResume.view.position.set(this.buttonRestart.view.width/2 + 110, this.frame.height - this.buttonRestart.view.height/2- 15);
        }


        this.swfy = new Swfy();
        this.swfy.position = new PIXI.Point(120, 60);

        this.frame.addChild(this.swfy);
        this.frame.addChild(this.buttonRestart.view);
        this.frame.addChild(this.buttonResume.view);
        this.frame.addChild(this.buttonMap.view);

        this.container.addChild(this.frame);
        this.addChild(this.container);
    }

    TutorialScreen.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * [onPress description]
     * @param  {Button} bt [description]
     * 
     */
    TutorialScreen.prototype.onPress = function(bt)
    {
        AssetManager.displayLoader = true;

        if(bt === this.buttonRestart)
        {
            // restart!
            this.app.overlayManager.dropAndRestart();
            this.app.screenManager.gotoScreen(this.app.currentGameScreen,false,true);
        }
        else  if(bt === this.buttonResume)
        {
            this.app.overlayManager.dropAndHideBlack();
        }
        else  if(bt === this.buttonMap)
        {
            this.app.overlayManager.dropAndGoToMap();
            DisneyTracker.trackAction("game_paused_exit", "game");
        }
        else
        {
            this.app.overlayManager.dropAndHideBlack();   
        }


    };

    /**
     * Set normal mode
     */
    TutorialScreen.prototype.setNormalMode = function()
    {
        this.hasClose = true;
        this.app.overlayManager.onClosePressed.addOnce(this.onFinished,this);

        this.buttonRestart.view.alpha = 0;
        this.buttonResume.view.alpha = 0;
        this.buttonMap.view.alpha = 0;

        this.buttonRestart.view.interactive = false;
        this.buttonResume.view.interactive = false;
        this.buttonMap.view.interactive = false;

        this.mode = this.modes.normal;

        this.startTutorial();
    };

    /**
     * Set us into pause mode
     */
    TutorialScreen.prototype.setPauseMode = function()
    {
        this.hasClose = true;
        this.app.overlayManager.onClosePressed.addOnce(this.onPress,this);

        DisneyTracker.trackAction("game_paused", "game");

        this.buttonRestart.view.alpha = 1;
        this.buttonMap.view.alpha = 1;
        this.buttonResume.view.alpha = 1;

        this.buttonRestart.view.interactive = true;
        this.buttonResume.view.interactive = true;
        this.buttonMap.view.interactive = true;

        this.frame.removeChild(this.buttonRestart.view);
        this.frame.removeChild(this.buttonResume.view);
        this.frame.removeChild(this.buttonMap.view);
        this.frame.addChild(this.buttonRestart.view);
        this.frame.addChild(this.buttonResume.view);
        this.frame.addChild(this.buttonMap.view);
        
        this.mode = this.modes.pause;

        this.startTutorial();
    };

    /**
     * When the mouse hovers over the button
     * @param  {[type]} bt The button in question
     */
    TutorialScreen.prototype.onButtonOver = function(bt)
    {        
        TweenLite.to(bt.view.scale, .2,
        {
            x: bt.defaultScale+.2,
            y: bt.defaultScale+.2,
            ease: Back.easeOut
        })
        
        this.stopBouncing = true;
    };

    /**
     * Event for when the mouse exists the button
     * @param  {[object]} bt : The button in question
     */
    TutorialScreen.prototype.onButtonOut = function(bt)
    {        
        TweenLite.to(bt.view.scale, .2,
        {
            x: bt.defaultScale,
            y: bt.defaultScale,
            ease: Back.easeOut
        })
        
        this.stopBouncing = false;
    };

    /**
     * Event to fire when display is finished
     */
    TutorialScreen.prototype.onFinished = function()
    {
        this.swfy.onComplete.remove(this.onAnimationFinished, this);
        this.onTutorialFinished.dispatch();
        this.app.overlayManager.dropAndHideBlack();
        AssetManager.displayLoader = true;
    };

    /**
     * Start the tutorial
     */
    TutorialScreen.prototype.startTutorial = function()
    {
        this.dataGames = GameSaveManager.instance.save;

        if(this.dataGames.currentTutorialDisplayed !== "outro")
        {
            var animationSlide = Cache.getJson("tutorials")[this.dataGames.currentTutorialDisplayed][this.dataGames.difficulty][this.isMobile ? "mobile":"desktop"];
            this.prepareSlide(animationSlide);
        }
        // ++this.currentIndex;
    };

    /**
     * Prepare the screens slides
     * @param  {[object]} slide : The slide to prep
     */
    TutorialScreen.prototype.prepareSlide = function(slide)
    {
        this.instruction = this.loadAnimation(this[slide]);
    };

    /**
     * Callback function from onAssetsLoaded
     */
    TutorialScreen.prototype.startAnimation = function()
    {
            this.swfy.setAnimation(this.instruction.data);
            this.swfy.reset();
    };

   /* -------------------------- ANIMATIONS METHOD --------------------- */


    TutorialScreen.prototype.onAnimationFinished = function()
    {
        this.swfy.reset();
    }

    TutorialScreen.prototype.loadAnimation = function(id)
    {
        AssetManager.displayLoader = false;
        var animationData = Animations[id];

        if(!AssetManager.doesGroupExist(id))
        {
            var assetsRequired = this.getAssetsForAnimation(animationData);
            AssetManager.registerGroup(id, assetsRequired);
        }

        AssetManager.onAssetsLoaded.addOnce(this.onAssetsLoaded, this);
        AssetManager.activateGroups([id]);

        return animationData;
    }

    TutorialScreen.prototype.onAssetsLoaded = function()
    {
        this.startAnimation();
    }

    TutorialScreen.prototype.getAssetsForAnimation = function(animation)
    {
        var assets = animation.spriteSheets.slice();

        for(var i in animation.data)
        {
            var mc = animation.data[i];
            if(mc.isImage)
            {
                assets.push(ASSET_URL + mc.view);
            }
        }    

        return assets;
    }

    /** 
     * Resize this screen
     * @param  {[Number]} w : Width
     * @param  {[Number]} h : Height
     */
    
    TutorialScreen.prototype.resize = function(w,h)
    {
        this.w = w;
        this.h = h;
    };
    
    TutorialScreen.prototype.onShow = function()
    {
        this.swfy.onComplete.add(this.onAnimationFinished, this);
    }
    /**
     * Export...
     */
    module.exports = TutorialScreen;

});
// TODO

define('com/sc/app/overlay/OverlayManager',['require','exports','module','PIXI','signals','com/fido/app/ScreenManager','./screens/GameoverScreen','./screens/DifficultySelect','com/fido/app/transitions/DropInTransition','./screens/TutorialScreen','com/fido/utils/FrameWait','com/sc/app/buttons/SCButton','com/fido/sound/SoundManager'],function (require, exports, module) 
{
    var PIXI                = require("PIXI");
    var Signal              = require('signals');
    var ScreenManager       = require('com/fido/app/ScreenManager');
    var GameoverScreen      = require('./screens/GameoverScreen');
    var DifficultyScreen    = require('./screens/DifficultySelect');
    var DropInTransition    = require('com/fido/app/transitions/DropInTransition');
    var TutorialScreen      = require('./screens/TutorialScreen');
    var Wait                = require("com/fido/utils/FrameWait");
    var SCButton            = require('com/sc/app/buttons/SCButton');
    var SoundManager        = require('com/fido/sound/SoundManager');

    var OverlayManager = function(app)
    {
        this.app = app;

        this.view = new PIXI.DisplayObjectContainer();

        ScreenManager.call( this );
        
        this.defaultTransition = new DropInTransition();  

        this.tutorialScreen     = new TutorialScreen(app);
        this.gameoverScreen     = new GameoverScreen(app);
        this.difficultyScreen   = new DifficultyScreen(app);

        this.gameoverScreen.hasClose = false;

        this.addScreen(this.tutorialScreen,     "tutorial");
        this.addScreen(this.gameoverScreen,     "gameover");
        this.addScreen(this.difficultyScreen,   "difficulty");

        this.addScreen(new PIXI.DisplayObjectContainer(), "empty");

        this.onShow = new Signal();
        this.onHide = new Signal();
        this.onClosePressed = new Signal();

        this.black = new PIXI.Graphics().beginFill(0x000000).drawRect(0, 0, 100, 100);
        this.black.alpha = 0;
        this.black.interactive = true;
        this.black.hitArea = new PIXI.Rectangle(0, 0, 10000, 10000);

        this.view.visible = false;

        this.closeButton = new SCButton.redButton("icon_close.png");
        this.closeButton.view.position = new PIXI.Point(0, -200);
        this.closeButton.view.scale.set(0);
        this.closeButton.onPress.add(this.closeButtonPressed, this);

        this.view.addChild(this.black);
        this.view.addChild(this.container);
        this.view.addChild(this.closeButton.view);

        this.app.screenManager.container.filterArea = new PIXI.Rectangle(0, 0, 10000, 10000);
    }

    OverlayManager.prototype = Object.create( ScreenManager.prototype );

    OverlayManager.prototype.goBack = function()
    {
        this.history.pop();
        var prev = this.history.pop();

        if(prev)
        {
            // this.gotoScreen(prev);   
        }    
        else
        {
            this.drop();
        }
    } 

    OverlayManager.prototype.closeButtonPressed = function()
    {
        this.onClosePressed.dispatch();
    }

    OverlayManager.prototype.show = function(screenId)
    {
        this.app.topMenu.hideButtons();
        this.closeButton.view.scale.set(0);
        this.history = [];



        //this.hideTopMenu();
        this.gotoScreenByID(screenId, true);
        this.onShow.dispatch();

        this.view.visible = true;
        this.black.visible = true;
        // this.black.alpha = 0.85;
        TweenLite.to(this.black, .4, {
            alpha: 0.65,
            ease: Ease.easeOut
        });
        this.closeButton.view.alpha = 1;
        
    }

    OverlayManager.prototype.hideTopMenu = function () {
        var top = this.app.topMenu;

        for (var i = 0; i < top.children.length; i++) {

            var btn = top.children[i];

            var scale = btn.scale.clone();

            TweenLite.to(btn.scale,0.6,
            {

                x : (scale.x * 1.1),
                y : (scale.y * 1.1),
                ease : Bounce.easeOut
            });

            TweenLite.to(btn.scale,0.6,
            {

                x : (scale.x * 0.9),
                y : (scale.y * 0.9),
                delay : 0.6,
                ease : Bounce.easeIn
            });

            TweenLite.to(btn,1.2,
            {

                alpha : 0,
                delay : 0.4
            });

        }
    }

    OverlayManager.prototype.manageCloseButton = function()
    {
        if(this.app.overlayManager.currentScreen.hasClose)
        {
            this.closeButton.scaleHoverEnabled = false;
            this.closeButton.view.alpha = 1;
            this.closeButton.view.interactive = true;
             TweenLite.to(this.closeButton.view.scale, 1, {
                x : this.closeButton.defaultScale, 
                y : this.closeButton.defaultScale, 
                delay: 1,
                ease : Elastic.easeOut,
                onComplete: function(){
                    this.closeButton.scaleHoverEnabled = true;
                }.bind(this)
            });
        }
        else
        {
            this.closeButton.view.alpha = 0;
            this.closeButton.view.interactive = false;

            this.closeButton.scaleHoverEnabled = false;
            TweenLite.to(this.closeButton.view.scale, 0.3, {
                x : 0, 
                y : 0, 
                ease : Back.easeOut
            });
        }
    }

    OverlayManager.prototype.gotoScreen = function(screen)
    {
        ScreenManager.prototype.gotoScreen.call(this, screen);
        this.manageCloseButton();
    }

    OverlayManager.prototype.drop = function(){

        this.history = [];
        this.closeButton.view.interactive = false;
        this.gotoScreenByID("empty");
        this.onHide.dispatch();

        SoundManager.sfx.play('overlayHide');
    }

    OverlayManager.prototype.dropAndRestart = function(){
        this.dropAndHideBlack();
        TweenLite.delayedCall(0.2,this.restartGame,[],this);
    }

    OverlayManager.prototype.dropAndGoToMap = function(){
        this.dropAndHideBlack();
        TweenLite.delayedCall(0.2,this.goToMap,[],this);
    }

    OverlayManager.prototype.restartGame = function() {
        
        var config = {
            showTutorial : false
        };
        // doesn't work anymore
        //this.app.currentGameScreen.game.reset(config);
    };

    OverlayManager.prototype.goToMap = function() {
        this.app.jumpToSegment(1);
    };

    OverlayManager.prototype.dropAndHideBlack = function(){
        this.drop();
        this.app.topMenu.showButtons();
        TweenLite.to(this.black, .2, 
        {
            alpha: 0,
            onComplete:function(){
                this.black.visible = false;
            }.bind(this)
        });
    };

    // OverlayManager.prototype.hide = function()
    // {
    //     this.history = [];
    //     this.closeButton.view.interactive = false;
    //     this.gotoScreenByID("empty");

    //     TweenLite.to(this.closeButton.view.scale, 0.3, {
    //         x : 0, 
    //         y : 0, 
    //         ease : Back.easeOut
    //     });

    //     TweenLite.to(this.view, 0.3, {
    //         alpha : 0, 
    //         onComplete : function()
    //         {
    //             this.view.visible = false;
    //             this.onHide.dispatch();
    //         }.bind(this)
    //     });
    // }

    OverlayManager.prototype.resize = function(w, h)
    {
        this.closeButton.view.x = w/2 + 340;
        this.closeButton.view.y = h/2 - 205;

        this.black.scale.set(w / 100, h / 100);
        ScreenManager.prototype.resize.call(this, w, h);
    }

    OverlayManager.prototype.onFadeout = function()
    {
        if(this.currentScreen)
        {
            if(this.currentScreen.onHidden)this.currentScreen.onHidden();
            this.container.removeChild(this.currentScreen);
        }
        
        this.currentScreen = this.nextScreen;
        this.currentScreen.alpha = 0;

        if(this.currentScreen.onShow)this.currentScreen.onShow();
        if(this.currentScreen.resize)this.currentScreen.resize(this.w, this.h);

        TweenLite.to(this.currentScreen, 0.4, {alpha:1, onComplete:this.onFadein.bind(this)});

        this.container.addChild(this.currentScreen);
    }

    module.exports = OverlayManager;

});
define('com/sc/games/shared/TimerPool',['require','exports','module','com/fido/system/Ticker'],function (require, exports, module) {

var Ticker          = require('com/fido/system/Ticker');

function TimerPool() {

	this.timers = [];

	Ticker.instance.add(this.update,this);
}

TimerPool.prototype.constuctor = TimerPool;

TimerPool.prototype = {


	add : function(timer) {

		this.timers.push(timer);

	},

	update : function() {

		for (var i = 0,len = this.timers.length; i < len; i++) {

			this.timers[i].update();
		}

	}
}

TimerPool.instance = new TimerPool();

module.exports = TimerPool;



});
define('com/sc/games/shared/Timer',['require','exports','module','signals','./TimerPool','com/fido/system/Ticker'],function (require, exports, module) {


var Signal 			= require('signals');
var TimerPool 		= require('./TimerPool');
var Ticker          = require('com/fido/system/Ticker');

function Timer(value,loop,repeatCount) {

	this.value = value;

	this.loop = loop || false;

	this.repeatCount = repeatCount || 0;

	this.count = 0;

	this.onComplete = new Signal();

	this.completed = false;

	TimerPool.instance.add(this);
}

Timer.prototype.constuctor = Timer;

Timer.Second = 60;

Timer.prototype = {


	update : function() {

		if(this.completed){
			return;
		}
		
		this.count += (1 * Ticker.instance.deltaTime);

		if(this.count > this.value){


			this.onComplete.dispatch();

			if(this.loop){
				this.count = 0;
			}
			else{
				this.completed = true;
			}
			// if(this.repeatCount > 0){
			// 	this.count = 0;

			// 	this.repeatCount--;

			// }
		}

	}

}

module.exports = Timer;

});
define('com/sc/games/store/Item',['require','exports','module','com/fido/physics/Spring','com/fido/game/GameObject','com/fido/utils/Debug','com/fido/system/Device','signals','com/fido/system/Ticker'],function (require, exports, module) {

var Spring 			= require('com/fido/physics/Spring');
var GameObject 		= require('com/fido/game/GameObject');
var Debug 			= require('com/fido/utils/Debug');
var Device 			= require('com/fido/system/Device');
var Signal      	= require('signals');
var Ticker      	= require('com/fido/system/Ticker');

/**
 * Item class
 * @class Item
 */
var Item = function () {

	var view = new PIXI.Sprite.fromFrame("item_hat.png");

	GameObject.call(this,view);

	view.anchor.set(0.5);
	
	view.interactive = true;

	view.mousedown = view.touchstart = this.onDown.bind(this);

	view.mousemove = view.touchmove = this.onMove.bind(this);

	view.mouseup = view.mouseupoutside = view.touchend = view.touchendoutside = this.onUp.bind(this);

	view.scale.set(1);

	this.type = '';

	this.dragging = false;

	this.spring = new Spring();

	this.spring.springiness = 0.1;

	this.offset = new PIXI.Point();

	this.collidesWith = [];

	this.curr = view.scale.x;

	this.physics = false;

	this.velocity = new PIXI.Point();

	this.pendulumGravity = 6;

	this.fallGravity = 1;

	this.original = new PIXI.Point();

	this.target = new PIXI.Point();

	this.bounce = 0.6;

	this.mouse = new PIXI.Point();

	this.onShown = new Signal();

	this.onHidden = new Signal();

	this.onPickedUp = new Signal();

	this.onDropped = new Signal();

	this.isHidden = false;

	this.stuck = false;

	this.dropMarker = new PIXI.Circle(0,0,44);

	this.dragOffset = 20;

	this.dx = 0;

	this.dy = 0;

	this.isInteractive = true;

	this.shadow = PIXI.Sprite.fromFrame("fruit_shadow.png");

	this.shadow.alpha = 0;

	this.g = new PIXI.Graphics();

	return this;

}

Item.prototype.constructor = Item;

Item.prototype = Object.create(GameObject.prototype);

/**
 * 
 * @method init
 * @param {String} url - the url of the frame/image for the Sprite.fromFrame call
 * @param {Array} collidesWith - an array of rectangular objects that collide with this item
 * @param {PIXI.Point} original - the original location of the item when it was first created in order to snap it back there
 * 
 */
Item.prototype.init = function(url,collidesWith,original) {

	var texture = PIXI.Texture.fromFrame(url);

	this.view.setTexture(texture);

	this.position.set(original.x,original.y);

	this.collidesWith = collidesWith;

	this.original.set(original.x,original.y);

	this.target = this.original.clone();

	this.type = url;

	this.view.rotation = 0;

	this.onShown.removeAll();

	this.onHidden.removeAll();

	this.onPickedUp.removeAll();

	this.onDropped.removeAll();

	this.isHidden = false;

	this.isInteractive = true;

	this.view.interactive = true;

	this.show();

	// this.g.clear();

	// this.g.beginFill(0x00ccff,0.5);
	// var bounds = this.view.getBounds();
	// this.g.drawRect(bounds.x,bounds.y,bounds.width,bounds.height);
	// this.g.endFill();

	// this.view.addChild(this.g);

}

Item.prototype.show = function () {
	// dispatch a signal when it is shown
	this.view.alpha = 0;

	TweenLite.to(this.view,1.0,{ alpha : 1, ease : Circ.easeOut,onComplete : this.onShown.dispatch.bind(this)});
}

Item.prototype.hide = function (delay) {
	// dispatch a signal when it is hidden
	TweenLite.to(this.view,1.0,{ alpha : 0, ease : Linear.easeIn,onComplete : this.onHidden.dispatch.bind(this), delay : delay});
	this.isHidden = true;
}


/**
 * @method update 
 * called by the world update
 */
Item.prototype.update = function() {

	this.spring.update();

	this.view.scale.set(1+this.spring.x);

	if(this.physics)
	{
		this.fall();
	}
	if(this.dragging || this.stuck)
	{
		this.pendulum();

		for (var i = 0; i < this.collidesWith.length; i++) {
			this.collidesWith[i].view.startLookingAt(this.view.position.x,this.view.position.y);
		}
	}

	GameObject.prototype.update.call(this);

};

Item.prototype.pendulum = function () {

	this.dx = (this.mouse.x - this.position.x);
	
	if(this.stuck)
	{
		// lift the drag point up a bit 
		this.dragOffset = 55;
	}
	else
	{
		this.dragOffset = 10;
	}


	this.dy = (this.mouse.y - this.dragOffset) - this.position.y;

	this.velocity.x += this.dx * 0.05;
	// make the target Y point a bit higher so it doesn't hang on the finger
	this.velocity.y += this.dy * 0.1;
	this.velocity.y += this.pendulumGravity;

	this.velocity.x *= 0.9;
	this.velocity.y *= 0.8;
	this.position.x += this.velocity.x * Ticker.instance.deltaTime;
	this.position.y += this.velocity.y * Ticker.instance.deltaTime;

	this.view.rotation = Math.atan2(this.dy,this.dx) + Math.PI / 2;
}


Item.prototype.fall = function() {

	var diffX = Math.floor(this.position.x - this.original.x);

	var diffY = Math.floor(this.position.y - this.original.y);

	//console.log('diffY : ', diffY)

	// the item is underneath its original point
	if(diffY > 2){

		TweenLite.to(this.position,0.6, {x : this.original.x, y : this.original.y, ease : Expo.easeOut});

		this.physics = false;
		this.view.rotation = 0;

		this.onDropped.dispatch();

		this.revealShadow();

		return;
	}

	if(Math.abs(diffY) < 1.1 && Math.abs(diffX) < 1.1)
	{

		this.physics = false;
		this.view.rotation = 0;

		//console.log('stopping the physics');

		this.onDropped.dispatch();

		this.revealShadow();

		for (var i = 0; i < this.collidesWith.length; i++) {
			this.collidesWith[i].view.stopLooking();
		}

		return;
	}

	var ease = 0.2;

	if(Math.abs(diffX) > 50)
	{
		// if the diff is more than 50 : 
		// divide the ideal ease (0.2) by that difference
		// (so if the diff is twice as big, divide it by 2, etc...)
		ease = 0.2 / (Math.abs(diffX) / 50);
	}

	this.position.x += (this.original.x - this.position.x) * ease;

	// simple gravity 
	this.velocity.y += this.fallGravity;

  	this.position.y += this.velocity.y * Ticker.instance.deltaTime;

  	// ground collision check to make it bounce a bit
  	if (this.position.y > this.original.y)
  	{

	   	this.position.y = this.original.y;
	   	this.velocity.y *= -this.bounce;
    }

};

/**
 * 
 * @method onMove
 * @param {} data
 * @return 
 */
Item.prototype.onMove = function(data) {

	if(this.dragging || this.stuck){

		this.mouse = data.getLocalPosition(this.view.parent);

	}
};

/**
 * 
 * @method onDown
 * @param {} data
 */
Item.prototype.onDown = function(data) {

	data.originalEvent.preventDefault();

	if(!this.isInteractive){
		return;
	}

	//console.log('on down');

	// var localMouseCoords = data.getLocalPosition(this.view);

	// this.offset.x = localMouseCoords.x * this.view.scale.x;
	// this.offset.y = localMouseCoords.y * this.view.scale.y;

	this.mouse = data.getLocalPosition(this.view.parent);

	this.spring.tx = 0.2;

	// reset the velocity 
	this.velocity.set(0);
	this.physics = false;

    if(Device.instance.desktop){

    	if (this.stuck){

		    //this.stuck = false;
		   // this.dragging = false;
		}
		else{
		    this.stuck = true;
		    this.dragging = true;
		    this.dropMarker.x = this.mouse.x;
		    this.dropMarker.y = this.mouse.y;
		}
    }
    else{
    	this.dragging = true;
    }

    this.hideShadow();

    this.onPickedUp.dispatch(this);

};

/**
 * 
 * @method onUp
 * @param {} data
 * @return 
 */
Item.prototype.onUp = function(data) {

	this.dragging = false;

	if(!this.isInteractive){
		return;
	}

	if(Device.instance.desktop){

		if (this.stuck)
		{

			this.onPickedUp.dispatch(this);

		    //  Outside the drop marker? Then we'll consider this as a drag and reset the stuck state
		    if (!this.dropMarker.contains(this.mouse.x, this.mouse.y)){
		    	//drag 
		        this.stuck = false;
		        this.dragging = false
		    }
		    else{
		    	//sticky piece
		    	this.dragging = true;

		    	console.log('sticky');
		    	
		    	return;
		    }


		    
		}
	}

	this.spring.tx = 0;

	//console.log('up', this.isInteractive)

	for (var i = 0; i < this.collidesWith.length; i++) {

		if(this.intersectsAndCompare(this.collidesWith[i])){

			//console.log('collide !!!');

			this.collidesWith[i].receivedGoodObject(this);

			this.physics = false;

			this.dragging = false;

			this.stuck = false;

			this.view.interactive = false;

			this.onDropped.dispatch();

			return;
				
		}
		else{

			//console.log('physics on')

			this.velocity.y = -10;
			this.physics = true;
			
		}


	}

	

};

// checks this item interesects and its type is the one the customer needs
Item.prototype.intersectsAndCompare = function (customer) {

	if(this.intersects5(customer) && customer.isGoodObject(this)){
		return true;
	}
	else{
		return false;
	}

}

Item.prototype.correctlyDropped = function () {
	
	TweenLite.to(this.view,0.2,
	{
		alpha : 0,
		ease : Cubic.easeIn,
		onComplete : this.dispatchHide.bind(this)
	});

}

Item.prototype.dispatchHide = function () {
	this.onHidden.dispatch(this);
	this.isHidden = true;
	this.view.interactive = false;
	this.view.visible = false;
	this.hideShadow();
}

Item.prototype.revealShadow = function () {
	TweenLite.to(this.shadow,0.5,{alpha : 0.7});
}

Item.prototype.hideShadow = function () {
	TweenLite.to(this.shadow,0.5,{alpha : 0});
}



Item.prototype.intersects5 = function (customer) {

	// view1 has its anchor set to 0.5
	// view 2 is a customer
	var view1 = this.view;

	var result = false;

	for (var i = 0; i < customer.hitAreas.length; i++) {

		var rect = customer.hitAreas[i].clone();

		rect.x *= customer.view.scale.x;
		rect.y *= customer.view.scale.y;
		rect.width *= customer.view.scale.x;
		rect.height *= customer.view.scale.y;

		rect.x += customer.view.x;
		rect.y += customer.view.y;

		if(rect.contains(this.position.x,this.position.y))
		{
			return true;
		}

	}
}

Item.prototype.intersects4 = function (customer) {

	// view1 has its anchor set to 0.5
	// view 2 is a customer
	var view1 = this.view;

	var rect = customer.hitArea.clone();

	rect.x *= customer.view.scale.x;
	rect.y *= customer.view.scale.y;
	rect.width *= customer.view.scale.x;
	rect.height *= customer.view.scale.y;

	rect.x += customer.view.x;
	rect.y += customer.view.y;

	return rect.contains(this.position.x,this.position.y);
}



Item.prototype.intersects3 = function (customer) {

	// view1 has its anchor set to 0.5
	// view 2 is a customer
	var view1 = this.view;

	var rect = customer.hitArea.clone();

	// the worldTransform doesn't take scale into account,
	// the rect is a child of the customer
	rect.x *= customer.view.scale.x;
	rect.y *= customer.view.scale.y;
	rect.width *= customer.view.scale.x;
	rect.height *= customer.view.scale.y;

	rect.x += customer.view.x;
	rect.y += customer.view.y;
	

  	var view1Right = view1.position.x + view1.width/2;

  	var view1Left = view1.position.x - view1.width/2;

  	var view1Top = view1.position.y - view1.height/2;

  	var view1Bottom = view1.position.y + view1.height/2;


  	var rectRight = rect.x + rect.width;

  	var rectLeft = rect.x;

  	var rectTop = rect.y;

  	var rectBottom = rect.y + rect.height;

  	if (view1Right < rectLeft || 
  	              view1Bottom < rectTop || 
  	              view1Left > rectRight || 
  	              view1Top > rectBottom)
  	{
  	      return false;
  	}
    return true;
}

module.exports = Item;

});
define('com/sc/games/store/UrlManager',['require','exports','module','com/fido/utils/Math2','./Item'],function (require, exports, module) {

var Math2             = require('com/fido/utils/Math2');
var Item            = require('./Item');

var UrlManager = {

	
	urls : [
				"item_ball.png", 
				"item_binoculars.png",
				"item_boot.png",
                "item_bouquet.png",
                "item_fan.png", 
               	"item_hat.png", 
				"item_perfume.png",
                "item_plate.png",
                "item_shirt.png",
                "item_stopwatch.png",                
                "item_suitcase.png",
                "item_teapot.png"         
            ],

    returnItemUrl : function() {
		// the type of item (hat, etc) is the URL, given that we're only performing === checks
		// it could be anything really
		return this.urls[Math2.randomInt(0,this.urls.length)];
	},

	/**
	 * @param {Array} the array of items we DO NOT want 
	 * @return {item} a red herring/wrong item that is not in the array
	 */
	returnItemButNot : function(items) {

		var n = this.returnItemUrl();

		do{
	        n = this.returnItemUrl();

	    }while(items.indexOf(n) !== -1)

		return n;
	},

	/**
	 * @param {Array} the array of items we DO NOT want 
	 * @param {num} the num of unique items we want
	 * @return {Array} an array of Unique Red Herring/Wrong item that is not in the array
	 */
	returnUniqueItemsButNot : function(items,num) {

		var arr = [];

		do{
			arr = this.arrayOfItemsButNot(items,num);
		}
		while(this.findDuplicates(arr));

		return arr;
	},

	arrayOfItemsButNot : function (items,num) {

		var array = [];

		for (var i = 0; i < num; i++)
		{
			var item = this.returnItemButNot(items);
			array.push(item);
		}

		return array;
	},

	findDuplicates : function(array) {

		var len = array.length;

		for(i = 0; i < len; i++){

		    for(j = i+1; j < len; j++){

		    	if(array[i] == array[j])
		    	{
		    		return true;
		    	}
		    }
		      
		}

		return false;
	},

	eliminateDuplicates : function (arr) {

	  var i,
	      len = arr.length,
	      out = [],
	      obj = {};
	 
	  	for (i=0;i<len;i++) {

			obj[arr[i]] = 0;
	  	}

		for (i in obj) {
		  out.push(i);
		}

	 	return out;
	},

	/**
	 * Generates num unique items between min and max
	 * @param  {Number} num Number of unique nums to generate
	 * @return {array} an array containing the unique items
	 */
	returnUniqueItems : function(num){
		
		var arr = [];
	    var n;

	    for(var i=0; i<num; i++)
	    {
	        do{
	            n = this.returnItemUrl();

	        }while(arr.indexOf(n) !== -1)

	       arr[i] = n;
	    }

	    return arr;
		
	}

}

module.exports = UrlManager;

});
define('com/sc/games/store/Customer',['require','exports','module','com/fido/utils/Math2','com/fido/game/GameObject','./UrlManager','signals','../shared/Timer','../shared/CustomerView','../shared/particles/ParticleBridge','com/fido/sound/SoundManager','com/sc/Consts','com/fido/system/Device'],function (require, exports, module) {


var Math2       	= require('com/fido/utils/Math2');
var GameObject  	= require('com/fido/game/GameObject');
var UrlManager  	= require('./UrlManager');
var Signal      	= require('signals');
var Timer       	= require('../shared/Timer');
var CustomerView    = require('../shared/CustomerView');
var ParticleBridge  = require('../shared/particles/ParticleBridge');
var SoundManager    = require('com/fido/sound/SoundManager');
var Consts          = require('com/sc/Consts');
var Device          = require('com/fido/system/Device');

var Customer = function () {

	var view = new CustomerView();

	GameObject.call(this,view);

	this.bubbleUrl = "request_bubble.png";

	this.desiredObjects = [];

	this.numItems = Math2.randomInt(1,3);

	this.remainingItems = this.numItems;

	this.bubble = null;

	// for the store game we need to scale the assets down

	this.view.scale.set(0.5);
	
	this.onShown = new Signal();

	this.onHidden = new Signal();

	this.onHappy = new Signal();

	this.isHidden = false;

	this.multipleItems = false;

	// coordinates creation (for the item inside the bubble)
	this.coordinates = [];

	this.coordinates.push({x: 80, y: 40});
	this.coordinates.push({x: 200, y: 40});
	this.coordinates.push({x: 100, y: 120});
	this.coordinates.push({x: 220, y: 120});


	this.texts = [];

	this.itemsInBubble = [];

	this.numOfEachItems = 0;

	this.items = [];

	this.isHappy = false;

	this.g = new PIXI.Graphics();

	this.hitAreas = [];

	this.bodyHitArea = new PIXI.Rectangle();

	this.bubbleHitArea = new PIXI.Rectangle();

	this.hitAreas.push(this.bodyHitArea);

	this.hitAreas.push(this.bubbleHitArea);

	return this;
}

Customer.prototype.constructor = Customer;

Customer.prototype = Object.create(GameObject.prototype);


Customer.prototype.init = function (mode,numItems,itemTypes,multipleItems,model) {

	// don't forget to copy the array
	this.desiredObjects = itemTypes.slice();

	this.numItems = numItems * itemTypes.length;

	this.remainingItems = this.numItems;

	this.numOfEachItems = numItems;

	this.isHappy = false;

	this.isHidden = false;

	this.onShown.removeAll();

	this.onHidden.removeAll();

	this.onHappy.removeAll();

	// the difficulty level 
	this.mode = mode;

	this.texts = [];

	this.itemsInBubble = [];

	this.items = [];

	this.view.reset();
	
	this.createBubble(model);

	this.show();

}


Customer.prototype.createBubble = function(model) {

	if(this.view.children.length){

		this.view.removeChildren();
	}

	this.view.loadModel(model);

	this.bubble = new PIXI.Sprite.fromFrame(this.bubbleUrl);

	this.bubble.position.x = 140;
	this.bubble.position.y = -267;

	this.view.addChild(this.bubble);

	this.updateHitArea();

	var desiredObject = this.desiredObjects[0];

	var inBubble = new PIXI.Sprite.fromFrame(desiredObject);
	inBubble.scale.set(1.2);

	if(this.mode == 'easy'){

		// if there is only 1 item in the bubble, centre it
		if(this.numItems === 1) {

			inBubble.position.x = 145;
			inBubble.position.y = 50;

			this.bubble.addChild(inBubble);

			return;
		}

		if(this.numItems === 2){

			var tempCoords = [ {x: 220, y: 70}, {x: 70, y: 55} ];


			// if there are two items, make them display nicely as well
			for (var i = 0; i < this.numItems; i++) {

				var inBubble = new PIXI.Sprite.fromFrame(desiredObject);

				inBubble.position.set(tempCoords[i].x,tempCoords[i].y);
				inBubble.scale.set(0.9);

				this.bubble.addChild(inBubble);
		
			}

			return;
		}

		// there are four items !
		for (var i = 0; i < this.numItems; i++) {

			var index = i % this.desiredObjects.length;

			var inBubble = new PIXI.Sprite.fromFrame(this.desiredObjects[index]);
			inBubble.position.set(this.coordinates[i].x,this.coordinates[i].y);
			inBubble.scale.set(0.8);

			this.bubble.addChild(inBubble);
		
		}

		
	}
	else if(this.mode == 'hard'){

		if(this.desiredObjects.length === 1)
		{

		   for (var i = 0; i < this.desiredObjects.length; i++) {

			    var inBubble = new PIXI.Sprite.fromFrame(this.desiredObjects[i]);
			    inBubble.position.x = this.bubble.width * 0.5;
			    inBubble.position.y = 67 *i + 60;

			    this.bubble.addChild(inBubble);

			    var string = this.remainingItems / this.desiredObjects.length;

			    var numberText = new PIXI.Text(string,{font : '84px '+ Fonts.MainFont, fill : '#efb647', stroke : '#482219', strokeThickness : 13, dropShadow : true, dropShadowColor : '#482219', dropShadowAngle : -0.2, dropShadowDistance : 13});

			    numberText.position.x = this.bubble.width * 0.27;
			    numberText.position.y = 65 * i + 55;

			    this.texts.push(numberText);

			    this.itemsInBubble.push(inBubble);

			    this.bubble.addChild(numberText);
		  
		   }


  		}
	  	else{
	   
		   for (var i = 0; i < this.desiredObjects.length; i++) {

			    var inBubble = new PIXI.Sprite.fromFrame(this.desiredObjects[i]);
			    inBubble.position.x = this.bubble.width * 0.5;
			    inBubble.position.y = 90 *i + 20;

			    this.bubble.addChild(inBubble);

			    var string = this.remainingItems / this.desiredObjects.length;

			    var numberText = new PIXI.Text(string,{font : '84px '+ Fonts.MainFont, fill : '#efb647', stroke : '#482219', strokeThickness : 13, dropShadow : true, dropShadowColor : '#482219', dropShadowAngle : -0.2, dropShadowDistance : 13});

			    numberText.position.x = this.bubble.width * 0.27;
			    numberText.position.y = 90 * i + 20;

			    this.texts.push(numberText);

			    this.itemsInBubble.push(inBubble);

			    this.bubble.addChild(numberText);
		  
		   }

		}


	}

	
};



Customer.prototype.updateHitArea = function () {

	this.g.clear();

	this.bodyHitArea.x = -70;
	this.bodyHitArea.y = -400;
 
	this.bodyHitArea.width = 310;
	this.bodyHitArea.height = 750;

	this.bubbleHitArea.x = 170;
	this.bubbleHitArea.y = -260;
 
	this.bubbleHitArea.width = 340;
	this.bubbleHitArea.height = 250;

	// this.g.beginFill(0xffcc00,0.5);

 //    this.g.drawRect(this.bodyHitArea.x,this.bodyHitArea.y,this.bodyHitArea.width,this.bodyHitArea.height);

 //    this.g.endFill();

 //    this.g.beginFill(0x00ff00,0.5);

 //    this.g.drawRect(this.bubbleHitArea.x,this.bubbleHitArea.y,this.bubbleHitArea.width,this.bubbleHitArea.height);

 //    this.g.endFill(); 

 //    this.view.addChild(this.g);

}

Customer.prototype.isGoodObject = function (item) {

	//console.log(this.desiredObjects.indexOf(item.type) !== -1 , this.desiredObjects)

	if(this.desiredObjects.indexOf(item.type) !== -1)
	{
		if(this.numItemsOfType(item.type) < this.numOfEachItems){

			return true;
		}
		
	}
	
	return false;
}

Customer.prototype.numItemsOfType = function (type) {

	var num = 0;

	for (var i = 0; i < this.items.length; i++) {

		if(this.items[i].type == type){
			num++;
		}
	}

	//console.log('items of type in the customer',num)

	return num;
}


Customer.prototype.show = function () {
	// dispatch a signal when it is shown
	this.view.alpha = 0;

	TweenLite.to(this.view,0,{ alpha : 1, ease : Circ.easeOut,onComplete : this.onShown.dispatch.bind(this)});
}

Customer.prototype.hide = function (delay) {
	// dispatch a signal when it is hidden
	TweenLite.to(this.view,1.0,{ alpha : 0, ease : Linear.easeIn,onComplete : this.onHidden.dispatch.bind(this),delay : delay});
	this.isHidden = true;
}


Customer.prototype.receivedGoodObject = function(item) {
	
	// the item was dropped currectly on this customer
	// so remove the item from the bubble when the item finishes its transition
	item.onHidden.addOnce(this.removeItemOrBubble,this);
	item.correctlyDropped();

	this.view.canBlink = false;

	this.items.push(item);
};

Customer.prototype.removeItemOrBubble = function(item) {

	this.remainingItems--;

	if(this.remainingItems > 0)
	{
		this.view.briefSmile();

		item.onDropped.dispatch();

		if(this.mode == 'easy')
		{

			for (var i = 0; i < this.bubble.children.length; i++) {

				
				if(this.bubble.children[i].texture == item.view.texture){

					console.log('they share the same texture ! ');

					this.bubble.removeChild(this.bubble.children[i]);

					return;

				}
			}

		}
		else if(this.mode == 'hard')
		{

			// get the text object at the good index
			
			var index = 0;

			for (var i = 0; i < this.itemsInBubble.length; i++) {
				
				if(this.itemsInBubble[i].texture == item.view.texture)
				{

					index = i;

				}

			}
			
			// decrement the current value of the text object
			var txt = this.texts[index];

			var tempInt = parseInt(txt.text);

			// change the string 
			var str = " " + tempInt-1;

			txt.setText(str);

			if(tempInt-1 === 0)
			{
				// if there are zero item, don't create a text field with the digit "0"
				// just remove the text and the associated item
				this.bubble.removeChild(txt);
				this.bubble.removeChild(this.itemsInBubble[index])
			}

		}

		
	}
	else if(this.remainingItems <= 0)
	{

		// empty the bubble !
		for (var i = 0; i < this.bubble.children.length; i++) {
			var inbubble = this.bubble.children[i];

			this.bubble.removeChild(inbubble);
		}

		this.view.removeChild(this.bubble);

		this.view.beHappy();

		this.desiredObjects.length = 0;

		this.desiredObjects = [];

		this.isHappy = true;

		this.onHappy.dispatch();

		SoundManager.sfx.play('happyCustomer');

		var options = 
	    {
	        x : this.view.position.x,
	        y : this.view.position.y,
	        type : 0
	    };

	    if( !(Device.instance.iPad && !Device.instance.webGL) ){
            ParticleBridge.instance.fire(options);
        }
	}

}

Customer.prototype.update = function() {

	GameObject.prototype.update.call(this);

	this.view.update();
	
};

module.exports = Customer;

});
define('com/sc/games/store/CoordinateManager',['require','exports','module','com/fido/utils/Utils','com/fido/utils/Math2'],function (require,exports,module) {

var Utils           = require("com/fido/utils/Utils");
var Math2           = require('com/fido/utils/Math2');
	

var CoordinateManager = function () {
	
	this.coordinates = [];

    this.reset();
}

CoordinateManager.prototype = {

	/**
	 * @method  getPointAt 
	 * @param  {Number} index the index
	 * @return {Point}  the coordinates as a Point object
	 */
	getPointAt : function (index) {
		
		if(index > this.coordinates.length - 1 || index < 0)
		{
			console.log('index out of range, there are not enough coordinates/too many randoms');
		}

		var coordinate = this.coordinates[index];

		coordinate.empty = false;

		return coordinate.point;
	},

	getEmpty : function () {

		for (var i = 0; i < this.coordinates.length; i++) {

			if(this.coordinates[i].empty)
			{
				this.coordinates[i].empty = false;
				return this.coordinates[i];
			}

		}


	},


	reset : function () {

		this.coordinates = [];
		this.coordinates.length = 0;

		// first row 
	    var y = 400;

	    for (var i = 0; i < 6; i++) {

	        y = 400 + Math2.randomInt(-20,20);

	        var spot = {
	            point : new PIXI.Point( 170 + (155 * i) + Math2.randomInt(-10,10), y),
	            empty : true,
	            manager : this
	        }

	        this.coordinates.push(spot);
	    }

	    // second row 

	    for (var i = 0; i < 5; i++) {

	        y = 505 + Math2.randomInt(-20,20);

	        var spot = {
	            point : new PIXI.Point( 220 + (155 * i) + Math2.randomInt(-10,10), y),
	            empty : true,
	            manager : this
	        }

	        this.coordinates.push(spot);
	    }

	    // now shuffle the coords
	    Utils.shuffle(this.coordinates);

	}
}

module.exports = CoordinateManager;

});
define('com/sc/games/store/StoreGame',['require','exports','module','PIXI','signals','com/sc/games/Game','com/fido/game/GameObjectPool','com/fido/system/Ticker','com/fido/ui/buttons/LabelButton','../shared/Timer','./Customer','com/fido/utils/Math2','./UrlManager','./Item','com/fido/loader/Cache','com/sc/Consts','com/sc/app/system/GameSaveManager','com/fido/utils/FrameWait','com/fido/utils/Utils','./CoordinateManager','../shared/Models','com/fido/sound/SoundManager','com/fido/sound/MusicManager','libs/gameConfig/gameTracking'],function (require, exports, module)
{
    var PIXI                = require("PIXI");
    var Signal              = require('signals');
    var Game                = require('com/sc/games/Game');
    var GameObjectPool      = require('com/fido/game/GameObjectPool');
    var Ticker              = require('com/fido/system/Ticker');
    var LabelButton         = require("com/fido/ui/buttons/LabelButton");
    var Timer               = require('../shared/Timer');
    var Customer            = require('./Customer');
    var Math2               = require('com/fido/utils/Math2');
    var UrlManager          = require('./UrlManager');
    var Item                = require('./Item');
    var Cache               = require('com/fido/loader/Cache');
    var Consts              = require('com/sc/Consts');
    var GameSaveManager     = require('com/sc/app/system/GameSaveManager');
    var Wait                = require("com/fido/utils/FrameWait");
    var Utils               = require("com/fido/utils/Utils");
    var CoordinateManager   = require('./CoordinateManager');
    var Models              = require('../shared/Models');
    var SoundManager        = require('com/fido/sound/SoundManager');
    var MusicManager        = require('com/fido/sound/MusicManager');
    var DisneyTracker       = require('libs/gameConfig/gameTracking');

    PIXI.DisplayObject.prototype.depthOffset = 0;

    var StoreGame = function(app)
    {

        Game.call(this,app);

        this.customerPool = new GameObjectPool(Customer);

        this.itemPool = new GameObjectPool(Item);

        this.customers = [];

        this.items = [];

        this.mode = 'hard';

        this.json = Cache.getJson('storeLevels');

        this.levels = this.json['hard'];

        this.maxRounds = 6;

        this.currentRound = 0;

        this.happyCustomers = 0;

        this.hiddenItems = 0;

        this.hiddenCustomers = 0;

        this.bkg = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/store_bg.jpg");
        this.win = new PIXI.Sprite.fromFrame("store_window.png");
        this.bandit = new PIXI.Sprite.fromFrame("store_bandit.png");
        this.banditMask = new PIXI.Graphics(0,0);

        this.coordinates = new CoordinateManager();

        this.vignette = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/vignette_halfsize.png");
        this.vignette.scale.set(2);
        this.view.addChild(this.vignette);

        this.pileContainer = new PIXI.DisplayObjectContainer();

        this.started = false;

        this.count = 0;

        this.speed = 0.2;

        this.leftPile = PIXI.Sprite.fromFrame('pile_left.png');

        this.rightPile = PIXI.Sprite.fromFrame('pile_right.png');

        this.createBackground();

        this.view.addChild(this.world.view);

        this.shadowContainer = new PIXI.DisplayObjectContainer();

    }



    StoreGame.prototype = Object.create( Game.prototype );

    StoreGame.prototype.reset = function (config) {

       Game.prototype.reset.call(this,config);

       this.started = false;

       this.currentRound = 0;

       this.app.hud.reset();

       this.cleanPools();

       this.newRound(this.levels[this.currentRound]);

       this.createPiles();

    }

    StoreGame.prototype.start = function () {

       Game.prototype.start.call(this);

       MusicManager.play('storeLoop');

       this.view.removeChild(this.world.view);

       // console.log('start');

    }

    StoreGame.prototype.changeMode = function (mode) {

        if(mode === Modes.Easy)
        {
            this.mode = 'easy';
            this.levels = this.json['easy'];
        }
        else if(mode === Modes.Hard)
        {
            this.mode = 'hard';
            //the "hard" levels are extra levels
            //that are added to the easy ones
            var easyLevels = this.json['easy'];

            // the last two levels of the easy mode + the hard mode
            this.levels = [ easyLevels[ easyLevels.length - 2 ],easyLevels[ easyLevels.length - 1] ];

            this.levels = this.levels.concat(this.json['hard']);
        }

        if(this.config.showTutorial)
        {
            TweenLite.delayedCall(.1, this.showTutorial, [], this);
        }
        else{
            this.app.overlayManager.dropAndHideBlack();
            // here do basically what you when onTutorialFinished dispatches
            this.startAfterTutorial();
        }

        this.createPiles();

    }

    StoreGame.prototype.showTutorial = function () {

        this.app.overlayManager.tutorialScreen.setNormalMode();
        this.app.overlayManager.show("tutorial");

        this.app.overlayManager.tutorialScreen.onTutorialFinished.addOnce(this.startAfterTutorial,this);
    }

    StoreGame.prototype.startAfterTutorial = function ()
    {
        this.app.fade.fade(0.3,0.7,0.7);

        TweenLite.delayedCall(0.4,this.showStuff,[],this);
    }


    StoreGame.prototype.showStuff = function ()
    {

        this.reset();

        // here do basically what you when onTutorialFinished dispatches
        this.started = true;

        this.app.hud.start();

        this.fallFromSides();
    }

    StoreGame.prototype.fallFromSides = function () {

        this.speed = 0.5;

        if(!this.started)
        {
            
            return;
        }

        for (var i = 0; i < this.items.length; i++) {

            var item = this.items[i];

            if(i % 2)
            {
                // from the right stack
                item.position.set(this.dimensions.width,170);
            }
            else
            {
                // from the left stack
                item.position.set(0,170);
            }


            TweenLite.delayedCall(0.5 + (i * 0.1), this.throwItemOutOfPile, [item] ,this);

            if(i === this.items.length - 1)
            {
                TweenLite.delayedCall(0.2 + (i * 0.1), this.stopWobbling, [] ,this);

                TweenLite.to([this.leftPile,this.rightPile], 0.2 + (i * 0.1),{ y : '+= 20', ease : Back.easeOut});
            }

        }


    }

    StoreGame.prototype.cleanPools = function () {
        // clean up and free the arrays
       for (var i = this.customers.length - 1; i >= 0; i--) {

           var customer = this.customers[i];
           this.world.remove(customer);

           // kills the object and returns it to the pool

           this.customerPool.returnObject(customer);
       };

       this.customers = [];

       for (var i = this.items.length - 1; i >= 0; i--) {

           var item = this.items[i];
           item.shadow.alpha = 0;
           this.view.removeChild(item.shadow);
           this.world.remove(item);

           // kills the object and returns it to the pool

           this.itemPool.returnObject(item);
       };

       this.items = [];

       this.pileContainer.removeChildren();

       this.coordinates.reset();

    }


    StoreGame.prototype.newRound = function (config) {

        this.happyCustomers = 0;

        var numCustomers = config.numCustomers;

        var numItems = config.numItemsPerCustomer;

        var numRandoms = config.numRandoms;

        var multipleItems = false;

        var itemTypes = [];

        // otherwise there is only an array of 1 item
        var itemTypes = UrlManager.returnUniqueItems(1);

        // if there are several items return two items
        if(config.multipleItems)
        {
            multipleItems = true;
            itemTypes = UrlManager.returnUniqueItems(2);
        }

        var characters = [];

        for(var key in Models)
        {
            characters.push(Models[key]);
        }

        // We don't include Uncle Bun because he owns the store
        var excludedIndex = characters.indexOf(Models.Bun);

        characters.splice(excludedIndex,1);

        Utils.shuffle(characters);

        // create the customers
        for (var i = 1; i <= numCustomers; i++) {

            var character = characters[i-1];

            // get some customers from the pool
            var cust = this.customerPool.getObject();

            cust.init(this.mode,numItems,itemTypes,multipleItems,character);

            cust.onHappy.add(this.onHappyCustomer,this);

            if(numCustomers > 2)
            {
                cust.position.set(180 + 7 + ((i-1) * 250) - 110,160);
            }
            else
            {
                cust.position.set(i * (300 + 10) - 100 ,160);
            }

            this.customers.push(cust);

            
        }


        for(var i = this.customers.length - 1; i >= 0; i--){

            // add them to the world backwards to the depth sorting is correct
            this.world.add(this.customers[i]);
        }

        // 11 items max here as per the coordinates created
        var k = 0;

        // make sure the items that the customers want are actually created
        for (var j = 0; j < this.customers.length; j++) {


            for (var i = 0; i < this.customers[j].numItems; i++) {

                var point = this.coordinates.getPointAt(k);


                // clamp i to the length of the desired objects
                var index = i % this.customers[j].desiredObjects.length


                this.spawnItems(this.customers[j].desiredObjects[index] , point);

                // something to increment for the coordinates
                k++;

            }

        }


        // now scatter the random objects on the floor (will vary according to the level)

        var randomItems = UrlManager.returnUniqueItemsButNot(itemTypes,numRandoms);


        for (var i = k; i < k+numRandoms; i++) {

            var itemType = randomItems[ i % randomItems.length];

            var point = this.coordinates.getPointAt(i);

            this.spawnItems(itemType,point);

        }

        this.pileContainer.addChild(this.leftPile);

        this.pileContainer.addChild(this.rightPile);

        this.view.addChild(this.shadowContainer);

        this.view.addChild(this.world.view);

        this.view.addChild(this.pileContainer);

        this.fallFromSides();

    }

    StoreGame.prototype.spawnItems = function (itemType,point) {

        var obj = this.itemPool.getObject();

        obj.view.visible = false;

        // give each item an array of customers they can collide with
        obj.init(itemType,this.customers,point);

        obj.onPickedUp.add(this.disableOtherItems,this);

        obj.onDropped.add(this.enableItems,this);

        obj.shadow.position.set(point.x,point.y + 45);

        obj.shadow.anchor.set(0.5)

        this.shadowContainer.addChild(obj.shadow);

        this.world.add(obj);

        this.items.push(obj);
    }



    StoreGame.prototype.throwItemOutOfPile = function (item) {

        // when physics are on, the item falls towards its original position
        item.view.visible = true;
        item.velocity.y = -15;
        item.physics = true;

    }

    StoreGame.prototype.stopWobbling = function () {

        TweenLite.to(this,3.0,{speed : 0, ease : Sine.easeOut} )

    }


    StoreGame.prototype.enableItems = function () {


        for (var i = 0; i < this.items.length; i++) {

            this.items[i].view.interactive = true;
        }
    }

    StoreGame.prototype.disableOtherItems = function (item) {

        // the index of the item that was picked up and needs to remain interactive
        var pickedUpIndex = this.items.indexOf(item);


        for (var i = 0; i < this.items.length; i++) {

            this.items[i].view.interactive = false;
        }

        this.items[pickedUpIndex].view.interactive = true;

        // bring the current item to the top of the display list
        var topChild = this.world.view.getChildAt(this.world.view.children.length-1);

        this.world.view.swapChildren(this.items[pickedUpIndex].view,topChild);

    }



    StoreGame.prototype.onHappyCustomer = function () {

        this.happyCustomers++;

        if(this.happyCustomers === this.levels[this.currentRound].numCustomers){

            this.app.hud.updateLives();

            this.hideAll();
        }
    }

    StoreGame.prototype.hideAll = function () {

        for (var i = 0; i < this.items.length; i++) {

            this.items[i].view.interactive = false;
        }

        for (var i = 0; i < this.customers.length; i++) 
        {
          this.customers[i].view.wiggle();
        }

        if(this.currentRound < this.maxRounds - 1)
        {
            TweenLite.delayedCall(2.4,this.fadeToBlack,[],this);
        }
    }


    StoreGame.prototype.showGameover = function () {

        // set this level (at index 0 in the save array) as completed
        GameSaveManager.instance.onSavedComplete.addOnce(this.gameOver, this);
        GameSaveManager.instance.setComplete(0);

    }

    StoreGame.prototype.gameOver = function () 
    {
        SoundManager.music.setVolume('storeLoop',0.3);
        this.gameover();
        DisneyTracker.trackAction("level_complete", "store");
    }


    StoreGame.prototype.fadeToBlack = function () {

        this.app.fade.fade(0.3,0.7,0.7);

        TweenLite.delayedCall(0.4,this.onAllHidden,[],this);

    }


    StoreGame.prototype.onAllHidden = function () {

        this.hiddenItems = 0;

        this.hiddenCustomers = 0;

        this.happyCustomers = 0;


        this.currentRound++;


        this.cleanPools();

        this.newRound(this.levels[this.currentRound]);
    }


    StoreGame.prototype.createBackground = function () {

        this.view.addChild(this.bkg);

        this.bkg.position.y = 0;

        // create the window, its position will be used in order to position the other objects
        
        this.win.position.set(834, 0);

        // create the bandit

        this.view.addChild(this.bandit);

        //add the win to the stage
        this.view.addChild(this.win);

        this.banditMask.beginFill(0xbadade,1);

        this.banditMask.drawRect(this.win.position.x-30,this.win.position.y,this.win.width * 1.2,this.win.height - 10);

        this.view.addChild(this.banditMask);


        this.winRight = this.win.position.x + this.win.width;

        this.winBottom = this.win.position.y + this.win.height;

        this.bandit.position.set(this.winRight+60,this.winBottom-80);

        this.bandit.mask = this.banditMask;
    }


    // when the circle transition is done, this screen is shown
    StoreGame.prototype.onShown = function () {
        this.app.hud.onFinished.add(this.showGameover, this);
        this.app.screenManager.onSegmentChange.add(this.onHide, this);
        GameSaveManager.instance.setTutorial(0);
        this.started = false;

        this.app.overlayManager.show('difficulty');

        this.animBandit();

        var t = new Timer(Timer.Second * 4.5,true);

        t.onComplete.add(this.animBandit,this);

    }


    StoreGame.prototype.animBandit = function () {

        // peak
        TweenLite.to(this.bandit.position,1,{x : this.winRight-190, y : this.winBottom-150, ease: Cubic.easeOut});

        var delay = 2;

        TweenLite.to(this.bandit.position,1.5,{x : this.winRight-160, y : this.winBottom-110, delay : delay, ease: Back.easeOut});

    }

    StoreGame.prototype.onHide = function () {
        this.app.screenManager.onSegmentChange.remove(this.onHide, this);
        this.app.hud.onFinished.remove(this.showGameover, this);
    }

    StoreGame.prototype.update = function () {

        Game.prototype.update.call(this);

        this.count += this.speed;

        this.leftPile.scale.x = 1 + Math.sin(this.count) * 0.015;
        this.rightPile.scale.x = 1 + Math.sin(this.count) * 0.015;

        this.leftPile.scale.y = 1 + Math.cos(this.count / 2) * 0.015;
        this.rightPile.scale.y = 1 + Math.cos(this.count / 2) * 0.015;

        this.rightPile.rotation = Math.sin(this.count) * 0.02;
        this.leftPile.rotation = Math.cos(this.count) * 0.02;

    }

    StoreGame.prototype.createPiles = function () {

        this.leftPile.anchor.set(0,1);

        this.leftPile.position.x = -10 + this.leftPile.width * this.leftPile.anchor.x;
        this.leftPile.position.y = 82 + this.leftPile.height * this.leftPile.anchor.y;

        this.rightPile.anchor.set(0,1);

        this.rightPile.position.x = 620 + this.rightPile.width * this.rightPile.anchor.x;
        this.rightPile.position.y = 150 + this.rightPile.height * this.rightPile.anchor.y;
    }

    module.exports = StoreGame;
});
define('com/fido/input/Keyboard',['require','exports','module'],function (require, exports, module) 
{  
	Keyboard = function( )
	{
		this._states = {
			up : 0,
			down : 1
		}

		this._keyCodes = {
			37 : 
			{
				label : 'left',
				state : 0,
				preventBubble : true
			},
			38 : 
			{
				label : 'up',
				state : 0,
				preventBubble : true
			},
		 	39 : 
		 	{
				label : 'right',
				state : 0,
				preventBubble : true
			},
			40 : 
			{
				label : 'down',
				state : 0,
				preventBubble : true
			}
		}

		this.disabled = false;
		this.start();
		this.dirty = false;

	}

	Keyboard.prototype.start = function()
	{	
		var _this = this;

		this._onKeyDown = function (event) {
	        return _this.processKeyDown(event);
	    };

	    this._onKeyUp = function (event) {
	        return _this.processKeyUp(event);
	    };

	    window.addEventListener('keydown', this._onKeyDown, false);
	    window.addEventListener('keyup', this._onKeyUp, false);
	}

	Keyboard.prototype.stop = function()
	{
	    window.removeEventListener('keydown', this._onKeyDown);
	    window.removeEventListener('keyup', this._onKeyUp);
	}

	Keyboard.prototype.processKeyDown = function(event)
	{
		if(this.disabled === true) return;

		var keyCode = event.keyCode;
		
		if(this._keyCodes.hasOwnProperty(keyCode))
		{
			var Key = this._keyCodes[keyCode];
			if (Key.preventBubble)
	        {
				event.preventDefault();
	        }

	        if(Key.state !=  this._states.down)
	        {
				Key.state = this._states.down;
				this.dirty = true
	        }
		}

	}

	Keyboard.prototype.processKeyUp = function(event)
	{
		if(this.disabled === true) return;

		var keyCode = event.keyCode;
		
		if(this._keyCodes.hasOwnProperty(keyCode))
		{
			var Key = this._keyCodes[keyCode];
			if (Key.preventBubble)
	        {
				event.preventDefault();
	        }
			if(Key.state !=  this._states.up)
	        {
				Key.state = this._states.up;
				this.dirty = true
	        }
		}

	}

	Keyboard.prototype.isPressed = function(id)
	{
		var keyCode = this.getCodeFromLabel(id);

		if(keyCode)
		{
			return this._keyCodes[keyCode].state === this._states.down;
		}
		else
		{
			console.log("Key ID doesn't exist. - (" + id + ")");
		}
		return false;
	}

	Keyboard.prototype.getCodeFromLabel = function(label)
	{
		for(var t in this._keyCodes)
		{
			if(this._keyCodes[t].label === label) return t;
		}
		return false;
	}

	/** TO DO **/

	Keyboard.prototype.registerCallbacks = function(context, onKeyDown, onKeyUp)
	{

	}

	module.exports = Keyboard;

});
define('com/sc/games/cattle/Cloud',['require','exports','module','PIXI','com/sc/games/Game','signals'],function (require, exports, module) {

var PIXI = require("PIXI");
var Game = require('com/sc/games/Game');
var Signal = require('signals');

var Cloud = function(color, speed)
{	
	this.cloud = new PIXI.Sprite.fromFrame("cloud.png");

	this.cloud.scale.x = this.cloud.scale.y = 1;
	this.cloud.anchor = new PIXI.Point(.5, .5);
	this.cloud.speed = speed;
	this.cloud.blendMode = PIXI.blendModes.ADD;
	this.cloud.alpha = .7;
	this.cloud.rotation = Math.random() * Math.PI * 2
	this.cloud.position = new PIXI.Point();

	this.scale = 2 + this.randomNumber(1, 2);
	this.cloud.tint = color;

	this.speedScale = 1;
	this.speed = speed;
	this.speedRotation = 1 + this.randomNumber(-5, .5);

	this.decrementation = .6;
	TweenLite.to(this.cloud, 1.5, {alpha:0, delay: 2+this.randomNumber(-.2, .2)});
}

Cloud.prototype = Object.create( Game.prototype );

Cloud.prototype.randomNumber = function(min, max){
	if (min == max) {
	    return (min);
	}
	var random = Math.random();

	return ((random * (max - min)) + min);
}

Cloud.prototype.live = function(){
	this.cloud.scale.x = this.scale  - this.speedScale;
	this.cloud.scale.y = this.scale  - this.speedScale;
	this.speedScale *= this.decrementation;
	
	this.speedRotation *= .95;
	this.decrementation *= 1.05;
	if(this.decrementation > 0.95) this.decrementation = 0.95;

	this.cloud.position.x += this.cloud.speed.x;
    this.cloud.position.y += this.cloud.speed.y;

    this.cloud.speed.x *= .95;
    this.cloud.speed.y *= .95;
}

module.exports = Cloud;
});
;(function(root, factory) {

  // Support AMD
  if (typeof define === 'function' && define.amd) {
    define('com/sc/games/cattle/randomColors',[], factory);

  // Support CommonJS
  } else if (typeof exports === 'object') {
    var randomColor = factory();
    
    // Support NodeJS & Component, which allow module.exports to be a function
    if (typeof module === 'object' && module && module.exports) {
      exports = module.exports = randomColor;
    }
    
    // Support CommonJS 1.1.1 spec
    exports.randomColor = randomColor;
  
  // Support vanilla script loading
  } else {
    root.randomColor = factory();
  };

}(this, function() {

  // Shared color dictionary
  var colorDictionary = {};

  // Populate the color dictionary
  loadColorBounds();

  var randomColor = function(options) {
    options = options || {};

    var H,S,B;

    // Check if we need to generate multiple colors
    if (options.count != null) {

      var totalColors = options.count,
          colors = [];

      options.count = null;

      while (totalColors > colors.length) {
        colors.push(randomColor(options));
      }

      options.count = totalColors;

      return colors;
    }

    // First we pick a hue (H)
    H = pickHue(options);

    // Then use H to determine saturation (S)
    S = pickSaturation(H, options);

    // Then use S and H to determine brightness (B).
    B = pickBrightness(H, S, options);

    // Then we return the HSB color in the desired format
    return setFormat([H,S,B], options);
  };

  function pickHue (options) {

    var hueRange = getHueRange(options.hue),
        hue = randomWithin(hueRange);

    // Instead of storing red as two seperate ranges,
    // we group them, using negative numbers
    if (hue < 0) {hue = 360 + hue}

    return hue;

  }

  function pickSaturation (hue, options) {

    if (options.luminosity === 'random') {
      return randomWithin([0,100]);
    }

    if (options.hue === 'monochrome') {
      return 0;
    }

    var saturationRange = getSaturationRange(hue);

    var sMin = saturationRange[0],
        sMax = saturationRange[1];

    switch (options.luminosity) {

      case 'bright':
        sMin = 55;
        break;

      case 'dark':
        sMin = sMax - 10;
        break;

      case 'light':
        sMax = 55;
        break;
   }

    return randomWithin([sMin, sMax]);

  }

  function pickBrightness (H, S, options) {

    var brightness,
        bMin = getMinimumBrightness(H, S),
        bMax = 100;

    switch (options.luminosity) {

      case 'dark':
        bMax = bMin + 20;
        break;

      case 'light':
        bMin = (bMax + bMin)/2;
        break;

      case 'random':
        bMin = 0;
        bMax = 100;
        break;
    }

    return randomWithin([bMin, bMax]);

  }

  function setFormat (hsv, options) {

    switch (options.format) {

      case 'hsvArray':
        return hsv;

      case 'hsv':
        return colorString('hsv', hsv);

      case 'rgbArray':
        return HSVtoRGB(hsv);

      case 'rgb':
        return colorString('rgb', HSVtoRGB(hsv));

      default:
        return HSVtoHex(hsv);
    }

  }

  function getMinimumBrightness(H, S) {

    var lowerBounds = getColorInfo(H).lowerBounds;

    for (var i = 0; i < lowerBounds.length - 1; i++) {

      var s1 = lowerBounds[i][0],
          v1 = lowerBounds[i][1];

      var s2 = lowerBounds[i+1][0],
          v2 = lowerBounds[i+1][1];

      if (S >= s1 && S <= s2) {

         var m = (v2 - v1)/(s2 - s1),
             b = v1 - m*s1;

         return m*S + b;
      }

    }

    return 0;
  }

  function getHueRange (colorInput) {

    if (typeof parseInt(colorInput) === 'number') {

      var number = parseInt(colorInput);

      if (number < 360 && number > 0) {
        return [number, number];
      }

    }

    if (typeof colorInput === 'string') {

      if (colorDictionary[colorInput]) {
        var color = colorDictionary[colorInput];
        if (color.hueRange) {return color.hueRange}
      }
    }

    return [0,360];

  }

  function getSaturationRange (hue) {
    return getColorInfo(hue).saturationRange;
  }

  function getColorInfo (hue) {

    // Maps red colors to make picking hue easier
    if (hue >= 334 && hue <= 360) {
      hue-= 360;
    }

    for (var colorName in colorDictionary) {
       var color = colorDictionary[colorName];
       if (color.hueRange &&
           hue >= color.hueRange[0] &&
           hue <= color.hueRange[1]) {
          return colorDictionary[colorName];
       }
    } return 'Color not found';
  }

  function randomWithin (range) {
    return Math.floor(range[0] + Math.random()*(range[1] + 1 - range[0]));
  }

  function shiftHue (h, degrees) {
    return (h + degrees)%360;
  }

  function HSVtoHex (hsv){

    var rgb = HSVtoRGB(hsv);

    function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    }

    var hex = componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);

    return hex;

  }

  function defineColor (name, hueRange, lowerBounds) {

    var sMin = lowerBounds[0][0],
        sMax = lowerBounds[lowerBounds.length - 1][0],

        bMin = lowerBounds[lowerBounds.length - 1][1],
        bMax = lowerBounds[0][1];

    colorDictionary[name] = {
      hueRange: hueRange,
      lowerBounds: lowerBounds,
      saturationRange: [sMin, sMax],
      brightnessRange: [bMin, bMax]
    };

  }

  function loadColorBounds () {

    defineColor(
      'monochrome',
      null,
      [[0,0],[100,0]]
    );

    defineColor(
      'red',
      [-26,18],
      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]
    );

    defineColor(
      'orange',
      [19,46],
      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]
    );

    defineColor(
      'yellow',
      [47,62],
      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]
    );

    defineColor(
      'green',
      [63,178],
      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]
    );

    defineColor(
      'blue',
      [179, 257],
      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]
    );

    defineColor(
      'purple',
      [258, 282],
      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]
    );

    defineColor(
      'pink',
      [283, 334],
      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]
    );

  }

  function HSVtoRGB (hsv) {

    // this doesn't work for the values of 0 and 360
    // here's the hacky fix
    var h = hsv[0];
    if (h === 0) {h = 1}
    if (h === 360) {h = 359}

    // Rebase the h,s,v values
    h = h/360;
    var s = hsv[1]/100,
        v = hsv[2]/100;

    var h_i = Math.floor(h*6),
      f = h * 6 - h_i,
      p = v * (1 - s),
      q = v * (1 - f*s),
      t = v * (1 - (1 - f)*s),
      r = 256,
      g = 256,
      b = 256;

    switch(h_i) {
      case 0: r = v, g = t, b = p;  break;
      case 1: r = q, g = v, b = p;  break;
      case 2: r = p, g = v, b = t;  break;
      case 3: r = p, g = q, b = v;  break;
      case 4: r = t, g = p, b = v;  break;
      case 5: r = v, g = p, b = q;  break;
    }
    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];
    return result;
  }

  function colorString (prefix, values) {
    return prefix + '(' + values.join(', ') + ')';
  }

  return randomColor;
}));

define('com/sc/games/cattle/Cow',['require','exports','module','PIXI','com/sc/games/Game','signals','./Cloud','./randomColors','com/fido/utils/Math2','com/fido/system/Ticker','com/fido/utils/Utils'],function (require, exports, module) {

var PIXI 			= require("PIXI");
var Game 			= require('com/sc/games/Game');
var Signal 			= require('signals');
var Cloud 			= require('./Cloud');
var RandomColor 	= require('./randomColors');
var Math2 			= require("com/fido/utils/Math2");
var Ticker          = require('com/fido/system/Ticker');
var Utils           = require('com/fido/utils/Utils');

var Cow = function(widthContainer, name, details, level)
{	

	PIXI.DisplayObjectContainer.call( this );

	this.level = level; // important to know if the cow must disappear OR must been chased
	this.colors = ["yellow", "pink", "purple", "blue"];
	this.id = null;
	this.color = this.colors[Math.floor(Math2.random(0, 3))];
	this.tailside = "front";

	var dimensions = {
		width: 1156,
		height: 640
    }
    var direction = Math.round(Math.random()*2-1);
    direction = 1;
    if(direction == 0) direction = -1;

    this.states = { doesntCare:0, needsToWalk:1, eats:2 };
    this.isDisappearing = false;
    this.gameIsPlaying = false;
    this.isTouched = false;
    this.cowStates = details.statesEnabled;
    this.clouds = [];
    this.originalScale = details.scale;
    this.justCloudsMoving = false;

    this.widthContainer = widthContainer;

    this.onMousedown = new Signal()
    this.onMouseup = new Signal()

    // this.onDisappear = new Signal()
    // this.onChase = new Signal()

    //  cow properties 
    this.name = name;

    this.cowView = new PIXI.DisplayObjectContainer();
    this.cowView.anchor = new PIXI.Point(.5, .5);
    this.cowView.position = new PIXI.Point(details.position.x, details.position.y);
    this.cowView.scale.x = details.scale;
    this.cowView.scale.y = Math.abs(details.scale);
    // this.cowView.scale.x *= direction;
    this.cowView.interactive = true;
    this.cowView.buttonMode = true;

    this.sprite = new PIXI.DisplayObjectContainer();
    this.sprite.position = new PIXI.Point(this.cowView.width/2, this.cowView.height/2);
    this.sprite.anchor = new PIXI.Point(.5, .5);
    this.sprite.interactive = true;
    this.sprite.scale.x = this.sprite.scale.y = 1;
    this.cowView.scale.x *= direction;

    this.cowBreathContainer = new PIXI.DisplayObjectContainer();
    this.cowBreathContainer.anchor = new PIXI.Point(.5, .5);
    this.cowBreathContainer.scale.set(1);

    this.body = new PIXI.Sprite.fromFrame("cow_white.png");
    this.body.anchor.set(.5);
    // this.body.position = new PIXI.Point(this.body.width/2, this.body.height/2)
   
    this.tail = new PIXI.Sprite.fromFrame("cow_white_tail.png");
    this.tail.anchor = new PIXI.Point(1, 0);
    this.tail.position = new PIXI.Point(-this.body.width/2 + 68, -this.body.height/2 + 100);

	
    this.cowBreathContainer.addChild(this.tail);
    this.cowBreathContainer.addChild(this.body);

    this.sprite.addChild(this.cowBreathContainer);

    this.cowView.addChild(this.sprite);
    this.cowView.getLocalBounds = getCowBounds;

    // v1.1 add a sprite who runs
    var runningCowTexture = Utils.getTexturesFromFramesWithPrefix("cow_run%%.png", 12, 0);
	this.runningCow = new PIXI.Sprite(runningCowTexture[0]);
    this.runningCow.textures = runningCowTexture;
    this.runningCow.position.x -= 55;
    // this.runningCow.scale.set(1.4);
    this.runningCow.counter = 0;
    this.runningCow.alpha = 0;
    this.runningCowSpeed = .3;
    this.runningCow.anchor.x = 0.5;
    this.runningCow.anchor.y = 0.5;

	this.cowView.addChild(this.runningCow);
	

	this.mood = this.cowStates[Math.floor(Math.random()*this.cowStates.length)];
	this.speed = Math.random()+.2;
	this.direction =  direction;
	this.counter = Math.random()*100;
	this.counterMood = 0;
	this.counterBody = 0;
	this.moodChangeTimer = Math.floor(Math.random()*200+200); 
	this.ease = function(t) 
	{
	    return Math.sin(t);
	}

	this.sprite.mousedown = this.sprite.touchstart = this._mousedown.bind(this);
	this.sprite.mouseup = this.sprite.touchend = this._mouseup.bind(this);

	// this.cowView.mouseover = this._mouseover.bind(this);
	// this.cowView.mouseout = this._mouseout.bind(this);
}
Cow.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

Cow.prototype._mouseover = function()
{
	TweenLite.to(this.cowView.scale, .3, {
		x: this.originalScale * 1.2,
		y: this.originalScale * 1.2,
		ease : Elastic.easeOut
	});
}

Cow.prototype._mouseout = function()
{
	if (!this.isDisappearing)
	{
		TweenLite.to(this.cowView.scale, .3, {
			x: this.originalScale,
			ease : Elastic.easeOut
		});
	}
}

Cow.prototype._mousedown = function()
{

	if(!this.gameIsPlaying) {
		if(!this.isTouched) {
			this.onMousedown.dispatch(this);
		}
	}
	// this.isTouched = true;
}

Cow.prototype._mouseup = function(data)
{
	if(!this.isDisappearing) {
		this.onMouseup.dispatch(data, this);
	}
	// this.isTouched = true;
};

Cow.prototype.replace = function()
{
	this.sprite.alpha = 1;
	this.runningCow.alpha = 0;
	this.runningCow.position.x = -55;
};

Cow.prototype.run = function()
{
	this.sprite.alpha = 0;
	this.runningCow.alpha = 1;
	TweenLite.to(this.runningCow.position, 1.5, 
	{
		x: 2400,
		ease: Sine.easeOut,
		onComplete: function()
		{
			this.replace();
		}.bind(this)
	});
};

Cow.prototype.live = function(){
	this.counterMood += 1 * Ticker.instance.deltaTime;
	this.counter += 1 * Ticker.instance.deltaTime;
	this.counterBody += .05 * Ticker.instance.deltaTime;

	// tail animation
	if(Math.sin(this.counter *.02) * Math.sin(this.counter *1.5*.02) >= 0 && this.tailside == "front" ) {
		this.tailside = "back";
		this.cowBreathContainer.removeChild(this.tail);
		this.cowBreathContainer.addChild(this.tail);
	}
	if(Math.sin(this.counter *.02) * Math.sin(this.counter *1.5*.02) <= 0 && this.tailside == "back" ) {
		this.tailside = "front";
		this.cowBreathContainer.removeChild(this.body);
		this.cowBreathContainer.addChild(this.body);
	}

	this.tail.scale.x = .8 -  Math.sin( this.counter *.02 ) * Math.sin( this.counter * 1.5 *.02 ) *.2;
	this.tail.scale.y = .9 -  Math.abs(Math.sin( this.counter *.02 ) * Math.sin( this.counter * 1.5 * .02 ) *.1);
	this.tail.rotation = .2 - Math.abs(Math.sin( this.counter *.02 ) * Math.sin( this.counter * 1.5 * .02 ) *.7)  - Math.sin(this.counter*.02) * Math.sin(this.counter* 1.5*.02) * .2;

	// breath animation
	this.cowBreathContainer.scale.x += Math.sin(this.counterBody) * 0.001;
    this.cowBreathContainer.scale.y = (1 / this.cowBreathContainer.scale.x);

    if(this.justCloudsMoving)
	{
		this.runningCow.counter += .6 * Ticker.instance.deltaTime;
		this.runningCow.setTexture( this.runningCow.textures[Math.floor(this.runningCow.counter%this.runningCow.textures.length)] );

		for (var i = 0; i < this.clouds.length; i++) 
		{
			this.clouds[i].live();
		}
	}

	if(this.counterMood == this.moodChangeTimer)
	{
		this.counterMood = 0;
		this.moodChangeTimer = Math.floor(Math.random()*200 + 200);
		this.mood = this.cowStates[Math.floor(Math.random()*this.cowStates.length)];

		if(this.mood == this.states.needsToWalk){
			this.sprite.scale.x *= -1;
        	if(this.sprite.scale.x > 0) this.direction = 1;
        	if(this.sprite.scale.x < 0) this.direction = -1;
		}
    }

	if(this.mood == this.states.needsToWalk) 
	{
		this.cowView.position.x += this.direction * this.speed * Math.abs(this.ease(this.counter*.01)) * Math.abs(this.cowView.scale.x);
    }
};

Cow.prototype.justClouds = function()
{
	this.mood = "";
	this.justCloudsMoving = true;
	// this.onDisappear.dispatch();

	var total = 0;
	for (var i = 0; i <total; i++) 
	{
		var dir = ((Math.PI * 2)/ total) * i;// direction + [self randomNumber:0 and:0.6] - 0.3;
        var speed = 5 + Math.random() * 10;//[self randomNumber:5 and:7];
        var speedPoint = new PIXI.Point( Math.sin(dir)*speed/2.5, Math.cos(dir)*speed/2.5);

		var color = "0x"+ RandomColor({hue: this.color, luminosity: 'light', format: ''})
		var cloud = new Cloud(color, speedPoint);
		this.clouds.push(cloud);

		this.cowView.addChild(cloud.cloud);
	}

	// TweenLite.to(this.sprite.scale, .1, {x:0, y:0, delay:.5});
};

Cow.prototype.disappear = function()
{
	this.cowView.interactive = false;
	this.isDisappearing = true;
	this.mood = "";

	this.cowUpside = new PIXI.Sprite(this.cowView.generateTexture());
	this.cowUpside.position = new PIXI.Point(-55, 0)
	this.cowUpside.alpha = 0;
	this.cowUpside.anchor = new PIXI.Point(.5, .5);
	
	if(Device.instance.blendModeFriendly)
	{
		this.cowUpside.blendMode = PIXI.blendModes.ADD;
	}
	else
	{
		this.cowUpside.alpha = .3;
	}

	if (this.sprite.scale.x < 0)
	{
		this.cowUpside.scale.x *= -1;
	}
	this.sprite.addChild(this.cowUpside);

	TweenLite.to(this.cowUpside, .2,
	{
		alpha: .8,
		ease: Ease.easeIn
	});

	TweenLite.to(this.cowBreathContainer, .4,
	{
		alpha: 0,
		delay: .3,
		ease: Ease.easeOut,
	});

	TweenLite.to(this.cowUpside, 2,
	{
		alpha: 0,
		delay: .4,
		ease: Expo.easeOut,
	});

	TweenLite.to(this.cowUpside.scale, 2.5,
	{
		x: 1.3,
		y: 1.3,
		delay: .4,
		ease: Quart.easeOut,
		onComplete: function(){
			this.cowView.visible = false;
			this.destroy();
		}.bind(this)
	});

	// TweenLite.to(this.sprite.position, 3,
	// {
	// 	x: "-=100",
	// 	y: "-=40",
	// 	delay: .4
	// });

	// var total = 5;
	// for (var i = 0; i <total; i++) 
	// {
	// 	var dir = ((Math.PI * 2)/ total) * i;// direction + [self randomNumber:0 and:0.6] - 0.3;
 //        var speed = 5 + Math.random() * 10;//[self randomNumber:5 and:7];
 //        var speedPoint = new PIXI.Point( Math.sin(dir)*speed/2.5, Math.cos(dir)*speed/2.5);

	// 	var color = "0x"+ RandomColor({hue: this.color, luminosity: 'light', format: ''})
	// 	var cloud = new Cloud(color, speedPoint);
	// 	this.clouds.push(cloud);

	// 	this.cowView.addChild(cloud.cloud);
	// }

	// TweenLite.to(this.sprite.scale, .1, {x:0, y:0, delay:.5});
};

Cow.prototype.disappearWithoutAnimation = function()
{
	this.isDisappearing = true;
	this.mood = "";
	// this.onDisappear.dispatch();
	this.sprite.scale.x = this.sprite.scale.y = 0;
	this.sprite.alpha = 0;
};

Cow.prototype.destroy = function()
{
	if(this.cowUpside)
	{
		this.cowUpside.texture.destroy(true);	
	}
};


getCowBounds = function()
{
	var bounds = PIXI.DisplayObjectContainer.prototype.getLocalBounds.call(this);
	bounds.y -= 70;
	bounds.height += 140;
	return bounds;
}

module.exports = Cow;
});
define('com/sc/games/cattle/Tumbleweed',['require','exports','module','PIXI','com/sc/games/Game','com/fido/system/Ticker','com/fido/physics/SimpleBouncer'],function (require, exports, module) {

var PIXI = require("PIXI");
var Game = require('com/sc/games/Game');
var Ticker          = require('com/fido/system/Ticker');
var SimpleBouncer       = require("com/fido/physics/SimpleBouncer");

var Tumbleweed = function(position)
{	

	PIXI.DisplayObjectContainer.call( this );


	var dimensions = {
		width: 1156,
		height: 640
    }

    // this.bouncer = new SimpleBouncer();
    // this.bouncer.bounce = .2;
    // this.bouncer.gravity = .2;
    // this.bounceCount = 0;
    this.speedDecrease = 1;
    this.tumbleweed = new PIXI.DisplayObjectContainer();
    this.tumbleweed.position = new PIXI.Point(position.x, position.y);

    this.sprite = new PIXI.Sprite.fromFrame("loader_tumbleweed.png");
    this.sprite.anchor = new PIXI.Point(.5, .5);
    this.sprite.interactive = true;

    this.shadow = new PIXI.Sprite.fromFrame("shadow.png");
    this.shadow.anchor = new PIXI.Point(.5, .5);
    this.shadow.position.y += this.sprite.height / 2 - 10;
    this.shadow.alpha = .4;

    this.tumbleweed.addChild(this.shadow);
    this.tumbleweed.addChild(this.sprite);

	this.baseSpeed = this.speed;

	var direction = Math.round(Math.random()*2-1);
    if(direction == 0) direction = -1;

	this.direction =  direction;

	if(this.direction == -1)
	{
		this.speed = Math.random()*5 + 5;
	}
	else
	{
		this.speed = Math.random()*3 + 1;	
	}

	this.baseSpeed = this.speed;
	this.counter = Math.random()*100;


	this.sprite.mousedown = this.sprite.touchstart = this._mousedown.bind(this);
	this.sprite.mouseup = this.sprite.touchend = this._mouseup.bind(this);

	this.baseY = 0;
	// this.cowView.mouseover = this._mouseover.bind(this);
	// this.cowView.mouseout = this._mouseout.bind(this);
}

Tumbleweed.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

Tumbleweed.prototype._mouseover = function()
{
}

Tumbleweed.prototype._mouseout = function()
{
}

Tumbleweed.prototype._mousedown = function()
{
}

Tumbleweed.prototype._mouseup = function(data)
{
	// this.bouncer.x = -100;
}

Tumbleweed.prototype.live = function()
{

	this.counterMood += 1 * Ticker.instance.deltaTime;
	this.counter += 1 * Ticker.instance.deltaTime;

	if(this.asc)
	{
		this.speed *= 1.05;
		if(this.speed >= this.baseSpeed)
		{
			this.asc = false;
		}
	}
	else 
	{
		this.speed *= .98;

		if(this.speed < 0.02)
		{
			this.speed = 0;
		}
	}

	this.shadow.alpha = .6 - this.speed * .1;
	this.sprite.rotation += .03 * this.speed * this.direction * this.speedDecrease;

	// quand this.speed = 0, changer de mood
	// change de mood, si le nouveau mood va vers la droite, léger this.speed
	// si il va vers la gauche, souffle du vent tres fort (this.speed)

	if(this.speed == 0 && !this.asc) // make the wind blows
	{
		this.asc = true;
		this.speed = .1; 

		var direction = Math.round(Math.random()*2-1);
	    if(direction == 0) direction = -1;

		this.direction =  direction;

		if(this.direction == -1)
		{
			this.baseSpeed = Math.random()*5 + 5;
			// this.bouncer.x = -this.speed * 5 * this.speedDecrease;
		}
		else
		{
			this.baseSpeed = Math.random()*3 + 1;
			// this.bouncer.x = -this.speed * 10;
		}
    }

    this.tumbleweed.position.x += this.direction * this.speed * this.speedDecrease;
    // this.tumbleweed.position.y = this.baseY - this.speed * this.speedDecrease * 10;
};

Tumbleweed.prototype.destroy = function()
{
}




module.exports = Tumbleweed;
});
define('com/sc/games/chase/SheriffCallie',['require','exports','module','PIXI','com/sc/games/Game','com/fido/system/Ticker','com/fido/ui/PixiTrackpad','com/fido/utils/Utils','com/fido/game/GameObjectPool','com/fido/system/Device'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Game            = require('com/sc/games/Game');
    var Ticker          = require('com/fido/system/Ticker');
    var Trackpad        = require('com/fido/ui/PixiTrackpad');
    var Utils           = require('com/fido/utils/Utils');
    var Pool            = require('com/fido/game/GameObjectPool');
    var Device          = require('com/fido/system/Device');


    PIXI.DisplayObject.prototype.depthOffset = 0;

    var SheriffCallie = function(cow, clouds)
    {
        PIXI.DisplayObjectContainer.call( this );


        this.counter = Math.random() * 50;
        this.crazyJump = 30;
        this.isJumping = false;
        this.particalPool = new Pool(ParticalSmoke);
        this.particals = [];
        this.scaleSmoke = 1.02;
        // HORSE + CHARACTER

        this.isIpadCanvas = Device.instance.iPad && !window.WEBGL;
        this.division = this.isIpisIpadCanvasad ? 20 : 3;

        var horseTexture = Utils.getTexturesFromFramesWithPrefix("clementine_run%%.png", 12, 0);
        
        this.horse = new PIXI.Sprite(horseTexture[0]);
        this.horse.textures = horseTexture;
        this.horse.counter = 0;
        this.horseSpeed = .3;

        // this.horse.animationSpeed = .1;
        this.horse.anchor.x = 0.5;
        this.horse.anchor.y = 0.5; 
        // this.horse.gotoAndPlay(0);

        //this.sc = new PIXI.Sprite.fromFrame("character_player.png");
        //this.sc.anchor = new PIXI.Point(.5, .5);
        //this.sc.position.y -= this.horse.height/3 -20;
        //this.sc.position.x -= 30;

        this.addChild(this.horse);        
        //this.horse.addChild(this.sc);

        var trackPadParameters = { target: this };
        this.trackpad = new PixiTrackpad(trackPadParameters);
        
        this.trackpad.onClick.add(function()
        {
            this.term = 1;
        }.bind(this));
    }

    SheriffCallie.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    SheriffCallie.prototype.jump = function(posY)
    {
        if (this.isJumping) return;

        TweenLite.to(this.horse.position, .2, {
            y: this.horse.position.y - 50,
            reversed: true,
            ease:Expo.easeOutIn,
            onReverseComplete:function()
            {
                this.isJumping = false;
            }.bind(this)
        });
        this.isJumping = true;
    }

    SheriffCallie.prototype.update = function() 
    {
        this.counterJump += .1 * Ticker.instance.deltaTime;
        this.counter += .15 * Ticker.instance.deltaTime;
       // this.sc.position.y += 2*Math.cos( this.counter );

        this.horse.counter += this.horseSpeed * Ticker.instance.deltaTime;
        this.horse.setTexture( this.horse.textures[Math.floor(this.horse.counter%this.horse.textures.length)] );

        // SMOKE
        if(this.counter % this.division)
        {
            var partical = this.particalPool.getObject();
            
            this.addChild(partical);
            partical.position.x = this.horse.position.x - 160 + Math.random()*300;
            partical.position.y = this.horse.position.y + 100 + Math.random()*30;
            
            partical.speed.x = 1+Math.random()*2;
            partical.speed.y = 1+Math.random()*2;
            
            partical.speed.x *= 1
            partical.speed.y *=1

            partical.alphay = .8;
            partical.rotation = Math.random() * Math.PI * 2;
            partical.scale.x = partical.scale.y = 0.4+Math.random() * 0.5;
            this.particals.push(partical);

            // var partical2 = this.particalPool.getObject();
            // this.addChild(partical2);
            // partical2.position.x = this.horse.position.x + 20;
            // partical2.position.y = this.horse.position.y + 130;
            
            // partical2.speed.x = 1+Math.random()*2;
            // partical2.speed.y = 1+Math.random()*2;
            
            // partical2.speed.x *= 1
            // partical2.speed.y *=1

            // partical2.alphay = .8;
            // partical2.rotation = Math.random() * Math.PI * 2;
            // partical2.scale.x = partical2.scale.y = 0.1+Math.random() * 0.2;
            // this.particals.push(partical2);
        }

        for (var i=0; i < this.particals.length; i++) 
        {
            var partical =  this.particals[i];
            
            partical.scale.x = partical.scale.y *= this.scaleSmoke; // put 1.1 for crazy
            partical.alphay *= 0.85;
            
            partical.alpha = partical.alphay > 1 ? 1 : partical.alphay;
            partical.position.x -= partical.speed.x * 3 
            partical.position.y -= partical.speed.y * 1.2
            
            if(partical.alpha < 0.01)
            {
                this.removeChild(partical);
                this.particals.splice(i, 1);
                this.particalPool.returnObject(partical);
                i--;
            }
        };  
    }

    var ParticalSmoke = function()
    {
        PIXI.Sprite.call(this, PIXI.Texture.fromFrame("cloud.png"));
        this.anchor.x = 0.5;
        this.anchor.y = 0.5;
        
        this.speed = new PIXI.Point();
    }

    ParticalSmoke.constructor = ParticalSmoke;
    ParticalSmoke.prototype = Object.create( PIXI.Sprite.prototype );

    module.exports = SheriffCallie;

});
define('com/sc/games/chase/Bandit',['require','exports','module','PIXI','signals','com/sc/games/Game','com/fido/system/Ticker','com/fido/ui/PixiTrackpad'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Signal          = require('signals');
    var Game            = require('com/sc/games/Game');
    var Ticker          = require('com/fido/system/Ticker');
    var Trackpad        = require('com/fido/ui/PixiTrackpad');


    PIXI.DisplayObject.prototype.depthOffset = 0;

    var Bandit = function(cow, clouds)
    {
        PIXI.DisplayObjectContainer.call( this );

        this.counter = Math.random()*50;
        this.crazyJump = 30;
        // HORSE + CHARACTER

        this.horse = new PIXI.Sprite.fromImage("horse_bandit.png");
        this.horse.anchor = new PIXI.Point(.5, .5);
        
        this.bandit = new PIXI.Sprite.fromImage("character_bandit.png");
        this.bandit.anchor = new PIXI.Point(.5, .5);
        this.bandit.position.y -= this.horse.height/1.5;
        this.bandit.position.x -= 20;

        this.addChild(this.horse);
        this.horse.addChild(this.bandit);

        var trackPadParameters = { target: this };
        this.trackpad = new PixiTrackpad(trackPadParameters);
        
        this.trackpad.onClick.add(function(){
            this.term = 1;
        }.bind(this));
    }

    Bandit.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    Bandit.prototype.reset = function(params){
    }    
    
    Bandit.prototype.jump = function(posY){
        if(this.isJumping) return;
        this.posY = posY;
        this.counterJump = .5;
        this.isJumping = true;
    }

    Bandit.prototype.update = function() {
        this.counterJump += .1;
        this.counter += .15;
        this.bandit.position.y += 2*Math.cos( this.counter );

        if(this.isJumping) {
            if(this.counterJump >2) {
                this.isJumping = false;
                this.position.y = this.posY;
            }
            else this.position.y -= Math.sin( Math.tan(this.counterJump) * Math.pow(Math.sin(this.counterJump), 10) ) * 30 ;
        }
    }


    module.exports = Bandit;

});
define('com/sc/games/chase/CowChased',['require','exports','module','PIXI','com/fido/ui/PixiTrackpad','com/fido/game/GameObjectPool','signals','com/fido/utils/Utils','com/fido/system/Ticker','com/fido/system/Device'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Trackpad        = require('com/fido/ui/PixiTrackpad');
    var Pool            = require('com/fido/game/GameObjectPool');
    var Signal          = require('signals');
    var Utils           = require('com/fido/utils/Utils');
    var Ticker          = require('com/fido/system/Ticker');
    var Device          = require('com/fido/system/Device');

    var CowChased = function(texture)
    {
        PIXI.DisplayObjectContainer.call( this );

        this.counter = Math.random()*50;
        this.crazyJump = 30;
        this.particalPool = new Pool(ParticalSmoke);
        this.particals = [];
        this.scaleSmoke = 1.02;

        this.isIpadCanvas = Device.instance.iPad && !window.WEBGL;
        this.division = this.isIpisIpadCanvasad ? 20 : 3;

        this.onBoostFinished = new Signal();

        var cowTexture = Utils.getTexturesFromFramesWithPrefix("cow_run%%.png", 12, 0);
        
        this.cow = new PIXI.Sprite(cowTexture[0]);
        this.cow.textures = cowTexture;
        this.cow.position.x -= 20;
        this.cow.scale.set(1.4);
        this.cow.counter = 0;
        this.cowSpeed = .3;
        this.cow.anchor.x = 0.5;
        this.cow.anchor.y = 0.5;


        this.addChild(this.cow);

        var trackPadParameters = { target: this };
        this.trackpad = new PixiTrackpad(trackPadParameters);
        
        this.trackpad.onClick.add(function()
        {
            this.term = 1;
        }.bind(this));
    }

    CowChased.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );
        
    CowChased.prototype.boost = function(boostValue, speed)
    {
        TweenLite.to(this, .5,
        {
            scaleSmoke: boostValue,
            cowSpeed: speed,
            ease: Ease.easeIn
        });
    }

    CowChased.prototype.stopBoost = function(boostValue)
    {
        TweenLite.to(this, .6,
        {
            scaleSmoke: 1.02,
            ease: Quad.easeIn,
            onComplete:function()
            {
                this.onBoostFinished.dispatch();
            }.bind(this)
        });
    }

    CowChased.prototype.jump = function(posY)
    {
        this.posY = posY;
        this.counterJump = .5;
        this.isJumping = true;
    }

    CowChased.prototype.update = function() 
    {
        this.counterJump += .1;
        this.counter += .15;
        this.cow.position.y += 2*Math.cos( this.counter );

        if (this.isJumping) 
        {
            if (this.counterJump >2) 
            {
                this.isJumping = false;
                this.position.y = this.posY;
            }
            else this.position.y -= Math.sin( Math.tan(this.counterJump) * Math.pow(Math.sin(this.counterJump), 10) ) * 30 ;
        }

        // RUN COWS
        this.cow.counter += this.cowSpeed * Ticker.instance.deltaTime;
        this.cow.setTexture( this.cow.textures[Math.floor(this.cow.counter%this.cow.textures.length)] );

        // SMOKE
        if(this.counter % this.division)
        {
            var partical = this.particalPool.getObject();
            
            this.addChild(partical);
            partical.position.x = this.cow.position.x - 140 + Math.random()*300;
            partical.position.y = this.cow.position.y + 150 + Math.random()*30;
            
            partical.speed.x = 1+Math.random()*2;
            partical.speed.y = 1+Math.random()*2;
            
            partical.speed.x *= 1
            partical.speed.y *=1

            partical.alphay = .8;
            partical.rotation = Math.random() * Math.PI * 2;
            partical.scale.x = partical.scale.y = 0.8+Math.random() * 0.5;
            this.particals.push(partical);
        }

        for (var i=0; i < this.particals.length; i++) 
        {
            var partical =  this.particals[i];
            
            partical.scale.x = partical.scale.y *= this.scaleSmoke; // put 1.1 for crazy
            partical.alphay *= 0.85;
            
            partical.alpha = partical.alphay > 1 ? 1 : partical.alphay;
            partical.position.x -= partical.speed.x * 4; 
            partical.position.y -= partical.speed.y * 1.2
            
            if(partical.alpha < 0.01)
            {
                this.removeChild(partical);
                this.particals.splice(i, 1);
                this.particalPool.returnObject(partical);
                i--;
            }
        }; 
    }

    var ParticalSmoke = function()
    {
        PIXI.Sprite.call(this, PIXI.Texture.fromFrame("cloud.png"));
        this.anchor.x = 0.5;
        this.anchor.y = 0.5;
        
        this.speed = new PIXI.Point();
    }

    ParticalSmoke.constructor = ParticalSmoke;
    ParticalSmoke.prototype = Object.create( PIXI.Sprite.prototype );

    module.exports = CowChased;

});
define('com/sc/games/chase/ChaseGame',['require','exports','module','PIXI','signals','com/sc/games/Game','com/fido/ui/PixiTrackpad','com/sc/games/chase/SheriffCallie','com/sc/games/chase/Bandit','com/sc/games/chase/CowChased','com/fido/loader/Cache','com/fido/system/Ticker','com/fido/utils/FrameWait','com/fido/sound/SoundManager'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Signal          = require('signals');
    var Game            = require('com/sc/games/Game');
    var Trackpad        = require('com/fido/ui/PixiTrackpad');
    var Sheriff         = require('com/sc/games/chase/SheriffCallie');
    var Bandit          = require('com/sc/games/chase/Bandit');
    var CowChased          = require('com/sc/games/chase/CowChased');
    var Cache            = require('com/fido/loader/Cache');
    var Ticker              = require('com/fido/system/Ticker');
    var Wait             = require("com/fido/utils/FrameWait");
    var SoundManager        = require('com/fido/sound/SoundManager');

    PIXI.DisplayObject.prototype.depthOffset = 0;

    var ChaseGame = function(cow, clouds, type, app)
    {
        PIXI.DisplayObjectContainer.call( this );

        this.dimensions = 
        {
            width: 1136,
            height: 640
        }

        this.datasChaseGame = Cache.getJson("datasChasegame");

        this.app = app;
        this.typeGame = type; // CHANGE TO PLAY AGAINST COW OR AGAINST BANDIT
        this.hitArea = new PIXI.Rectangle(0, 0, this.dimensions.width, this.dimensions.height);

        this.center = this.dimensions.width / 2;
        this.speed = 4;
        this.cloudSpeed = .4;
        this.originalDist = this.dimensions.width / 3;
        this.term = 0;
        this.isFinished = false;
        this.counter = 1;
        this.clouds = clouds;
        // this.sky = sky;
        this.term = 0;
        this.isReady = false;
        this.boostMode = false;
        this.boostValue = 0; 
        this.cowRuns = [Math.round(Math.random()), Math.round(Math.random()), Math.round(Math.random())];
        this.timeElapsed = 0;
        this.decrement = .5;
        this.blackIsComing = false;
        this.sheriffIsInThePlace = false;

        this.onSuccess = new Signal();
        this.onLoose = new Signal();


        this.container =  new PIXI.DisplayObjectContainer(); // add a container we will scale
        this.container.anchor = new PIXI.Point(.5, .5);
        this.container.position = new PIXI.Point(this.dimensions.width/2, this.dimensions.height/2);

        this.charactersContainer =  new PIXI.DisplayObjectContainer();
        this.charactersContainer.position.x = -1400;
        this.container.addChild(this.charactersContainer);

        // this dist is a distance who separates Callie and the cow
        // everything is placed based on the center
        this.dist = this.dimensions.width / 2;

        this.cow = cow;

        this.adversary =  new CowChased(cow.body.texture);
        this.adversary.scale = new PIXI.Point(.5, .5);
        this.adversary.anchor =  new PIXI.Point(.5, .5);
        this.adversary.position =  new PIXI.Point(this.dist, 100);
        this.adversary.onBoostFinished.add(this._onBoostFinished, this)

        this.sheriff = new Sheriff();
        this.sheriff.scale = new PIXI.Point(.8, .8);
        this.sheriff.anchor =  new PIXI.Point(.5, .5);
        this.sheriff.position =  new PIXI.Point(-this.dist, 100);

        this.minPos = this.sheriff.position.x; // important to calculate percentage of deplacement

        // this.generateBackground();

        this.layer30Array = [];
        this.layer20Array = [];
        this.layer10Array = [];
        this.layer0Array = [];

        this.layer30 =  new PIXI.DisplayObjectContainer();
        this.layer20 =  new PIXI.DisplayObjectContainer();
        this.layer10 =  new PIXI.DisplayObjectContainer();
        this.layer0 =  new PIXI.DisplayObjectContainer();

        this.container.addChild(this.layer30);
        this.container.addChild(this.layer20);
        this.container.addChild(this.layer10);
        this.container.addChild(this.layer0);

        this.addChild(this.container);

        this.charactersContainer.addChild(this.adversary);
        this.charactersContainer.addChild(this.sheriff);
        this.layer10.addChild(this.charactersContainer);

        var trackPadParameters = { target: this };
        this.trackpad = new PixiTrackpad(trackPadParameters);
        
        this.mousedown = this.touchstart = this._mouseDown.bind(this);    

        document.onkeydown = function(e)
        {
            if (!this.sheriffIsInThePlace) return;
            if (e.keyCode == 32) 
            {
                this.term += 2;
                this.jump();
            }
        }.bind(this)

        this.generateDecor();

        // this.intervalsClouds = setInterval(this.makeSomeClouds.bind(this), 600);
    };

    ChaseGame.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    ChaseGame.prototype.makeSomeClouds = function()
    {
        if(!this.isReady || this.isFinished) return;

        // ajouter toujours des nuages au sprite de la vache
        for (var i = 0; i < 5; i++) {
            var cloudCow = new PIXI.Sprite.fromFrame("cloud.png");
            cloudCow.anchor = new PIXI.Point(0, 1);
            cloudCow.position = new PIXI.Point(-this.adversary.width/5*2 - 10, this.adversary.height/2 + 45 );
            cloudCow.alpha = 0;
            cloudCow.scale.set(0);

            var cloudSheriff = new PIXI.Sprite.fromFrame("cloud.png");
            cloudSheriff.anchor = new PIXI.Point(0, 1);
            cloudSheriff.position = new PIXI.Point(-100, this.sheriff.height/4 );
            cloudSheriff.alpha = 0;
            cloudSheriff.scale.set(0);

            this.adversary.addChild(cloudCow);
            this.sheriff.addChild(cloudSheriff);
            
            TweenLite.to([cloudCow.position], 1,
            {
                x:-330,
                delay: i*.3,
            });

            TweenLite.to([cloudSheriff.position], 1,
            {
                x:-200,
                delay: i*.3,
            });

            TweenLite.to([cloudCow, cloudSheriff], .3,
            {
                alpha: .9,
                delay: i*.3,
            });

            TweenLite.to([cloudCow, cloudSheriff], 3.2,
            {
                alpha: 0,
                delay: i*.3+.3,
                ease: Back.easeOut
            });

            cloudCow.anchor.x = 1;
            cloudSheriff.anchor.x = 1;
            TweenLite.to([cloudCow.scale, cloudSheriff.scale], 3.2,
            {
                x: 2.5,
                y: 2.5,
                delay: i*.3
            });
        };
    }

    ChaseGame.prototype._onBoostFinished = function()
    {
        // this.boostIsFinished = true;
        this.boostMode = false;
    };

    ChaseGame.prototype.cancelBoost = function()
    {
        this.adversary.stopBoost();
    }

    // force stop when restart game (called from CattleGame.js)
    ChaseGame.prototype.stop = function()
    {
        SoundManager.sfx.stop('galloping');
    }

    // stop galloping on pause (called from CattleGame.pause())
    ChaseGame.prototype.pause = function()
    {
        SoundManager.sfx.stop('galloping');
    }

    // resume galloping on pause (called from CattleGame.resume())
    ChaseGame.prototype.resume = function()
    {
        SoundManager.sfx.play('galloping');
    }

    ChaseGame.prototype.playSound = function()
    {
        SoundManager.sfx.play('galloping');
    }

    ChaseGame.prototype.goFasterCow = function(rotation)
    {
        if(this.boostMode) return;

        if(!this.cowRuns[0]) // first run
        {
            this.boostMode = true;
            this.cowRuns[0] = true;;
            this.boostValue = 1.4;

            TweenLite.delayedCall(1, this.cancelBoost.bind(this));
            this.adversary.boost(1.11, .9);
        }
        else if(!this.cowRuns[1]) // second acceleration
        {
            this.boostMode = true;
            this.cowRuns[1] = true;
            this.boostValue = .6;

            TweenLite.delayedCall(1, this.cancelBoost.bind(this));
            this.adversary.boost(1.09, .7);

        }
        else if(!this.cowRuns[2]) // third acceleration
        {
            this.boostMode = true;
            this.cowRuns[2] = true;
            this.boostValue = .4;

            TweenLite.delayedCall(1, this.cancelBoost.bind(this));
            this.adversary.boost(1.06, .6);
        }
        else
        {
            this.cancelBoost();
        }
    }

    ChaseGame.prototype._mouseDown = function()
    {
        if (!this.sheriffIsInThePlace) return;
        this.term += 2;
        this.jump();    
    };

    ChaseGame.prototype.jump = function(params)
    {
        this.sheriff.jump(this.sheriff.position.y);
    };

    ChaseGame.prototype.start = function(params)
    {
        this.startTime = Ticker.instance.lastTime;
        this.isReady = true;

        // this.originalDist = this.dimensions.width;
        // this.dist = this.dimensions.width / 2 * 3;

        TweenLite.to(this.charactersContainer.position, 2, {
            x: -20,
            ease: Sine.easeInOut,
            onComplete: function()
            {
                // this.sheriffIsInThePlace = true;
            }.bind(this)
        });

        TweenLite.to(this.container.scale, 1, {
            x: 1.4,
            y: 1.4,
            ease: Sine.easeIn
        });

        TweenLite.to(this.container.scale, 1, {
            x: .929,
            y: .929,
            delay: 1,
            ease: Sine.easeOut,
            onComplete: function()
            {
                this.sheriffIsInThePlace = true;
            }.bind(this)
        });
        // TweenLite.to(this, 1.2, {
        //     originalDist: this.dimensions.width/3,
        //     ease: Ease.easeOut,
        //     onComplete: function()
        //     {
        //         this.sheriffIsInThePlace = true;
        //     }.bind(this)
        // });
    };  

    ChaseGame.prototype.decrementSeconds = function(value)
    {
        this.seconds = 45 - value;

        if (this.seconds <= 0)
        {
            // clearInterval(this.intervalsClouds);
            this.isFinished = true;
            this.isSuccess = false;
            // this.onLoose.dispatch(this.cow);
        }
    };

    /*
    * USEFUL
    */

    ChaseGame.prototype.dispatchInLayers = function(layerNumber, obj)
    {
        var array;
        if (layerNumber == 0) 
        {
            this.layer0.addChild(obj.sprite);
            array = this.layer0Array;
        }
        else if (layerNumber == 10) 
        {
            this.layer10.addChild(obj.sprite);
            array = this.layer10Array; 
        }
        else if (layerNumber == 20) 
        {
            this.layer20.addChild(obj.sprite);
            array = this.layer20Array; 
        }
        else if (layerNumber == 30) 
        {
            this.layer30.addChild(obj.sprite);
            array = this.layer30Array; 
        }

        array.push(obj);
    }

    ChaseGame.prototype.generateDecor = function()
    {
        for (var c = 0; c < this.datasChaseGame.decors.length; ++c) 
        {
            var decorElement = this.datasChaseGame.decors[c];
            var sprite = new PIXI.Sprite.fromFrame(decorElement.image);
            sprite.anchor = new PIXI.Point(.5, 1);
            sprite.scale.x = sprite.scale.y = decorElement.scale;
            sprite.position = decorElement.position;

            var obj = {
                "sprite":sprite,
                "speed": decorElement.speed
            };
            this.dispatchInLayers(decorElement.layer, obj);
        }
    }

    // call after success
    ChaseGame.prototype.finish = function()
    {
        // on finish, inform controller and force stop update boucle!        
        this.isFinished = true;
        this.isSuccess = true;
        // this.onSuccess.dispatch(this.cow);
    } 

    ChaseGame.prototype.animationEndSuccess = function()
    {
        this.app.fade.onFadeIn.addOnce(this.callbackSuccess, this);
        SoundManager.sfx.fadeTo('galloping', 0, .5);
        this.app.fade.fade(.9,1,0.7);
    } 

    ChaseGame.prototype.animationEndLoose = function()
    {
        this.app.fade.onFadeIn.addOnce(this.callBackLoose, this);
        this.app.fade.fade(.9,1,0.7);
    } 

    ChaseGame.prototype.callbackSuccess = function()
    {
        this.onSuccess.dispatch(this.cow);
    }

    ChaseGame.prototype.callBackLoose = function()
    {
        this.onLoose.dispatch(this.cow);
    }  

    /*
     *  Return a value between 0 and 1
     */
    ChaseGame.prototype.percentage = function()
    {
        // get percentage of deplacement between Sheriff Callie and the cow
        // the name of the function is confusing, percentage is between 0 and 1

        if(this.adversary.position.x > 378) this.adversary.position.x = 378;

        var dist = this.adversary.position.x - this.minPos;
        var posSheriff = this.sheriff.position.x- this.minPos;
        var percentage = (posSheriff / dist);

        // if (percentage < 0) percentage = 0;
        // if (percentage > 1) percentage = 1;

        return percentage;
    }

    ChaseGame.prototype.adaptScale = function(container)
    {
        // increase scale to look like in poursuit movies !
        var percentage = this.percentage();

        this.container.scale.x = this.container.scale.y = .8 + .6*percentage;

        if (this.container.scale.x < .9)
        {
            this.container.scale.x = this.container.scale.y = .9;
        }

        // this.sky.scale.y = .6 + .1*percentage;
    }



    ChaseGame.prototype.moveClouds = function() 
    {
        for (var i = 0; i < this.clouds.length; ++i) 
        {
            this.clouds[i].img.position.x -= this.cloudSpeed * this.clouds[i].speed;

            if (this.clouds[i].img.position.x <= this.borderLeft) 
            {
                this.clouds[i].img.position.x += this.totalWidth;
            }
        };
    }

    ChaseGame.prototype.moveFloor = function() 
    {
        for (var i = 0; i < this.floorArray.length; ++i) 
        {
            this.floorArray[i].position.x -= this.cloudSpeed;

            if (this.floorArray[i].position.x <= this.borderLeft) 
            {
                this.floorArray[i].position.x += this.totalWidth;
            }
        };
    }


    ChaseGame.prototype.moveSprite = function(obj)
    {
        obj.sprite.position.x -= (this.speed + obj.speed) * this.cloudSpeed; // linear displacement + amplitude
        if (obj.sprite.position.x + Math.abs(obj.sprite.width) <= -this.dimensions.width/2 - obj.sprite.width) 
        {
            obj.sprite.position.x = this.dimensions.width + Math.random()*4000;
        }
    }

    ChaseGame.prototype.update = function()
    {
        if(!this.isReady) return;

        if(!this.isFinished)
        {
            this.timeElapsed += Ticker.instance.deltaTime / 60;
            // console.log(this.timeElapsed);

            // if(this.timeElapsed > 60)this.timeElapsed = 60;

            this.decrementSeconds(Math.round(this.timeElapsed)); 

            this.counter += .05 * Ticker.instance.deltaTime;

            // this.makeSomeClouds();
            if(this.sheriffIsInThePlace) 
            {
                this.adaptScale();
            }

            if (this.percentage() >= .5) 
            {
                this.goFasterCow();
            }
            
            if (this.percentage() >= 1)  // iPad debug : goes inside
            {
                this.finish();
                // clearInterval(this.intervalsClouds);

                return;
            }

            // cancel boost if the player is far away
            // if (this.percentage() <= .2 && this.boostMode)  // iPad debug : goes inside
            // {
            //     this.cancelBoost();
            //     console.log("this.cancelBoost")
            // }

            if (this.dist <= this.originalDist)
            {
                if (this.term > -1)
                {
                    if(this.boostMode)
                    {                    
                        this.term -= this.boostValue;
                    }
                    else
                    {
                        this.term -= .08; // change this to vary difficulty
                    }
                } 
            }
            else {
                this.dist = this.originalDist;
                this.term = 0;
            }

            if (this.dist <= this.originalDist)
            {
                this.dist -= this.term;
            }

            this.cloudSpeed = .4 + this.percentage()*10;

            this.sheriff.horseSpeed = .4 + this.percentage()*.6;
            this.sheriff.scaleSmoke = 1.02 + this.percentage()*.06;

            if(!this.boostMode)
            {
                this.adversary.scaleSmoke = 1.02 + this.percentage()*.08;
                this.adversary.cowSpeed = .4 + this.percentage()*.5;
            }

            // balance movement to look less static 
            var distSupSheriff = Math.cos(this.counter)*20;
            var distSupCow = Math.sin(this.counter/2)*20;

            this.adversary.position.x =  this.dist - distSupCow;
            this.sheriff.position.x = -this.dist + distSupSheriff;

            this.sheriff.position.y -= .2*Math.sin(this.counter);
            this.adversary.position.y -= .2*Math.sin(this.counter/2);

            // this.moveElements(this.floorArray, .5);
        }
        else // end animation
        {
            if(this.isSuccess)
            {
                this.cloudSpeed *= .98;

                if(this.sheriff.horseSpeed > .4)
                {
                    this.sheriff.horseSpeed *= .99;
                    this.adversary.cowSpeed *= .99;
                }

                if(this.sheriff.position.x > - 1000)
                {
                    this.decrement *= 1.04;
                    this.sheriff.position.x -= this.decrement;
                    this.adversary.position.x -= this.decrement;
                }
                else if (!this.blackIsComing)
                {
                    this.blackIsComing = true;
                    this.animationEndSuccess();
                }
            }
            else // loose
            {
                if(this.sheriff.position.x > - 1000)
                {
                    this.decrement *= 1.05;
                    this.sheriff.position.x -= this.decrement;
                    this.adversary.position.x += this.decrement;
                }
                else if (!this.blackIsComing)
                {
                    this.blackIsComing = true;
                    this.animationEndLoose();
                }
            }
        }

        this.moveClouds();
        // this.moveFloor();
        this.sheriff.update();
        this.adversary.update();

        for (var i = 0; i < this.layer30Array.length; ++i) 
        {
            var obj = this.layer30Array[i];
            this.moveSprite(obj);
        }
        for (var i = 0; i < this.layer20Array.length; ++i) 
        {
            var obj = this.layer20Array[i];
            this.moveSprite(obj);
        }
        for (var i = 0; i < this.layer0Array.length; ++i) 
        {
            var obj = this.layer0Array[i];
            this.moveSprite(obj);
        }

    }


    module.exports = ChaseGame;

});
define('com/fido/app/transitions/StaticTransition',['require','exports','module','com/fido/utils/Utils'],function (require, exports, module) {

var Utils = require('com/fido/utils/Utils');

var Transition = {


	// toScreen : function (options) {

	// 	var defaultOptions = {

	// 		target : new PIXI.DisplayObjectContainer(),
	// 		callback : null,
	// 		fullWidth : 1200,
	// 		fullHeight : 700,
	// 		colour : 0x000000
	// 	}

	// 	Utils.defaults(defaultOptions,options);

	// 	this.fullW = options.fullWidth;

	// 	this.fullH = options.fullHeight;

	// 	this.target = options.screen;

	// 	this.callback = options.callback;

	// 	this.g = new PIXI.Graphics();
		

	// 	this.g.position.set(this.fullW/2,this.fullH/2);

	//     this.g.beginFill(0x000000);

	//     this.g.drawCircle(0,0,650);

	//     this.g.endFill();

	//     this.target.addChild(this.g);

	//     this.target.mask = this.g;

	//     this.g.scale.set(0.001);

	// 	this.useMask = false;

	// 	TweenLite.to(this.g.scale, 1, {x:1, y:1, ease:Sine.easeOut, onComplete : this.finished.bind(this)});

	// 	return this;
	// },

	finished : function () {
		this.callback();
		this.target.removeChild(this.g);
	},

	maskedTransition : function (options) {

		// var defaultOptions = {

		// 	screen : new PIXI.DisplayObjectContainer(),
		// 	callback : null,
		// 	fullWidth : 1200,
		// 	fullHeight : 700,
		// 	colour : 0x000000
		// }

		// Utils.defaults(defaultOptions,options);

		this.fullW = options.fullWidth;

		this.fullH = options.fullHeight;

		this.target = options.screen;

		this.callback = options.callback;

		this.g = new PIXI.Graphics();

		// asset specific code : 
		// here the star is 238 * 232
		var shapeWidth = 238;
		var shapeHeight = 232;

		this.pink = new PIXI.Graphics();

		this.pink.beginFill(0xf38898);

		this.pink.drawRect(0,0,1200,640);

		this.pink.endFill();

		this.g.position.set(600 - shapeWidth/2,320 - shapeHeight/2);


	    this.g.beginFill(0x000000);
      	this.g.moveTo(210,110);
      	this.g.bezierCurveTo(209,110,207,110,206,109);
        this.g.lineTo(175,141);
        this.g.lineTo(180,183);
        this.g.bezierCurveTo(188,186,193,193,193,201);
        this.g.bezierCurveTo(192,212,184,220,174,220);
        this.g.bezierCurveTo(164,219,156,211,155,202);
        this.g.lineTo(116,184);
        this.g.lineTo(76,203);
        this.g.bezierCurveTo(75,212,67,219,57,219);
        this.g.bezierCurveTo(47,219,38,210,39,200);
        this.g.bezierCurveTo(39,192,45,185,52,182);
        this.g.lineTo(57,141);
        this.g.lineTo(26,108);
        this.g.bezierCurveTo(24,108,22,109,21,109);
        this.g.bezierCurveTo(10,108,2,100,3,90);
        this.g.bezierCurveTo(3,79,11,71,22,71);
        this.g.bezierCurveTo(28,72,33,75,37,79);
        this.g.lineTo(80,73);
        this.g.lineTo(101,31);
        this.g.bezierCurveTo(99,28,98,25,98,21);
        this.g.bezierCurveTo(98,10,107,2,117,3);
        this.g.bezierCurveTo(127,3,135,11,135,22);
        this.g.bezierCurveTo(135,25,134,29,132,32);
        this.g.lineTo(153,74);
        this.g.lineTo(196,80);
        this.g.bezierCurveTo(200,75,205,73,211,73);
        this.g.bezierCurveTo(221,73,229,82,229,92);
        this.g.bezierCurveTo(229,102,221,110,210,110);
        this.g.endFill();

	    this.target.addChild(this.g);

	   // this.target.mask = this.g;

	    this.g.scale.set(0.001);

		this.useMask = false;

		TweenLite.to(this.g.scale, 2.0, {x:1, y:1, ease:Sine.easeOut, onComplete : this.finished.bind(this)});

		return this;
	}

}


module.exports = Transition;

});
define('com/fido/app/transitions/CartoonTransitionAtPoint',['require','exports','module','com/fido/utils/Utils'],function (require, exports, module) {

var Utils = require('com/fido/utils/Utils');

var CartoonTransitionAtPoint = {};


CartoonTransitionAtPoint.toScreen = function (options) {

	var defaultOptions = {

		target : new PIXI.DisplayObjectContainer(),
		callback : null,
		fullWidth : 1200,
		fullHeight : 700,
		color : 0x000000,
		position : new PIXI.Point()
	}

	Utils.defaults(defaultOptions,options);

	this.fullW = options.fullWidth;

	this.fullH = options.fullHeight;

	this.target = options.screen;

	this.callback = options.callback;

	this.position = options.position;

	this.count = 0;

	this.g = new PIXI.Graphics();
	
	this.g.position.set(this.position.x, this.position.y);

    this.g.beginFill(0x000000);

    this.g.drawCircle(0,0,650);

    this.g.endFill();

    this.target.addChild(this.g);

    this.target.mask = this.g;

    this.g.scale.set(2);

	this.useMask = false;

	TweenLite.to(this.g.scale, 1, {
		x:.001, 
		y:.001, 
		ease:Expo.easeOut,
		onComplete : function(){
			this.callback();
			TweenLite.to(this.g.scale, 1, {x:2, y:2, ease:Expo.easeIn, onComplete:function(){
				this.target.removeChild(this.g);
			}.bind(this)});
		}.bind(this)
	});

	return this;
}


module.exports = CartoonTransitionAtPoint;

});
define('com/sc/games/cattle/ButtonWireframe',['require','exports','module','PIXI','com/fido/ui/buttons/Button'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Button          = require('com/fido/ui/buttons/Button');

    var ButtonWireframe = function(position)
    {        
        var texture = PIXI.Texture.fromFrame('button_roundup.png');
        var view = new PIXI.Sprite(texture);
            view.position = position;
            view.anchor.set(0.5);

        Button.call( this, view );

        this.view.setTexture(texture);
        this.onHover.add(this._onMouseOver, this);
        this.onMouseOut.add(this._onMouseOut, this);
    };

    ButtonWireframe.prototype = Object.create( Button.prototype );

    ButtonWireframe.prototype._onMouseOver = function()
    {
        TweenLite.to(this.view.scale, .2, 
        { 
            x : (this.view.scale.x > 0) ? 1.2 : -1.2, 
            y : 1.2, 
            ease : Back.easeOut 
        });
    };

    ButtonWireframe.prototype._onMouseOut = function()
    {
        TweenLite.to(this.view.scale, .2, 
        { 
            x : (this.view.scale.x > 0) ? 1 : -1, 
            y : 1, 
            ease : Back.easeOut 
        });
    };

    module.exports = ButtonWireframe;

});
define('com/sc/games/shared/Bmd',['require','exports','module','PIXI'],function (require,exports,module) {

	var PIXI            = require("PIXI");
/**
* @author       Richard Davey <rich@photonstorm.com>
* @copyright    2014 Photon Storm Ltd.
* @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
*/

/**
* A BitmapData object contains a Canvas element to which you can draw anything you like via normal Canvas context operations.
* A single BitmapData can be used as the texture for one or many Images/Sprites. 
* So if you need to dynamically create a Sprite texture then they are a good choice.
*
* @class Phaser.BitmapData
* @constructor
* @param {Phaser.Game} game - A reference to the currently running game.
* @param {string} key - Internal Phaser reference key for the render texture.
* @param {number} [width=256] - The width of the BitmapData in pixels.
* @param {number} [height=256] - The height of the BitmapData in pixels.
*/
BitmapData = function (width, height) {


    /**
    * @property {number} width - The width of the BitmapData in pixels.
    */
    this.width = width;

    /**
    * @property {number} height - The height of the BitmapData in pixels.
    */
    this.height = height;

    /**
    * @property {HTMLCanvasElement} canvas - The canvas to which this BitmapData draws.
    * @default
    */
    this.canvas = this.create(width, height, '', true);

    /**
    * @property {CanvasRenderingContext2D} context - The 2d context of the canvas.
    * @default
    */
    this.context = this.canvas.getContext('2d', { alpha: true });

    /**
    * @property {CanvasRenderingContext2D} ctx - A reference to BitmapData.context.
    */
    this.ctx = this.context;

    /**
    * @property {ImageData} imageData - The context image data.
    */
    this.imageData = this.context.getImageData(0, 0, width, height);

    /**
    * @property {Uint8ClampedArray} data - A Uint8ClampedArray view into BitmapData.buffer.
    */
    this.data = this.imageData.data;

    /**
    * @property {Uint32Array} pixels - An Uint32Array view into BitmapData.buffer.
    */
    this.pixels = null;

    /**
    * @property {ArrayBuffer} buffer - An ArrayBuffer the same size as the context ImageData.
    */
    if (this.imageData.data.buffer)
    {
        this.buffer = this.imageData.data.buffer;
        this.pixels = new Uint32Array(this.buffer);
    }
    else
    {
        if (window['ArrayBuffer'])
        {
            this.buffer = new ArrayBuffer(this.imageData.data.length);
            this.pixels = new Uint32Array(this.buffer);
        }
        else
        {
            this.pixels = this.imageData.data;
        }
    }

    /**
    * @property {PIXI.BaseTexture} baseTexture - The PIXI.BaseTexture.
    * @default
    */
    this.baseTexture = new PIXI.BaseTexture(this.canvas);

    /**
    * @property {PIXI.Texture} texture - The PIXI.Texture.
    * @default
    */
    this.texture = new PIXI.Texture(this.baseTexture);

    /**
    * @property {boolean} disableTextureUpload - If disableTextureUpload is true this BitmapData will never send its image data to the GPU when its dirty flag is true.
    */
    this.disableTextureUpload = false;

    /**
    * @property {boolean} dirty - If dirty this BitmapData will be re-rendered.
    */
    this.dirty = false;

    //  Aliases
    this.cls = this.clear;

    /**
    * @property {number} _image - Internal cache var.
    * @private
    */
    this._image = null;

    /**
    * @property {Phaser.Point} _pos - Internal cache var.
    * @private
    */
    this._pos = new PIXI.Point();

    /**
    * @property {Phaser.Point} _size - Internal cache var.
    * @private
    */
    this._size = new PIXI.Point();

    /**
    * @property {Phaser.Point} _scale - Internal cache var.
    * @private
    */
    this._scale = new PIXI.Point();

    /**
    * @property {number} _rotate - Internal cache var.
    * @private
    */
    this._rotate = 0;

    /**
    * @property {object} _alpha - Internal cache var.
    * @private
    */
    this._alpha = { prev: 1, current: 1 };

    /**
    * @property {Phaser.Point} _anchor - Internal cache var.
    * @private
    */
    this._anchor = new PIXI.Point();

    /**
    * @property {number} _tempR - Internal cache var.
    * @private
    */
    this._tempR = 0;

    /**
    * @property {number} _tempG - Internal cache var.
    * @private
    */
    this._tempG = 0;

    /**
    * @property {number} _tempB - Internal cache var.
    * @private
    */
    this._tempB = 0;

    /**
    * @property {Phaser.Circle} _circle - Internal cache var.
    * @private
    */
    this._circle = new PIXI.Circle();

};

BitmapData.prototype = {

	/**
    * Creates a `canvas` DOM element. The element is not automatically added to the document.
    *
    * @method Phaser.Canvas.create
    * @param {number} [width=256] - The width of the canvas element.
    * @param {number} [height=256] - The height of the canvas element..
    * @param {string} [id=(none)] - If specified, and not the empty string, this will be set as the ID of the canvas element. Otherwise no ID will be set.
    * @return {HTMLCanvasElement} The newly created canvas element.
    */
    create: function (width, height, id) {

        width = width || 256;
        height = height || 256;

        var canvas = document.createElement('canvas');

        if (typeof id === 'string' && id !== '')
        {
            canvas.id = id;
        }

        canvas.width = width;
        canvas.height = height;

        canvas.style.display = 'block';

        return canvas;

    },


    /**
    * Takes the given Game Object, resizes this BitmapData to match it and then draws it into this BitmapDatas canvas, ready for further processing.
    * The source game object is not modified by this operation.
    * If the source object uses a texture as part of a Texture Atlas or Sprite Sheet, only the current frame will be used for sizing.
    * If a string is given it will assume it's a cache key and look in Phaser.Cache for an image key matching the string.
    *
    * @method BitmapData#load
    * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} source - The object that will be used to populate this BitmapData. If you give a string it will try and find the Image in the Game.Cache first.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    load: function (source) {

        if (typeof source === 'string')
        {
            source = this.game.cache.getImage(source);
        }

        if (source)
        {
            this.resize(source.width, source.height);
            this.cls();
        }
        else
        {
            return;
        }

        this.draw(source);

        this.update();

        return this;

    },

    /**
    * Clears the BitmapData context using a clearRect.
    *
    * @method Phaser.BitmapData#cls
    */

    /**
    * Clears the BitmapData context using a clearRect.
    *
    * @method Phaser.BitmapData#clear
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    clear: function () {

        this.context.clearRect(0, 0, this.width, this.height);

        this.dirty = true;

        return this;

    },

    /**
    * Fills the BitmapData with the given color.
    *
    * @method Phaser.BitmapData#fill
    * @param {number} r - The red color value, between 0 and 0xFF (255).
    * @param {number} g - The green color value, between 0 and 0xFF (255).
    * @param {number} b - The blue color value, between 0 and 0xFF (255).
    * @param {number} [a=1] - The alpha color value, between 0 and 1.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    fill: function (r, g, b, a) {

        if (typeof a === 'undefined') { a = 1; }

        this.context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
        this.context.fillRect(0, 0, this.width, this.height);
        this.dirty = true;

        return this;

    },

    /**
    * Resizes the BitmapData. This changes the size of the underlying canvas and refreshes the buffer.
    *
    * @method Phaser.BitmapData#resize
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    resize: function (width, height) {

        if (width !== this.width || height !== this.height)
        {
            this.width = width;
            this.height = height;

            this.canvas.width = width;
            this.canvas.height = height;

            this.baseTexture.width = width;
            this.baseTexture.height = height;

            this.textureFrame.width = width;
            this.textureFrame.height = height;

            this.texture.width = width;
            this.texture.height = height;

            this.texture.crop.width = width;
            this.texture.crop.height = height;

            this.update();
            this.dirty = true;
        }

        return this;

    },

    /**
    * This re-creates the BitmapData.imageData from the current context.
    * It then re-builds the ArrayBuffer, the data Uint8ClampedArray reference and the pixels Int32Array.
    * If not given the dimensions defaults to the full size of the context.
    *
    * @method Phaser.BitmapData#update
    * @param {number} [x=0] - The x coordinate of the top-left of the image data area to grab from.
    * @param {number} [y=0] - The y coordinate of the top-left of the image data area to grab from.
    * @param {number} [width] - The width of the image data area.
    * @param {number} [height] - The height of the image data area.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    update: function (x, y, width, height) {

        if (typeof x === 'undefined') { x = 0; }
        if (typeof y === 'undefined') { y = 0; }
        if (typeof width === 'undefined') { width = this.width; }
        if (typeof height === 'undefined') { height = this.height; }

        this.imageData = this.context.getImageData(x, y, width, height);
        this.data = this.imageData.data;

        if (this.imageData.data.buffer)
        {
            this.buffer = this.imageData.data.buffer;
            this.pixels = new Uint32Array(this.buffer);
        }
        else
        {
            if (window['ArrayBuffer'])
            {
                this.buffer = new ArrayBuffer(this.imageData.data.length);
                this.pixels = new Uint32Array(this.buffer);
            }
            else
            {
                this.pixels = this.imageData.data;
            }
        }

        return this;

    },

    /**
    * Scans through the area specified in this BitmapData and sends a color object for every pixel to the given callback.
    * The callback will be sent a color object with 6 properties: `{ r: number, g: number, b: number, a: number, color: number, rgba: string }`.
    * Where r, g, b and a are integers between 0 and 255 representing the color component values for red, green, blue and alpha.
    * The `color` property is an Int32 of the full color. Note the endianess of this will change per system.
    * The `rgba` property is a CSS style rgba() string which can be used with context.fillStyle calls, among others.
    * The callback will also be sent the pixels x and y coordinates respectively.
    * The callback must return either `false`, in which case no change will be made to the pixel, or a new color object.
    * If a new color object is returned the pixel will be set to the r, g, b and a color values given within it.
    *
    * @method Phaser.BitmapData#processPixelRGB
    * @param {function} callback - The callback that will be sent each pixel color object to be processed.
    * @param {object} callbackContext - The context under which the callback will be called.
    * @param {number} [x=0] - The x coordinate of the top-left of the region to process from.
    * @param {number} [y=0] - The y coordinate of the top-left of the region to process from.
    * @param {number} [width] - The width of the region to process.
    * @param {number} [height] - The height of the region to process.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    processPixelRGB: function (callback, callbackContext, x, y, width, height) {

        if (typeof x === 'undefined') { x = 0; }
        if (typeof y === 'undefined') { y = 0; }
        if (typeof width === 'undefined') { width = this.width; }
        if (typeof height === 'undefined') { height = this.height; }

        var w = x + width;
        var h = y + height;
        var pixel = Phaser.Color.createColor();
        var result = { r: 0, g: 0, b: 0, a: 0 };
        var dirty = false;

        for (var ty = y; ty < h; ty++)
        {
            for (var tx = x; tx < w; tx++)
            {
                Phaser.Color.unpackPixel(this.getPixel32(tx, ty), pixel);

                result = callback.call(callbackContext, pixel, tx, ty);

                if (result !== false && result !== null && result !== undefined)
                {
                    this.setPixel32(tx, ty, result.r, result.g, result.b, result.a, false);
                    dirty = true;
                }
            }
        }

        if (dirty)
        {
            this.context.putImageData(this.imageData, 0, 0);
            this.dirty = true;
        }

        return this;

    },

    /**
    * Scans through the area specified in this BitmapData and sends the color for every pixel to the given callback along with its x and y coordinates.
    * Whatever value the callback returns is set as the new color for that pixel, unless it returns the same color, in which case it's skipped.
    * Note that the format of the color received will be different depending on if the system is big or little endian.
    * It is expected that your callback will deal with endianess. If you'd rather Phaser did it then use processPixelRGB instead.
    * The callback will also be sent the pixels x and y coordinates respectively.
    *
    * @method Phaser.BitmapData#processPixel
    * @param {function} callback - The callback that will be sent each pixel color to be processed.
    * @param {object} callbackContext - The context under which the callback will be called.
    * @param {number} [x=0] - The x coordinate of the top-left of the region to process from.
    * @param {number} [y=0] - The y coordinate of the top-left of the region to process from.
    * @param {number} [width] - The width of the region to process.
    * @param {number} [height] - The height of the region to process.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    processPixel: function (callback, callbackContext, x, y, width, height) {

        if (typeof x === 'undefined') { x = 0; }
        if (typeof y === 'undefined') { y = 0; }
        if (typeof width === 'undefined') { width = this.width; }
        if (typeof height === 'undefined') { height = this.height; }

        var w = x + width;
        var h = y + height;
        var pixel = 0;
        var result = 0;
        var dirty = false;

        for (var ty = y; ty < h; ty++)
        {
            for (var tx = x; tx < w; tx++)
            {
                pixel = this.getPixel32(tx, ty);
                result = callback.call(callbackContext, pixel, tx, ty);

                if (result !== pixel)
                {
                    this.pixels[ty * this.width + tx] = result;
                    dirty = true;
                }
            }
        }

        if (dirty)
        {
            this.context.putImageData(this.imageData, 0, 0);
            this.dirty = true;
        }

        return this;

    },

    /**
    * Replaces all pixels matching one color with another. The color values are given as two sets of RGBA values.
    * An optional region parameter controls if the replacement happens in just a specific area of the BitmapData or the entire thing. 
    *
    * @method Phaser.BitmapData#replaceRGB
    * @param {number} r1 - The red color value to be replaced. Between 0 and 255.
    * @param {number} g1 - The green color value to be replaced. Between 0 and 255.
    * @param {number} b1 - The blue color value to be replaced. Between 0 and 255.
    * @param {number} a1 - The alpha color value to be replaced. Between 0 and 255.
    * @param {number} r2 - The red color value that is the replacement color. Between 0 and 255.
    * @param {number} g2 - The green color value that is the replacement color. Between 0 and 255.
    * @param {number} b2 - The blue color value that is the replacement color. Between 0 and 255.
    * @param {number} a2 - The alpha color value that is the replacement color. Between 0 and 255.
    * @param {Phaser.Rectangle} [region] - The area to perform the search over. If not given it will replace over the whole BitmapData.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    replaceRGB: function (r1, g1, b1, a1, r2, g2, b2, a2, region) {

        var sx = 0;
        var sy = 0;
        var w = this.width;
        var h = this.height;
        var source = Phaser.Color.packPixel(r1, g1, b1, a1);

        if (region !== undefined && region instanceof Phaser.Rectangle)
        {
            sx = region.x;
            sy = region.y;
            w = region.width;
            h = region.height;
        }

        for (var y = 0; y < h; y++)
        {
            for (var x = 0; x < w; x++)
            {
                if (this.getPixel32(sx + x, sy + y) === source)
                {
                    this.setPixel32(sx + x, sy + y, r2, g2, b2, a2, false);
                }
            }
        }

        this.context.putImageData(this.imageData, 0, 0);
        this.dirty = true;

        return this;

    },

    /**
    * Sets the hue, saturation and lightness values on every pixel in the given region, or the whole BitmapData if no region was specified.
    *
    * @method Phaser.BitmapData#setHSL
    * @param {number} [h=null] - The hue, in the range 0 - 1.
    * @param {number} [s=null] - The saturation, in the range 0 - 1.
    * @param {number} [l=null] - The lightness, in the range 0 - 1.
    * @param {Phaser.Rectangle} [region] - The area to perform the operation on. If not given it will run over the whole BitmapData.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    setHSL: function (h, s, l, region) {

        if (typeof h === 'undefined' || h === null) { h = false; }
        if (typeof s === 'undefined' || s === null) { s = false; }
        if (typeof l === 'undefined' || l === null) { l = false; }

        if (!h && !s && !l)
        {
            return;
        }

        if (typeof region === 'undefined')
        {
            region = new Phaser.Rectangle(0, 0, this.width, this.height);
        }

        var pixel = Phaser.Color.createColor();

        for (var y = region.y; y < region.bottom; y++)
        {
            for (var x = region.x; x < region.right; x++)
            {
                Phaser.Color.unpackPixel(this.getPixel32(x, y), pixel, true);

                if (h)
                {
                    pixel.h = h;
                }

                if (s)
                {
                    pixel.s = s;
                }

                if (l)
                {
                    pixel.l = l;
                }

                Phaser.Color.HSLtoRGB(pixel.h, pixel.s, pixel.l, pixel);
                this.setPixel32(x, y, pixel.r, pixel.g, pixel.b, pixel.a, false);
            }
        }

        this.context.putImageData(this.imageData, 0, 0);
        this.dirty = true;

        return this;

    },

    /**
    * Shifts any or all of the hue, saturation and lightness values on every pixel in the given region, or the whole BitmapData if no region was specified.
    * Shifting will add the given value onto the current h, s and l values, not replace them.
    * The hue is wrapped to keep it within the range 0 to 1. Saturation and lightness are clamped to not exceed 1.
    *
    * @method Phaser.BitmapData#shiftHSL
    * @param {number} [h=null] - The amount to shift the hue by.
    * @param {number} [s=null] - The amount to shift the saturation by.
    * @param {number} [l=null] - The amount to shift the lightness by.
    * @param {Phaser.Rectangle} [region] - The area to perform the operation on. If not given it will run over the whole BitmapData.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    shiftHSL: function (h, s, l, region) {

        if (typeof h === 'undefined' || h === null) { h = false; }
        if (typeof s === 'undefined' || s === null) { s = false; }
        if (typeof l === 'undefined' || l === null) { l = false; }

        if (!h && !s && !l)
        {
            return;
        }

        if (typeof region === 'undefined')
        {
            region = new Phaser.Rectangle(0, 0, this.width, this.height);
        }

        var pixel = Phaser.Color.createColor();

        for (var y = region.y; y < region.bottom; y++)
        {
            for (var x = region.x; x < region.right; x++)
            {
                Phaser.Color.unpackPixel(this.getPixel32(x, y), pixel, true);

                if (h)
                {
                    pixel.h = this.game.math.wrap(pixel.h + h, 0, 1);
                }

                if (s)
                {
                    pixel.s = this.game.math.limitValue(pixel.s + s, 0, 1);
                }

                if (l)
                {
                    pixel.l = this.game.math.limitValue(pixel.l + l, 0, 1);
                }

                Phaser.Color.HSLtoRGB(pixel.h, pixel.s, pixel.l, pixel);
                this.setPixel32(x, y, pixel.r, pixel.g, pixel.b, pixel.a, false);
            }
        }

        this.context.putImageData(this.imageData, 0, 0);
        this.dirty = true;

        return this;

    },

    /**
    * Sets the color of the given pixel to the specified red, green, blue and alpha values.
    *
    * @method Phaser.BitmapData#setPixel32
    * @param {number} x - The x coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {number} y - The y coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {number} red - The red color value, between 0 and 0xFF (255).
    * @param {number} green - The green color value, between 0 and 0xFF (255).
    * @param {number} blue - The blue color value, between 0 and 0xFF (255).
    * @param {number} alpha - The alpha color value, between 0 and 0xFF (255).
    * @param {boolean} [immediate=true] - If `true` the context.putImageData will be called and the dirty flag set.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    setPixel32: function (x, y, red, green, blue, alpha, immediate) {

        if (typeof immediate === 'undefined') { immediate = true; }

        if (x >= 0 && x <= this.width && y >= 0 && y <= this.height)
        {
            if (Phaser.Device.LITTLE_ENDIAN)
            {
                this.pixels[y * this.width + x] = (alpha << 24) | (blue << 16) | (green << 8) | red;
            }
            else
            {
                this.pixels[y * this.width + x] = (red << 24) | (green << 16) | (blue << 8) | alpha;
            }

            if (immediate)
            {
                this.context.putImageData(this.imageData, 0, 0);
                this.dirty = true;
            }
        }

        return this;

    },

    /**
    * Sets the color of the given pixel to the specified red, green and blue values.
    *
    * @method Phaser.BitmapData#setPixel
    * @param {number} x - The x coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {number} y - The y coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {number} red - The red color value, between 0 and 0xFF (255).
    * @param {number} green - The green color value, between 0 and 0xFF (255).
    * @param {number} blue - The blue color value, between 0 and 0xFF (255).
    * @param {number} alpha - The alpha color value, between 0 and 0xFF (255).
    * @param {boolean} [immediate=true] - If `true` the context.putImageData will be called and the dirty flag set.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    setPixel: function (x, y, red, green, blue, immediate) {

        return this.setPixel32(x, y, red, green, blue, 255, immediate);

    },

    /**
    * Get the color of a specific pixel in the context into a color object.
    * If you have drawn anything to the BitmapData since it was created you must call BitmapData.update to refresh the array buffer,
    * otherwise this may return out of date color values, or worse - throw a run-time error as it tries to access an array element that doesn't exist.
    *
    * @method Phaser.BitmapData#getPixel
    * @param {number} x - The x coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {number} y - The y coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {object} [out] - An object into which 4 properties will be created: r, g, b and a. If not provided a new object will be created.
    * @return {object} An object with the red, green, blue and alpha values set in the r, g, b and a properties.
    */
    getPixel: function (x, y, out) {

        if (!out)
        {
            out = Phaser.Color.createColor();
        }

        var index = ~~(x + (y * this.width));

        index *= 4;

        out.r = this.data[index];
        out.g = this.data[++index];
        out.b = this.data[++index];
        out.a = this.data[++index];

        return out;

    },

    /**
    * Get the color of a specific pixel including its alpha value.
    * If you have drawn anything to the BitmapData since it was created you must call BitmapData.update to refresh the array buffer,
    * otherwise this may return out of date color values, or worse - throw a run-time error as it tries to access an array element that doesn't exist.
    * Note that on little-endian systems the format is 0xAABBGGRR and on big-endian the format is 0xRRGGBBAA.
    *
    * @method Phaser.BitmapData#getPixel32
    * @param {number} x - The x coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {number} y - The y coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @return {number} A native color value integer (format: 0xAARRGGBB)
    */
    getPixel32: function (x, y) {

        if (x >= 0 && x <= this.width && y >= 0 && y <= this.height)
        {
            return this.pixels[y * this.width + x];
        }

    },

    /**
    * Get the color of a specific pixel including its alpha value as a color object containing r,g,b,a and rgba properties.
    * If you have drawn anything to the BitmapData since it was created you must call BitmapData.update to refresh the array buffer,
    * otherwise this may return out of date color values, or worse - throw a run-time error as it tries to access an array element that doesn't exist.
    *
    * @method Phaser.BitmapData#getPixelRGB
    * @param {number} x - The x coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {number} y - The y coordinate of the pixel to be set. Must lay within the dimensions of this BitmapData.
    * @param {object} [out] - An object into which 3 properties will be created: r, g and b. If not provided a new object will be created.
    * @param {boolean} [hsl=false] - Also convert the rgb values into hsl?
    * @param {boolean} [hsv=false] - Also convert the rgb values into hsv?
    * @return {object} An object with the red, green and blue values set in the r, g and b properties.
    */
    getPixelRGB: function (x, y, out, hsl, hsv) {

        return Phaser.Color.unpackPixel(this.getPixel32(x, y), out, hsl, hsv);

    },

    /**
    * Gets all the pixels from the region specified by the given Rectangle object.
    *
    * @method Phaser.BitmapData#getPixels
    * @param {Phaser.Rectangle} rect - The Rectangle region to get.
    * @return {ImageData} Returns a ImageData object containing a Uint8ClampedArray data property.
    */
    getPixels: function (rect) {

        return this.context.getImageData(rect.x, rect.y, rect.width, rect.height);

    },

    /**
    * Scans the BitmapData, pixel by pixel, until it encounters a pixel that isn't transparent (i.e. has an alpha value > 0).
    * It then stops scanning and returns an object containing the colour of the pixel in r, g and b properties and the location in the x and y properties.
    * 
    * The direction parameter controls from which direction it should start the scan:
    * 
    * 0 = top to bottom
    * 1 = bottom to top
    * 2 = left to right
    * 3 = right to left
    *
    * @method Phaser.BitmapData#getFirstPixel
    * @param {number} [direction=0] - The direction in which to scan for the first pixel. 0 = top to bottom, 1 = bottom to top, 2 = left to right and 3 = right to left.
    * @return {object} Returns an object containing the colour of the pixel in the `r`, `g` and `b` properties and the location in the `x` and `y` properties.
    */
    getFirstPixel: function (direction) {

        if (typeof direction === 'undefined') { direction = 0; }

        var pixel = Phaser.Color.createColor();

        var x = 0;
        var y = 0;
        var v = 1;
        var scan = false;

        if (direction === 1)
        {
            v = -1;
            y = this.height;
        }
        else if (direction === 3)
        {
            v = -1;
            x = this.width;
        }

        do {

            Phaser.Color.unpackPixel(this.getPixel32(x, y), pixel);

            if (direction === 0 || direction === 1)
            {
                //  Top to Bottom / Bottom to Top
                x++;

                if (x === this.width)
                {
                    x = 0;
                    y += v;

                    if (y >= this.height || y <= 0)
                    {
                        scan = true;
                    }
                }
            }
            else if (direction === 2 || direction === 3)
            {
                //  Left to Right / Right to Left
                y++;

                if (y === this.height)
                {
                    y = 0;
                    x += v;

                    if (x >= this.width || x <= 0)
                    {
                        scan = true;
                    }
                }
            }
        }
        while (pixel.a === 0 && !scan);

        pixel.x = x;
        pixel.y = y;

        return pixel;

    },

    /**
    * Scans the BitmapData and calculates the bounds. This is a rectangle that defines the extent of all non-transparent pixels.
    * The rectangle returned will extend from the top-left of the image to the bottom-right, exluding transparent pixels.
    *
    * @method Phaser.BitmapData#getBounds
    * @param {Phaser.Rectangle} [rect] - If provided this Rectangle object will be populated with the bounds, otherwise a new object will be created.
    * @return {Phaser.Rectangle} A Rectangle whose dimensions encompass the full extent of non-transparent pixels in this BitmapData.
    */
    getBounds: function (rect) {

        if (typeof rect === 'undefined') { rect = new Phaser.Rectangle(); }

        rect.x = this.getFirstPixel(2).x;

        //  If we hit this, there's no point scanning any more, the image is empty
        if (rect.x === this.width)
        {
            return rect.setTo(0, 0, 0, 0);
        }

        rect.y = this.getFirstPixel(0).y;
        rect.width = (this.getFirstPixel(3).x - rect.x) + 1;
        rect.height = (this.getFirstPixel(1).y - rect.y) + 1;

        return rect;

    },

    /**
    * Creates a new Phaser.Image object, assigns this BitmapData to be its texture, adds it to the world then returns it.
    *
    * @method Phaser.BitmapData#addToWorld
    * @return {Phaser.Image} The newly added Image object.
    */
    addToWorld: function () {

        var sprite = new PIXI.Sprite(this.texture);

        return sprite;

    },

    /**
     * Copies a rectangular area from the source object to this BitmapData. If you give `null` as the source it will copy from itself.
     * You can optionally resize, translate, rotate, scale, alpha or blend as it's drawn.
     * All rotation, scaling and drawing takes place around the regions center point by default, but can be changed with the anchor parameters.
     * Note that the source image can also be this BitmapData, which can create some interesting effects.
     * 
     * This method has a lot of parameters for maximum control.
     * You can use the more friendly methods like `copyRect` and `draw` to avoid having to remember them all.
     *
     * @method Phaser.BitmapData#copy
     * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} [source] - The source to copy from. If you give a string it will try and find the Image in the Game.Cache first. This is quite expensive so try to provide the image itself.
     * @param {number} [x=0] - The x coordinate representing the top-left of the region to copy from the source image.
     * @param {number} [y=0] - The y coordinate representing the top-left of the region to copy from the source image.
     * @param {number} [width] - The width of the region to copy from the source image. If not specified it will use the full source image width.
     * @param {number} [height] - The height of the region to copy from the source image. If not specified it will use the full source image height.
     * @param {number} [tx] - The x coordinate to translate to before drawing. If not specified it will default to the `x` parameter. If `null` and `source` is a Display Object, it will default to `source.x`.
     * @param {number} [ty] - The y coordinate to translate to before drawing. If not specified it will default to the `y` parameter. If `null` and `source` is a Display Object, it will default to `source.y`.
     * @param {number} [newWidth] - The new width of the block being copied. If not specified it will default to the `width` parameter.
     * @param {number} [newHeight] - The new height of the block being copied. If not specified it will default to the `height` parameter.
     * @param {number} [rotate=0] - The angle in radians to rotate the block to before drawing. Rotation takes place around the center by default, but can be changed with the `anchor` parameters.
     * @param {number} [anchorX=0] - The anchor point around which the block is rotated and scaled. A value between 0 and 1, where 0 is the top-left and 1 is bottom-right.
     * @param {number} [anchorY=0] - The anchor point around which the block is rotated and scaled. A value between 0 and 1, where 0 is the top-left and 1 is bottom-right.
     * @param {number} [scaleX=1] - The horizontal scale factor of the block. A value of 1 means no scaling. 2 would be twice the size, and so on.
     * @param {number} [scaleY=1] - The vertical scale factor of the block. A value of 1 means no scaling. 2 would be twice the size, and so on.
     * @param {number} [alpha=1] - The alpha that will be set on the context before drawing. A value between 0 (fully transparent) and 1, opaque.
     * @param {number} [blendMode=null] - The composite blend mode that will be used when drawing. The default is no blend mode at all.
     * @param {boolean} [roundPx=false] - Should the x and y values be rounded to integers before drawing? This prevents anti-aliasing in some instances.
     * @return {Phaser.BitmapData} This BitmapData object for method chaining.
     */
    copy: function (source, x, y, width, height, tx, ty, newWidth, newHeight, rotate, anchorX, anchorY, scaleX, scaleY, alpha, blendMode, roundPx) {

        if (typeof source === 'undefined' || source === null) { source = this; }

        this._image = source;

        if (source instanceof Phaser.Sprite || source instanceof Phaser.Image || source instanceof Phaser.Text)
        {
            //  Copy over sprite values
            this._pos.set(source.texture.crop.x, source.texture.crop.y);
            this._size.set(source.texture.crop.width, source.texture.crop.height);
            this._scale.set(source.scale.x, source.scale.y);
            this._anchor.set(source.anchor.x, source.anchor.y);
            this._rotate = source.rotation;
            this._alpha.current = source.alpha;
            this._image = source.texture.baseTexture.source;

            if (typeof tx === 'undefined' || tx === null) { tx = source.x; }
            if (typeof ty === 'undefined' || ty === null) { ty = source.y; }

            if (source.texture.trim)
            {
                //  Offset the translation coordinates by the trim amount
                tx += source.texture.trim.x - source.anchor.x * source.texture.trim.width;
                ty += source.texture.trim.y - source.anchor.y * source.texture.trim.height;
            }

            if (source.tint !== 0xFFFFFF)
            {
                if (source.cachedTint !== source.tint)
                {
                    source.cachedTint = source.tint;
                    source.tintedTexture = PIXI.CanvasTinter.getTintedTexture(source, source.tint);
                }

                this._image = source.tintedTexture;
            }
        }
        else
        {
            //  Reset
            this._pos.set(0);
            this._scale.set(1);
            this._anchor.set(0);
            this._rotate = 0;
            this._alpha.current = 1;

            if (source instanceof Phaser.BitmapData)
            {
                this._image = source.canvas;
            }
            else if (typeof source === 'string')
            {
                source = this.game.cache.getImage(source);

                if (source === null)
                {
                    return;
                }
                else
                {
                    this._image = source;
                }
            }

            this._size.set(this._image.width, this._image.height);
        }

        //  The source region to copy from
        if (typeof x === 'undefined' || x === null) { x = 0; }
        if (typeof y === 'undefined' || y === null) { y = 0; }

        //  If they set a width/height then we override the frame values with them
        if (width)
        {
            this._size.x = width;
        }

        if (height)
        {
            this._size.y = height;
        }

        //  The destination region to copy to
        if (typeof tx === 'undefined' || tx === null) { tx = x; }
        if (typeof ty === 'undefined' || ty === null) { ty = y; }
        if (typeof newWidth === 'undefined' || newWidth === null) { newWidth = this._size.x; }
        if (typeof newHeight === 'undefined' || newHeight === null) { newHeight = this._size.y; }

        //  Rotation - if set this will override any potential Sprite value
        if (typeof rotate === 'number')
        {
            this._rotate = rotate;
        }

        //  Anchor - if set this will override any potential Sprite value
        if (typeof anchorX === 'number')
        {
            this._anchor.x = anchorX;
        }

        if (typeof anchorY === 'number')
        {
            this._anchor.y = anchorY;
        }

        //  Scaling - if set this will override any potential Sprite value
        if (typeof scaleX === 'number')
        {
            this._scale.x = scaleX;
        }

        if (typeof scaleY === 'number')
        {
            this._scale.y = scaleY;
        }

        //  Effects
        if (typeof alpha === 'number')
        {
            this._alpha.current = alpha;
        }

        if (typeof blendMode === 'undefined') { blendMode = null; }
        if (typeof roundPx === 'undefined') { roundPx = false; }

        if (this._alpha.current <= 0 || this._scale.x === 0 || this._scale.y === 0 || this._size.x === 0 || this._size.y === 0)
        {
            //  Why bother wasting CPU cycles drawing something you can't see?
            return;
        }

        this._alpha.prev = this.context.globalAlpha;

        this.context.save();

        this.context.globalAlpha = this._alpha.current;

        if (blendMode)
        {
            this.context.globalCompositeOperation = blendMode;
        }

        if (roundPx)
        {
            tx |= 0;
            ty |= 0;
        }

        this.context.translate(tx, ty);

        this.context.scale(this._scale.x, this._scale.y);

        this.context.rotate(this._rotate);

        this.context.drawImage(this._image, this._pos.x + x, this._pos.y + y, this._size.x, this._size.y, -newWidth * this._anchor.x, -newHeight * this._anchor.y, newWidth, newHeight);

        this.context.restore();

        this.context.globalAlpha = this._alpha.prev;

        this.dirty = true;

        return this;

    },

    /**
    * Copies the area defined by the Rectangle parameter from the source image to this BitmapData at the given location.
    *
    * @method Phaser.BitmapData#copyRect
    * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|string} source - The Image to copy from. If you give a string it will try and find the Image in the Game.Cache.
    * @param {Phaser.Rectangle} area - The Rectangle region to copy from the source image.
    * @param {number} x - The destination x coordinate to copy the image to.
    * @param {number} y - The destination y coordinate to copy the image to.
    * @param {number} [alpha=1] - The alpha that will be set on the context before drawing. A value between 0 (fully transparent) and 1, opaque.
    * @param {number} [blendMode=null] - The composite blend mode that will be used when drawing. The default is no blend mode at all.
    * @param {boolean} [roundPx=false] - Should the x and y values be rounded to integers before drawing? This prevents anti-aliasing in some instances.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    copyRect: function (source, area, x, y, alpha, blendMode, roundPx) {

        return this.copy(source, area.x, area.y, area.width, area.height, x, y, area.width, area.height, 0, 0, 0, 1, 1, alpha, blendMode, roundPx);

    },

    /**
    * Draws the given Phaser.Sprite, Phaser.Image or Phaser.Text to this BitmapData at the coordinates specified.
    * You can use the optional width and height values to 'stretch' the sprite as it is drawn. This uses drawImage stretching, not scaling.
    * When drawing it will take into account the Sprites rotation, scale and alpha values.
    *
    * @method Phaser.BitmapData#draw
    * @param {Phaser.Sprite|Phaser.Image|Phaser.Text} source - The Sprite, Image or Text object to draw onto this BitmapData.
    * @param {number} [x=0] - The x coordinate to translate to before drawing. If not specified it will default to `source.x`.
    * @param {number} [y=0] - The y coordinate to translate to before drawing. If not specified it will default to `source.y`.
    * @param {number} [width] - The new width of the Sprite being copied. If not specified it will default to `source.width`.
    * @param {number} [height] - The new height of the Sprite being copied. If not specified it will default to `source.height`.
    * @param {number} [blendMode=null] - The composite blend mode that will be used when drawing the Sprite. The default is no blend mode at all.
    * @param {boolean} [roundPx=false] - Should the x and y values be rounded to integers before drawing? This prevents anti-aliasing in some instances.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    draw: function (source, x, y, width, height, blendMode, roundPx) {

        //  By specifying null for most parameters it will tell `copy` to use the Sprite values instead, which is what we want here
        return this.copy(source, null, null, null, null, x, y, width, height, null, null, null, null, null, null, blendMode, roundPx);

    },


    /**
    * Sets the shadow properties of this BitmapDatas context which will affect all draw operations made to it.
    * You can cancel an existing shadow by calling this method and passing no parameters.
    * Note: At the time of writing (October 2014) Chrome still doesn't support shadowBlur used with drawImage.
    *
    * @method Phaser.BitmapData#shadow
    * @param {string} color - The color of the shadow, given in a CSS format, i.e. `#000000` or `rgba(0,0,0,1)`. If `null` or `undefined` the shadow will be reset.
    * @param {number} [blur=5] - The amount the shadow will be blurred by. Low values = a crisp shadow, high values = a softer shadow.
    * @param {number} [x=10] - The horizontal offset of the shadow in pixels.
    * @param {number} [y=10] - The vertical offset of the shadow in pixels.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    shadow: function (color, blur, x, y) {

        if (typeof color === 'undefined' || color === null)
        {
            this.context.shadowColor = 'rgba(0,0,0,0)';
        }
        else
        {
            this.context.shadowColor = color;
            this.context.shadowBlur = blur || 5;
            this.context.shadowOffsetX = x || 10;
            this.context.shadowOffsetY = y || 10;
        }

    },

    /**
    * Scans this BitmapData for all pixels matching the given r,g,b values and then draws them into the given destination BitmapData.
    * The original BitmapData remains unchanged.
    * The destination BitmapData must be large enough to receive all of the pixels that are scanned unless the 'resize' parameter is true.
    * Although the destination BitmapData is returned from this method, it's actually modified directly in place, meaning this call is perfectly valid:
    * `picture.extract(mask, r, g, b)`
    * You can specify optional r2, g2, b2 color values. If given the pixel written to the destination bitmap will be of the r2, g2, b2 color.
    * If not given it will be written as the same color it was extracted. You can provide one or more alternative colors, allowing you to tint
    * the color during extraction.
    *
    * @method Phaser.BitmapData#extract
    * @param {Phaser.BitmapData} destination - The BitmapData that the extracted pixels will be drawn to.
    * @param {number} r - The red color component, in the range 0 - 255.
    * @param {number} g - The green color component, in the range 0 - 255.
    * @param {number} b - The blue color component, in the range 0 - 255.
    * @param {number} [a=255] - The alpha color component, in the range 0 - 255 that the new pixel will be drawn at.
    * @param {boolean} [resize=false] - Should the destination BitmapData be resized to match this one before the pixels are copied?
    * @param {number} [r2] - An alternative red color component to be written to the destination, in the range 0 - 255.
    * @param {number} [g2] - An alternative green color component to be written to the destination, in the range 0 - 255.
    * @param {number} [b2] - An alternative blue color component to be written to the destination, in the range 0 - 255.
    * @returns {Phaser.BitmapData} The BitmapData that the extract pixels were drawn on.
    */
    extract: function (destination, r, g, b, a, resize, r2, g2, b2) {

        if (typeof a === 'undefined') { a = 255; }
        if (typeof resize === 'undefined') { resize = false; }
        if (typeof r2 === 'undefined') { r2 = r; }
        if (typeof g2 === 'undefined') { g2 = g; }
        if (typeof b2 === 'undefined') { b2 = b; }

        if (resize)
        {
            destination.resize(this.width, this.height);
        }

        this.processPixelRGB(
            function (pixel, x, y)
            {
                if (pixel.r === r && pixel.g === g && pixel.b === b)
                {
                    destination.setPixel32(x, y, r2, g2, b2, a, false);
                }
                return false;
            },
            this);

        destination.context.putImageData(destination.imageData, 0, 0);
        destination.dirty = true;

        return destination;

    },

    /**
    * Draws a filled Rectangle to the BitmapData at the given x, y coordinates and width / height in size.
    *
    * @method Phaser.BitmapData#rect
    * @param {number} x - The x coordinate of the top-left of the Rectangle.
    * @param {number} y - The y coordinate of the top-left of the Rectangle.
    * @param {number} width - The width of the Rectangle.
    * @param {number} height - The height of the Rectangle.
    * @param {string} [fillStyle] - If set the context fillStyle will be set to this value before the rect is drawn.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    rect: function (x, y, width, height, fillStyle) {

        if (typeof fillStyle !== 'undefined')
        {
            this.context.fillStyle = fillStyle;
        }

        this.context.fillRect(x, y, width, height);

        return this;

    },

    /**
    * Draws a filled Circle to the BitmapData at the given x, y coordinates and radius in size.
    *
    * @method Phaser.BitmapData#circle
    * @param {number} x - The x coordinate to draw the Circle at. This is the center of the circle.
    * @param {number} y - The y coordinate to draw the Circle at. This is the center of the circle.
    * @param {number} radius - The radius of the Circle in pixels. The radius is half the diameter.
    * @param {string} [fillStyle] - If set the context fillStyle will be set to this value before the circle is drawn.
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    circle: function (x, y, radius, fillStyle) {

        if (typeof fillStyle !== 'undefined')
        {
            this.context.fillStyle = fillStyle;
        }

        this.context.beginPath();
        this.context.arc(x, y, radius, 0, Math.PI * 2, false);
        this.context.closePath();

        this.context.fill();

        return this;

    },

    /**
    * If the game is running in WebGL this will push the texture up to the GPU if it's dirty.
    * This is called automatically if the BitmapData is being used by a Sprite, otherwise you need to remember to call it in your render function.
    * If you wish to suppress this functionality set BitmapData.disableTextureUpload to `true`.
    *
    * @method Phaser.BitmapData#render
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    render: function () {

        if (!this.disableTextureUpload && this.dirty)
        {
            this.baseTexture.dirty();
            this.dirty = false;
        }

        return this;

    },

    /**
    * Resets the blend mode (effectively sets it to 'source-over')
    *
    * @method Phaser.BitmapData#blendReset
    * @return {Phaser.BitmapData} This BitmapData object for method chaining.
    */
    blendReset: function () {

        this.context.globalCompositeOperation = 'source-over';
        return this;

    }

    

};

/**
 * Gets a JavaScript object that has 6 properties set that are used by BitmapData in a transform.
 *
 * @method Phaser.BitmapData.getTransform
 * @param {number} translateX - The x translate value.
 * @param {number} translateY - The y translate value.
 * @param {number} scaleX - The scale x value.
 * @param {number} scaleY - The scale y value.
 * @param {number} skewX - The skew x value.
 * @param {number} skewY - The skew y value.
 * @return {object} A JavaScript object containing all of the properties BitmapData needs for transforms.
 */
BitmapData.getTransform = function (translateX, translateY, scaleX, scaleY, skewX, skewY) {

    if (typeof translateX !== 'number') { translateX = 0; }
    if (typeof translateY !== 'number') { translateY = 0; }
    if (typeof scaleX !== 'number') { scaleX = 1; }
    if (typeof scaleY !== 'number') { scaleY = 1; }
    if (typeof skewX !== 'number') { skewX = 0; }
    if (typeof skewY !== 'number') { skewY = 0; }

    return { sx: scaleX, sy: scaleY, scaleX: scaleX, scaleY: scaleY, skewX: skewX, skewY: skewY, translateX: translateX, translateY: translateY, tx: translateX, ty: translateY };

};

BitmapData.prototype.constructor = BitmapData;

module.exports = BitmapData;

});
define('com/sc/games/shared/ShapeTransition',['require','exports','module','PIXI','../shared/Bmd','signals'],function (require,exports,module) {

  var PIXI            = require("PIXI");
  var Bmd           = require('../shared/Bmd');
  var Signal          = require('signals');

    /**
     * ShapeTransition, uses an offscreen 
     * @param {String} colour a css string for the background colour
     */
    var ShapeTransition = function(colour)
    {

      /* 
      *
      * Documenting the process to go from an svg to something that can be used as a mask : 
      * - First, get the SVG from our one and only Matt Allan 
      * - If you don't like it, don't complain
      * - Open the svg with Illustrator
      * - Create a new web document 
      * - Import the shape into this document
      * - resize it to roughly the same size as the shape
      * - Use drawScript to get the canvas code
      */
      PIXI.DisplayObjectContainer.call(this);

      console.log('star transition');

      this.onTransitionEnd = new Signal();
      this.onTransitionMiddle = new Signal();

      var w = 2400;

      var h = 1300;

      this.bmd = new Bmd(w,h);

      this.bmd.context.globalCompositeOperation = 'xor';

      // TODO add a dynamic colour
      
      this.bmd.context.fillStyle = colour || '#f38898';

      this.bmd.context.fillRect(0,0,w*2,h*2);

      this.bmd.context.save();

      this.bmd.context.translate( w/2 - ( 238/2 * 0.5) , h/2 - (232/2 * 0.5) );

      this.bmd.context.scale(0.5,0.5);


      // star specific code, replace it with any canvas drawing operation
      // this.bmd.context.rotate( 18 * (Math.PI/180));

      // this.bmd.context.beginPath();

      // var branches = 5;

      // var inc = (Math.PI * 2) / branches;

      // var halfInc = inc/2;

      // var outerR = 60;

      // var innerR = 35;

      // var angle = 0;

      // for (var i = 0; i < branches; i++) {

      //   var x = Math.cos(angle) * innerR;
      //   var y = Math.sin(angle) * innerR;

      //   var x2 = Math.cos(angle + halfInc) * outerR;
      //   var y2 = Math.sin(angle + halfInc) * outerR;

      //   this.bmd.context.lineTo(x,y,x2,y2);

      //   angle += inc;

      //   var x = Math.cos(angle) * innerR;
      //   var y = Math.sin(angle) * innerR;

      //   this.bmd.context.lineTo(x2,y2,x,y);

      // }

      // End star code
      // 
      // the star is 238 * 232
      this.bmd.context.beginPath();
      this.bmd.context.moveTo(210,110);
      this.bmd.context.bezierCurveTo(209,110,207,110,206,109);
      this.bmd.context.lineTo(175,141);
      this.bmd.context.lineTo(180,183);
      this.bmd.context.bezierCurveTo(188,186,193,193,193,201);
      this.bmd.context.bezierCurveTo(192,212,184,220,174,220);
      this.bmd.context.bezierCurveTo(164,219,156,211,155,202);
      this.bmd.context.lineTo(116,184);
      this.bmd.context.lineTo(76,203);
      this.bmd.context.bezierCurveTo(75,212,67,219,57,219);
      this.bmd.context.bezierCurveTo(47,219,38,210,39,200);
      this.bmd.context.bezierCurveTo(39,192,45,185,52,182);
      this.bmd.context.lineTo(57,141);
      this.bmd.context.lineTo(26,108);
      this.bmd.context.bezierCurveTo(24,108,22,109,21,109);
      this.bmd.context.bezierCurveTo(10,108,2,100,3,90);
      this.bmd.context.bezierCurveTo(3,79,11,71,22,71);
      this.bmd.context.bezierCurveTo(28,72,33,75,37,79);
      this.bmd.context.lineTo(80,73);
      this.bmd.context.lineTo(101,31);
      this.bmd.context.bezierCurveTo(99,28,98,25,98,21);
      this.bmd.context.bezierCurveTo(98,10,107,2,117,3);
      this.bmd.context.bezierCurveTo(127,3,135,11,135,22);
      this.bmd.context.bezierCurveTo(135,25,134,29,132,32);
      this.bmd.context.lineTo(153,74);
      this.bmd.context.lineTo(196,80);
      this.bmd.context.bezierCurveTo(200,75,205,73,211,73);
      this.bmd.context.bezierCurveTo(221,73,229,82,229,92);
      this.bmd.context.bezierCurveTo(229,102,221,110,210,110);

      this.bmd.context.fillStyle = 'rgb(127,127,0)';
      this.bmd.context.fill();
        
      this.bmd.context.closePath();

      this.sprite = this.bmd.addToWorld();

      this.sprite.anchor.set(0.5);

      this.sprite.position.set(1136/2,640/2);

      this.addChild(this.sprite);

    };

    ShapeTransition.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);

    ShapeTransition.prototype.constructor = ShapeTransition;

    ShapeTransition.prototype.reset = function () {
    }

    ShapeTransition.prototype.start = function () {
      if(!this.visible)
      {
        this.visible = true;
      }

      TweenLite.to(this.sprite.scale,0.9, {
        x : 0.6, 
        y : 0.6, 
        ease : Expo.easeOut, 
        onComplete: function(){ 
          this.onTransitionMiddle.dispatch(); 
        }, 
        onCompleteScope : this
      });

      TweenLite.to(this.sprite.scale,0.9,
      {
            x : 25,
            y : 25,
            delay : 0.9,
            ease : Ease.easeIn,
            onComplete : function () {
              this.onTransitionEnd.dispatch();
            },

            onCompleteScope : this
      });
      
    }

  module.exports = ShapeTransition;

});
// TODO
// can we add a sound when toby appears ?

// add slight movement
// add a system to manage different cows

define('com/sc/games/cattle/CattleGame',['require','exports','module','PIXI','com/fido/input/Keyboard','com/fido/app/OrientationManager','com/fido/app/DevicemotionManager','signals','com/sc/games/Game','com/fido/system/Ticker','com/fido/loader/Cache','./Cow','./Tumbleweed','com/fido/system/Device','com/fido/ui/PixiTrackpad','com/sc/games/chase/ChaseGame','com/fido/app/transitions/StaticTransition','com/fido/app/transitions/CartoonTransitionAtPoint','com/fido/loader/Cache','com/sc/games/cattle/ButtonWireframe','com/sc/app/system/GameSaveManager','com/sc/app/buttons/SCButton','../shared/ShapeTransition','com/fido/utils/FrameWait','./randomColors','com/fido/physics/Spring','com/fido/sound/SoundManager','com/fido/sound/MusicManager','libs/gameConfig/gameTracking'],function (require, exports, module) 
{
    var PIXI                = require("PIXI");
    var Keyboard            = require('com/fido/input/Keyboard');
    var OrientationManager  = require('com/fido/app/OrientationManager');
    var DevicemotionManager = require('com/fido/app/DevicemotionManager');
    var Signal              = require('signals');
    var Game                = require('com/sc/games/Game');
    var Ticker              = require('com/fido/system/Ticker');
    var Cache               = require('com/fido/loader/Cache');
    var Cow                 = require('./Cow');
    var Tumbleweed          = require('./Tumbleweed');
    var Device              = require('com/fido/system/Device');
    var Trackpad            = require('com/fido/ui/PixiTrackpad');
    var ChaseGame           = require('com/sc/games/chase/ChaseGame');
    var Transition          = require('com/fido/app/transitions/StaticTransition');
    var CartoonTransition   = require('com/fido/app/transitions/CartoonTransitionAtPoint');
    var Cache               = require('com/fido/loader/Cache');
    var ButtonWireframe     = require('com/sc/games/cattle/ButtonWireframe');
    var GameSaveManager     = require('com/sc/app/system/GameSaveManager');
    var SCButton            = require('com/sc/app/buttons/SCButton');
    var ShapeTransition     = require('../shared/ShapeTransition');
    var Wait                = require("com/fido/utils/FrameWait");
    var RandomColor         = require('./randomColors');
    var DoubleSpring        = require('com/fido/physics/Spring');
    var SoundManager        = require('com/fido/sound/SoundManager');
    var MusicManager        = require('com/fido/sound/MusicManager');
    var DisneyTracker       = require('libs/gameConfig/gameTracking');

    PIXI.DisplayObject.prototype.depthOffset = 0;
 
    var CattleGame = function(app)
    {
        Game.call(this);

        this.game = Game;
        this.app = app;
        // which tutorial needs to be displayed

        this.trigger = 0;
        this.datas = Cache.getJson("datasCattle");
        this.zoom = 0;
        this.mousedownAndScrolling = false;
        this.buttonPressed = false;
        this.onDown;
        this.onChasegame = false;
        this.chaseGameStart = false; // when function start of chase game has been called
        this.hasFinished = false;
        this.mainDirection = 0;
        this.parallaxSpeed = 20;
        this.directions = { right: 1, left: -1, none: 0 };
        this.whereImLooking = { top: 1, middle: 0, bottom: -1, nowhere: null };
        this.whereImLookingValue = this.whereImLooking.nowhere;
        this.tobyIsOutOfScreen = true;
        this.tobyIsTouched = false;
        this.tutorialIsFinished = [false, false]; // one tutorial for cattle, one for chase
        this.deviceOrientation = 0;
        this.focalLength = 150;
        this.yo = 0; // feel free to change this name, relative to the alpha of the Dust Particle
        this.count = 0; // allows to rotate view when chasegame
        this.counterWind = 0;
        this.counterBeforeBounce = 200; // during chase game, make like we drive on a rock
        this.makeRotationEnable = true; // take back cosinus rotation
        this.chaseGameWillBePlayed = false;
        this.spring = new DoubleSpring(); // bounce effect
        this.windAffected = [];
        this.checkAccelerometer = false;

        this.checkDevice = new Device();
        this.isMobile = this.checkDevice.isMobile || this.checkDevice.iPad;

        // game dimensions
        this.center = this.dimensions.width / 2;
        this.borderLeft = 0;
        this.borderRight = 0;

        // container we rotate during chasegame
        this.containerWithoutHud =  new PIXI.DisplayObjectContainer();
        this.view.addChild(this.containerWithoutHud);

        this.container =  new PIXI.DisplayObjectContainer();
        this.container.position = new PIXI.Point(this.dimensions.width/2, 100);

        this.containerWithoutHud.addChild(this.container);

        // main container game
        this.containerCattle = new PIXI.DisplayObjectContainer();
        this.containerCattle.position.set(-this.dimensions.width/2, -this.dimensions.height/2 + 100);
        this.container.addChild(this.containerCattle);

        // mini game CHASE
        this.containerChase = new PIXI.DisplayObjectContainer();
        this.containerWithoutHud.addChild(this.containerChase);

        this.hud = new PIXI.DisplayObjectContainer();
        this.hud.position.set(0, 0);
        
        // white rectangle to lens flare burn user eyes
        this.whiteRectangle = new PIXI.Graphics();
        this.whiteRectangle.beginFill(0xFFFFFF);
        this.whiteRectangle.drawRect(0, 0, this.dimensions.width*2, this.dimensions.height*2);
        this.whiteRectangle.alpha = 0;

        // ray lights for sun
        this.burstBG = new PIXI.Sprite.fromFrame("sunburst_fg.png");
        this.burstBG.anchor.x = 0.5;
        this.burstBG.anchor.y = 0.5;
        this.burstBG.scale.x = this.burstBG.scale.y = 3;
        this.burstBG.alpha = 0;

        this.burstFG = new PIXI.Sprite.fromFrame("sunburst_fg.png");
        this.burstFG.anchor.x = 0.5;
        this.burstFG.anchor.y = 0.5;
        this.burstFG.alpha = 0;
        this.burstFG.scale.x = this.burstFG.scale.y = 3;

        if(Device.instance.blendModeFriendly)
        {
            this.whiteRectangle.blendMode = PIXI.blendModes.ADD;
            this.burstBG.blendMode = PIXI.blendModes.ADD;
            this.burstFG.blendMode = PIXI.blendModes.ADD;
        }
        else
        {
            this.whiteRectangle.alpha = .3;
            this.burstBG.alpha = .3;
            this.burstFG.alpha = .3;
        }

        // FLOOR
        this.layerFloor =  new PIXI.DisplayObjectContainer();

        this.cloudsContainer =  new PIXI.DisplayObjectContainer();
        this.layerHorizon =  new PIXI.DisplayObjectContainer();        
        this.layer60 =  new PIXI.DisplayObjectContainer();
        this.layer50 =  new PIXI.DisplayObjectContainer();
        this.layer40 =  new PIXI.DisplayObjectContainer();
        this.layer30 =  new PIXI.DisplayObjectContainer();
        this.layer20 =  new PIXI.DisplayObjectContainer();
        this.layer10 =  new PIXI.DisplayObjectContainer();
        this.layer0 =  new PIXI.DisplayObjectContainer();
        this.particleContainer =  new PIXI.DisplayObjectContainer();
        this.lensContainer =  new PIXI.DisplayObjectContainer();

        this.layer60Array = [];
        this.layer50Array = [];
        this.layer40Array = [];
        this.layer30Array = [];
        this.layer20Array = [];
        this.layer10Array = [];
        this.layer0Array = [];

        this.containerCattle.addChild(this.layerFloor);
        this.containerCattle.addChild(this.layer60);
        this.containerCattle.addChild(this.cloudsContainer);
        this.containerCattle.addChild(this.layer50);
        this.containerCattle.addChild(this.layer40);
        this.containerCattle.addChild(this.layer30);
        this.containerCattle.addChild(this.layer20);
        this.containerCattle.addChild(this.layer10);
        this.containerCattle.addChild(this.layer0);
        this.containerCattle.addChild(this.particleContainer);
        this.containerCattle.addChild(this.whiteRectangle);
        this.containerCattle.addChild(this.burstBG);
        this.containerCattle.addChild(this.burstFG);

        this.containerCattle.addChild(this.lensContainer);

        this.binoculars = new PIXI.Sprite.fromFrame("viewport.png");
        this.binoculars.anchor.set(.5, .5);
        this.binoculars.scale.set(6, 6);
        this.binoculars.position.set(this.dimensions.width/2, this.dimensions.height/2);

        TweenLite.to(this.binoculars.scale, .4, { x:2.4, y:2.4, ease: Expo.easeOut, delay: 1});
        // TweenLite.to(this.container.scale, .4, { x:1, y:1, ease: Ease.easeIn, delay: 1});

        this.view.addChild(this.binoculars)
        this.view.addChild(this.hud);

        /* 
        USER INTERACTIONS 
        */

        this.keyboard = new Keyboard();
        this.devicemotionManager = new DevicemotionManager();

        this.trackpad = new PixiTrackpad({ target: this.view });
        this.trackpad.capMovement = false;
        
        this.trackpad.onClick.add(function(){ this.onDown = true; }.bind(this));
        this.trackpad.onDeclick.add(function(){ this.onDown = false; }.bind(this));

         /* BUTTONS */
        this.buttonRight = new ButtonWireframe(new PIXI.Point(this.dimensions.width - 100, this.dimensions.height /2));
        this.buttonRight.view.mousedown = this.buttonRight.view.touchstart = this.buttonRightPressed.bind(this);
        this.hud.addChild(this.buttonRight.view);

        this.buttonLeft = new ButtonWireframe(new PIXI.Point(100, this.dimensions.height /2));
        this.buttonLeft.view.scale.x = -1;
        this.buttonLeft.view.mousedown = this.buttonLeft.view.touchstart = this.buttonLeftPressed.bind(this);

        this.hud.addChild(this.buttonLeft.view);

        this.view.interactive = true;

        if (this.isMobile)
        {
            // accelerometer control
            this.buttonAccelerometer = new SCButton.blueButton("icon_accel_on.png");
            // this.buttonAccelerometer.icon.scale.set(.6);
            this.buttonAccelerometer.view.position.set(this.dimensions.width - this.buttonAccelerometer.view.width + 52 , this.dimensions.height - this.buttonAccelerometer.view.height/2- 20);

            this.hud.addChild(this.buttonAccelerometer.view);

            this.buttonRight.view.position.x += 200;
            this.buttonLeft.view.position.x -= 200;
            this.checkAccelerometer = true;
        }

        this.orientationManager = new OrientationManager();
        this.deviceOrientation = (this.orientationManager.orientation >= 0) ? 1 : -1;
    }

    CattleGame.prototype = Object.create( Game.prototype );

    CattleGame.prototype.addSignals = function(rotation)
    {
        this.orientationManager.onRotationChanged.add(this._onRotationChanged.bind(this));

        if (this.isMobile)
        {
            this.buttonAccelerometer.onPress.add(this.changeMobileInteraction, this);
        }

        for (var i = 0; i < this.cowsArray.length; ++i) 
        {
            this.cowsArray[i].onMousedown.add(this.cowMousedown, this);
            this.cowsArray[i].onMouseup.add(this.cowMouseup, this);
        }

        this.app.overlayManager.tutorialScreen.onTutorialFinished.add(this.tutorialFinished, this);
        this.app.screenManager.onSegmentChange.add(this.onHide, this);
        this.app.hud.onFinished.addOnce(this.winGame, this);
    };

    CattleGame.prototype.removeSignals = function(rotation)
    {
        this.orientationManager.onRotationChanged.remove(this._onRotationChanged.bind(this));

        if (this.isMobile)
        {
            this.buttonAccelerometer.onPress.remove(this.changeMobileInteraction, this);
        }

        for (var i = 0; i < this.cowsArray.length; ++i) 
        {
            this.cowsArray[i].onMousedown.remove(this.cowMousedown, this);
            this.cowsArray[i].onMouseup.remove(this.cowMouseup, this);
        }

        this.app.overlayManager.tutorialScreen.onTutorialFinished.remove(this.tutorialFinished, this);
        this.app.screenManager.onSegmentChange.remove(this.onHide, this);
        this.app.hud.onFinished.remove(this.winGame, this);

        this.app.hud.onFinished.remove(this.winGame, this);
        this.app.screenManager.onSegmentChange.remove(this.onHide, this);
        GameSaveManager.instance.onSavedComplete.remove(this._gameOver, this);
    };

    CattleGame.prototype.generateParticles = function(rotation)
    {
        var max = 50
        for (var i=0; i < max; i++) 
        {
            var particle = new PIXI.Sprite.fromFrame("particle.png");
            if(Device.instance.blendModeFriendly)
            {
                particle.blendMode = PIXI.blendModes.ADD;
            }
            else 
            {
                particle.alpha = .3;
            }
            particle.position.x = Math.random() * 110640;
            particle.position.y = Math.random() * 110640;
            particle.speed = new PIXI.Point((Math.random() -0.5)*0.2, (Math.random() -0.5) *0.4 );
            particle.alpha = Math.random()*.7+.2
            particle.rotation.x = Math.random()* 180/Math.PI
            particle.z = Math.random() * 500;
            this.particles.push(particle);
            this.particleContainer.addChild(particle);
        }
    }

    CattleGame.prototype.changeMobileInteraction = function(rotation)
    {
        this.checkAccelerometer = !this.checkAccelerometer;
     
        // make disappear or appear the arrow for navigation
        TweenLite.to(this.buttonRight.view.position, .2,
        {
            x: this.checkAccelerometer ? this.dimensions.width + 100 : this.dimensions.width - 100,
            ease: Ease.easeOut
        });

        TweenLite.to(this.buttonLeft.view.position, .2,
        {
            x: this.checkAccelerometer ? -100 : 100,
            ease: Ease.easeOut
        });

        if (this.checkAccelerometer)
        {
            this.buttonAccelerometer.setIcon("icon_accel_on.png");
        }
        else
        {
            this.buttonAccelerometer.setIcon("icon_accel_off.png");
        }
    }

    CattleGame.prototype.hideMobileButtons = function(rotation)
    {
        TweenLite.to(this.buttonRight.view.position, .2,
        {
            x: this.dimensions.width + 100 ,
            ease: Ease.easeOut
        });

        TweenLite.to(this.buttonLeft.view.position, .2,
        {
            x:  -100,
            ease: Ease.easeOut
        });
    }

    CattleGame.prototype.showMobileButtons = function(rotation)
    {
        TweenLite.to(this.buttonRight.view.position, .2,
        {
            x: this.dimensions.width - 100 ,
            ease: Ease.easeOut
        });

        TweenLite.to(this.buttonLeft.view.position, .2,
        {
            x:  100,
            ease: Ease.easeOut
        });
    }

    CattleGame.prototype._onRotationChanged = function(rotation)
    {
        this.deviceOrientation = (rotation >= 0) ? 1 : -1;
    }

    CattleGame.prototype.start = function(rotation)
    {
        Game.prototype.start.call(this);
    }

    CattleGame.prototype.dispatchInLayers = function(layerNumber, obj)
    {
        var array;
        if(layerNumber == 0) {
            this.layer0.addChild(obj.sprite);
            array = this.layer0Array;
        }
        else if(layerNumber == 10) {
            this.layer10.addChild(obj.sprite);
            array = this.layer10Array; 
        }
        else if(layerNumber == 20) {
            this.layer20.addChild(obj.sprite);
            array = this.layer20Array; 
        }
        else if(layerNumber == 30) {
            this.layer30.addChild(obj.sprite);
            array = this.layer30Array; 
        }
        else if(layerNumber == 40) {
            this.layer40.addChild(obj.sprite);
            array = this.layer40Array; 
        }
        else if(layerNumber == 50) {
            this.layer50.addChild(obj.sprite);
            array = this.layer50Array; 
        }
        else if(layerNumber == 60) {
            this.layer60.addChild(obj.sprite);
            array = this.layer60Array; 
        }

        array.push(obj);
    }

    /*
     * CREATE GAME ELEMENTS
     */

    CattleGame.prototype.generateCows = function()
    {
        var names = ["Matt", "Mat", "Alvin", "Tom", "James", "John", "Clement"]

        this.cowsArray = [];

        // generate cows
        for (var c = 0; c < 6; ++c) 
        {
            var whichSpot = Math.floor(Math.random()*this.datas.spots.length); //  find a good spot to graze alone
            while(this.datas.spots[whichSpot].occupied)
            {
                whichSpot = Math.floor(Math.random()*this.datas.spots.length);
            }

            var spot = this.datas.spots[whichSpot]; // that's my spot
            this.datas.spots[whichSpot].occupied = true;

            var cow = new Cow(this.totalWidth, names[c], spot, this.level, this.trigger);
            cow.id = c;
            
            var percentage =  100 * ( (cow.cowView.position.x - Math.abs(spot.startSpeed)) / (Math.abs(spot.endSpeed) - Math.abs(spot.startSpeed)) );
            if(percentage >= 100)
            {
                percentage = 100;
            }
            else if(percentage <= 0)
            {
                percentage = 0;
            }

            /* important */
            var offsetLeft = null; // offset to add when elements goes to this.totalWidth /2
            var offsetRight = null; // offset to add when elements goes to -this.totalWidth /2

            if(cow.cowView.position.x + cow.cowView.width/2 > 0 && cow.cowView.position.x - cow.cowView.width/2 < this.dimensions.width) // only if element as first is appearing IN the screen
            {
                var deplacementValue = (spot.amplitude / 100) * percentage;
                offsetLeft = spot.amplitude - deplacementValue;
                offsetRight = deplacementValue;
            }

            this.cowsArray.push(cow);

            var obj = {
                "sprite": cow.cowView,
                "x": cow.cowView.position.x,
                "amplitude": spot.amplitude, 
                "deplacementValue": 0, 
                "startSpeed": spot.startSpeed,
                "endSpeed": spot.endSpeed,
                "direction": this.directions.none,
                "percentage": 0,
                "offsetLeft": offsetLeft,
                "offsetRight": offsetRight,
                "test": spot.test
            };

            this.dispatchInLayers(spot.layer, obj);
        }
    }

    CattleGame.prototype.cowMousedown = function(thatCow)
    {
        if(!this.tutorialIsFinished[0]) return;
        this.cowTouched = thatCow; 
        
    }

    CattleGame.prototype.cowMouseup = function(data, thatCow)
    {
        if(!this.tutorialIsFinished[0] || !this.cowTouched || (!this.checkAccelerometer && this.parallaxSpeed > 1)) return;
        for (var i = 0; i < this.cowsArray.length; ++i) 
        {
            this.cowsArray[i].isTouched = false;
        }

        if(this.cowTouched.id == thatCow.id && !this.onChasegame && !this.chaseGameWillBePlayed)
        {
            this.cowTouched.isTouched = true;
            SoundManager.sfx.play('happyCustomer');
            if(this.level == "hard")
            {
                this.chaseGameWillBePlayed = true;
                this.cowTouched.justClouds();
                this.launchChaseGame(this.cowTouched, data);
            }
            else
            {
                this.incrementScore(this.cowTouched.id);
                this.cowTouched.disappear();
            }
        }
    }

    CattleGame.prototype.generateSun = function()
    {
        var sprite = new PIXI.Sprite.fromFrame("sun.png");
        sprite.anchor.set(.5, .5);
        sprite.scale.x = sprite.scale.y = .7;
        // sprite.position = new PIXI.Point(3100, this.dimensions.height - 100);
        sprite.position.set(2300, 250);

        var obj = {
            "sprite":sprite,
            "x":2300,
            "amplitude": 300,
            "deplacementValue": 0,
            "startSpeed": 0,
            "endSpeed": 1136,
            "direction": this.directions.none,
            "percentage": 0,
            "offsetLeft": null,
            "offsetRight": null,
            "test": null,
            "sun": true
        };

        this.dispatchInLayers(60, obj);
    }

    CattleGame.prototype.generateDecor = function()
    {   

        this.elements = [];
        // generate cows
        for (var c = 0; c < this.datas.decors.length; ++c) 
        {

            var decorElement = this.datas.decors[c];
            var sprite = new PIXI.Sprite.fromFrame(decorElement.image);
            sprite.anchor.set(.5, .5);
            sprite.scale.x = decorElement.scale;
            sprite.scale.y = Math.abs(sprite.scale.x);
            sprite.position.set(decorElement.position.x, decorElement.position.y);
            // decomment to disable click trough buildings
            // sprite.interactive = true;             

            var percentage =  100 * ( (sprite.position.x - Math.abs(decorElement.startSpeed)) / (Math.abs(decorElement.endSpeed) - Math.abs(decorElement.startSpeed)) );
            if(percentage >= 100)
            {
                percentage = 100;
            }
            else if(percentage <= 0)
            {
                percentage = 0;
            }

            /* important */
            var offsetLeft = null; // offset to add when elements goes to this.totalWidth /2
            var offsetRight = null; // offset to add when elements goes to -this.totalWidth /2

            if(sprite.position.x + sprite.width/2 > 0 && sprite.position.x - sprite.width/2 < this.dimensions.width) // only if element as first is appearing IN the screen
            {                
                var deplacementValue = (decorElement.amplitude / 100) * percentage;
                offsetLeft = decorElement.amplitude - deplacementValue;
                offsetRight = deplacementValue;

                // not proud of the following condition... One of the building has an unexpected offset, so I have to add this
                if(sprite.position.x < 0) 
                {
                    offsetLeft -= 30;
                    offsetRight += 30;                                        
                }
            }

            var obj = {
                "sprite":sprite,
                "x":sprite.position.x,
                "amplitude":decorElement.amplitude,
                "deplacementValue": 0,
                "startSpeed": decorElement.startSpeed,
                "endSpeed": decorElement.endSpeed,
                "direction": this.directions.none,
                "percentage": 0,
                "offsetLeft": offsetLeft,
                "offsetRight": offsetRight,
                "test": decorElement.test,
                "sun" : decorElement.sun,
                "defaultScaleY": sprite.scale.y
            };

            if(decorElement.test) this.elements.push(obj)

            this.dispatchInLayers(decorElement.layer, obj);
            if(decorElement.wind)
            {
                this.windAffected.push(obj);
            }
        }

        this.generateSun();
    }

    CattleGame.prototype.generateTumbleweeds = function(container)
    {
        this.tumbleweeds = [];

        for (var i = 0; i < this.datas.tumbleweeds.length; ++i) 
        {  
            var dataTW = this.datas.tumbleweeds[i];
            var tw = new Tumbleweed(dataTW.position);
            tw.speedDecrease = dataTW.speedDecrease;
            // tw.tumbleweed.position = new PIXI.Point(dataTW.position.x, dataTW.position.y);
            tw.baseY = dataTW.position.y;
            tw.tumbleweed.scale.set(dataTW.scale);
            this.container.addChild(tw.tumbleweed);

            this.tumbleweeds.push(tw);

            var obj = {
                "sprite": tw.tumbleweed,
                "x":200,
                "amplitude": 0,
                "deplacementValue": 0,
                "startSpeed": 0,
                "endSpeed": 1136,
                "direction": this.directions.none,
                "percentage": 0,
                "offsetLeft": null,
                "offsetRight": null,
                "tw": true
            };

            this.dispatchInLayers(dataTW.layer, obj);
        }
    }

    CattleGame.prototype.tobyTouched = function(sprite)
    {
        TweenLite.to(sprite.position, .8,
        {
            y: this.dimensions.height + 800,
            ease: Expo.easeOut
        });
        this.tobyIsTouched = true;
    };

    CattleGame.prototype.toby = function()
    {
        var sprite = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/toby.png");
        sprite.anchor.set(.5, .5);
        sprite.scale.set(1.5);
        sprite.position.set(3300, this.dimensions.height + 800);
        sprite.interactive = true;
        sprite.buttonMode = true;
        sprite.mousedown = sprite.touchstart = this.tobyTouched.bind(this, sprite);

        var obj = {
            "sprite":sprite,
            "x":3300,
            "amplitude": 200,
            "deplacementValue": 0,
            "startSpeed": 0,
            "endSpeed": 1136,
            "direction": this.directions.none,
            "percentage": 0,
            "offsetLeft": null,
            "offsetRight": null,
            "test": null,
            "toby": true
        };

        this.dispatchInLayers(0, obj);
    }

    CattleGame.prototype.lensFlare = function()
    {
        this.lens = [];

        var total = 8;
        var min = 250;
        var max = 550;


        var scales = [.2, .8, .4, .1, .2]
        var colors = ["red", "blue", "green", "yellow", "purple", "orange"];
        for (var i = 0; i < total; i++) 
        {
            var lens = new PIXI.Sprite.fromFrame("lens.png")
            lens.alpha = 0;
            lens.anchor.set(.5, .5);
            lens.position.set(this.dimensions.width/2, Math.random()*(max-min) + min  );

            var amplitude = 600 / (lens.position.y/max);
            var color = "0x"+ RandomColor({hue: colors[Math.floor(Math.random()*4)], luminosity: 'light', format: ''})
            // lens.tint = color;
            if(Device.instance.blendModeFriendly)
            {
                lens.blendMode = PIXI.blendModes.ADD;
            }
            else
            {
                lens.alpha = .3;
            }
            lens.scale.set( scales[Math.floor(Math.random()*2)]);
            this.lensContainer.addChild(lens);

            var amplitudeY;
            if(lens.position.y >= this.dimensions.height/2)
            {
                amplitudeY = - Math.abs(lens.position.y - this.dimensions.height/2);
            }
            else
            {
                amplitudeY = this.dimensions.height/2 - lens.position.y;   
            }

            this.lens.push([lens, amplitude, lens.position.y, amplitudeY]);
        };
    };

    CattleGame.prototype.generateFloor = function()
    {
        this.floorArray = [];

        var left = 0;
        this.totalWidth = 0;

        var texture = PIXI.Texture.fromImage(ASSET_URL + "img/game/cow_chase_horizon.jpg");
        var width = texture.width / 2;

        for (var i = 0; i < 4; ++i) 
        {
            var img = new PIXI.Sprite(texture, new PIXI.Rectangle(i * width, 0, width, 0));
            img.scale.set(2);
            img.anchor.set(.5, .5);
            // img.scale.x = img.scale.y = .95;
            // img.position = new PIXI.Point(left, img.height/2 - 20);
            img.position.set(left, 450 - 20);
            left += img.width;
            this.layerFloor.addChild(img);
            this.floorArray.push(img);
        }

        this.totalWidth = left;

        for (var i = 0; i < this.floorArray.length; i++) 
        {
            var floorPiece = this.floorArray[i];
            floorPiece.position.x -= (this.totalWidth /2 - this.center);
        }

        this.borderLeft = this.center - this.totalWidth / 2;
        this.borderRight = this.center + this.totalWidth / 2;
    }

    CattleGame.prototype.generateClouds = function(container)
    {
        this.clouds = [];

        var clouds = ["cloud_a.png", "cloud_b.png", "cloud_b.png", "cloud_d.png", "cloud_e.png"];
        for (var i = 0; i < 20; ++i) 
        {
            var img = new PIXI.Sprite.fromFrame(clouds[i%clouds.length]);
            img.anchor.set(.5, 0);
            img.position.set(Math.random()*this.totalWidth, Math.random()*Math.random()*200 + 150);
            img.scale.set(.8 - Math.random()*.3);
            container.addChild(img);

            var speed = Math.random()*.3 + 1
            this.clouds.push({ "img" : img, "speed" : speed});
        }
    }

    /*
    REMOVE ELEMENTS FROM STAGE
    */
    CattleGame.prototype.removeElementsFromScene = function()
    {
            if (this.layer0.children.length > 0) 
            {
                this.layer0.removeChildren();
            }
            if (this.layer10.children.length > 0)
            {
                this.layer10.removeChildren();
            }
            if (this.layer20.children.length > 0)
            {
                this.layer20.removeChildren();
            }
            if (this.layer30.children.length > 0)
            {
                this.layer30.removeChildren();
            }
            if (this.layer40.children.length > 0)
            {
                this.layer40.removeChildren();
            }
            if (this.layer50.children.length > 0)
            {
                this.layer50.removeChildren();
            }
            if (this.layer60.children.length > 0)
            {
                this.layer60.removeChildren();
            }
            if (this.cloudsContainer.children.length > 0)
            {
                this.cloudsContainer.removeChildren();
            }
            if (this.particleContainer.children.length > 0)
            {
                this.particleContainer.removeChildren();
            }
            if (this.lensContainer.children.length > 0)
            {
                this.lensContainer.removeChildren();
            }

            if (this.layerFloor.children.length > 0)
            {
                this.layerFloor.removeChildren();
            }

            // destroy cows and tumbleweeds
            if(this.cowsArray && this.tumbleweeds)
            {
                for (var i = 0; i < this.cowsArray.length; ++i) 
                {
                    this.cowsArray[i].destroy();
                }

                for (var i = 0; i < this.tumbleweeds.length; ++i) 
                {
                    this.tumbleweeds[i].destroy();
                }
            }


            this.tumbleweeds = [];
            this.cowsArray = [];
            this.layer0Array = [];
            this.layer10Array = [];
            this.layer20Array = [];
            this.layer30Array = [];
            this.layer40Array = [];
            this.layer50Array = [];
            this.layer60Array = [];
            this.clouds = [];
            this.floorArray = [];
            this.countScore = [];
            this.lens = [];

            for (var i = 0; i < this.datas.spots.length; i++) 
            {
                this.datas.spots[i].occupied = false;
            }
    }

    /*
    EVENTS GAME HUD
    */
    CattleGame.prototype.incrementScore = function()
    {
        if(this.cowTouched)
        {
            this.app.hud.updateLives();
        }

            // Wait.wait(this.winGame.bind(this), 60);
    }

    CattleGame.prototype.winGame = function()
    {
        console.log("finish cattle")
        GameSaveManager.instance.onSavedComplete.addOnce(this._gameOver, this);
        GameSaveManager.instance.setComplete(2);
        SoundManager.music.setVolume('cattleLoop', 0.3);
        // this.gameOver();
    }



    /*
    * CHASE GAME
    */

    CattleGame.prototype.launchChaseGame = function(cow, data)
    {
        this.chaseGameWillBePlayed = true;
        for (var i = 0; i < this.cowsArray.length; ++i) 
        {
            this.cowsArray[i].gameIsPlaying = true;
        }

        this.app.fade.onFadeIn.addOnce(this.startChaseGame,this);

        this.cowTouched.run();

        TweenLite.to(this.container.scale, .8, 
        {
            x: 2,
            y: 2,
            ease: Ease.easeOut
        });

        TweenLite.to(this.container.position, .8, 
        {
            x: this.container.position.x - (data.originalEvent.clientX - this.container.position.x)*2,
            y: -180,
            ease: Ease.easeOut
        });
        this.app.fade.fade(1,1.2,0.7);
    }

    CattleGame.prototype.startChaseGame = function()
    {
        this.container.scale.set(1.2);
        this.container.position.y = -20;
        this.containerWithoutHud.pivot.y = 0;
        this.container.position.x = this.dimensions.width/2;
        this.counterBeforeBounce = 200;
        
        GameSaveManager.instance.setTutorial(3);
        this.binoculars.scale.set(7);

        // TweenLite.to(this.container.position, .2, 
        // {
        //   y: 0
        // });

        this.buttonLeft.view.alpha = this.buttonRight.view.alpha = 0;

        if (this.isMobile) 
        {
            this.buttonAccelerometer.view.alpha = 0;
            this.buttonAccelerometer.view.interactive = false;
            this.hideMobileButtons();
        }

        this.burstBG.alpha = 0;
        this.burstFG.alpha = 0;
        this.lensContainer.alpha = 0
        // this.layerFloor.alpha = 0;
        this.layer0.alpha = 0;
        this.layer10.alpha = 0;
        this.layer20.alpha = 0;
        this.layer30.alpha = 0;
        this.layer40.alpha = 0;
        this.layer50.alpha = 0;
        this.layer60.alpha = 0;
        this.particleContainer.alpha = 0;

        this.chaseGame = new ChaseGame(this.cowTouched, this.clouds, "cow", this.app);
        this.chaseGame.position.y = -40;
        this.containerChase.addChild(this.chaseGame);

        this.chaseGame.onSuccess.addOnce(this.removeChaseGame.bind(this));
        this.chaseGame.onSuccess.addOnce(this.afterSuccess.bind(this));

        this.chaseGame.onLoose.addOnce(this.removeChaseGame.bind(this));
        this.chaseGame.onLoose.addOnce(this.afterLoose.bind(this));        

        this.onChasegame = true;

        if(!this.tutorialIsFinished[1])
        {
            this.app.overlayManager.tutorialScreen.setNormalMode();
            Wait.wait(function(){
                this.app.overlayManager.show("tutorial");
            }.bind(this));
        }
        else
        {
            this.playChaseGame(true);
        }
    }

    CattleGame.prototype.playChaseGame = function(playsound)
    {
        this.chaseGame.start();
        this.chaseGameStart = true;
        MusicManager.play('chaseLoop');
        
        if(playsound)
        {
            this.chaseGame.playSound();
        }
    }

    CattleGame.prototype.afterSuccess = function(cow)
    {
        this.onChasegame = false;
        if(cow) {
            cow.disappear();
            this.incrementScore();
        }
    }

    CattleGame.prototype.afterLoose = function(cow)
    {
        this.onChasegame = false;
        if(cow) 
        {
            cow.isTouched = false;
            cow.justCloudsMoving = false;
        }
    }

    CattleGame.prototype.removeChaseGame = function()
    {
        this.chaseGame.stop();

        MusicManager.play('cattleLoop');
        GameSaveManager.instance.setTutorial(2);

        this.chaseGameWillBePlayed = false;
        this.onChasegame = false;

        this.containerWithoutHud.rotation = 0;
        this.containerWithoutHud.position.x = 0;

        this.chaseGameStart = false;
        // this.sky.scale.y = .65;

        for (var i = 0; i < this.cowsArray.length; i++)
        {
            this.cowsArray[i].gameIsPlaying = false;
        }

        TweenLite.to(this.binoculars.scale, .4, { x:2.3, y:2.3, ease: Expo.easeOut});

        this.buttonLeft.view.alpha = this.buttonRight.view.alpha = 1;

        if (this.isMobile)
        {
            this.buttonAccelerometer.view.alpha = 1;
            this.buttonAccelerometer.view.interactive = true;
            if(!this.checkAccelerometer)
            {
                this.showMobileButtons();
            }
        }

        this.parallaxSpeed = 20;
        this.mainDirection = this.directions.none;
        // this.layerFloor.alpha = 1;
        this.layer0.alpha = 1;
        this.layer10.alpha = 1;
        this.layer20.alpha = 1;
        this.layer30.alpha = 1;
        this.layer40.alpha = 1;
        this.layer50.alpha = 1;
        this.layer60.alpha = 1;
        this.burstBG.alpha = 1;
        this.burstFG.alpha = 1;
        this.lensContainer.alpha = 1
        this.particleContainer.alpha = 1;
        this.containerChase.removeChildren();
    }

    /*
    UPDATES
    */

    CattleGame.prototype.moveLens = function(percentage)
    {
        // percentage between -1 et 1 (percentage - 50)/50

        var alphaWhite = Math.abs(1 - 1 / Math.pow( (percentage - 50)/50, 2) );
        var alphaSun = Math.abs(1 - 1 / Math.pow( (percentage - 50)/50, 2) ) / 5;
        if (alphaWhite > 1) alphaWhite = 1;
        if (alphaSun > 1) alphaSun = 1;
        
        this.whiteRectangle.alpha = 0.2 * alphaWhite;
        this.burstBG.alpha = 0.4 * alphaSun;
        this.burstFG.alpha = 0.4 * alphaSun;

        this.burstBG.rotation = percentage/120;
        this.burstFG.rotation = percentage/100;



        for (var i = 0; i < this.lens.length; i++) {
            var lens = this.lens[i]; // 0 sprite, 1 amplitude, 2 y.position, 3 amplitudeY

            // var anchor = Math.abs( (lens[0].width) /4);
            var anchor = 0;
            var percentageLens =  Math.abs(-50 + 100 * ( (lens[0].position.x + anchor - Math.abs(this.dimensions.width/2 - lens[1]/2)) / (Math.abs(this.dimensions.width/2 + lens[1]/2) - Math.abs(this.dimensions.width/2 - lens[1]/2) + anchor*2) )) /50;
            lens[0].alpha = 1 - Math.abs(1 - Math.exp(percentageLens))/2;            
            /*  AMPLITUDE CALCUL  */        
            lens[0].position.x = this.dimensions.width/2 - lens[1]/2 + lens[1] * percentage/100;

            lens[0].position.y = lens[2] + (lens[3]/5)*(1-percentageLens);
        };
    }


    CattleGame.prototype.moveSprite = function(obj)
    {
        obj.sprite.position.x += this.mainDirection * this.parallaxSpeed; // linear displacement + amplitude
        obj.x +=  this.mainDirection * this.parallaxSpeed; // obj.x has a linear displacement

        var anchor = 0;
        if(obj.sprite instanceof PIXI.Sprite) 
        {
            anchor = Math.abs( (obj.sprite.width) /4);
        }
        else 
        {
            anchor = 0;
        }

        if(obj.tw) 
        {
            obj.x = obj.sprite.x;
        }

        var percentage =  100 * ( (obj.sprite.position.x + anchor - Math.abs(obj.startSpeed)) / (Math.abs(obj.endSpeed) - Math.abs(obj.startSpeed) + anchor*2) );

        /*  AMPLITUDE CALCUL  */        
        if (percentage <= -10)
        {
            percentage = -10;
            obj.deplacementValue = (obj.amplitude / 100) * percentage; 
        } 
        if (percentage >= 110) 
        {
            percentage = 110;
            obj.deplacementValue = (obj.amplitude / 100) * percentage; 
        }

        // if(percentage == 110 || percentage == - 10)
        // {
        //     obj.sprite.visible = false;
        // }
        // else
        // {
        //     obj.sprite.visible = true;
        // }
        
        if (this.mainDirection !== obj.direction)
        {
            obj.direction = this.mainDirection;
            obj.deplacementValue = (obj.amplitude / 100) * percentage;
        }

        if(obj.sun)
        {
            this.moveLens(percentage);
            this.burstBG.position = obj.sprite.position;
            this.burstFG.position = obj.sprite.position;
        }

        if(obj.toby)
        {
            if(percentage >= 25 && percentage <= 65)
            {
                if(!this.tobyIsTouched)
                {
                    TweenLite.to(obj.sprite.position, .4,
                {
                    y: this.dimensions.height - 100,
                    ease: Expo.easeOut
                });
                }
            }
            else if (percentage <= 0 || percentage >= 100)
            {
                this.tobyIsTouched = false;
                TweenLite.to(obj.sprite.position, .4,
                {
                    y: this.dimensions.height + 800,
                    ease: Expo.easeOut
                });
            }
        }


        if(obj.amplitude != 0)
        {
            // ACCELERATION (behaviors are different if the element is part of the screen when screen appears or when it's outside (obj.offsetLeft == null))
            if (this.mainDirection == this.directions.right) 
            {
                if(obj.offsetLeft == null) // element are outside the screen when screen appears, we based the position of the sprite on the obj.x reference and add 'the offset of acceleration'
                {
                    obj.sprite.position.x = obj.x + Math.abs((obj.amplitude / 100) * percentage);
                } 
                else // element are on screen first, increment avoid jump of elements
                {
                    obj.sprite.position.x += Math.abs( (obj.amplitude / 100) * percentage - obj.deplacementValue);
                }
            }
            if (this.mainDirection == this.directions.left) 
            {
                if(obj.offsetLeft == null)
                {
                    obj.sprite.position.x = obj.x + Math.abs((obj.amplitude / 100) * percentage);
                } 
                else // element are on screen first
                {
                    obj.sprite.position.x -= Math.abs( (obj.amplitude / 100) * percentage - obj.deplacementValue);
                }
            }

            obj.deplacementValue = (obj.amplitude / 100) * percentage; // keep a reference how much the sprite was displaced
        }
        
        // REPLACE ELEMENT WHEN OUTSIDE THE GAME
        if (obj.x <= this.borderLeft)
        {

            obj.x += this.totalWidth; // obj.x is the real position because its linear displacement
            obj.sprite.position.x = obj.x;
            if(obj.offsetLeft >= 0) 
            {
                obj.sprite.position.x += obj.offsetLeft;
            }
            else if (obj.offsetLeft < 0)
            {
                obj.sprite.position.x -= obj.offsetLeft;
            }
        }
        else if (obj.x >= this.borderRight)
        {
            obj.x -= this.totalWidth;
            obj.sprite.position.x = obj.x;

            if(obj.offsetRight >= 0)
            {
                obj.sprite.position.x -= obj.offsetRight;
            }
            else if (obj.offsetRight < 0)
            { 
                obj.sprite.position.x += obj.offsetRight;
            }
        }
    }

    CattleGame.prototype.moveElements = function(background, speedDecrease, min)
    {
        for (var i = 0; i < background.length; ++i) 
        {
            var piece = background[i];

            piece.position.x += this.mainDirection * speedDecrease * this.parallaxSpeed + min;

            if(piece.position.x <= this.borderLeft)
            {
                piece.position.x += this.totalWidth;
            }
            if(piece.position.x >= this.borderRight)
            {
                piece.position.x -=  this.totalWidth;
            }
        }
    }

    CattleGame.prototype.moveFloorChaseGame = function(background, min, speed)
    {
        for (var i = 0; i < background.length; ++i) 
        {
            var piece = background[i];

            piece.position.x -= min*speed;

            if(piece.position.x <= this.borderLeft)
            {
                piece.position.x += this.totalWidth;
            }
        }
    }

    CattleGame.prototype.makeWind = function(obj)
    {
        var sprite = obj.sprite;
        var scaleDefault
        sprite.anchor.y = 1;
        sprite.scale.y = obj.defaultScaleY + Math.cos( this.counterWind ) * .008;
        sprite.rotation =  Math.sin(this.count / 2) * 1 * Math.PI/180;
    }

    CattleGame.prototype.moveClouds = function(background, speedDecrease, min)
    {
        for (var i = 0; i < background.length; ++i) 
        {
            var cloud = background[i];

            cloud.img.position.x += this.mainDirection * speedDecrease * this.parallaxSpeed + min;

            if(cloud.img.position.x <= this.borderLeft)
            {
                cloud.img.position.x += this.totalWidth;
            }
            if(cloud.img.position.x >= this.borderRight)
            {
                cloud.img.position.x -=  this.totalWidth;
            }
        }
    }

    /*
    * USER EVENTS
    */

    CattleGame.prototype.buttonLeftPressed = function() {
        this.parallaxSpeed = 40;
        this.mainDirection = this.directions.right;
        this.buttonPressed = true;
    }

    CattleGame.prototype.buttonRightPressed = function() {
        this.parallaxSpeed = 40;
        this.mainDirection = this.directions.left;
        this.buttonPressed = true;
    }

    CattleGame.prototype.onMouseMove = function(data) 
    {
        if(!this.tutorialIsFinished[0]) return;

        if (!this.onChasegame && !this.chaseGameWillBePlayed){
            var total = this.app.safeSize.height;
            var percentage = data.global.y/ total * 100;

            // if(this.onDown)
            // {
            //     percentage = 100 - percentage;
            // }

            TweenLite.to(this.container.position, .2, 
            {
              y: 150 - 150/100*percentage
            });
        }
    }

    CattleGame.prototype.checkKeyboard = function()
    {

        if (!this.isMobile)
        {
            if (this.keyboard.isPressed('left')) // to left
            { 
                this.parallaxSpeed = 10;
                this.mainDirection = this.directions.right;
                this.buttonPressed = true;
            }
            else if (this.keyboard.isPressed('right')) // to right
            {
                this.parallaxSpeed = 10;
                this.mainDirection = this.directions.left;
                this.buttonPressed = true;
            }
            else if (this.keyboard.isPressed('up')) // to top
            { 
                if (this.whereImLookingValue == this.whereImLooking.bottom) 
                {
                    TweenLite.to(this.container.position, .6, { y: 100, ease: Ease.easeOut });
                    this.whereImLookingValue = this.whereImLooking.middle;
                }
                else if (this.whereImLookingValue == this.whereImLooking.middle || !this.whereImLooking.nowhere) 
                {
                    TweenLite.to(this.container.position, .6, { y: 250, ease: Ease.easeOut });
                    this.whereImLookingValue = this.whereImLooking.top;
                }
            }
            else if (this.keyboard.isPressed('down')) // to bottom
            {
                if(this.whereImLookingValue == this.whereImLooking.top) 
                {
                    TweenLite.to(this.container.position, .6, { y: 100, ease: Ease.easeOut });
                    this.whereImLookingValue = this.whereImLooking.middle;
                }
                else if(this.whereImLookingValue == this.whereImLooking.middle || this.whereImLooking.nowhere) 
                {
                    TweenLite.to(this.container.position, .6, { y: -50, ease: Ease.easeOut });
                    this.whereImLookingValue = this.whereImLooking.bottom;
                }
            }
        }
    }

    CattleGame.prototype.deviceRotationUpdate = function()
    {
        if (!this.mousedownAndScrolling && this.isMobile)
        {
            var gamma = this.devicemotionManager.accelerationWithGravity.z;

            if (this.checkDevice.iOS)
            {
                gamma *= -1;
            }

            var total = 6;
            if (gamma > total) gamma = total;
            if (gamma < -total) gamma = -total;

            var percentage = gamma/total * 100;
            var target = 100 - (150/100)*percentage;

            this.container.position.y += (target - this.container.position.y) * 0.2;
        }
    }

    CattleGame.prototype.deviceMotionUpdate = function()
    {
        if (this.isMobile) // only for mobile, working on device rotation
        {
            if (!this.mousedownAndScrolling)
            {
                if (this.checkDevice.iOS)
                {
                    this.parallaxSpeed = Math.abs(this.devicemotionManager.rotation.alpha / 2);
                }
                else
                {
                    if(this.checkDevice.chrome)
                    {
                        this.parallaxSpeed = Math.abs(this.devicemotionManager.rotation.alpha * 10);
                    }
                    else
                    {
                        this.parallaxSpeed = Math.abs(this.devicemotionManager.rotation.alpha / 2);       
                    }
                }

                if(this.parallaxSpeed < 1)
                {
                    this.parallaxSpeed = 0;
                }

                if(this.devicemotionManager.rotation.alpha * this.deviceOrientation > 0)
                {
                    this.mainDirection = this.directions.right;
                }
                else 
                {
                    this.mainDirection = this.directions.left;
                }
            }
        }
    }

    CattleGame.prototype.update = function()
    {   
        
        this.counterWind += .05 * Ticker.instance.deltaTime;
        if(this.parallaxSpeed > this.yo)
        {
            this.yo = this.parallaxSpeed;

            if(this.yo > 20) this.yo = 20;
        }
        else
        {
            this.yo *= .995;
        }

        if(!this.tutorialIsFinished[0]) return;

        /*
         * CHASE GAME
         */
        if(this.onChasegame || this.chaseGameWillBePlayed)
        {
            if(!this.onChasegame) // leave the clouds of the cow live
            {
                for (var i = 0; i < this.cowsArray.length; ++i) 
                {
                    this.cowsArray[i].live();
                }
            }
            if(this.chaseGame && this.chaseGameStart)
            {
                this.moveFloorChaseGame(this.floorArray, 2, this.chaseGame.cloudSpeed * .8);
                this.counterBeforeBounce -= 1 * Ticker.instance.deltaTime;

                this.chaseGame.update();

                
                if(this.counterBeforeBounce <= 0 && !this.chaseGame.isFinished && this.chaseGame.sheriffIsInThePlace) // go inside one time every this.counterBeforeBounce == 0
                {
                    this.spring.dx = -25;
                    this.makeRotationEnable = false;
                    this.counterBeforeBounce = 120;


                    TweenLite.to(this.containerWithoutHud, .8, {
                        rotation: Math.random()*.2 - .1,
                        delay: .2,
                        ease: Elastic.easeOut.config(1, 0.3)
                    });

                    TweenLite.to(this.containerWithoutHud, .5, {
                        rotation: Math.cos(this.count/2) * 1 *Math.PI/180,
                        delay: 1,
                        ease: Quad.easeOut,
                        onComplete: function()
                        {
                            this.makeRotationEnable = true; // make enter in the main boucle again
                        }.bind(this)
                    });
                } 
                else if (this.makeRotationEnable) // main boucle, animation (rotation, x) of the container chase game 
                {
                    this.counter += .1 * Ticker.instance.deltaTime;
                    this.containerWithoutHud.rotation = Math.cos(this.count/2) * 1 *Math.PI/180;
                    this.containerWithoutHud.position.x = Math.sin( Math.tan( Math.cos( this.count/1.6 ) ) ) * 50;
                }
                else // manage the spring update
                {
                    this.spring.update();
                    this.containerWithoutHud.pivot.y = this.spring.x;
                }
            }

            return;
        }
        /*
         * END CHASE GAME
         */
        else 
        {
            this.containerWithoutHud.rotation = 0;
            this.containerWithoutHud.position.x = 0;
            this.containerWithoutHud.pivot.y = 0;
            this.makeRotationEnable = true;
        }

        this.checkKeyboard();

        if (this.checkAccelerometer)
        {
            this.deviceMotionUpdate();
            this.deviceRotationUpdate();
        }

        this.trackpad.update();
        //console.log(this.trackpad.speed);

        if (!this.isMobile || !this.checkAccelerometer) // if gyroscope and accelerometer are disabled, the next else condition allows the decrease of speed when user clicks on buttonLeft or buttonRight
        {
            if (!this.buttonPressed) 
            {
                if (this.trackpad.speed < -.1) // we are scrolling 
                { 
                    this.mousedownAndScrolling = true; 
                    this.mainDirection = this.directions.left;
                    this.parallaxSpeed = Math.abs(this.trackpad.speed);
                }
                else if (this.trackpad.speed > .1) // we are scrolling (other direction)
                { 
                    this.mousedownAndScrolling = true;
                    this.mainDirection =  this.directions.right;
                    this.parallaxSpeed = Math.abs(this.trackpad.speed);
                }
                else // stop scrolling
                { 
                    this.mousedownAndScrolling = false;
                    this.parallaxSpeed = 0;
                    if (!this.isMobile)
                    {
                        this.mainDirection = this.directions.none;
                    }
                }
            } 
            else
            {
                this.parallaxSpeed *= .92;
                if(this.parallaxSpeed < .1)
                {
                    this.buttonPressed = false;
                    this.parallaxSpeed = 0;
                }
            }
        }
        else 
        {
            if (this.trackpad.speed < -.1) // we are scrolling
            {
                this.mousedownAndScrolling = true; 
                this.mainDirection = this.directions.left;
                this.parallaxSpeed = Math.abs(this.trackpad.speed);
            }
            else if (this.trackpad.speed > .1) // we are scrolling (other direction)
            { 
                this.mousedownAndScrolling = true;
                this.mainDirection = this.directions.right;
                this.parallaxSpeed = Math.abs(this.trackpad.speed);
            }
            else // stop scrolling
            { 
                this.mousedownAndScrolling = false;
            }
        }


        // ZOOM
        var fX = this.parallaxSpeed;
        fX /= 40;
        fX *= 0.25;
        this.zoom += ((fX) - this.zoom) * 0.1;

        this.container.scale.set(1 + this.zoom);


        this.moveElements(this.floorArray, .8, 0);
        this.moveClouds(this.clouds, .8, -.1);

        // move elements
        for (var i = 0; i < this.cowsArray.length; ++i) 
        {
            this.cowsArray[i].live();
        }

        for (var i = 0; i < this.tumbleweeds.length; ++i) 
        {
            this.tumbleweeds[i].live();
        }

        for (var i = 0; i < this.layer60Array.length; ++i) 
        {
            var obj = this.layer60Array[i];
            this.moveSprite(obj);
        }

        for (var i = 0; i < this.layer50Array.length; ++i) 
        {
            var obj = this.layer50Array[i];
            this.moveSprite(obj);
        }

        for (var i = 0; i < this.layer40Array.length; ++i) 
        {
            var obj = this.layer40Array[i];
            this.moveSprite(obj);
        }

        for (var i = 0; i < this.layer30Array.length; ++i) 
        {
            var obj = this.layer30Array[i];
            this.moveSprite(obj);
        }

        for (var i = 0; i < this.layer20Array.length; ++i) 
        {
            var obj = this.layer20Array[i];
            this.moveSprite(obj);
        }

        for (var i = 0; i < this.layer10Array.length; ++i) 
        {
            var obj = this.layer10Array[i];
            this.moveSprite(obj);
        }

        for (var i = 0; i < this.layer0Array.length; ++i) 
        {
            var obj = this.layer0Array[i];
            this.moveSprite(obj);
        }

        for (var i = 0; i < this.windAffected.length; ++i) 
        {
            var obj = this.windAffected[i];
            this.makeWind(obj);
        }

        
        // UPDATE PARTICLE
        this.alphaParticle = .8 - .8*this.yo/20;
        for (var i=0; i < this.particles.length; i++) 
        {
            var particle =  this.particles[i];
            var scaleRatio = this.focalLength/(this.focalLength + particle.z);
            
            particle.alpha = this.alphaParticle;
            particle.scale.x = particle.scale.y = scaleRatio * 1.0;
            
            particle.position.x+=  scaleRatio  * 1.5 * particle.speed.x + this.mainDirection * this.parallaxSpeed * 1.5;
            particle.position.y -= particle.speed.y;
            
            particle.position.y %= this.dimensions.height;
            if(particle.position.y < 0)particle.position.y += this.dimensions.height;
            
            particle.position.x %= this.dimensions.width;
            if(particle.position.x < 0)particle.position.x +=this.dimensions.width;
            
            particle.rotation += .001
        }
    }

    /*
    USER FLOW FROM APPARITION TO END TUTO
    */

    CattleGame.prototype.reset = function()
    {        
        this.particles = [];
        this.score = -1;
        this.removeElementsFromScene();
        this.generateCows();
        this.generateFloor();
        this.generateClouds(this.cloudsContainer)
        this.generateDecor();
        this.generateTumbleweeds();
        this.toby();
        // this.toby();
        this.generateParticles();
        this.lensFlare();
        this.hasFinished = false;
        this.app.hud.reset();
        this.addSignals();

        this.world.view.interactive = true;
        this.world.view.hitArea = new PIXI.Rectangle(0, 0, this.dimensions.width,this.dimensions.height);
        this.world.view.mousemove = this.onMouseMove.bind(this);
    }

    CattleGame.prototype.changeMode = function (mode) 
    {
        if(mode === Modes.Easy)
        {
            this.level = 'easy';
        }
        else if(mode === Modes.Hard)
        {
            this.level = 'hard';
        }

        this.difficultySelected = true;
        this.difficultyFinished();
        this.reset();
    }

    CattleGame.prototype.difficultyFinished = function()
    {
        if(this.config.showTutorial)
        {
            TweenLite.delayedCall(.4, this.showTutorial.bind(this));
        }
        else{
            // here do basically what you when onTutorialFinished dispatches
            // since the tutorial screen isn't shown, we need to hide the overlay manager manually
            // we can't do that at an OverlayManager level, if we do :
            // it would mean that the difficulty screen hides the black
            // so there would be a flicker between the difficulty and the tutorial
            this.app.overlayManager.dropAndHideBlack();
            this.app.hud.start();
        }
    }

    CattleGame.prototype.showTutorial = function () 
    {
        GameSaveManager.instance.setTutorial(2);

        this.app.overlayManager.tutorialScreen.setNormalMode();
        this.app.overlayManager.show("tutorial");
    }

    CattleGame.prototype.tutorialFinished = function()
    {
        if(!this.tutorialIsFinished[0])
        {
            this.tutorialIsFinished[0] = true;

            this.app.hud.start();
        }
        else if(!this.tutorialIsFinished[1]) 
        {
            this.tutorialIsFinished[1] = true;
            this.playChaseGame();
        }

        Ticker.instance.add(this.update, this);
    }

    /*
    USER ACTIONS
    */

    CattleGame.prototype.pause = function()
    {
        this.paused = true;
        Ticker.instance.remove(this.update, this);

        if(this.onChasegame && this.tutorialIsFinished[1])
        {
            this.chaseGame.pause();
        }
    }

    CattleGame.prototype.resume = function()
    {
        if(this.hasFinished)
        {
            this.reset();
        }

        if(this.paused)
        {
            this.paused = false;
            Ticker.instance.add(this.update, this);

            if(this.onChasegame)
            {
                this.chaseGame.resume();
            }
        }
    }

    CattleGame.prototype._gameOver = function()
    {
        this.hasFinished = true;
        this.paused = true;
        DisneyTracker.trackAction("level_complete", "cattle");
        this.onGameover.dispatch();
    }  

    CattleGame.prototype.onShown = function()
    {
        this.app.overlayManager.show('difficulty');
        
        MusicManager.play("cattleLoop");
    }

    CattleGame.prototype.onHide = function()
    {
        if(this.onChasegame)
        {
            this.removeChaseGame();
        }

        this.removeSignals();

        this.tutorialIsFinished = [false, false];

        if(this.app.overlayManager)
        {
            this.app.overlayManager.tutorialScreen.onTutorialFinished.remove(this.tutorialFinished, this);
        }

        this.world.view.interactive = false;
        this.world.view.mousemove = null;
    }  

    module.exports = CattleGame;

});

define('com/fido/physics/DoubleSpring',['require','exports','module'],function (require, exports, module) {
/**
 * @author matgroves
 */

var DoubleSpring = function(){
	
	this.x				 = 0;
	this.ax				 = 0;
	this.dx				 = 0;
	this.tx				 = 0;
	
	this.y				 = 0;
	this.ay				 = 0;
	this.dy				 = 0;
	this.ty				 = 0;
	
//	public static var damp				:Number = 0.39;
//	public static var springiness		:Number = 0.6;
	
	this.max			 = 160;
	
	this.damp			 = 0.8//0.6;
	this.springiness	 = 0.3

//	this.max = 130
//	this.damp = 0.33
//	this.springiness = 0.5//369
		
};


DoubleSpring.constructor = DoubleSpring;
	// C O N S T R U C T O R S ---------------------------------------//
		
	// P U B L I C ---------------------------------------------------//
	
DoubleSpring.prototype.update = function()
{
	//var damp = this.damp;
	
	//	var springiness = this.springiness;
	//	var max = this.max;
	
	this.ax=(this.tx-this.x)*this.springiness;
	
	this.dx+=this.ax;
	this.dx*=this.damp; 
	
	if(this.dx < -this.max)this.dx = -this.max;
	else if(this.dx > this.max)this.dx = this.max;
	
	//Math2.cap(dx, -max, max);
	
	this.x+=this.dx; 
	
	this.ay=(this.ty-this.y)*this.springiness;
	
	this.dy+=this.ay;
	this.dy*=this.damp; 
	
	if(this.dy < -this.max)this.dy = -this.max;
	else if(this.dy > this.max)this.dy = this.max;
	
	this.y+=this.dy; 
}

DoubleSpring.prototype.reset = function() 
{
	this.x = 0;
	this.ax = 0;
	this.dx = 0;
	this.tx = 0;
	
	this.y = 0;
	this.ay = 0;
	this.dy = 0;
	this.ty = 0;
}

module.exports = DoubleSpring;

});

define('com/sc/games/smoothie/ColourManager',['require','exports','module'],function (require, exports, module) {


var ColourManager = {

	
	colourTable : {

		"green" : {
			"plate" : "plate_green.png",

			"fruits" : [
				"item_green_apple.png",
				"item_green_pear.png"
				],

			"hex" : 0x2fa201
		},

		"blue" : {
			"plate" : "plate_blue.png",

			"fruits" : [
				"item_blue_plum.png",
				"item_blue_rutaberry.png"
				],

			"hex" : 0x3a67dd
		},

		"orange" : {
			"plate" : "plate_orange.png",

			"fruits" : [
				"item_orange_carrot.png",
				"item_orange_orange.png"
				],

			"hex" : 0xcc7000
		},

		"red" : {
			"plate" : "plate_red.png",

			"fruits" : [
				"item_red_strawberry.png",
				"item_red_cherries.png"
				],

			"hex" : 0xb91326
		},

		"yellow" : {
			"plate" : "plate_yellow.png",

			"fruits" : [
				"item_yellow_lemon.png",
				"item_yellow_banana.png"
				],

			"hex" : 0xb7a413
		}
	},

	pleasantMap : {

		arrays : [

			["blue","yellow"],
			["red","yellow"],
			["red","blue"]
		],

		colours : [
			0x2fa201,
			0xcc7000,
			0x8f38e8
		]
		
	},

    plate : function (colour) {

    	return this.colourTable[colour].plate;
    },

    fruit : function (colour) {

    	var fruitArray = this.colourTable[colour].fruits;
    	return fruitArray[Math.floor(Math.random() * fruitArray.length)];
    },

    hex : function (colour) {
    	return this.colourTable[colour].hex;
    },

    fruits : function (colours) {
    	return this.colourTable[colour].fruits;
    }



}

module.exports = ColourManager;

});
define('com/sc/games/smoothie/Fruit',['require','exports','module','com/fido/game/GameObject','com/fido/physics/Spring','./ColourManager','signals','../shared/Timer','com/fido/system/Device','com/fido/system/Ticker'],function (require, exports, module) {

var GameObject      = require('com/fido/game/GameObject');
var Spring          = require('com/fido/physics/Spring');
var ColourManager   = require('./ColourManager');
var Signal          = require('signals');
var Timer           = require('../shared/Timer');
var Device          = require('com/fido/system/Device');
var Ticker      = require('com/fido/system/Ticker');

var Fruit = function()
{

    var view = new PIXI.Sprite.fromFrame("item_green_apple.png");

    GameObject.call(this,view);
    
    view.anchor.set(0.5,1);
    
    view.interactive = true;

    view.mousedown = view.touchstart = this.onDown.bind(this);

    view.mousemove = view.touchmove = this.onMove.bind(this);
    view.mouseup = view.mouseupoutside = view.touchend = view.touchendoutside = this.onUp.bind(this);

    this.hitArea = new PIXI.Rectangle();

    this.g = new PIXI.Graphics();

    this.view.addChild(this.g);

    this.isInteractive = true;

    this.type = '';

    this.dragging = false;

    this.spring = new Spring();

    this.spring.springiness = 0.1;

    this.offset = new PIXI.Point();

    this.collidesWith = null;

    this.curr = view.scale.x;

    this.physics = false;

    this.velocity = new PIXI.Point();

    this.fallGravity = 1;

    this.pendulumGravity = 8;

    this.original = new PIXI.Point();

    this.bounce = 0.9;

    this.mouse = new PIXI.Point();

    this.onShown = new Signal();

    this.onHidden = new Signal();

    this.onPickedUp = new Signal();

    this.onDropped = new Signal();

    this.onShadow = new Signal();

    this.isHidden = false;

    this.colour = '';

    this.blender;

    this.stuck = false;

    this.slot = null;

    this.fallTarget = new PIXI.Point();

    this.dragOffset = 0;

    this.dropMarker = new PIXI.Circle(0,0,44);

    this.ease = 0.2;

    this.dx = 0;
    this.dy = 0;

    this.bounceCount = 0;

    this.bounceMax = 8;

    this.originalScale = 0.8;

    this.hasFallen = false;

    this.canCollide = true;

    return this;
}

Fruit.prototype = Object.create(GameObject.prototype);

Fruit.prototype.constructor = Fruit;

Fruit.prototype.init = function(colour,blender,original,customer) {

    this.colour = colour;

    this.blender = blender;

    this.customer = customer;

    this.view.interactive = true;

    var fruitUrl = ColourManager.fruit(colour);
    var texture = PIXI.Texture.fromFrame(fruitUrl);

    this.view.setTexture(texture);

    this.addOverEvents();

    this.position.set(original.x,original.y);

    // IMPORTANT 
    // this is where you set which part of the blender this fruit should collide with
    this.collidesWith = blender.hitArea;

    this.original.set(original.x,original.y);

    this.view.rotation = 0;

    this.view.scale.set(this.originalScale);

    this.onShown.removeAll();

    this.onHidden.removeAll();

    this.onPickedUp.removeAll();

    this.onDropped.removeAll();

    this.onShadow.removeAll();

    this.isHidden = false;

    this.isInBlender = false;

    this.fallTarget.set(original.x,original.y);

    this.isInteractive = true;

    this.canCollide = true;

    this.show();
    
}

Fruit.prototype.updateHitArea = function () {

    this.hitArea.x = this.view.position.x -70;
    this.hitArea.y = this.view.position.y -135;
    this.hitArea.width = 130;
    this.hitArea.height = 135;
}

Fruit.prototype.show = function () {
    // dispatch a signal when it is shown
    this.view.alpha = 0;

    TweenLite.to(this.view,1.0,{ alpha : 1, ease : Circ.easeOut,onComplete : this.onShown.dispatch.bind(this)});
}

Fruit.prototype.hide = function (delay) {
    // dispatch a signal when it is hidden

    TweenLite.to(this.view,1.0,{ alpha : 0, ease : Linear.easeIn,onComplete : this.onHidden.dispatch.bind(this), delay : delay});
    this.isHidden = true;
}

/**
 * @method crush 
 * the fruit animation when it gets crushed in the blender
 */
Fruit.prototype.crush = function() {

    TweenLite.to(this.view.scale,1.0, {x : 0.4, y : 0.4, ease : Bounce.easeInOut})

};

/**
 * @method update 
 * called by the world update
 */
Fruit.prototype.update = function() {
    
    if(this.physics)
    {
        this.fall();
    }
    if(this.dragging)
    {
        this.customer.startLookingAt(this.view.position.x,this.view.position.y);
        this.pendulum();
    }

    GameObject.prototype.update.call(this);

};

Fruit.prototype.pendulum = function () {

    this.dx = (this.mouse.x - this.position.x);
    
    
    if(this.stuck)
    {
        // lift the drag point up a bit 
        this.dragOffset = 55;
    }
    else
    {
        this.dragOffset = 10;
    }


    this.dy = (this.mouse.y - this.dragOffset) - this.position.y;

    //spring + gravity = pendulum
    this.velocity.x += this.dx * 0.05;
    this.velocity.y += this.dy * 0.1;
    this.velocity.y += this.pendulumGravity;

    this.velocity.x *= 0.9;
    this.velocity.y *= 0.8;
    this.position.x += this.velocity.x * Ticker.instance.deltaTime;
    this.position.y += this.velocity.y * Ticker.instance.deltaTime;

    this.view.rotation = Math.atan2(this.dy,this.dx) + Math.PI / 2;
}


Fruit.prototype.fall = function() {

    var diffX = Math.floor(this.position.x - this.fallTarget.x);

    var diffY = Math.floor(this.position.y - this.fallTarget.y);

    if(this.view.rotation < 0){

        this.view.rotation += 0.1;
    }

    var dr = 0 - this.view.rotation;

    this.view.rotation += dr * 0.05;

    this.ease = 0.2;

    if(diffY > 2){

        TweenLite.to(this.position,0.6, {x : this.fallTarget.x, y : this.fallTarget.y, ease : Expo.easeOut});

        this.physics = false;
        this.customer.stopLooking();

        this.onDropped.dispatch(this);
        this.onOut();

        this.bounceCount = 0;

        return;

    }

    if(Math.abs(diffX) > 50)
    {
        // if the diff is more than 50 : 
        // divide the ideal ease (0.2) by that difference
        // (so if the diff is twice as big, divide it by 2, etc...)
        this.ease = 0.2 / (Math.abs(diffX) / 50);
    }

    this.position.x += (this.fallTarget.x - this.position.x) * this.ease;

    // simple gravity 
    this.velocity.y += this.fallGravity;

    this.position.y += this.velocity.y;

    // ground collision check to make it bounce a bit
    if (this.position.y > this.fallTarget.y)
    {
        // console.log('bounce')
        this.position.y = this.fallTarget.y;
        this.velocity.y *= -this.bounce;

        this.bounceCount++;


    }

        // if(Math.abs(diffY) < 1.1 && Math.abs(diffX) < 1.1){

        //     //TweenLite.to(this.view,0.5,{rotation : 0})
        //     this.physics = false;
        //     this.customer.stopLooking();

        //     this.onDropped.dispatch(this);
        //     this.onOut();

        //     this.bounceCount = 0;

        // }

    if(this.bounceCount === 1)
    {
        this.onDropped.dispatch(this);
        this.onOut();
    }
         
    if( (this.bounceCount > this.bounceMax && Math.abs(diffX) < 1.1) || this.bounceCount > (this.bounceMax * 8)){

        TweenLite.to(this.view,0.5,{rotation : 0})
        this.physics = false;
        this.customer.stopLooking();

        this.bounceCount = 0;

        this.onShadow.dispatch(this);

    }



};

/**
 * 
 * @method onMove
 * @param {} data
 * @return 
 */
Fruit.prototype.onMove = function(data) {

    if(this.dragging || this.stuck)
    {

        this.mouse = data.getLocalPosition(this.view.parent);

        // this.position.x = mouse.x - this.offset.x;
        // this.position.y = mouse.y - this.offset.y;
        
    }
};

Fruit.prototype.onOver = function(data) {

    TweenLite.to(this.view.scale, 0.5, {x : 1, y : 1, ease : Circ.easeOut})
}

Fruit.prototype.onOut = function(data) {

    TweenLite.killTweensOf(this.view.scale); 
    TweenLite.to(this.view.scale, 0.5, {x : this.originalScale, y : this.originalScale, ease : Circ.easeOut})
}

/**
 * 
 * @method onDown
 * @param {} data
 */
Fruit.prototype.onDown = function(data) {

    data.originalEvent.preventDefault();

    if(!this.isInteractive)
    {
        return;
    }

    // the fruit is clicked while it's in the blender
    if(this.isInBlender)
    {
        this.isInteractive = false;

        this.canCollide = false;

        this.isInBlender = false;

        this.fallTarget.set(this.original.x,this.original.y);

        this.velocity.y = -15;

        this.physics = true;

        this.blender.removeFruit(this);

        return;
    }

    this.mouse = data.getLocalPosition(this.view.parent);

    // reset the velocity 
    this.velocity.set(0);

    this.view.scale.set(this.originalScale);

    if(Device.instance.desktop){

        if (this.stuck){

            //this.stuck = false;
           // this.dragging = false;
        }
        else{
            this.stuck = true;
            this.dragging = true;
            this.dropMarker.x = this.mouse.x;
            this.dropMarker.y = this.mouse.y;
        }
    }
    else{
        this.dragging = true;
    }

    this.onPickedUp.dispatch(this);
    
    // TweenLite.to(this.scale, 0.5,{x : this.scale.x * 1.2, y : this.scale.y * 1.2, ease : Bounce.easeOut})


}

/**
 * 
 * @method onUp
 * @param {} data
 * @return 
 */
Fruit.prototype.onUp = function(data) {


    this.dragging = false;

    if(!this.isInteractive || this.isInBlender)
    {
        return;
    }


    if(Device.instance.desktop){

        if (this.stuck){

            this.onPickedUp.dispatch(this);

            //  Outside the drop marker? Then we'll consider this as a drag and reset the stuck state
            if (!this.dropMarker.contains(this.mouse.x, this.mouse.y)){
                this.stuck = false;

            }
            else{
                this.dragging = true;

                return;
            }
        }
    }

    this.view.scale.set(this.originalScale);


    if(this.intersects(this.collidesWith) && this.canCollide){


        console.log('collide !!!');

        this.blender.receivedFruit(this);

        this.customer.stopLooking();

        this.onDropped.dispatch(this);

        this.view.interactive = false;

        return;
                
    }
    else{

        this.bounce = 0.5;
        this.velocity.y = -10;
        this.physics = true;

    }

    

}

Fruit.prototype.correctlyDropped = function (callback) {

    this.onHidden.dispatch(this);
    this.isHidden = true;
    TweenLite.to(this.view,1.0,{alpha : 0, ease : Cubic.easeIn, onComplete : callback});
}

Fruit.prototype.addOverEvents = function () {

    this.view.mouseover = this.onOver.bind(this);

    this.view.mouseout = this.onOut.bind(this);
}

Fruit.prototype.removeOverEvents = function () {

    this.view.scale.set(this.originalScale);

    this.view.mouseover = null;

    this.view.mouseout = null;
}

Fruit.prototype.intersects = function (rect) {

    // var spriteBottom = sprite.y + sprite.height;


    // if(this.position.x > sprite.x && this.position.y < spriteBottom){
    //     return true;
    // }
    // return false;
    // 
    return rect.contains(this.position.x,this.position.y);
}


module.exports = Fruit;

});

define('com/sc/games/smoothie/ColourUtils',['require','exports','module'],function(require,exports,module){


ColourUtils = {
	/**
    * Given 3 color values this will return an integer representation of it.
    *
    * @method Phaser.Color.getColor
    * @static
    * @param {number} r - The red color component, in the range 0 - 255.
    * @param {number} g - The green color component, in the range 0 - 255.
    * @param {number} b - The blue color component, in the range 0 - 255.
    * @returns {number} A native color value integer (format: 0xRRGGBB).
    */
    componentsToHex : function (r, g, b) {

        return r << 16 | g << 8 | b;

    },

    /**
    * Given a hex colour as an integer, extracts the r,g,b componenents of it.
    * and returns them in an object with {r,g,b} properties
    *
    * @method 
    * @static
    * @param hexColour {number} A native color value integer (format: 0xRRGGBB).
    */
    hexToComponents : function (hexColour) {

    	var obj = {
                r: hexColour >> 16 & 0xFF,
                g: hexColour >> 8 & 0xFF,
                b: hexColour & 0xFF,
                a : 1
            }

        return obj;
    },

    /**
    * Given a hex colour as an integer, extracts the r,g,b componenents of it.
    * and returns them in an array like this : [r,g,b,a];
    *
    * @method 
    * @static
    * @param hexColour {number} A native color value integer (format: 0xRRGGBB).
    */
    hexToArray : function (hexColour) {

        var r =  hexColour >> 16 & 0xFF,
        g = hexColour >> 8 & 0xFF,
        b = hexColour & 0xFF,
        a = 1;

        return [r,g,b,a];
    },

    /**
    * Converts it to CMYKA
    *
    * @method toCmyka
    * @static
    * @param color {Array}
    * @return {Object} an object with with {c,m,y,k,a} properties
    */
    toCmyka : function(rgba){

      cyan    = 255 - rgba[0];
      magenta = 255 - rgba[1];
      yellow  = 255 - rgba[2];

      black   = Math.min(cyan, magenta, yellow);

      cyan    = ((cyan - black) / (255 - black));
      magenta = ((magenta - black) / (255 - black));
      yellow  = ((yellow  - black) / (255 - black));

      return {c:cyan,m:magenta,y:yellow,k:black/255,a: rgba[3]};

    },

    /**
    * Converts it to an RGBA array
    *
    * @method toRgba
    * @static
    * @param color {Object} with {c,m,y,k,a} properties
    * @return obj {Object} an object with r g b a properties
    */
    toRgba : function(color){

      color.c = color.c;
      color.m = color.m;
      color.y = color.y;
      color.k = color.k;

      R = color.c * (1.0 - color.k) + color.k;
      G = color.m * (1.0 - color.k) + color.k;
      B = color.y * (1.0 - color.k) + color.k;

      R = Math.round((1.0 - R) * 255.0 + 0.5);
      G = Math.round((1.0 - G) * 255.0 + 0.5);
      B = Math.round((1.0 - B) * 255.0 + 0.5);
      

      return {r : R, g : G, b : B, a : color.a};

    },

    // the colors are arrays of this form [r,g,b,a];
    mix : function(color1,color2){

    // TODO add the ability to pass in an array of colours (would be array of rgb objects I guess)
      // if(typeof(color1) == 'object' && (color1 instanceof Array)==false)
      
      //this is an array of arrays
      var colors = [color1,color2];

      var C = 0;
      var M = 0;
      var Y = 0;
      var K = 0;
      var A = 0;

      for(var i = 0; i < colors.length; i++){

        colors[i] = this.toCmyka(colors[i]);

        C += colors[i].c;
        M += colors[i].m;
        Y += colors[i].y;
        K += colors[i].k;
        A += colors[i].a;

      }

      C = C/colors.length;
      M = M/colors.length;
      Y = Y/colors.length;
      K = K/colors.length;
      A = A/colors.length;

      var finalColour = {c:C,m:M,y:Y,k:K,a:A};

      var result = this.toRgba(finalColour);

      return result;

    }


}

    module.exports = ColourUtils;

});
define('com/sc/games/smoothie/Smoothie',['require','exports','module','com/fido/game/GameObject','signals','./ColourManager','./ColourUtils','PIXI','com/fido/utils/Utils'],function (require, exports, module) {

var GameObject       = require('com/fido/game/GameObject');
var Signal           = require('signals');
var ColourManager    = require('./ColourManager');
var ColourUtils      = require('./ColourUtils');
var PIXI             = require("PIXI");
var Utils            = require('com/fido/utils/Utils');

var Smoothie = function()
{
    var texture = PIXI.Texture.fromFrame("glass_empty.png");

    PIXI.Sprite.call(this,texture);

    this.fillMask = new PIXI.Graphics();

    this.glassGraphics = new PIXI.Graphics();

    this.fillPos = new PIXI.Point(67,29);

    this.fill = null;

    this.fill = new PIXI.Sprite();

    this.fill.visible = false;

    this.count = 0;

    this.glassHeight = 190;

    this.percent = 0;

    this.top = new PIXI.Sprite.fromFrame('glass_top.png');

    this.top.position.y = -6;

    this.top.position.x = 63;

    this.count = 0;

    this.liquidContainer = new PIXI.DisplayObjectContainer();

    this.lightingShape = new PIXI.Sprite.fromFrame('drink_fill_ADD.png');

    this.lightingShape.position.set(this.fillPos.x,this.fillPos.y);

    this.bigMask = new PIXI.Graphics();

    this.bigMask.beginFill(0xfffff0);
    this.bigMask.drawRect(0,0,200,150);
    this.bigMask.endFill();

    this.shakes = false;

    this.fillColour = 0xffffff;

    return this;
}

Smoothie.prototype = Object.create(PIXI.Sprite.prototype);

Smoothie.prototype.constructor = Smoothie;

/*
 * @param colours {Array}
 *
 */
Smoothie.prototype.init = function(colours) {

    this.fillColour = 0xffffff;

    var finalColour = {r : 0, g : 0, b : 0};


    // http://stackoverflow.com/questions/726549/algorithm-for-additive-color-mixing-for-rgb-values/726564#726564
    // 
    // http://stackoverflow.com/questions/10139833/adding-colours-colors-together-like-paint-blue-yellow-green-etc
    // 
    // http://stackoverflow.com/questions/10254022/implementing-kubelka-munk-like-krita-to-mix-colours-color-like-paint?lq=1
    // 
    // http://stackoverflow.com/questions/14819058/mixing-two-colors-naturally-in-javascript/15244944#15244944
    // 

    if(colours.length > 1){

        for (var i = 1; i < colours.length; i++) {
            
            var hexCol = ColourManager.hex(colours[i]);
            var pHexCol = ColourManager.hex(colours[i-1]);

            var obj = ColourUtils.hexToComponents(hexCol);

            var obj2 = ColourUtils.hexToComponents(pHexCol);

            finalColour.r += (obj.r + obj2.r) / 2;
            finalColour.g += (obj.g + obj2.g) / 2;
            finalColour.b += (obj.b + obj2.b) / 2;
        }

        var finalHex = ColourUtils.componentsToHex(finalColour.r,finalColour.g,finalColour.b);



        for (var i = 0; i < ColourManager.pleasantMap.arrays.length; i++) {

            if(Utils.stringArrayEquals(ColourManager.pleasantMap.arrays[i],colours))
            {
                this.fillColour = ColourManager.pleasantMap.colours[i];

            }

                
        }

        if(this.fillColour === 0xffffff)
        {
            this.fillColour = finalHex;
        }
        
        
    }
    else{
        // there's only one colour in the array 
        var finalHex = ColourManager.hex(colours[0]);
        // 
        this.fillColour = finalHex;
    }

    
    this.glassGraphics.clear();
    this.glassGraphics.beginFill(this.fillColour);
    this.glassGraphics.moveTo(90,22);
    this.glassGraphics.bezierCurveTo(90,24,90,26,90,29);
    this.glassGraphics.bezierCurveTo(87,39,84,54,82,70);
    this.glassGraphics.bezierCurveTo(77,92,79,116,57,117);
    this.glassGraphics.bezierCurveTo(53,117,49,117,46,117);
    this.glassGraphics.bezierCurveTo(31,113,17,110,8,102);
    this.glassGraphics.bezierCurveTo(6,75,6,47,4,22);
    this.glassGraphics.bezierCurveTo(4,20,4,18,4,16);
    this.glassGraphics.bezierCurveTo(20,-5,77,1,90,22);
    this.glassGraphics.endFill();

    var texture = this.glassGraphics.generateTexture();

    // make a sprite with the graphics
    this.fill.setTexture(texture);

    this.fill.visible = true;

    this.fill.position.set(this.fillPos.x,this.fillPos.y);

    //this.fill.scale.set(1.1);

    //this.lightingShape.scale.set(1.1);

    this.lightingShape.blendMode = PIXI.blendModes.ADD;

    this.liquidContainer.addChild(this.fill);

    this.liquidContainer.addChild(this.lightingShape);

    this.liquidContainer.alpha = 0.8;
    

    this.minYForMask = this.fill.y;

    this.maxYForMask = this.fill.y + 125;

    this.bigMask.position.set(this.fill.x,this.maxYForMask);

    this.liquidContainer.mask = this.bigMask;

    this.removeChild(this.top);

    this.addChild(this.bigMask);

    this.addChild(this.liquidContainer);

    this.addChild(this.top);

    this.percent = 0;

}

Smoothie.prototype.reset = function() {

    console.log('smoothie reset');
    
    this.removeChildren();

    this.percent = 0;

    this.addChild(this.top);
}


Smoothie.prototype.updateTransform = function() {

    PIXI.Sprite.prototype.updateTransform.call(this);

    this.fillGlass(this.percent);

    this.count += 0.01;

}


/* 
 * 
 */
Smoothie.prototype.fillGlass = function(percentage) {

    var height = this.maxYForMask - (this.maxYForMask * (percentage /100));

    this.bigMask.position.y = height;

}



module.exports = Smoothie;

});

define('com/sc/games/smoothie/Blender',['require','exports','module','com/fido/game/GameObject','signals','./ColourManager','./Smoothie','com/fido/physics/DoubleSpring','com/fido/system/Device','com/fido/sound/SoundManager'],function (require, exports, module) {

var GameObject       = require('com/fido/game/GameObject');
var Signal           = require('signals');
var ColourManager    = require('./ColourManager');
var Smoothie         = require('./Smoothie');
var DoubleSpring     = require('com/fido/physics/DoubleSpring');
var Device           = require('com/fido/system/Device');
var SoundManager     = require('com/fido/sound/SoundManager');


var Blender = function(){

    var view = new PIXI.DisplayObjectContainer();

    GameObject.call(this,view);

    this.glass = null;

    this.bowl = null;

    this.fruits = [];

    this.machine = null;

    this.smoothie = new Smoothie();

    this.glassOffset = new PIXI.Point();

    this.milk = new PIXI.Graphics();

    this.count = 0;

    this.onFinishedMixing = new Signal();

    this.shakes = false;

    this.original = new PIXI.Point();

    this.dir = 1;

    this.count = 0;

    this.colourArray = [];

    this.sparkle = PIXI.Sprite.fromFrame("sparkle.png");

    this.sparkle.anchor.set(0.5)

    if(Device.instance.blendModeFriendly)
    {
        this.sparkle.blendMode = PIXI.blendModes.ADD;
    }
    else
    {
        this.sparkle.alpha = .2;
    }

    this.slots = [
        { x : 0, y : 0, empty : true},
        { x : 0, y : 0, empty : true},
        { x : 0, y : 0, empty : true}
    ];

    this.attracts = false;

    this.count = 0;

    this.liquid = null;

    this.minYForMask = 0;

    this.maxYForMask = 0;

    this.onMix = new Signal();

    this.liquidContainer = new PIXI.DisplayObjectContainer();

    this.liquid = new PIXI.Sprite();

    this.bigMask = new PIXI.Graphics();
    
    this.bigMask.beginFill(0xfffff0);
    this.bigMask.drawRect(0,0,200,130);
    this.bigMask.endFill();

    this.colourFill = new PIXI.Graphics();

    this.lightingShape = PIXI.Sprite.fromFrame('machine_fill_ADD.png');

    this.bowl = new PIXI.Sprite.fromFrame("machine_glass.png");

    this.bowlPulse = new PIXI.Sprite.fromFrame("machine_glass_ADD.png");

    this.bowlPulse.blendMode = PIXI.blendModes.ADD;

    this.bowlPulse.visible = false;

    this.pulseCount = 0;

    this.pulseSpeed = 0.06;

    this.smoothieTarget = new PIXI.Point();

    this.hitArea = new PIXI.Rectangle(755,50,380,500);

    this.g = new PIXI.Graphics();

    return this;
}

Blender.prototype = Object.create(GameObject.prototype);

Blender.prototype.constructor = Blender;

Blender.prototype.init = function(x,y){

    this.fruits = [];

    this.fruits.length = 0;

    this.machine = new PIXI.Sprite.fromFrame("machine_body.png");

    this.view.addChild(this.machine);

    this.setUpButton(x,y);

    this.createMilk(x,y);

    this.view.addChild(this.liquidContainer);

    //console.log('milk y ',this.milk.y)

    this.view.addChild(this.bowl);

    this.view.addChild(this.bowlPulse);

    this.bowl.position.set(x+70,y-165);

    this.bowlPulse.position.set(x+70,y-165);

    this.slots = [
        { x : this.bowl.position.x + 60 , y : this.bowl.position.y + 135 , empty : true},
        { x : this.bowl.position.x + 150, y : this.bowl.position.y + 170 , empty : true},
        { x : this.bowl.position.x + 190, y : this.bowl.position.y + 135 , empty : true},
        { x : this.bowl.position.x + 50 , y : this.bowl.position.y + 185 , empty : true}
    ];

    this.machine.position.set(x,y);

    this.machine.addChild(this.smoothie);

    // set the position of the glass before creating the glass so we can use it 
    // to create the fill and the masks
    this.glassOffset.set(this.machine.width/2 - this.smoothie.width/2 + 55);

    this.smoothieTarget.set(this.glassOffset.x,this.glassOffset.y + 40);

    this.smoothie.position.set(400,this.smoothieTarget.y);

    // this.view.addChild(this.g);

    // this.g.beginFill(0xffcc00,0.5);

    // this.g.drawRect(this.hitArea.x,this.hitArea.y,this.hitArea.width,this.hitArea.height);

    // this.g.endFill();

}

Blender.prototype.createMilk = function (x,y) {

    // create the milk graphics
    this.milk.clear();
    this.milk.beginFill(0xfffff0,1);
    this.milk.moveTo(158,3);
    this.milk.bezierCurveTo(213,5,268,8,324,11);
    this.milk.bezierCurveTo(339,12,354,16,369,18);
    this.milk.bezierCurveTo(377,19,381,24,384,31);
    this.milk.bezierCurveTo(412,100,385,170,317,204);
    this.milk.bezierCurveTo(307,208,297,213,287,217);
    this.milk.bezierCurveTo(279,221,272,226,268,235);
    this.milk.bezierCurveTo(268,238,264,240,261,240);
    this.milk.bezierCurveTo(231,241,201,243,171,242);
    this.milk.bezierCurveTo(150,241,130,236,110,232);
    this.milk.bezierCurveTo(107,232,105,228,103,225);
    this.milk.bezierCurveTo(98,219,95,212,90,208);
    this.milk.bezierCurveTo(82,201,72,197,64,191);
    this.milk.bezierCurveTo(24,164,1,127,3,77);
    this.milk.bezierCurveTo(4,55,11,36,21,17);
    this.milk.bezierCurveTo(23,14,28,11,31,11);
    this.milk.bezierCurveTo(44,8,57,6,70,6);
    this.milk.bezierCurveTo(99,5,129,6,158,6);
    this.milk.bezierCurveTo(158,5,158,4,158,3);
    this.milk.endFill();

    this.milk.scale.set(0.5);

    this.milk.position.set(x+90,y-102);
}



Blender.prototype.receivedFruit = function(fruit) {

    this.stopPulsing();

    fruit.gravity = 1;
    fruit.velocity.y = -10;

    this.fruits.push(fruit);

    fruit.isInBlender = true;

    this.sparkle.visible = true;

    this.attracts = true;

    //console.log('len : ',this.fruits.length);

    // make sure the first fruit falls in the middle
    if(this.fruits.length === 1 && this.slots[1].empty)
    {
        fruit.fallTarget.set(this.slots[1].x,this.slots[1].y);

        fruit.bounce = 0.2;

        fruit.physics = true;

        fruit.slot = 1;

        console.log('slot number : ',fruit.slot)

        this.slots[1].empty = false;

        fruit.view.scale.x = fruit.view.scale.x * 0.8;
        fruit.view.scale.y = fruit.view.scale.y * 0.8;

        return;
    }

    for (var i = 0; i < this.slots.length; i++) {

        var slot = this.slots[i];

        if(slot.empty){

            fruit.fallTarget.set(slot.x,slot.y);

            fruit.bounce = 0.2;

            fruit.physics = true;

            fruit.slot = i;

            console.log('slot number : ',fruit.slot)

            slot.empty = false;

            fruit.view.scale.x = fruit.view.scale.x * 0.8;
            fruit.view.scale.y = fruit.view.scale.y * 0.8;

            return;
        }
    }

    
}

Blender.prototype.removeFruit = function(fruit) {

    var index = this.fruits.indexOf(fruit);

    this.slots[fruit.slot].empty = true;

    this.fruits.splice(index,1);

    
}

Blender.prototype.mix = function() {

    if(!this.fruits.length)
    {
        return;
    }

    this.button.interactive = false;

    this.colourArray = [];

    var colours = [];

    this.onMix.dispatch();


    for (var i = 0; i < this.fruits.length; i++) 
    {
        var col = this.fruits[i].colour;
        this.fruits[i].view.interactive = false;

        colours.push(col);
    }

    // first, we need to remove the duplicates, so ["green","green"] is equal to ["green"];
    // so IMPORTANT step 
    this.colourArray = colours.filter(function (item,index) {
        return colours.indexOf(item) === index;
    });

    this.sparkle.visible = false;

    TweenLite.to(this.smoothie.position,0.5,
    {
        x : this.smoothieTarget.x,
        y : this.smoothieTarget.y,
        ease : Expo.easeOut,
        onComplete : this.animateButtonAndFill,
        onCompleteScope : this
    });

}

Blender.prototype.animateButtonAndFill = function () {

    this.smoothie.init(this.colourArray);

    TweenLite.to(this.button.position,1,{y : "+=55", x : "-=3", onStart : this.startShaking.bind(this)});
    TweenLite.to(this.button.scale,1,{y : "1.1", x : "1.1" });

    TweenLite.to(this.button.position,1,{y : "-=55", x : "+=3", delay : 1});
    TweenLite.to(this.button.scale,1,{y : "1", x : "1", delay : 1});
}

Blender.prototype.createLiquid = function() {


    this.liquidContainer.addChild(this.milk);

    this.bigMask.position.set(this.milk.x,this.milk.y + 105);

    this.minYForMask = this.milk.y;

    this.maxYForMask = this.milk.y + 125;

    this.view.addChild(this.bigMask);

    this.liquidContainer.mask = this.bigMask;
    
    this.colourFill.clear();

    this.colourFill.beginFill(this.smoothie.fillColour);
    this.colourFill.drawRect(0,0,300,130);
    this.colourFill.endFill();

    var texture = this.colourFill.generateTexture();

    // the liquid is masked by the milk graphics, 
    // which is a graphics that fits perfectly inside the bowl
    // 
    //var texture = PIXI.Texture.fromImage(ASSET_URL + 'random.png');

    this.liquid.setTexture(texture);

    this.liquid.position.set(this.milk.x,this.milk.y);

    this.liquid.mask = this.milk;

    this.lightingShape.blendMode = PIXI.blendModes.ADD;

    this.liquid.addChild(this.lightingShape);

    this.liquidContainer.addChild(this.liquid);

}

Blender.prototype.startShaking = function() {

    this.createLiquid();

    SoundManager.sfx.play('blender');

    this.sparkle.visible = false;

    this.original.set(this.view.position.x,this.view.position.y);
    this.shakes = true;

    for (var i = 0; i < this.fruits.length; i++) {

        this.fruits[i].crush();
    }

    TweenLite.to(this.bigMask.position, 0.7,
    {
        y : this.minYForMask,

        onComplete : function () {

            this.hideFruits();

            // as the liquid moves down 
            TweenLite.to(this.bigMask.position,0.9,
            {
                y : this.maxYForMask,
                delay : 0.5
            });
            
            // the glass fills up
            TweenLite.to(this.smoothie,0.9,
            {
                percent : 100,
                delay : 0.5,
                onComplete : this.wait.bind(this)
            });

        }.bind(this),


    });
    

}

Blender.prototype.hideFruits = function() {

    for (var i = 0; i < this.fruits.length; i++) {

        this.fruits[i].view.visible = false;
    }

}

Blender.prototype.reset = function() {

    this.fruits = [];

    for(var i = 0; i < this.slots.length; i++){
        this.slots[i].empty = true;
    }

    this.view.removeChild(this.liquid);

    this.button.interactive = true;

    this.smoothie.reset();

    this.smoothie.position.set(400,this.smoothieTarget.y);

    this.sparkle.visible = false;

    this.attracts = false;

}

Blender.prototype.update = function() {

    if(this.shakes){

        // flip the direction every frame for a shake effect
        // much better than adding brownian motion (original.x + Math.random() * 4 - 2)
        this.dir *= -1;

        this.view.position.x = this.original.x + Math.floor(Math.random() * 6) * this.dir;

        if(this.fruits.length)
        {

            for (var i = 0; i < this.fruits.length; i++){
                
                this.fruits[i].position.x += Math.floor(Math.random() * 6) * this.dir;
            }
        }
    }

    if(this.attracts){

        this.count += 0.1;

        this.sparkle.scale.x = 0.9 + Math.sin(this.count) * 0.1;
        this.sparkle.scale.y = 0.9 + Math.sin(this.count) * 0.1;

        this.sparkle.alpha = 0.8 + Math.sin(this.count * 0.1) * 0.2;

        this.sparkle.rotation += 0.002;
    }

    if(this.pulses)
    {
        this.pulseCount += this.pulseSpeed;

        //this.bowlPulse.alpha = Math.pow(Math.abs(Math.sin(this.pulseCount*2))*0.6,Math.sin(this.pulseCount*2))*0.6;

        this.bowlPulse.alpha = 0.5 + ( Math.cos(this.pulseCount) * Math.sin(this.pulseCount) );

        if(this.pulseCount > this.pulseSpeed * 140)
        {
            this.stopPulsing();
            TweenLite.delayedCall(2.0,this.startPulsing,[],this);
        }
    }

}

Blender.prototype.startPulsing = function () {
    
    this.bowlPulse.alpha = 0;
    this.bowlPulse.visible = true;

    this.pulses = true;

    TweenLite.killTweensOf(this.startPulsing);

    // TweenLite.to(this.bowlPulse,0.5,{
    //     alpha : 1,
    //     onComplete : function () {
            
    //     }
    // });

    // TweenLite.to(this.bowlPulse,0.5,{
    //     alpha : 1,
    //     delay : 0.6,
    // });

}
Blender.prototype.stopPulsing = function () {
    this.pulses = false;
    this.bowlPulse.alpha = 0;
    this.bowlPulse.visible = false;
    this.pulseCount = 0;
}

Blender.prototype.setUpButton = function(x,y) {

    this.button = new PIXI.Sprite.fromFrame("machine_button.png");

    this.button.position.set(x + this.machine.width - 58,y);

    this.sparkle.position.set(this.button.x + this.sparkle.width/2 -35,this.button.y + this.sparkle.height/2 -42);


    this.sparkle.visible = false;

    this.view.addChild(this.button);

    this.view.addChild(this.sparkle);

    this.button.interactive = true;

    this.button.mousedown = this.button.touchstart = this.mix.bind(this);

}

Blender.prototype.wait = function() {

    TweenLite.delayedCall(0.5,this.resetCounters,[],this);
}

Blender.prototype.resetCounters = function() {

    this.onFinishedMixing.dispatch(this.colourArray);

    this.fruits = [];
    this.count = 0;

    this.colourArray = [];

    this.shakes = false;

    // stop shaking and put it back where it was before it shook
    this.view.position.set(this.original.x,this.original.y);
}



module.exports = Blender;

});

define('com/sc/games/smoothie/Customer',['require','exports','module','com/fido/game/GameObject','signals','../shared/CustomerView','../shared/Timer','./Smoothie','./ColourManager','../shared/Models'],function (require, exports, module) {

var GameObject       = require('com/fido/game/GameObject');
var Signal           = require('signals');
var CustomerView    = require('../shared/CustomerView');
var Timer            = require('../shared/Timer');
var Smoothie         = require('./Smoothie');
var ColourManager    = require('./ColourManager');
var Models			 = require('../shared/Models');

var Customer = function (currentModel) {

	var view = new CustomerView();

	GameObject.call(this,view);

    this.bubbleUrl = "request_bubble.png";

	this.bubble = null;

	this.onShown = new Signal();

	this.onHidden = new Signal();

	this.onShownState = new Signal();

	this.onHappy = new Signal();

	this.isHidden = false;

	this.desiredColourCombination = [];

	this.smoothie = null;

	this.model = currentModel;

	return this;
}

Customer.prototype.constructor = Customer;

Customer.prototype = Object.create(GameObject.prototype);

Customer.prototype.init = function (desiredColourCombination) {

	this.remainingItems = this.numItems;

	this.isHidden = false;

	this.onShown.removeAll();

	this.onHidden.removeAll();

	this.onShownState.removeAll();

	this.onHappy.removeAll();

	this.desiredColourCombination = desiredColourCombination;

	this.view.reset();
	
	this.createBubble();

	this.show();

}

Customer.prototype.createBubble = function() {

	if(this.view.children.length)
	{
		this.view.removeChildren();
	}

	this.view.loadModel(this.model);

	this.bubble = null;

	this.bubble = new PIXI.Sprite.fromFrame(this.bubbleUrl);

	this.bubble.anchor.set(0.5);

	this.bubble.position.x = 110 + this.bubble.width * this.bubble.anchor.x;
	this.bubble.position.y = -267 + this.bubble.height * this.bubble.anchor.y;

	this.view.addChild(this.bubble);

	this.smoothie = new Smoothie();

	this.smoothie.init(this.desiredColourCombination);

	this.smoothie.percent = 100;

	this.smoothie.scale.set(0.8);

	this.smoothie.position.x = -80;

	this.smoothie.position.y = -82;

	this.bubble.addChild(this.smoothie);

}

Customer.prototype.show = function () {
	// dispatch a signal when it is shown
	TweenLite.to(this.view,0,{ alpha : 1, ease : Circ.easeOut,onComplete : this.onShown.dispatch.bind(this)});
}

Customer.prototype.hide = function (delay) {
	// dispatch a signal when it is hidden
	TweenLite.to(this.view,1.0,{ alpha : 0, ease : Linear.easeIn,onComplete : this.onHidden.dispatch.bind(this),delay : delay});
	this.isHidden = true;
}

Customer.prototype.receivedSmoothie = function(colours) {

	this.smoothie.visible = false;

	var isHappy = false;
		
	// http://stackoverflow.com/questions/6229197/how-to-know-if-two-arrays-have-the-same-values/6230314#6230314
	// if two arrays are arrays of numbers or strings, you can compare them like this
	// 
	// we compare the arrays like this so the order doesn't matter ([red, green] and [green,red] are the same)
	if(colours.sort().join(',') === this.desiredColourCombination.sort().join(',')){

		isHappy = true;
		this.setHappy();

	}
	else{
		isHappy = false;
		this.notHappy();
	}


	TweenLite.delayedCall(1.0,this.onShownState.dispatch,[isHappy],this)

}

Customer.prototype.setHappy = function () {

	this.hideBubble();

	this.view.beHappy();
}

Customer.prototype.notHappy = function () {

	this.hideBubble();

	this.view.beSad();
}

Customer.prototype.showBubble = function () {

	TweenLite.to(this.bubble.scale,0.3,
	{
		x : 1.1,
		y : 1.1,
		ease : Expo.easeOut,
		onComplete : function () {
			
			TweenLite.to(this.bubble.scale,0.15,
			{
				x : 1,
				y : 1,
				ease : Expo.easeIn
			});


		}.bind(this)

	});
}

Customer.prototype.hideBubble = function () {

	TweenLite.to(this.bubble.scale,0.3,
	{
		x : 1.1,
		y : 1.1,
		ease : Expo.easeOut,
		onComplete : function () {
			
			TweenLite.to(this.bubble.scale,0.15,
			{
				x : 0,
				y : 0,
				ease : Expo.easeIn
			});


		}.bind(this)

	});
}

Customer.prototype.startLookingAt = function (x,y) {

	this.view.startLookingAt(x,y);
}

Customer.prototype.stopLooking = function () {

	this.view.stopLooking();
}

Customer.prototype.update = function() {

	GameObject.prototype.update.call(this);

	this.view.update();
}

module.exports = Customer;

});
define('com/sc/games/smoothie/SmoothieGame',['require','exports','module','PIXI','signals','com/sc/games/Game','com/fido/game/GameObjectPool','com/fido/physics/DoubleSpring','./Fruit','./Blender','./ColourManager','./Customer','../shared/Timer','./Smoothie','com/sc/Consts','com/fido/Fade','com/fido/loader/Cache','com/sc/app/system/GameSaveManager','com/fido/utils/FrameWait','../shared/Models','com/fido/utils/Utils','com/fido/sound/SoundManager','com/fido/sound/MusicManager','libs/gameConfig/gameTracking'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Signal          = require('signals');
    var Game            = require('com/sc/games/Game');
    var GameObjectPool  = require('com/fido/game/GameObjectPool');
    var DoubleSpring    = require('com/fido/physics/DoubleSpring');
    var Fruit           = require('./Fruit');
    var Blender         = require('./Blender');
    var ColourManager   = require('./ColourManager');
    var Customer        = require('./Customer');
    var Timer           = require('../shared/Timer');
    var Smoothie        = require('./Smoothie');
    var Consts          = require('com/sc/Consts');
    var Fade            = require('com/fido/Fade');
    var Cache           = require('com/fido/loader/Cache');
    var GameSaveManager = require('com/sc/app/system/GameSaveManager');
    var Wait            = require("com/fido/utils/FrameWait");
    var Models          = require('../shared/Models');
    var Utils           = require("com/fido/utils/Utils");
    var SoundManager    = require('com/fido/sound/SoundManager');
    var MusicManager    = require('com/fido/sound/MusicManager');
    var DisneyTracker   = require('libs/gameConfig/gameTracking');

    PIXI.DisplayObject.prototype.depthOffset = 0;

    var SmoothieGame = function(app)
    {
        Game.call(this,app);

        this.glass = null;

        this.fruits = [];
        
        this.customer = null;

        this.blender = null;

        this.colours = [];

        this.shadows = [];

        this.currentRound = 0;

        this.fruitPool = new GameObjectPool(Fruit);

        this.spring = new DoubleSpring();

        this.mode = 'hard';

        this.currentCombination = [];

        this.wins = 0;

        this.currentCustomerFrame = null;

        this.maxRounds = 6;

        this.hasWon = false;

        this.json = Cache.getJson('smoothieLevels');

        this.levels = this.json['hard'];

        for (var i = 0; i < 4; i++) {
            // and there were shadows
            var shadow = new PIXI.Sprite.fromFrame("fruit_shadow.png");
            this.shadows.push(shadow);
        }

        this.models = [];

        for(var key in Models){
            this.models.push(Models[key]);
        }

        // We don't include Ella because she runs the smoothie bar
        var excludedIndex = this.models.indexOf(Models.Ella);

        this.models.splice(excludedIndex,1);

        this.currentModel = 0;

        Utils.shuffle(this.models);

        //var models = [Models.Tio];

        return this;

    }

    SmoothieGame.prototype = Object.create( Game.prototype );

    SmoothieGame.prototype.reset = function (config) {

       Game.prototype.reset.call(this,config);

       this.currentRound = 0;

       this.hasWon = false;

       this.app.hud.reset();

       this.setUp();

       this.view.addChild(this.world.view);

       this.hideForAnimation();

    }

    SmoothieGame.prototype.start = function () {

       Game.prototype.start.call(this);

       MusicManager.play('smoothieLoop');

    }

    SmoothieGame.prototype.changeMode = function (mode) {

        if(mode === Modes.Easy)
        {
            this.mode = 'easy';
            this.levels = this.json['easy'];
        }
        else if(mode === Modes.Hard)
        {
            this.mode = 'hard';
            this.levels = this.json['hard'];
        }

        if(this.config.showTutorial)
        {
            TweenLite.delayedCall(.4,this.showTutorial.bind(this));
        }
        else{
            // TODO FIX !!!!!
            // here do basically what you when onTutorialFinished dispatches
            // since the tutorial screen isn't shown, we need to hide the overlay manager manually
            // we can't do that at an OverlayManager level, if we do :
            // it would mean that the difficulty screen hides the black
            // so there would be a flicker between the difficulty and the tutorial
            this.app.overlayManager.dropAndHideBlack();
            this.showHud();
        }
        
    }

    SmoothieGame.prototype.showTutorial = function () {
        
        this.app.overlayManager.tutorialScreen.setNormalMode();
        this.app.overlayManager.tutorialScreen.onTutorialFinished.addOnce(this.showHud,this);
        this.app.overlayManager.show("tutorial");
    }

    SmoothieGame.prototype.showHud = function () {

        this.reset();

        this.app.hud.start();

        this.entranceAnimation();
    }

    SmoothieGame.prototype.entranceAnimation = function () {

        this.customer.bubble.scale.set(0);

        TweenLite.to(this.customer.position,0.8,
        {
            x : 210,
            ease : Back.easeOut,
            onComplete : function () {
                this.customer.showBubble();
            },
            onCompleteScope : this
        });



        for (var i = 0; i < this.fruits.length; i++) {

            TweenLite.delayedCall(0.1 * i,this.activateFruitPhysics,[this.fruits[i]],this);
        }
    }

    SmoothieGame.prototype.activateFruitPhysics = function (fruit) {

        fruit.bounce = 0.4;
        fruit.physics = true;
    }

    SmoothieGame.prototype.onShown = function () {
        this.app.screenManager.onSegmentChange.add(this.onHide, this);
        GameSaveManager.instance.setTutorial(1);
        this.app.hud.onFinished.add(this.goToGameover, this);
        this.app.overlayManager.show('difficulty');
    }

    SmoothieGame.prototype.onHide = function () {
        this.app.screenManager.onSegmentChange.remove(this.onHide, this);
        this.app.hud.onFinished.remove(this.goToGameover, this);
    }


    SmoothieGame.prototype.setUp = function () {

        this.setUpColours();

        if(this.blender)
        {
            this.world.remove(this.blender);
        }
        
        this.blender = new Blender();

        this.blender.init(725,300);

        this.blender.onMix.add(this.disableFruitCollision,this);

        this.blender.onFinishedMixing.add(this.setCustomerState,this);

        this.cleanPools();

        this.newRound();

    }

    SmoothieGame.prototype.setUpColours = function () {

        if(this.mode == 'easy'){
            this.colours = ['green','green','red','yellow'];
        }
        else{
            this.colours = ['green','green','red','orange'];
        }
    }

    SmoothieGame.prototype.cleanPools = function () {
        
        // empty the world
        if(this.view.children.length)
        {
            this.view.removeChildren();
        }
        

        // clean up and free the arrays
       for (var i = this.fruits.length - 1; i >= 0; i--) {

           var fruit = this.fruits[i];
           fruit.view.visible = true;
           this.world.remove(fruit);

           // kills the object and returns it to the pool
           this.fruitPool.returnObject(fruit);
       };

       this.fruits = [];

       this.blender.reset();

    }


    SmoothieGame.prototype.newRound = function (hasWon) {

        // when in doubt, we reset everything, just like when you win
        if(typeof hasWon === 'undefined')
        {
            hasWon = true;
        }

        if(hasWon)
        {
            this.currentModel++;

            this.currentModel %= this.models.length;

            this.currentCustomerFrame = this.models[this.currentModel];
            
        }

        this.customer = new Customer(this.currentCustomerFrame);

        this.customer.position.set(210,280);

        this.createBackground(hasWon);
    }

    SmoothieGame.prototype.createBackground = function (hasWon) {

        var bkg = new PIXI.Sprite.fromImage(ASSET_URL + "img/game/saloon_bg.jpg");

        this.view.addChild(bkg);

        var levelConfig = this.levels[this.currentRound];

        if(hasWon)
        {

            this.currentCombination = levelConfig.target;
        }

        this.colours = levelConfig.fruits;
        
        // if you haven't won, reset the customer with the same set of colours
        // (cached in the var)
        this.customer.init(this.currentCombination);
        
        this.world.add(this.customer);

        this.view.addChild(this.customer.view);

        var counter = new PIXI.Sprite.fromFrame("counter.png");

        this.view.addChild(counter);

        counter.position.set(0,455);

        this.world.add(this.blender);

        var coordinates = [];

        for (var i = 0; i < levelConfig.fruits.length; i++){

            coordinates.push(new PIXI.Point(110 + (180*i) + 30 , 520));
        }

        for (var i = 0; i < levelConfig.fruits.length; i++) {

            // create the plates !
            var url = ColourManager.plate(this.colours[i]);

            var plate = new PIXI.Sprite.fromFrame(url);

            plate.anchor.set(0.5);

            plate.scale.set(1);

            plate.position.set(coordinates[i].x,coordinates[i].y -5);

            this.view.addChild(plate);

            var shadow = this.shadows[i];

            shadow.alpha = 1;

            this.view.addChild(shadow);

            shadow.anchor.set(0.5);

            shadow.position.set(coordinates[i].x,coordinates[i].y -5);

            // create the fruits !
            var f = this.fruitPool.getObject();

            var point = new PIXI.Point(coordinates[i].x,coordinates[i].y);

            f.init(this.colours[i],this.blender,point,this.customer);

            f.onPickedUp.add(this.disableOtherFruits,this);

            f.onDropped.add(this.enableFruits,this);

            f.onShadow.add(this.displayShadow,this);

            this.world.add(f);

            this.fruits.push(f);

        }

        this.vignette = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/vignette_halfsize.png");
        this.vignette.scale.set(2);
        this.view.addChild(this.vignette);
        
    }

    SmoothieGame.prototype.setCustomerState = function (colours) {
        
        // gives the smoothie to the customer and adds a callback
        this.customer.receivedSmoothie(colours);

        this.customer.onShownState.add(this.transitionAndRestart,this);
        
    }

    SmoothieGame.prototype.hideForAnimation = function () {
        
        this.customer.position.x = -690;

        for (var i = 0; i < this.fruits.length; i++) {
            
            // change the fruits and the shadows for the animation
            this.fruits[i].position.y = -80;
            this.shadows[i].alpha = 0;
        }
        
    }


    SmoothieGame.prototype.transitionAndRestart = function (happy) {

        this.hasWon = happy;

        var delay = 0.1;

        if(happy)
        {

            this.app.hud.updateLives();

            this.currentRound++;
            
        }

        // console.log('round number : ',this.currentRound);

        delay = 1.5;
           
        if(this.currentRound < this.maxRounds)
        {
            TweenLite.delayedCall(delay,this.fadeToBlack,[],this);   
        }

        
    }

    SmoothieGame.prototype.goToGameover = function () {
        // console.log("go to gameover")
        this.currentRound = 0;

        // set this level (at index 1) as complete
        GameSaveManager.instance.onSavedComplete.add(this.gameover, this);
        GameSaveManager.instance.setComplete(1);

        SoundManager.music.setVolume('smoothieLoop',0.3);

        DisneyTracker.trackAction("level_complete", "smoothie");
    }

    

    SmoothieGame.prototype.restart = function () {

        this.cleanPools();

        this.newRound(this.hasWon);

        this.view.addChild(this.world.view);

    }

    SmoothieGame.prototype.fadeToBlack = function () {
        this.app.fade.onFadeIn.addOnce(this.restart,this);

        this.app.fade.fade(0.3,0.7,0.7);
    }

    

    SmoothieGame.prototype.enableFruits = function (fruit) {

        console.log('enabled');
        
        if(!fruit.isInBlender)
        {
            this.blender.stopPulsing();
        }

        if(fruit.isInBlender){

            // bring the blender to the top of the display list 
            var topChild = this.world.view.getChildAt(this.world.view.children.length-1);

            this.world.view.swapChildren(this.blender.view,topChild);
        }
        

        for (var i = 0; i < this.fruits.length; i++) {

            this.fruits[i].view.interactive = true;
            this.fruits[i].addOverEvents();
            this.fruits[i].isInteractive = true;
        }

    }

    SmoothieGame.prototype.displayShadow = function (fruit) {

        var pickedUpIndex = this.fruits.indexOf(fruit);

        console.log('display shadow');

        if(!fruit.isInBlender)
        {

            TweenLite.to(this.shadows[pickedUpIndex],0.5,
            {
                alpha : 1,
                overwrite : true
            });
        }

        for (var i = 0; i < this.fruits.length; i++) {

            this.fruits[i].view.interactive = true;
            this.fruits[i].addOverEvents();
            this.fruits[i].isInteractive = true;
            this.fruits[i].canCollide = true;
        }
    }

    SmoothieGame.prototype.disableOtherFruits = function (fruit) {

        // the index of the fruit that was picked up and needs to remain interactive
        var pickedUpIndex = this.fruits.indexOf(fruit);

        console.log('disabled');
        
        if(!fruit.isInBlender)
        {
            TweenLite.to(this.shadows[pickedUpIndex],0.5,
            {
                alpha : 0,
                overwrite : true
            });

            // swap the items back
            var topChild = this.world.view.getChildAt(this.world.view.children.length-1);

            this.world.view.swapChildren(this.fruits[pickedUpIndex].view,topChild);

            this.blender.startPulsing();
        }
        

        for (var i = 0; i < this.fruits.length; i++) {
            
            this.fruits[i].view.interactive = false;
            this.fruits[i].removeOverEvents();
        }

        this.fruits[pickedUpIndex].view.interactive = true;

    }


    SmoothieGame.prototype.disableFruitCollision = function () {

        for (var i = 0; i < this.fruits.length; i++) {
            
            this.fruits[i].canCollide = false;
        }
    }


    SmoothieGame.prototype.update = function () {

        Game.prototype.update.call(this);

        this.spring.update();

        this.world.view.pivot.y = this.spring.y;
        

    }

    module.exports = SmoothieGame;

});
/**
 * @author Mat Groves 
 */


define('com/sc/games/shared/particles/ParticleManager',['require','exports','module','com/fido/game/GameObjectPool'],function (require, exports, module) {

var GameObjectPool = require('com/fido/game/GameObjectPool');


/**
 * An Exit point class
 *
 * @class ExitPoint
 * @extends TimelordObject
 * @constructor
 * @param x {Number} x position of the exit point
 * @param y {Number} y position of the exit point
 */
var ParticleManager = function(game)
{
	this.game = game;

	this.pools = [];
	this.activeParticles = [];
}

ParticleManager.prototype.registerParticle = function(ParticleClass, id)
{
	ParticleClass.prototype._particleId = id;
	this.pools[id] = new GameObjectPool(ParticleClass);
}

ParticleManager.prototype.addParticle = function(x, y, id)
{
	// Optimised non leaking of arguments
	var particle = this.pools[id].getObject();

	if(arguments.length > 3)
	{	
		var args = new Array(arguments.length);
		args[0] = x;
		args[1] = y;

	    for(var i = 3; i < args.length; ++i) 
	    {
	        args[i-1] = arguments[i];
	    }

	    particle.activate.apply(particle, args);
	}
	else
	{
		particle.activate(x,y);
	}

	this.game.particleLayer.addChild(particle);
	this.activeParticles.push(particle);
}

ParticleManager.prototype.update = function()
{
	for (var i = 0; i < this.activeParticles.length; i++) {
		
		var particle = this.activeParticles[i];
		particle.update();

		if(particle.isDead)
		{
			this.activeParticles.splice(i, 1);
			i--;
			
			this.game.particleLayer.removeChild(particle);
			this.pools[particle._particleId].returnObject(particle); 
		}
	};
}

module.exports = ParticleManager;

});

define('com/sc/games/shared/particles/Sparkle',['require','exports','module','PIXI','com/fido/utils/Math2','com/fido/system/Device'],function (require, exports, module) 
{
    var PIXI   = require("PIXI");
    var Math2  = require("com/fido/utils/Math2");
    var Device = require('com/fido/system/Device');

    /**
     * Sparkley particles, because who doesn't love a bit of sparkle?
     */
    var Sparkle = function()
    {
        PIXI.DisplayObjectContainer.call(this);

        this.particles = [];
        
        this.total = 20;

        if(Device.instance.blendModeFriendly)
        {
            this.webgl = true;
            this.total = 90;
        }

        for (var i = 0; i < this.total; i++) {
            
            var sprite = PIXI.Sprite.fromFrame("sparkle.png");

            sprite.speed = new PIXI.Point();
            sprite.pos = new PIXI.Point()

            this.addChild(sprite);
            sprite.anchor.set(0.5);
            this.particles.push(sprite);
        };

        this.ratio = 0;
    }

    Sparkle.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );

    /**
     * Standard function to activate this particle system
     * @param  {Number} x [X Position]
     * @param  {Number} y [Y position]
     * @return {null}
     */
    Sparkle.prototype.activate = function(x, y)
    {
        this.position.x = x;
        this.position.y = y;
        this.isDead = false;
        this.life = 2;
        this.ratio = 0;

        for (var i = 0; i < this.total; i++) 
        {        
            var sprite = this.particles[i]
                sprite.pos = new PIXI.Point();
            
            var dir = ((Math.PI * 2) / this.total) * i;
            var speed = 4 + Math.random() * 8;
                sprite.speed.x = Math.sin(dir) * speed;
                sprite.speed.y = Math.cos(dir) * speed;
                sprite.visible = true;
                if(window.WEBGL)
                {
                    sprite.blendMode = PIXI.blendModes.ADD;
                }
                sprite.position.x = Math2.random(-50, 50);
                sprite.position.y = 0;
                sprite.rotation =  Math.PI * 2;
                sprite.alpha = 0.1;
                sprite.scale.x = sprite.scale.y = (0.01 + Math.random() * 0.1) * (Math.random() > .5 ? 1: -1);
                // console.log((.random() > .5 ? 1: -1)
                sprite.offset = Math.random() * 100;
                sprite.rotationSpeed = .02 + Math.random()*.1;
                sprite.maxScale = 1.5;
                if(this.webgl)
                {
                    sprite.coefScale = 1 + Math.random()*.05;
                }
                else
                {
                    sprite.coefScale = 1 + Math.random()*.1;
                }
        }
    }

    /**
     * Update loop
     * @return {null}
     */
    Sparkle.prototype.update = function()
    {
        this.life -= 0.04;
        
        if(this.life < 0)
        {
            this.isDead = true;
        } 

       for (var i = 0; i < this.total; i++) 
        {
            var sprite = this.particles[i];
                sprite.speed.y *= .95;
                sprite.position.x += sprite.speed.x;
                sprite.position.y += sprite.speed.y;
                sprite.rotation += sprite.rotationSpeed;
                sprite.speed.x *= 0.95;
                // sprite.speed.y *= 0.95;

                // if(this.life > 1)
                // {
                //     sprite.scale.x += 0.02;
                //     sprite.scale.y += 0.02;
                // }
                // else{
                //     sprite.scale.x -= 0.02;
                //     sprite.scale.y -= 0.02;
                // }
                // console.log(this.particles[0].scale.x)
                if(this.life < .8)
                {
                    sprite.scale.x *= 0.98;
                    sprite.scale.y *= 0.98;
                }
                else if(sprite.scale.x <= 1)
                {
                    sprite.scale.x *= sprite.coefScale;
                    sprite.scale.y *= sprite.coefScale;
                }

            if(sprite.alpha < 0.9 && this.life >= .8)
            {
                sprite.alpha += .05;
            }
            else if (this.life >= .8)
            {
                sprite.alpha = .9;
            }
                
            if(this.life < 0.8)
            {
                sprite.alpha *= 0.95;
            }

            // if(sprite.scale.x > sprite.maxScale)
            // {
            //     sprite.scale.x = sprite.maxScale;
            //     sprite.scale.y = sprite.maxScale;
            // } 


        }
    }

    module.exports = Sparkle;

});
define('com/sc/app/screens/InterimLoader',['require','exports','module','PIXI','com/fido/system/Ticker','signals','com/sc/games/shared/particles/LoaderParticles','com/sc/games/shared/particles/LoaderSparkle'],function (require, exports, module) 
{
    var PIXI            = require("PIXI");
    var Ticker          = require('com/fido/system/Ticker');
    var Signal          = require("signals");

    var ParticleManager  = require('com/sc/games/shared/particles/LoaderParticles');
    var Sparkle          = require('com/sc/games/shared/particles/LoaderSparkle');

    /**
     * Loader screen for Sheriff Callie
     * @param {Object} app [Instance of the main App]
     */
    var InterimLoader = function(app)
    {
        PIXI.DisplayObjectContainer.call( this );
        
        this.app = app;

        this.bkg = new PIXI.Graphics().beginFill(0xf38898).drawRect(0,0,1136,640).endFill();

        //this.addChild(this.bkg);

        this.cont = new PIXI.DisplayObjectContainer();

        this.addChild(this.cont);
        
        var squash = 0.6;

        this.weed = PIXI.Sprite.fromFrame("loader_tumbleweed.png");

        this.weed.anchor.set(0.5);

        this.addChild(this.weed);

        this.shadow = PIXI.Sprite.fromFrame("loader_tumbleweed_shadow.png");

        this.shadow.anchor.set(0.5);

        this.shadow.y = 60;

        // the shadow is in a container that is squashed
        // and the shadow rotates, the flattened shadow 
        // then makes a pretty cool "fake" 3D effect
        this.cont.scale.x = 1 / squash;
        this.cont.scale.y = squash;

        this.ground = 360;

        this.cont.x = 1136/2;
        this.cont.y = this.ground;

        this.weed.x = this.cont.x;

        this.weed.y = -100;

        this.weed.scale.set(1.4);

        this._originalScale = 1.4;

        this.weed.visible = false;

        this.cont.addChild(this.shadow);

        this.vx = 0;

        this.vy = 2;

        this.ty = 0;

        this.dy = 0;

        this.accy = 0;

        this.falls = true;

        this.bounceCount = 0;

        this.bounceMax = 15;

        this.gravity = 0.2;

        this._intensity = 0.01;

        this.onCollides = new Signal();

        this.alphaShadow = true;

    };

    InterimLoader.prototype = Object.create( PIXI.DisplayObjectContainer.prototype );


    InterimLoader.prototype.show = function()
    {
        // Wait for the star transition to finish
        TweenLite.delayedCall(1.0,this.shown,[],this);

        this.reset();
    };

    InterimLoader.prototype.shown = function()
    {
        Ticker.instance.add(this.update, this);

        this.app.stage.addChild(this);

        this.weed.visible = true;

        //TweenLite.delayedCall(6.0,this.hide,[],this);
    };

    /**
     * Update loop
     * 
     */
    InterimLoader.prototype.update = function()
    { 

        this.shadow.rotation += 0.1 * Ticker.instance.deltaTime;
        this.weed.rotation += 0.1 * Ticker.instance.deltaTime;
        
        if(!this.falls)
        {
            this.dy = (this.ty - this.weed.y) * 0.04;

            var oldY = this.weed.y;
            this.weed.y += this.dy * Ticker.instance.deltaTime;
            this.vy = oldY - this.weed.y;

            if(Math.abs(this.dy) < 1)
            {
                this.falls = true;
            }
        }
        else{

            this.accy += this.gravity;

            this.accy *= 0.9;

            this.vy += this.accy;

            this.weed.y += this.vy * Ticker.instance.deltaTime;

            if(this.weed.y > this.ground)
            {

                this.onCollides.dispatch();

                this.weed.y = this.ground;
                this.vy *= -0.85;

                this.bounceCount++;

                if(this.bounceCount > this.bounceMax)
                {
                    this.bounceCount = 0;

                    // TODO implement with proper forces
                    this.falls = false;
                }
            }
        }

        if(this.alphaShadow)
        {
            this.shadow.alpha = this.map(this.weed.y,50,this.ground,0.2,1);
        }

        var squash = (( Math.abs(this.vy) + Math.abs(this.vx)) * this._intensity);

        // TODO understand !
        var xScale = (squash / -2) + this._originalScale;

        var yScale = squash + this._originalScale;

        this.weed.scale.set(xScale,yScale);

    };

    InterimLoader.prototype.reset = function () {

        this.weed.y = -100;
        this.ground = 360;

        this.ty = this.ground - 130;
        this.vy = 2;
        this.alphaShadow = true;

        this.shadow.alpha = 0;
    };

    /**
     * Event for when hiding the loading screen
     * @return {[type]} [description]
     */
    InterimLoader.prototype.hide = function()
    {
        TweenLite.killTweensOf(this.shown);

        this.ty = this.ground - 200;

        this.falls = false;

        this.alphaShadow = false;

        TweenLite.to(this.shadow,0.5,{alpha : 0, delay : 0.3});

        this.ground = 980;

        this.onCollides.addOnce(this.remove,this);
        
    };


    InterimLoader.prototype.remove = function()
    {
        console.log("remove !");

        Ticker.instance.remove(this.update, this);
        this.app.stage.removeChild(this);
        this.alpha = 1;
    };

    InterimLoader.prototype.map = function(n, start1, stop1, start2, stop2) {
        return ((n-start1)/(stop1-start1))*(stop2-start2)+start2;
    };

    /**
     * Resize the screen
     * @param  {Number} w
     * @param  {Number} h
     */
    InterimLoader.prototype.resize = function(w, h)
    {
        this.w = w;
        this.h = h;
        // this.view.x = w/2;
        // this.view.y = h/2;
    };

    /**
     * Export...
     */
    module.exports = InterimLoader;

});
define('APP_root',['require','exports','module','PIXI','signals','com/fido/app/App','com/fido/system/Ticker','com/fido/system/Device','com/fido/sound/SoundManager','com/fido/utils/Utils','com/fido/Flash','com/fido/Fade','com/fido/utils/Debug','com/sc/games/shared/Hud','com/fido/app/OrientationManager','com/sc/app/screens/LoaderScreen','com/sc/app/screens/TitleScreen','com/sc/app/screens/AnimationScreen','com/sc/app/screens/GameScreen','com/sc/app/screens/MapScreen','com/sc/app/screens/OutroScreen','com/sc/app/TopMenu','com/sc/app/overlay/OverlayManager','com/sc/app/system/GameSaveManager','com/sc/games/store/StoreGame','com/sc/games/cattle/CattleGame','com/sc/games/smoothie/SmoothieGame','com/fido/loader/Cache','com/sc/games/shared/particles/ParticleManager','com/sc/games/shared/particles/Sparkle','com/sc/games/shared/particles/GameOverStars','com/sc/games/shared/particles/ParticleBridge','com/fido/app/AssetManager','libs/gameConfig/gameTracking','com/sc/app/screens/InterimLoader','com/sc/Consts'],function (require, exports, module) 
{
    var PIXI                = require("PIXI");
    window.PIXI             = PIXI;
    
    // Fido
    var Signal              = require("signals");
    var FidoApp             = require('com/fido/app/App');
    var Ticker              = require('com/fido/system/Ticker');
    var Device              = require('com/fido/system/Device');
    var SoundManager        = require('com/fido/sound/SoundManager');
    var Utils               = require('com/fido/utils/Utils');
    var Flash               = require('com/fido/Flash');
    var Fade                = require('com/fido/Fade');
    var Debug               = require('com/fido/utils/Debug');
    var Hud                 = require('com/sc/games/shared/Hud');
    var OrientationManager  = require('com/fido/app/OrientationManager');

    // App
    var LoaderScreen        = require('com/sc/app/screens/LoaderScreen');
    var TitleScreen         = require('com/sc/app/screens/TitleScreen');
    var AnimationScreen     = require('com/sc/app/screens/AnimationScreen');
    var GameScreen          = require('com/sc/app/screens/GameScreen');
    var MapScreen           = require('com/sc/app/screens/MapScreen');
    var OutroScreen         = require('com/sc/app/screens/OutroScreen');
    var TopMenu             = require('com/sc/app/TopMenu');
    var OverlayManager      = require('com/sc/app/overlay/OverlayManager');
    var GameSaveManager     = require('com/sc/app/system/GameSaveManager');

    // Game
    var StoreGame           = require('com/sc/games/store/StoreGame');
    var CattleGame          = require('com/sc/games/cattle/CattleGame');    
    var SmoothieGame        = require('com/sc/games/smoothie/SmoothieGame');
    var Cache               = require('com/fido/loader/Cache');

    // Shared
    var ParticleManager     = require('com/sc/games/shared/particles/ParticleManager');
    var Sparkle             = require('com/sc/games/shared/particles/Sparkle');
    var GameOverSparkle     = require('com/sc/games/shared/particles/GameOverStars');
    var ParticleBridge      = require('com/sc/games/shared/particles/ParticleBridge');

    var AssetManager        = require('com/fido/app/AssetManager');
    var DisneyTracker       = require('libs/gameConfig/gameTracking');
    var InterimLoader       = require('com/sc/app/screens/InterimLoader');
    var Consts              = require('com/sc/Consts');
    /**
     * The root of our application
     */
    var SCApp = function()
    {

        var options = 
        {
            loaderScreen : LoaderScreen,
            orientationMode : FidoApp.orientationModes.LANDSCAPE
        }

        FidoApp.call(this, options);

        this.sky = new PIXI.Sprite.fromImage(ASSET_URL + "img/loader/sky_gradient.jpg");
        this.sky.anchor.x = 0.5;
        this.sky.anchor.y = 0.5;
        this.sky.scale.set(100, 1.7);
        this.screenManager.container.addChild(this.sky);

        this.orientationManager = new OrientationManager();

        this.safeSize = 
        {
            width : 1136, 
            height : 640
        };

        this.maxSize = 
        {
            width : 1136, 
            height : 640
        };

        // Load what we need....
        this.loader.addPixiAssets([ 
            ASSET_URL + "img/game/game_menus.json",
            ASSET_URL + "img/game/ui_boxes.json",
            ASSET_URL + "img/game/gold_icons.json",
            ASSET_URL + "img/game/game_buttons.json",
            ASSET_URL + "img/game/fx.json",
            ASSET_URL + "img/game/game_roundup_foliage.json",
            ASSET_URL + "img/game/peck_hud.png",
            ASSET_URL + "img/game/callie_title.png",

           
            
            ASSET_URL + "img/game/level_store_bg.jpg",
            ASSET_URL + "img/game/level_smoothie_bg.jpg",
            ASSET_URL + "img/game/level_cows_bg.jpg",
            ASSET_URL + "img/game/desert_bg.jpg",
            ASSET_URL + "img/game/character_ella.json",
            ASSET_URL + "img/game/character_bun.json",
            ASSET_URL + "img/game/character_priscilla.json",
            ASSET_URL + "img/game/character_stinky.json",
            ASSET_URL + "img/game/character_dan.json",
            ASSET_URL + "img/game/character_dusty.json",
            ASSET_URL + "img/game/character_quackers.json",
            ASSET_URL + "img/game/character_tio.json",
            ASSET_URL + "img/game/toby.png",
            
            // localized images
            ASSET_URL + "img/localized/callie_logo.png",
            ASSET_URL + "img/localized/deputy_logo.png",
            // end localized images
            
            ASSET_URL + "img/loader/sky_gradient.jpg",

            ASSET_URL + "img/game/rope.png",

            ASSET_URL + 'img/game/town_bg.jpg',

            // outro
            ASSET_URL + 'img/game/story_outro.json',
            ASSET_URL + "img/game/interactive2_prison_door.png",
            ASSET_URL + "img/game/end_screen.jpg",
            ASSET_URL + 'img/game/crime_wall.jpg',
            ASSET_URL + 'img/game/town_bg_blur.jpg'

        ]);
    

        this.loader.addJson('config.json', 'config');
        this.loader.addJson(ASSET_URL + "strings/strings.json", "translation");
        this.loader.addJson(ASSET_URL + "strings/datasCattle.json", "datasCattle");
        this.loader.addJson(ASSET_URL + "strings/datasChasegame.json", "datasChasegame");

        this.loader.addJson(ASSET_URL + 'strings/smoothieLevels.json', 'smoothieLevels');
        this.loader.addJson(ASSET_URL + 'strings/storeLevels.json', 'storeLevels');
        this.loader.addJson(ASSET_URL + 'strings/tutorials.json', 'tutorials');


        SoundManager.music.addSound(ASSET_URL + "snd/musicLoopFrontEnd","mainLoop",{loop:true, volume:0.5});


        SoundManager.music.addSound(ASSET_URL + "snd/musicLoopCowChase","chaseLoop",{loop:true, volume:0.5});
        SoundManager.music.addSound(ASSET_URL + "snd/musicLoopCowSearch","cattleLoop",{loop:true, volume:0.5});
        
        SoundManager.music.addSound(ASSET_URL + "snd/musicLoopSmoothie","smoothieLoop",{loop:true, volume:0.5});
        SoundManager.music.addSound(ASSET_URL + "snd/musicLoopStore","storeLoop",{loop:true, volume:0.5});

        // Clicks/roll overs
        SoundManager.sfx.addSound(ASSET_URL + "snd/buttonPress","press");
        SoundManager.sfx.addSound(ASSET_URL + "snd/buttonRoll","hover");
        
        // level select
        SoundManager.sfx.addSound(ASSET_URL + "snd/levelCardPress","levelSelect");
        SoundManager.sfx.addSound(ASSET_URL + "snd/levelCardRoll","levelHover");
        
        // misc
        SoundManager.sfx.addSound(ASSET_URL + "snd/gameCompletionEndScreen","outro");
        SoundManager.sfx.addSound(ASSET_URL + "snd/jailDoor", "jailDoor");

        SoundManager.sfx.addSound(ASSET_URL + "snd/panelDropIn","overlayShow");
        SoundManager.sfx.addSound(ASSET_URL + "snd/panelFallAway","overlayHide");
        SoundManager.sfx.addSound(ASSET_URL + "snd/starDisplayScreen","gameover");
        SoundManager.sfx.addSound(ASSET_URL + "snd/starPieceGet","starPiece");
        SoundManager.sfx.addSound(ASSET_URL + "snd/starTransitionMask","transition");
        SoundManager.sfx.addSound(ASSET_URL + "snd/tickAppear","tick");

        SoundManager.sfx.addSound(ASSET_URL + "snd/gallopingHooves","galloping", {loop:true, volume:0.3});
        // outro
        SoundManager.sfx.addSound(ASSET_URL + "snd/banditSlip","banditSlip");


        // In game sounds
        SoundManager.sfx.addSound(ASSET_URL + "snd/blender","blender");
        SoundManager.sfx.addSound(ASSET_URL + "snd/happyCustomer","happyCustomer");

        
        this.loader.addFonts([Fonts.MainFont]);

        // Listen for when everything is up and running...
        this.onReady.add(this.onAppReady, this);

        // Load any saved information from the storage device...
        GameSaveManager.instance.loadGame();
        GameSaveManager.instance.reset();
        
        // Startup the app... when it is ready to go onReady will be fired...
        this.startup();
        this.setupAssets();


    };

    SCApp.prototype = Object.create( FidoApp.prototype );

    SCApp.prototype.setupAssets = function()
    {
        AssetManager.registerGroup('smoothieAssets', [
            ASSET_URL + "img/game/saloon_bg.jpg",
            ASSET_URL + "img/game/smoothie_game.json",
            ASSET_URL + "img/game/smoothie_fruits.json",
            ASSET_URL + "img/game/character_priscilla.json",
            ASSET_URL + "img/game/character_stinky.json",
        ]);

        AssetManager.registerGroup('storeAssets', [
            ASSET_URL + "img/game/store_bg.jpg",
            ASSET_URL + "img/game/store_items.json",
            ASSET_URL + "img/game/store_bg.json",
            ASSET_URL + "img/game/character_priscilla.json",
            ASSET_URL + "img/game/character_stinky.json",
            ASSET_URL + "img/game/smoothie_fruits.json"
        ]);

        AssetManager.registerGroup('cowAssets', [
            ASSET_URL + 'img/game/story_outro.json',
            ASSET_URL + "img/game/game_roundup.json",
            ASSET_URL + "img/game/game_roundup_foliage.json",
            ASSET_URL + "img/game/cow.png"

            
        ]);

        AssetManager.registerGroup('chaseAssets', [
            ASSET_URL + "img/game/cow.json",
            ASSET_URL + "img/game/game_chase.json"
        ])

        AssetManager.registerGroup('outroAssets', [
            
        ])


    }

    /**
     * Event to be fired then the application is ready
     */
    SCApp.prototype.onAppReady = function()
    {
        var json = Cache.getJson("config");

        var config = json.config;

        this.config = json.config;

       


        var texture = PIXI.BaseTexture.fromImage( ASSET_URL + 'img/game/game_menus.png' );
        texture.mipmap = true;

        var texture = PIXI.BaseTexture.fromImage( ASSET_URL + 'img/game/gold_icons.png' );
        texture.mipmap = true;

  
        // debug translation...
        // var strings = Cache.getJson("translation").strings;
        // for (var i in strings)
        // {
        //     strings[i] = "ŹÊČå" + strings[i] + strings[i];
        // };
        
        this.interimLoader = new InterimLoader(this);

        AssetManager.onAssetsLoadBegin.add(this.onAssetsLoadBegin, this);
        AssetManager.onAssetsLoaded.add(this.onAssetsLoadedComplete, this);

        this.titleScreen        = new TitleScreen(this);
        this.animationScreen    = new AnimationScreen(this);
        this.mapScreen          = new MapScreen(this);
        this.outroScreen        = new OutroScreen(this, ['outroAssets']);

        this.cattleGameScreen   = new GameScreen(this, CattleGame, ['cowAssets', 'chaseAssets']);
        this.smoothieGameScreen = new GameScreen(this, SmoothieGame, ['smoothieAssets']);
        this.storeGameScreen    = new GameScreen(this, StoreGame, ['storeAssets']);

        this.screenManager.addScreen(this.titleScreen, "title");
        this.screenManager.addScreen(this.animationScreen, "animation");
        this.screenManager.addScreen(this.mapScreen, "map");
        this.screenManager.addScreen(this.cattleGameScreen, "cattle");

        this.screenManager.addScreen(this.smoothieGameScreen, "smoothie");
        this.screenManager.addScreen(this.storeGameScreen, "store");
        this.screenManager.addScreen(this.outroScreen, "outro");

        this.topMenu = new TopMenu(this);
        this.stage.addChild(this.topMenu);

        var style = {
            font : '32px '+ Fonts.MainFont,
            fill : '#efb647',
            stroke : '#482219',
            dropShadow : true,
            dropShadowColor : '#482219',
            dropShadowAngle : -0.2,
            dropShadowDistance : 7,
            wordWrap : true,
            wordWrapWidth : 190,
            align : "center",
            strokeThickness: 4,
            lineHeight: 40
        };

        var cheekyBox = new PIXI.Text("cheeky", style)///, {font : '32px '+ Fonts.MainFont});
        cheekyBox.updateText();
        
     //   this.topMenu.addChild(cheekyBox);

        /**
         * Main list of game segments, the order is important.
         * @todo  : Make this more flexible, and remove the need for hardcoded
         *          ID's.
         * @type {Array}
         */

        this.gameSegments = [
        {
            type    : "animation", 
            screen  : "animation", 
            meta    : "game1Intro",
        },
        {
            type    : "game", 
            screen  : "map", 
            meta    : "map",
        },
        {
            type    : "animation", 
            screen  : "animation", 
            meta    : "game2Intro",
            music : 'storeLoop'
        },
        {
            type    : "game", 
            screen  : "store",
            game_id : 1
        },
        {
            type    : "animation", 
            screen  : "animation", 
            meta    : "game3Intro",
            music : 'smoothieLoop'
        },
        {
            type    : "game", 
            screen  : "smoothie",
            game_id : 2
        },
        {
            type    : "animation", 
            screen  : "animation", 
            meta    : "game4Intro",
            music   : 'cattleLoop'
        },
        {
            type    : "game", 
            screen  : "cattle",
            game_id : 3
        },
        {
            type    : "game", 
            screen  : "outro",
            gameId  : 4,
            music   : 'cattleLoop'
        }];

        this.currentSegmentId = 0;

        DisneyTracker.locale = config.LOCALE;
        DisneyTracker.trackDevice();
        DisneyTracker.trackClick();



        var quickJump = Utils.get_query('fastplay');

        if(quickJump)
        {
            this.screenManager.gotoScreenByID(quickJump);
        }
        else
        {
            this.screenManager.gotoScreenByID("title");
        }
        


        this.hud = new Hud();

        this.hud.visible = false;

        this.stage.addChild(this.hud);

        this.fade = new Fade(4300,4300);

        this.stage.addChild(this.fade);
        
        this.overlayManager = new OverlayManager(this);
        this.stage.addChild(this.overlayManager.view);

        this.particleLayer = new PIXI.DisplayObjectContainer();
        this.stage.addChild(this.particleLayer);

        this.particleManager = new ParticleManager(this);
        this.particleManager.registerParticle(Sparkle, 0);
        this.particleManager.registerParticle(GameOverSparkle, 1);

        ParticleBridge.instance.setGame(this);

        this.flash = new Flash(4300, 4300);
        this.stage.addChild(this.flash);
        

        this.debug = new Debug();

        this.stage.addChild(this.debug);

        this.resize(this.w, this.h);
    };

    SCApp.prototype.nextIncompleteLevel = function()
    {

        var levelMap = [
            2,
            4,
            6
        ];

        for(var i = 0; i < GameSaveManager.instance.save.levelStates.length; i++)
        {   
            var level = GameSaveManager.instance.save.levelStates[i];
            if(level === GameSaveManager.LEVEL_STATES.Unlocked) return levelMap[i];
        }

        return false;
    }

    /**
     * Main update loop
     */
    SCApp.prototype.update = function()
    {
        FidoApp.prototype.update.call(this);
        if(this.particleManager)
        {
            this.particleManager.update();
        }
    };

    /**
     * Jump to the next segment
     * @return {[type]} [description]
     */
    SCApp.prototype.nextSegment = function()
    {

        this.currentSegmentId++;
        this.jumpToSegment(this.currentSegmentId);
        
    };

    /**
     * Jump to a specified segment
     * @param  {[Number]} id : Id of the target segment
     */
    SCApp.prototype.jumpToSegment = function(id)
    {
        this.currentSegmentId = id || 0;

        var currentSegment = this.gameSegments[this.currentSegmentId];        

        if(currentSegment.type === "animation")
        {
            this.animationScreen.setAnimationById(currentSegment.meta)
        }

        this.screenManager.gotoScreenByID(currentSegment.screen);
    };


    SCApp.prototype.onAssetsLoadBegin = function()
    {
        this.interimLoader.show();
    }

    SCApp.prototype.onAssetsLoadedComplete = function()
    {
        // setTimeout(function () {
        //     this.interimLoader.hide();
        // }.bind(this),5000);

        this.interimLoader.hide();
    }

    /**
     * Resize the application
     * @param  w {Number} Width
     * @param  h {Number} Height
     */
    SCApp.prototype.resize = function(w, h)
    {
        this.w = w;
        this.h = h;

        if(this.orientationManager) this.orientationManager.check(this.w, this.h);

        var scale = 1;

        if(Device.instance.isMobile)
        {

            if(window.devicePixelRatio)
            {
                scale = window.devicePixelRatio;
            }
            else
            {
                scale = window.screen.deviceXDPI / window.screen.logicalXDPI;
            }
        }

        if(scale > 2) scale = 2;

        var ratio = w/(this.safeSize.width) < h/(this.safeSize.height) ? w/(this.safeSize.width) : h/(this.safeSize.height);
        var w2 = Math.min(this.maxSize.width * ratio, w);
        var h2 = Math.min(this.maxSize.height * ratio, h);
    
        this.renderer.resize((w2 * scale) | 0, (h2 * scale) | 0);

        this.view.style.width = w2 + "px";
        this.view.style.height = h2 + "px";

        this.view.style.left = (w * 0.5) - (w2 * 0.5) + "px";
        this.view.style.top = (h * 0.5) - (h2 * 0.5) + "px";

        this.screenManager.resize(w2/ratio, h2/ratio);

        if(this.flash)
        {
            this.flash.resize(w*2,h*2);

            this.fade.resize(w,h);
        }

        if(this.overlayManager)
        {
            this.overlayManager.resize(w2/ratio, h2/ratio);
            this.overlayManager.view.scale.set(ratio * scale);  

            this.interimLoader.resize(w2/ratio, h2/ratio);
            this.interimLoader.scale.set(ratio * scale); 

            this.hud.scale.set(ratio * scale); 

        }

        if(this.particleManager)
        {
            this.particleLayer.scale.set(ratio * scale);
        }

        if(this.topMenu)
        {
            this.topMenu.scale.set(ratio * scale);
            this.topMenu.resize(w2/ratio, h2/ratio);
        }
        else
        {
        }

        this.screenManager.container.scale.set(ratio * scale);
    };

    /**
     * Export...
     */
    module.exports = SCApp;



});
// stats.js - http://github.com/mrdoob/stats.js
var Stats=function(){var l=Date.now(),m=l,g=0,n=Infinity,o=0,h=0,p=Infinity,q=0,r=0,s=0,f=document.createElement("div");f.id="stats";f.addEventListener("mousedown",function(b){b.preventDefault();t(++s%2)},!1);f.style.cssText="width:80px;opacity:0.9;cursor:pointer";var a=document.createElement("div");a.id="fps";a.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#002";f.appendChild(a);var i=document.createElement("div");i.id="fpsText";i.style.cssText="color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
i.innerHTML="FPS";a.appendChild(i);var c=document.createElement("div");c.id="fpsGraph";c.style.cssText="position:relative;width:74px;height:30px;background-color:#0ff";for(a.appendChild(c);74>c.children.length;){var j=document.createElement("span");j.style.cssText="width:1px;height:30px;float:left;background-color:#113";c.appendChild(j)}var d=document.createElement("div");d.id="ms";d.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";f.appendChild(d);var k=document.createElement("div");
k.id="msText";k.style.cssText="color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";k.innerHTML="MS";d.appendChild(k);var e=document.createElement("div");e.id="msGraph";e.style.cssText="position:relative;width:74px;height:30px;background-color:#0f0";for(d.appendChild(e);74>e.children.length;)j=document.createElement("span"),j.style.cssText="width:1px;height:30px;float:left;background-color:#131",e.appendChild(j);var t=function(b){s=b;switch(s){case 0:a.style.display=
"block";d.style.display="none";break;case 1:a.style.display="none",d.style.display="block"}};return{REVISION:11,domElement:f,setMode:t,begin:function(){l=Date.now()},end:function(){var b=Date.now();g=b-l;n=Math.min(n,g);o=Math.max(o,g);k.textContent=g+" MS ("+n+"-"+o+")";var a=Math.min(30,30-30*(g/200));e.appendChild(e.firstChild).style.height=a+"px";r++;b>m+1E3&&(h=Math.round(1E3*r/(b-m)),p=Math.min(p,h),q=Math.max(q,h),i.textContent=h+" FPS ("+p+"-"+q+")",a=Math.min(30,30-30*(h/100)),c.appendChild(c.firstChild).style.height=
a+"px",m=b,r=0);return b},update:function(){l=this.end()}}};

define("stats", function(){});

/* Web Font Loader v1.5.14 - (c) Adobe Systems, Google. License: Apache 2.0 */
;(function(window,document,undefined){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function k(a,b,c){k=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return k.apply(null,arguments)}var n=Date.now||function(){return+new Date};function q(a,b){this.J=a;this.t=b||a;this.C=this.t.document}q.prototype.createElement=function(a,b,c){a=this.C.createElement(a);if(b)for(var d in b)b.hasOwnProperty(d)&&("style"==d?a.style.cssText=b[d]:a.setAttribute(d,b[d]));c&&a.appendChild(this.C.createTextNode(c));return a};function r(a,b,c){a=a.C.getElementsByTagName(b)[0];a||(a=document.documentElement);a&&a.lastChild&&a.insertBefore(c,a.lastChild)}function ca(a,b){function c(){a.C.body?b():setTimeout(c,0)}c()}
function s(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function t(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
function u(a){if("string"===typeof a.ma)return a.ma;var b=a.t.location.protocol;"about:"==b&&(b=a.J.location.protocol);return"https:"==b?"https:":"http:"}function v(a,b){var c=a.createElement("link",{rel:"stylesheet",href:b}),d=!1;c.onload=function(){d||(d=!0)};c.onerror=function(){d||(d=!0)};r(a,"head",c)}
function w(a,b,c,d){var e=a.C.getElementsByTagName("head")[0];if(e){var f=a.createElement("script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);window.setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function x(a,b){this.X=a;this.fa=b};function y(a,b,c,d){this.c=null!=a?a:null;this.g=null!=b?b:null;this.A=null!=c?c:null;this.e=null!=d?d:null}var da=/^([0-9]+)(?:[\._-]([0-9]+))?(?:[\._-]([0-9]+))?(?:[\._+-]?(.*))?$/;y.prototype.compare=function(a){return this.c>a.c||this.c===a.c&&this.g>a.g||this.c===a.c&&this.g===a.g&&this.A>a.A?1:this.c<a.c||this.c===a.c&&this.g<a.g||this.c===a.c&&this.g===a.g&&this.A<a.A?-1:0};y.prototype.toString=function(){return[this.c,this.g||"",this.A||"",this.e||""].join("")};
function z(a){a=da.exec(a);var b=null,c=null,d=null,e=null;a&&(null!==a[1]&&a[1]&&(b=parseInt(a[1],10)),null!==a[2]&&a[2]&&(c=parseInt(a[2],10)),null!==a[3]&&a[3]&&(d=parseInt(a[3],10)),null!==a[4]&&a[4]&&(e=/^[0-9]+$/.test(a[4])?parseInt(a[4],10):a[4]));return new y(b,c,d,e)};function A(a,b,c,d,e,f,g,h){this.M=a;this.k=h}A.prototype.getName=function(){return this.M};function B(a){this.a=a}var ea=new A("Unknown",0,0,0,0,0,0,new x(!1,!1));
B.prototype.parse=function(){var a;if(-1!=this.a.indexOf("MSIE")||-1!=this.a.indexOf("Trident/")){a=C(this);var b=z(D(this)),c=null,d=E(this.a,/Trident\/([\d\w\.]+)/,1),c=-1!=this.a.indexOf("MSIE")?z(E(this.a,/MSIE ([\d\w\.]+)/,1)):z(E(this.a,/rv:([\d\w\.]+)/,1));""!=d&&z(d);a=new A("MSIE",0,0,0,0,0,0,new x("Windows"==a&&6<=c.c||"Windows Phone"==a&&8<=b.c,!1))}else if(-1!=this.a.indexOf("Opera"))a:if(a=z(E(this.a,/Presto\/([\d\w\.]+)/,1)),z(D(this)),null!==a.c||z(E(this.a,/rv:([^\)]+)/,1)),-1!=this.a.indexOf("Opera Mini/"))a=
z(E(this.a,/Opera Mini\/([\d\.]+)/,1)),a=new A("OperaMini",0,0,0,C(this),0,0,new x(!1,!1));else{if(-1!=this.a.indexOf("Version/")&&(a=z(E(this.a,/Version\/([\d\.]+)/,1)),null!==a.c)){a=new A("Opera",0,0,0,C(this),0,0,new x(10<=a.c,!1));break a}a=z(E(this.a,/Opera[\/ ]([\d\.]+)/,1));a=null!==a.c?new A("Opera",0,0,0,C(this),0,0,new x(10<=a.c,!1)):new A("Opera",0,0,0,C(this),0,0,new x(!1,!1))}else/OPR\/[\d.]+/.test(this.a)?a=F(this):/AppleWeb(K|k)it/.test(this.a)?a=F(this):-1!=this.a.indexOf("Gecko")?
(a="Unknown",b=new y,z(D(this)),b=!1,-1!=this.a.indexOf("Firefox")?(a="Firefox",b=z(E(this.a,/Firefox\/([\d\w\.]+)/,1)),b=3<=b.c&&5<=b.g):-1!=this.a.indexOf("Mozilla")&&(a="Mozilla"),c=z(E(this.a,/rv:([^\)]+)/,1)),b||(b=1<c.c||1==c.c&&9<c.g||1==c.c&&9==c.g&&2<=c.A),a=new A(a,0,0,0,C(this),0,0,new x(b,!1))):a=ea;return a};
function C(a){var b=E(a.a,/(iPod|iPad|iPhone|Android|Windows Phone|BB\d{2}|BlackBerry)/,1);if(""!=b)return/BB\d{2}/.test(b)&&(b="BlackBerry"),b;a=E(a.a,/(Linux|Mac_PowerPC|Macintosh|Windows|CrOS|PlayStation|CrKey)/,1);return""!=a?("Mac_PowerPC"==a?a="Macintosh":"PlayStation"==a&&(a="Linux"),a):"Unknown"}
function D(a){var b=E(a.a,/(OS X|Windows NT|Android) ([^;)]+)/,2);if(b||(b=E(a.a,/Windows Phone( OS)? ([^;)]+)/,2))||(b=E(a.a,/(iPhone )?OS ([\d_]+)/,2)))return b;if(b=E(a.a,/(?:Linux|CrOS|CrKey) ([^;)]+)/,1))for(var b=b.split(/\s/),c=0;c<b.length;c+=1)if(/^[\d\._]+$/.test(b[c]))return b[c];return(a=E(a.a,/(BB\d{2}|BlackBerry).*?Version\/([^\s]*)/,2))?a:"Unknown"}
function F(a){var b=C(a),c=z(D(a)),d=z(E(a.a,/AppleWeb(?:K|k)it\/([\d\.\+]+)/,1)),e="Unknown",f=new y,f="Unknown",g=!1;/OPR\/[\d.]+/.test(a.a)?e="Opera":-1!=a.a.indexOf("Chrome")||-1!=a.a.indexOf("CrMo")||-1!=a.a.indexOf("CriOS")?e="Chrome":/Silk\/\d/.test(a.a)?e="Silk":"BlackBerry"==b||"Android"==b?e="BuiltinBrowser":-1!=a.a.indexOf("PhantomJS")?e="PhantomJS":-1!=a.a.indexOf("Safari")?e="Safari":-1!=a.a.indexOf("AdobeAIR")?e="AdobeAIR":-1!=a.a.indexOf("PlayStation")&&(e="BuiltinBrowser");"BuiltinBrowser"==
e?f="Unknown":"Silk"==e?f=E(a.a,/Silk\/([\d\._]+)/,1):"Chrome"==e?f=E(a.a,/(Chrome|CrMo|CriOS)\/([\d\.]+)/,2):-1!=a.a.indexOf("Version/")?f=E(a.a,/Version\/([\d\.\w]+)/,1):"AdobeAIR"==e?f=E(a.a,/AdobeAIR\/([\d\.]+)/,1):"Opera"==e?f=E(a.a,/OPR\/([\d.]+)/,1):"PhantomJS"==e&&(f=E(a.a,/PhantomJS\/([\d.]+)/,1));f=z(f);g="AdobeAIR"==e?2<f.c||2==f.c&&5<=f.g:"BlackBerry"==b?10<=c.c:"Android"==b?2<c.c||2==c.c&&1<c.g:526<=d.c||525<=d.c&&13<=d.g;return new A(e,0,0,0,0,0,0,new x(g,536>d.c||536==d.c&&11>d.g))}
function E(a,b,c){return(a=a.match(b))&&a[c]?a[c]:""};function G(a){this.la=a||"-"}G.prototype.e=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.la)};function H(a,b){this.M=a;this.Y=4;this.N="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.N=c[1],this.Y=parseInt(c[2],10))}H.prototype.getName=function(){return this.M};function I(a){return a.N+a.Y}function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.d=a;this.p=a.t.document.documentElement;this.P=b;this.j="wf";this.h=new G("-");this.ga=!1!==b.events;this.B=!1!==b.classes}function J(a){if(a.B){var b=t(a.p,a.h.e(a.j,"active")),c=[],d=[a.h.e(a.j,"loading")];b||c.push(a.h.e(a.j,"inactive"));s(a.p,c,d)}K(a,"inactive")}function K(a,b,c){if(a.ga&&a.P[b])if(c)a.P[b](c.getName(),I(c));else a.P[b]()};function ia(){this.w={}};function L(a,b){this.d=a;this.G=b;this.m=this.d.createElement("span",{"aria-hidden":"true"},this.G)}function M(a){r(a.d,"body",a.m)}
function N(a){var b;b=[];for(var c=a.M.split(/,\s*/),d=0;d<c.length;d++){var e=c[d].replace(/['"]/g,"");-1==e.indexOf(" ")?b.push(e):b.push("'"+e+"'")}b=b.join(",");c="normal";"o"===a.N?c="oblique":"i"===a.N&&(c="italic");return"display:block;position:absolute;top:-999px;left:-999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+b+";"+("font-style:"+c+";font-weight:"+(a.Y+"00")+";")}
L.prototype.remove=function(){var a=this.m;a.parentNode&&a.parentNode.removeChild(a)};function O(a,b,c,d,e,f,g,h){this.Z=a;this.ja=b;this.d=c;this.s=d;this.G=h||"BESbswy";this.k=e;this.I={};this.W=f||3E3;this.ba=g||null;this.F=this.D=null;a=new L(this.d,this.G);M(a);for(var m in P)P.hasOwnProperty(m)&&(b=new H(P[m],I(this.s)),b=N(b),a.m.style.cssText=b,this.I[P[m]]=a.m.offsetWidth);a.remove()}var P={ra:"serif",qa:"sans-serif",pa:"monospace"};
O.prototype.start=function(){this.D=new L(this.d,this.G);M(this.D);this.F=new L(this.d,this.G);M(this.F);this.na=n();var a=new H(this.s.getName()+",serif",I(this.s)),a=N(a);this.D.m.style.cssText=a;a=new H(this.s.getName()+",sans-serif",I(this.s));a=N(a);this.F.m.style.cssText=a;Q(this)};function R(a,b,c){for(var d in P)if(P.hasOwnProperty(d)&&b===a.I[P[d]]&&c===a.I[P[d]])return!0;return!1}
function Q(a){var b=a.D.m.offsetWidth,c=a.F.m.offsetWidth;b===a.I.serif&&c===a.I["sans-serif"]||a.k.fa&&R(a,b,c)?n()-a.na>=a.W?a.k.fa&&R(a,b,c)&&(null===a.ba||a.ba.hasOwnProperty(a.s.getName()))?S(a,a.Z):S(a,a.ja):ja(a):S(a,a.Z)}function ja(a){setTimeout(k(function(){Q(this)},a),25)}function S(a,b){a.D.remove();a.F.remove();b(a.s)};function T(a,b,c,d){this.d=b;this.u=c;this.R=0;this.da=this.aa=!1;this.W=d;this.k=a.k}function ka(a,b,c,d,e){c=c||{};if(0===b.length&&e)J(a.u);else for(a.R+=b.length,e&&(a.aa=e),e=0;e<b.length;e++){var f=b[e],g=c[f.getName()],h=a.u,m=f;h.B&&s(h.p,[h.h.e(h.j,m.getName(),I(m).toString(),"loading")]);K(h,"fontloading",m);h=null;h=new O(k(a.ha,a),k(a.ia,a),a.d,f,a.k,a.W,d,g);h.start()}}
T.prototype.ha=function(a){var b=this.u;b.B&&s(b.p,[b.h.e(b.j,a.getName(),I(a).toString(),"active")],[b.h.e(b.j,a.getName(),I(a).toString(),"loading"),b.h.e(b.j,a.getName(),I(a).toString(),"inactive")]);K(b,"fontactive",a);this.da=!0;la(this)};
T.prototype.ia=function(a){var b=this.u;if(b.B){var c=t(b.p,b.h.e(b.j,a.getName(),I(a).toString(),"active")),d=[],e=[b.h.e(b.j,a.getName(),I(a).toString(),"loading")];c||d.push(b.h.e(b.j,a.getName(),I(a).toString(),"inactive"));s(b.p,d,e)}K(b,"fontinactive",a);la(this)};function la(a){0==--a.R&&a.aa&&(a.da?(a=a.u,a.B&&s(a.p,[a.h.e(a.j,"active")],[a.h.e(a.j,"loading"),a.h.e(a.j,"inactive")]),K(a,"active")):J(a.u))};function U(a){this.J=a;this.v=new ia;this.oa=new B(a.navigator.userAgent);this.a=this.oa.parse();this.T=this.U=0;this.Q=this.S=!0}
U.prototype.load=function(a){this.d=new q(this.J,a.context||this.J);this.S=!1!==a.events;this.Q=!1!==a.classes;var b=new ha(this.d,a),c=[],d=a.timeout;b.B&&s(b.p,[b.h.e(b.j,"loading")]);K(b,"loading");var c=this.v,e=this.d,f=[],g;for(g in a)if(a.hasOwnProperty(g)){var h=c.w[g];h&&f.push(h(a[g],e))}c=f;this.T=this.U=c.length;a=new T(this.a,this.d,b,d);d=0;for(g=c.length;d<g;d++)e=c[d],e.K(this.a,k(this.ka,this,e,b,a))};
U.prototype.ka=function(a,b,c,d){var e=this;d?a.load(function(a,b,d){ma(e,c,a,b,d)}):(a=0==--this.U,this.T--,a&&0==this.T?J(b):(this.Q||this.S)&&ka(c,[],{},null,a))};function ma(a,b,c,d,e){var f=0==--a.U;(a.Q||a.S)&&setTimeout(function(){ka(b,c,d||null,e||null,f)},0)};function na(a,b,c){this.O=a?a:b+oa;this.q=[];this.V=[];this.ea=c||""}var oa="//fonts.googleapis.com/css";na.prototype.e=function(){if(0==this.q.length)throw Error("No fonts to load!");if(-1!=this.O.indexOf("kit="))return this.O;for(var a=this.q.length,b=[],c=0;c<a;c++)b.push(this.q[c].replace(/ /g,"+"));a=this.O+"?family="+b.join("%7C");0<this.V.length&&(a+="&subset="+this.V.join(","));0<this.ea.length&&(a+="&text="+encodeURIComponent(this.ea));return a};function pa(a){this.q=a;this.ca=[];this.L={}}
var qa={latin:"BESbswy",cyrillic:"&#1081;&#1103;&#1046;",greek:"&#945;&#946;&#931;",khmer:"&#x1780;&#x1781;&#x1782;",Hanuman:"&#x1780;&#x1781;&#x1782;"},ra={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},sa={i:"i",italic:"i",n:"n",normal:"n"},ta=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
pa.prototype.parse=function(){for(var a=this.q.length,b=0;b<a;b++){var c=this.q[b].split(":"),d=c[0].replace(/\+/g," "),e=["n4"];if(2<=c.length){var f;var g=c[1];f=[];if(g)for(var g=g.split(","),h=g.length,m=0;m<h;m++){var l;l=g[m];if(l.match(/^[\w-]+$/)){l=ta.exec(l.toLowerCase());var p=void 0;if(null==l)p="";else{p=void 0;p=l[1];if(null==p||""==p)p="4";else var fa=ra[p],p=fa?fa:isNaN(p)?"4":p.substr(0,1);l=l[2];p=[null==l||""==l?"n":sa[l],p].join("")}l=p}else l="";l&&f.push(l)}0<f.length&&(e=f);
3==c.length&&(c=c[2],f=[],c=c?c.split(","):f,0<c.length&&(c=qa[c[0]])&&(this.L[d]=c))}this.L[d]||(c=qa[d])&&(this.L[d]=c);for(c=0;c<e.length;c+=1)this.ca.push(new H(d,e[c]))}};function V(a,b){this.a=(new B(navigator.userAgent)).parse();this.d=a;this.f=b}var ua={Arimo:!0,Cousine:!0,Tinos:!0};V.prototype.K=function(a,b){b(a.k.X)};V.prototype.load=function(a){var b=this.d;"MSIE"==this.a.getName()&&1!=this.f.blocking?ca(b,k(this.$,this,a)):this.$(a)};
V.prototype.$=function(a){for(var b=this.d,c=new na(this.f.api,u(b),this.f.text),d=this.f.families,e=d.length,f=0;f<e;f++){var g=d[f].split(":");3==g.length&&c.V.push(g.pop());var h="";2==g.length&&""!=g[1]&&(h=":");c.q.push(g.join(h))}d=new pa(d);d.parse();v(b,c.e());a(d.ca,d.L,ua)};function W(a,b){this.d=a;this.f=b;this.o=[]}W.prototype.H=function(a){var b=this.d;return u(this.d)+(this.f.api||"//f.fontdeck.com/s/css/js/")+(b.t.location.hostname||b.J.location.hostname)+"/"+a+".js"};
W.prototype.K=function(a,b){var c=this.f.id,d=this.d.t,e=this;c?(d.__webfontfontdeckmodule__||(d.__webfontfontdeckmodule__={}),d.__webfontfontdeckmodule__[c]=function(a,c){for(var d=0,m=c.fonts.length;d<m;++d){var l=c.fonts[d];e.o.push(new H(l.name,ga("font-weight:"+l.weight+";font-style:"+l.style)))}b(a)},w(this.d,this.H(c),function(a){a&&b(!1)})):b(!1)};W.prototype.load=function(a){a(this.o)};function X(a,b){this.d=a;this.f=b;this.o=[]}X.prototype.H=function(a){var b=u(this.d);return(this.f.api||b+"//use.typekit.net")+"/"+a+".js"};X.prototype.K=function(a,b){var c=this.f.id,d=this.d.t,e=this;c?w(this.d,this.H(c),function(a){if(a)b(!1);else{if(d.Typekit&&d.Typekit.config&&d.Typekit.config.fn){a=d.Typekit.config.fn;for(var c=0;c<a.length;c+=2)for(var h=a[c],m=a[c+1],l=0;l<m.length;l++)e.o.push(new H(h,m[l]));try{d.Typekit.load({events:!1,classes:!1})}catch(p){}}b(!0)}},2E3):b(!1)};
X.prototype.load=function(a){a(this.o)};function Y(a,b){this.d=a;this.f=b;this.o=[]}Y.prototype.K=function(a,b){var c=this,d=c.f.projectId,e=c.f.version;if(d){var f=c.d.t;w(this.d,c.H(d,e),function(e){if(e)b(!1);else{if(f["__mti_fntLst"+d]&&(e=f["__mti_fntLst"+d]()))for(var h=0;h<e.length;h++)c.o.push(new H(e[h].fontfamily));b(a.k.X)}}).id="__MonotypeAPIScript__"+d}else b(!1)};Y.prototype.H=function(a,b){var c=u(this.d),d=(this.f.api||"fast.fonts.net/jsapi").replace(/^.*http(s?):(\/\/)?/,"");return c+"//"+d+"/"+a+".js"+(b?"?v="+b:"")};
Y.prototype.load=function(a){a(this.o)};function Z(a,b){this.d=a;this.f=b}Z.prototype.load=function(a){var b,c,d=this.f.urls||[],e=this.f.families||[],f=this.f.testStrings||{};b=0;for(c=d.length;b<c;b++)v(this.d,d[b]);d=[];b=0;for(c=e.length;b<c;b++){var g=e[b].split(":");if(g[1])for(var h=g[1].split(","),m=0;m<h.length;m+=1)d.push(new H(g[0],h[m]));else d.push(new H(g[0]))}a(d,f)};Z.prototype.K=function(a,b){return b(a.k.X)};var $=new U(this);$.v.w.custom=function(a,b){return new Z(b,a)};$.v.w.fontdeck=function(a,b){return new W(b,a)};$.v.w.monotype=function(a,b){return new Y(b,a)};$.v.w.typekit=function(a,b){return new X(b,a)};$.v.w.google=function(a,b){return new V(b,a)};this.WebFont||(this.WebFont={},this.WebFont.load=k($.load,$),this.WebFontConfig&&$.load(this.WebFontConfig));})(this,document);


define("webfontloader", function(){});

function runISL() {
	var icklist =  [
                           "disney.com", 
                           "disney.go.com",
                           "adisney.go.com",
                           "home.disney.go.com",
                           "playhousemagazine.it",
                           "disney.sk",
                           "disney.se",
                           "disney.rs",
                           "disney.ro",
                           "disney.pt",
                           "disney.pl",
                           "disney.no",
                           "disney.nl",
                           "disney.it",
                           "disney.hu",
                           "disney.gr",
                           "disney.fr",
                           "disney.fi",
                           "disney.es",
                           "disney.dk",
                           "disney.de",
                           "disney.cz",
                           "disney.co.za",
                           "disney.co.uk",
                           "disney.co.il",
                           "disney.ch",
                           "disney.be",
                           "disney.at",
                           "disney.dolmagic.cn",
                           "d.dolmagic.cn",
                           "games.dolmagic.cn",
                           "dev.dolmagic.cn",
                           "dev.disney.com.cn",
                           "mediacdn.dolmagic.cn",
                           "media.dolmagic.cn",
                           "disney.com.tw",
                           "disney.com.hk",
                           "disneygames.jp",
                           "yahoo.disneygames.jp",
                           "games.yahoo.co.jp",
                           "disney.kids.yahoo.co.jp",
                           "games.kids.yahoo.co.jp",
                           "home.ne.jp",
                           "disneychannel.jp",
                           "disney.co.jp",
                           "disneychannel-asia.com",
                           "sg.boonty.com",
                           "play.kids.daum.net",
                           "kr.disney.kids.yahoo.com",
                           "home.disney.com.au",
                           "disneygames.com.au",
                           "au.games.yahoo.com",
                           "disney.optusnet.com.au",
                           "203.13.134.172",
                           "trygames.com", 
                           "disneychannel.com.au ",
                           "playhousedisney.com.au",
                           "disneygamedownloads.com.au", 
                           "disney.com.com",
                           "disneylatino.com",                       
                           "br.games.yahoo.net",
                           "jogos.globo.com",
                           "kzam.atra.ig.com.br",
                           "jogos.msn.com.br",
                           "atrativa.uol.com.br",
                           "www.terra.com.br",
                           "passatempos.terra.com.br", 
                           "www.atrativa.com.br", 
                           "atrativa.click21.com.br", 
                           "passatempo.limao.com.br", 
                           "clicgames.clicrbs.com.br", 
                           "clickjogos.uol.com.br",
                           "www.clickgratis.com.br",
                           "papajogos.uol.com.br",
                           "jogosdemeninas.uol.com.br",
                           "ultradownloads.com.br",
                           "latam.atrativa.com",
                           "www.atrativagames.com.ar",
                           "www.atrativa.cl",
                           "juegos.latam.msn.com",
                           "juegos.ar.msn.com",
                           "juegos.cl.msn.com",
                           "juegos.prodigymsn.com",
                           "msn-col.atrativa.com.br",
                           "juegos.msn.ve.atrativa.com.br",
                           "juegos.msn.pe.atrativa.com.br",
                           "msn-crica.atrativa.com.br",
                           "pasatiempos.gyggs.com",
                           "pasatiempos.esmas.com",
                           "juegos.ciudad.com.ar",
                           "pasatiempos.uol.com.ar",
                           "jogos.mdemulher.com.br",
                           "www.disney.com.au",
                           "dmc.go.com",
                           //added 6/25/2010
                           "toystory.disney.com.tw",  
                           "disneylive.com.tw",
                           "disneymobile.com.tw",
                           "home.disney.com.tw",
                           "disneychannel.com.tw",
                           "disneychannel.com.hk",
                           "disneylive.com.hk",
                           "disneymovies.com.hk",
                           "toystory.disney.com.hk",
                           "disneymobile.com.hk",
                           "home.disney.com.sg",
                           "home.disney.com.my",
                           "disney.in",
                           "disneychannelindia.com",
                           "hungamatv.com",
                           "disneyxd.disney.in",
                           "data.disney.co.in",
                           "disneyxd.in",
                           "www.unjuegodisneypordia.com",
                           "disneychannel.com.ar",
                           "disneyxdla.com",
                           "prodigy.msn.com",
                           "www.juegos.com",
                           "www.esmas.com",
                           "www.reforma.com",
                           "www.terra.com.mx",
                           "home.disney.com.au",
                           "disneygames.com.au",
                           "au.games.yahoo.com",
                           "disney.optusnet.com.au",
                           "disneychannel.com.au ",
                           "playhousedisney.com.au",
                           "disneygamedownloads.com.au",
                           "www.disney.com.au",
                           "dev.disney.com.au",
                           "staging.disney.com.au",
                           //added 7/7/2010
                           "disneychannel.co.nz",
                           "playhousedisney.co.nz",
                           "dev.home.disney.com.au",
                           "staging.home.disney.com.au",
                           "disney.ru",
                           "www.melhoramentos.com.br",
                           "www.positivoinformatica.com.br",
                           "www.positivofamilia.com.br",
                           "canais.positivofamilia.com.br",
                           "rede.positivofamilia.com.br",
                           // added 9/29/2010
                           "www.canaloi.com.br",
                           // added 2/23/2011
                           "cdn.media.zylom.com", 
                           "ad3.atrativagames.com.br",
                           // added 4/11/2011
                           "livrariasaraiva.com.br", 
                           // added 5/18/2011
                           "disneyjunior-asia.com",
                           "disney.com.my",
                           "disney.com.sg",
                           "disneyxd.ca",
                           "disneyjunior.ca",
                           "disneychannel-asia.com",
                           "family.ca",
                           // added 6/24/2011
                           "disney.co.kr",
                           "www.disney.co.kr",
                           "dev.disney.co.kr",
                           "disneychannel.co.kr",
                           "www.disneychannel.co.kr",
                           "dev.disneychannel.co.kr",
                           "disneyjunior.co.kr",
                           "www.disneyjunior.co.kr",
                           "dev.disneyjunior.co.kr",
                           "ch.disney.co.kr",
                           "jr.disney.co.kr",
                           // added 7/7/2011
                           "www.miniclip.com",
                           // added 8/30/2011
                           "www.toggo.de",
                           // added 12/7/2011
                           "www.disneyturkiye.com.tr",
                           "catalogue.disneyinternational.com", 
                           "staging.catalogue.disneyinternational.com",
                           "pre-staging.catalogue.disneyinternational.com",
                           // added 2/22/2012
                           "disneyxd.disney.nl",
                           // added 3/2/2012
                           "dev.disney.bg",
                           "dev.disney.cz",
                           "dev.disney.dk",
                           "dev.disney.es",
                           "dev.disney.gr",
                           "dev.disney.fi",
                           "dev.disney.fr",
                           "dev.disney.hu",
                           "dev.disney.it",
                           "dev.disney.nl",
                           "dev.disney.no",
                           "dev.disney.pl",
                           "dev.disney.pt",
                           "dev.disney.ro",
                           "dev.disney.rs",
                           "dev.disney.ru",
                           "dev.disney.se",
                           "dev.disney.be",
                           "dev.nl.disney.be",
                           "dev.fr.disney.be",
                           "dev.disney.ch",
                           "dev.fr.disney.ch",
                           "dev.de.disney.ch",
                           "dev.disney.co.il",
                           "dev.disney.co.uk",
                           "dev.disney.co.za",
                           "dev.disneyme.com",
                           "dev.disneyturkiye.com.tr",
                           "staging.disney.bg",
                           "staging.disney.cz",
                           "staging.disney.dk",
                           "staging.disney.es",
                           "staging.disney.gr",
                           "staging.disney.fi",
                           "staging.disney.fr",
                           "staging.disney.hu",
                           "staging.disney.it",
                           "staging.disney.nl",
                           "staging.disney.no",
                           "staging.disney.pl",
                           "staging.disney.pt",
                           "staging.disney.ro",
                           "staging.disney.rs",
                           "staging.disney.ru",
                           "staging.disney.se",
                           "staging.disney.be",
                           "staging.nl.disney.be",
                           "staging.fr.disney.be",
                           "staging.disney.ch",
                           "staging.fr.disney.ch",
                           "staging.de.disney.ch",
                           "staging.disney.co.il",
                           "staging.disney.co.uk",
                           "staging.disney.co.za",
                           "staging.disneyme.com",
                           "staging.disneyturkiye.com.tr",
                           // added 3/12/2012
                           "jr.naver.com",
                           "dev.jr.naver.com",
                           // added 4/10/2012
                           "disneyturkiye.com.tr",
                           // added 8/7/2012
                           "disney.com.au",
                           // added 8/13/2012
                           "facebook.com",
                           "www.facebook.com",
                           // added 8/27/2012
                           "sashosting.com.au",
                           // added 8/30/2012
                           "clickjogos.uol.com.br",
                           "img.clickjogos.uol.com.br",
                           "img2.clickjogos.uol.com.br",
                           "img3.clickjogos.uol.com.br",
                           "img4.clickjogos.uol.com.br",
                           "img5.clickjogos.uol.com.br",
                           "img6.clickjogos.uol.com.br",
                           "clickjogos.com.br",
                           "img.clickjogos.com.br",
                           "img2.clickjogos.com.br",
                           "img3.clickjogos.com.br",
                           "img4.clickjogos.com.br",
                           "img5.clickjogos.com.br",
                           "img6.clickjogos.com.br",
                           // added 10/30/2012
                           "espn.go.com",
                           "play.disney.go.com",
                           // added 2/11/2013
                           "www.jeemtv.net",
                           "www.jcctv.net",
                           "www.baraem.tv",
                           "www.disneyme.com",
                           // added 2/14/2013
                           "www.disneylatino.com",
                           "befsn.disneylatino.com",
                           "www.disney.com.br",
                           "befsn.disney.com.br",
                           // added 2/21/2013
                           "dev.disney.de",
                           "staging.disney.de",
                           "disney.bg",
                           "disneyme.com",
                           "de.disney.ch",
                           "fr.disney.ch",
                           "fr.disney.be",
                           "nl.disney.be",
                           // added 2/26/2013
                           "www.disneygames.jp",
                           "staging.disneygames.jp",
                           "ndev.disneygames.jp",
                           // added 4/10/2013
                           "nstaging.disneygames.jp",
                           // added 4/12/2013
                           "uol.com.br",
                           "www.mundojunior.com.ar",
                           "globo.com.br",
                           "www.danonino.com.ar",
                           "disneyxd.com.ar",
                           "r7.com.br",
                           // added 4/19/2013
                           "www.habibs.com.br",
                           // added 5/7/2013
                           "server1.disneyxd.ca",
                           "server1.family.ca",
                           "server1.disneyjunior.ca",
                           "www.disneyxd.ca",
                           "www.family.ca",
                           "www.disneyjunior.ca"
              ];
			
		if((/:\/\/([a-zA-Z0-9]*[.])*disney[.]go[.]com/.test(window.location.href)||/:\/\/([a-zA-Z0-9]*[.])*dolimg[.]com/.test(window.location.href)||/:\/\/([a-zA-Z0-9]*[.])*disney[.]com/.test(window.location.href)||/:\/\/([a-zA-Z0-9]*[.])*dilcdn[.]com/.test(window.location.href)||/:\/\/([a-zA-Z0-9]*[.])*disneyjunior[.]com/.test(window.location.href)||/:\/\/([a-zA-Z0-9]*[.])*diznee[.]net/.test(window.location.href))&&(top===window||/:\/\/([a-zA-Z0-9]*[.])*disney[.]go[.]com/.test(document.referrer)||/:\/\/([a-zA-Z0-9]*[.])*dolimg[.]com/.test(document.referrer)||/:\/\/([a-zA-Z0-9]*[.])*disney[.]com/.test(document.referrer)||/:\/\/([a-zA-Z0-9]*[.])*dilcdn[.]com/.test(document.referrer)||/:\/\/([a-zA-Z0-9]*[.])*disneyjunior[.]com/.test(document.referrer)||/:\/\/([a-zA-Z0-9]*[.])*diznee[.]net/.test(document.referrer)))
			//gameStart(); //runs game start code
         window.validAddress = true;
		else {
				for(var i in icklist){
					//If an array matches hostname: resets icklist, runs gameStart function, and breaks out of for-loop.
					//if (window.location.hostname === icklist[i]) {   
						icklist=false; 
						//gameStart(); //runs game start code
						window.validAddress = true;
                  break;
					}
				//}
			}
			
	}	;
define("Isl", function(){});


window.ASSET_URL = "assets/"; 

config = {

    app:"com/fortieth/FortiethApp"

}

// make sure console still works in ie9!

var consoleDisabled = false;
if (consoleDisabled) {
    window.console = undefined;
}
if (window.console === undefined || !window.console) {
    window.console = {
        debug: function() {
            return true;
        },
        info: function() {
            return false;
        },
        warn: function() {
            return false;
        },
        log: function() {
            return false;
        }
    }
}
if(!window.console.debug)
{
    window.console.debug = function(str){};
}
if(!window.console.info)
{
    window.console.info = function(str){};
}
if(!window.console.warn)
{
    window.console.warn = function(str){};
}
if(!window.console.log)
{
    window.console.log = function(str){};
}
    
// debug = (function(args) {
//     window.console.debug(args);
// });
// info = (function(args) {
//     window.console.info(args);
// });
// warn = (function(args) {
//     window.console.warn(args);
// });
// log = (function(args) {
//     window.console.log(args);
// });

/*
    AND THE REST..
 */
require.config(
{
    baseUrl : "./js",
    paths : 
    {
        'PIXI'          : 'libs/pixi.dev',
        'TWEEN'         : 'libs/TweenLite.min',
        'EASEPACK'      : 'libs/EasePack.min',
        'CSSPACK'       : 'libs/CSSPlugin.min',
        'HOWLER'        : 'libs/howler.min',
        'signals'       : '../node_modules/signals/dist/signals',
        'APP_root'      : 'com/sc/app/SCApp',
        'stats'         : 'libs/stats.min',
        'webfontloader' :'libs/webfontloader',
        'Fallback'      : 'com/fido/app/Fallback',
        'Isl'           : 'libs/gameConfig/isl',
        'gameTracking'  : 'libs/gameConfig/gameTracking',
        'global_cto'    : 'libs/gameConfig/global_cto'
    }
});

function hasCanvasSupport()
{
    var elem = document.createElement('canvas');
    return !!(elem.getContext && elem.getContext('2d'));
}

if(!hasCanvasSupport())
{
    require(['Fallback'], function()
    {
        var fallback = new Fallback(document.body);
    });
}
else
{
    require(['TWEEN', 'EASEPACK', 'CSSPACK', 'HOWLER', 'PIXI', "APP_root", "stats", 'com/fido/system/Device','webfontloader','Fallback','Isl'],
        function (TweenLite, EasePack, CssPack, Howler, Pixi, App, stat, Device, webfontloader,Fallback,Isl)
        {
            // site lock!
            runISL();

            if(window.validAddress)
            {

                /*
                window.stats = new Stats();
                document.body.appendChild( window.stats.domElement );
                window.stats.domElement.style.position = "absolute";
                window.stats.domElement.style.top = "0px";
                window.stats.domElement.style.zIndex = 3;
                */
               
                var fallback = new Fallback(document.body);

                var app = new App();
                window.app = app;

                var container = document.getElementById("container");
                container.appendChild(app.view);

                container.style.background = "black";
                
                app.view.style.position = "absolute";
                app.view.style.top = 0;
                app.view.style.left = 0;
                   
                function resize()
                {
                    var  container = document.getElementById("container");
                    //var rect = container.getBoundingClientRect();

                    if( Device.instance.iOS && Device.instance.iOS_version < 7 )
                    {
                        console.log("IOS 6");
                    }
                    else{
                        window.scrollTo(0, 0);
                    }

                    app.resize(window.innerWidth, window.innerHeight)
                }

                // cheeky ios resize...
                window.addEventListener('resize', function()
                {
                    setTimeout(resize, 100);
                    setTimeout(resize, 200);
                });

                setTimeout(resize, 100);
                setTimeout(resize, 200);
            }


        });
};
define("Boot", function(){});

